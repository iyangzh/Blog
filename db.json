{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/algolia.svg","path":"img/algolia.svg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/bg.jpg","path":"img/bg.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/bg1.jpg","path":"img/bg1.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/bg10.jpg","path":"img/bg10.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/bg11.jpg","path":"img/bg11.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/bg12.jpg","path":"img/bg12.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/bg13.jpg","path":"img/bg13.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/bg14.jpg","path":"img/bg14.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/bg15.jpg","path":"img/bg15.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/bg16.jpg","path":"img/bg16.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/bg17.jpg","path":"img/bg17.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/bg18.jpg","path":"img/bg18.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/bg19.jpg","path":"img/bg19.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/bg2.jpg","path":"img/bg2.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/bg20.jpg","path":"img/bg20.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/bg21.jpg","path":"img/bg21.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/bg3.jpeg","path":"img/bg3.jpeg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/bg3.jpg","path":"img/bg3.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/bg4.jpeg","path":"img/bg4.jpeg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/bg4.jpg","path":"img/bg4.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/bg5.jpeg","path":"img/bg5.jpeg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/bg5.jpg","path":"img/bg5.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/bg6.jpeg","path":"img/bg6.jpeg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/bg6.jpg","path":"img/bg6.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/bg7.jpeg","path":"img/bg7.jpeg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/bg7.jpg","path":"img/bg7.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/bg8.jpeg","path":"img/bg8.jpeg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/bg8.jpg","path":"img/bg8.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/bg9.jpg","path":"img/bg9.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/头像1.jpg","path":"img/头像1.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/头像2.jpg","path":"img/头像2.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/头像3.jpg","path":"img/头像3.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/头像4.jpg","path":"img/头像4.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1},{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/desktop.ini","path":"desktop.ini","modified":0,"renderable":0},{"_id":"source/img/bg.jpg","path":"img/bg.jpg","modified":0,"renderable":0},{"_id":"source/img/bg10.jpg","path":"img/bg10.jpg","modified":0,"renderable":0},{"_id":"source/img/bg1.jpg","path":"img/bg1.jpg","modified":0,"renderable":0},{"_id":"source/img/bg12.jpg","path":"img/bg12.jpg","modified":0,"renderable":0},{"_id":"source/img/bg11.jpg","path":"img/bg11.jpg","modified":0,"renderable":0},{"_id":"source/img/bg13.jpg","path":"img/bg13.jpg","modified":0,"renderable":0},{"_id":"source/img/bg14.jpg","path":"img/bg14.jpg","modified":0,"renderable":0},{"_id":"source/img/bg15.jpg","path":"img/bg15.jpg","modified":0,"renderable":0},{"_id":"source/img/bg16.jpg","path":"img/bg16.jpg","modified":0,"renderable":0},{"_id":"source/img/bg17.jpg","path":"img/bg17.jpg","modified":0,"renderable":0},{"_id":"source/img/bg19.jpg","path":"img/bg19.jpg","modified":0,"renderable":0},{"_id":"source/img/bg18.jpg","path":"img/bg18.jpg","modified":0,"renderable":0},{"_id":"source/img/bg2.jpg","path":"img/bg2.jpg","modified":0,"renderable":0},{"_id":"source/img/bg20.jpg","path":"img/bg20.jpg","modified":0,"renderable":0},{"_id":"source/img/bg21.jpg","path":"img/bg21.jpg","modified":0,"renderable":0},{"_id":"source/img/bg22.jpg","path":"img/bg22.jpg","modified":0,"renderable":0},{"_id":"source/img/bg24.jpg","path":"img/bg24.jpg","modified":0,"renderable":0},{"_id":"source/img/bg3.jpeg","path":"img/bg3.jpeg","modified":0,"renderable":0},{"_id":"source/img/bg3.jpg","path":"img/bg3.jpg","modified":0,"renderable":0},{"_id":"source/img/bg4.jpeg","path":"img/bg4.jpeg","modified":0,"renderable":0},{"_id":"source/img/bg4.jpg","path":"img/bg4.jpg","modified":0,"renderable":0},{"_id":"source/img/bg5.jpeg","path":"img/bg5.jpeg","modified":0,"renderable":0},{"_id":"source/img/bg5.jpg","path":"img/bg5.jpg","modified":0,"renderable":0},{"_id":"source/img/bg6.jpeg","path":"img/bg6.jpeg","modified":0,"renderable":0},{"_id":"source/img/bg6.jpg","path":"img/bg6.jpg","modified":0,"renderable":0},{"_id":"source/img/bg7.jpeg","path":"img/bg7.jpeg","modified":0,"renderable":0},{"_id":"source/img/bg7.jpg","path":"img/bg7.jpg","modified":0,"renderable":0},{"_id":"source/img/bg8.jpeg","path":"img/bg8.jpeg","modified":0,"renderable":0},{"_id":"source/img/bg8.jpg","path":"img/bg8.jpg","modified":0,"renderable":0},{"_id":"source/img/bg9.jpg","path":"img/bg9.jpg","modified":0,"renderable":0},{"_id":"source/img/头像1.jpg","path":"img/头像1.jpg","modified":0,"renderable":0},{"_id":"source/img/头像2.jpg","path":"img/头像2.jpg","modified":0,"renderable":0},{"_id":"source/img/头像3.jpg","path":"img/头像3.jpg","modified":0,"renderable":0},{"_id":"source/img/头像4.jpg","path":"img/头像4.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"source/css/style.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1650182308216},{"_id":"source/CNAME","hash":"e66f2517a598170751d1080bd68ec7bbbb7f090d","modified":1652882852277},{"_id":"source/desktop.ini","hash":"d48418a9c291d7272431cc5a93102aaba7a94e04","modified":1641807604780},{"_id":"source/_data/link.yml","hash":"3c9182c098ad951a57220e41ec8770bdcd6c4899","modified":1641808296691},{"_id":"source/_posts/测试.md","hash":"e67aef9fed8d1a4d8ea4c27b3b695c719ce537c6","modified":1647868790829},{"_id":"source/_posts/hello-world.md","hash":"acad91ace80b80295b11a9b7ad4c29a2dcfdd8fb","modified":1641450057218},{"_id":"source/categories/index.md","hash":"2c7d16038b05561d9443b82a55d019cb15b84012","modified":1647857994977},{"_id":"source/_posts/随记.md","hash":"580703dd4e4f1c4a906ae274cbdacf08f5231ed8","modified":1656600437456},{"_id":"source/about/index.md","hash":"1ca1174163681b3605d96c10003bb3d77b106fe0","modified":1647857994977},{"_id":"source/img/bg.jpg","hash":"e4f952f4efd3fc4226ad2a24248d678dfbabc24e","modified":1641823463067},{"_id":"source/img/bg12.jpg","hash":"d07b78169ca788736a2a3667713a5e5eb2107905","modified":1641869364301},{"_id":"source/img/bg14.jpg","hash":"dac1c1a0a999e69b31b357b4ec2bc16608420b49","modified":1641869404243},{"_id":"source/img/bg16.jpg","hash":"f8595e9fb4f440fd47174f61c8e5640777215f28","modified":1641869461135},{"_id":"source/img/bg15.jpg","hash":"3d3413bb6814fffac2a73797ba226be80aa76b27","modified":1641869441616},{"_id":"source/img/bg17.jpg","hash":"789da747f8a2cb8f1b3f7d9c68f3378bcf8e72bb","modified":1641869486169},{"_id":"source/img/bg18.jpg","hash":"b1e05dadc2c772dc296948ebede351fa8ff14262","modified":1641869503396},{"_id":"source/img/头像1.jpg","hash":"e9048c17e4e742152f558dcb72f9b76b471589d7","modified":1641698256694},{"_id":"source/link/index.md","hash":"024c792c5a95f06a198a9bdfeab6c8f91132b8d0","modified":1641789383376},{"_id":"source/img/头像2.jpg","hash":"a53b805540ee2139b4e58a81b2aabd1127b8b6d3","modified":1641873380003},{"_id":"source/img/头像3.jpg","hash":"dd1e90baf4a61eb6650a28145736a657fc872a8a","modified":1641873380049},{"_id":"source/tags/index.md","hash":"7f977a466c3ac24b6eec28966738bc8d875ea85c","modified":1647857823301},{"_id":"source/img/头像4.jpg","hash":"a4760aa6d9d0bb88c07bfc9a37a01f91311be53b","modified":1641873380095},{"_id":"source/_posts/前端/CSS基础.md","hash":"8796b6a6bdfd75bd363fe36040c9708d24b71e55","modified":1657243767758},{"_id":"source/_posts/前端/CSS定位.md","hash":"b6841b51bf865ca78b9cfc07ec0f49d481eb3a22","modified":1657324731905},{"_id":"source/_posts/前端/CSS属性.md","hash":"cd3e7cd0c4ddb3335d17f8d5f812b0cdde8ae1c0","modified":1657285976530},{"_id":"source/_posts/前端/CSS浮动.md","hash":"4eae15225992cc7d1e46e6a70434b207e37ddc5b","modified":1657324719803},{"_id":"source/_posts/前端/CSS盒子模型.md","hash":"cb07d4c3293f4d0b305e5896f71f21b3e7ee9ea7","modified":1657324738996},{"_id":"source/_posts/前端/CSS选择器.md","hash":"831e701f3130a70818157a4e314487832e027088","modified":1657245108186},{"_id":"source/_posts/前端/CSS高级技巧.md","hash":"f8304b0fd197979dfe48c2c858cff089d1149136","modified":1657247144009},{"_id":"source/_posts/前端/H5C3新增属性.md","hash":"24ce695b76b62422797af209b50de153a05129a5","modified":1657247959887},{"_id":"source/_posts/前端/HTML基础.md","hash":"ff72192db1dd3dc367198f5f3f4822878e56ec1e","modified":1657242982349},{"_id":"source/_posts/前端/JavaScript事件高级.md","hash":"44adb6634baad3bbff2f1762ffdfbe98b1037637","modified":1657324903967},{"_id":"source/_posts/前端/Javascript DOM.md","hash":"143e0e418208a8a7be3266c9fae814217a3c1196","modified":1657336121926},{"_id":"source/_posts/前端/Javascript内置对象.md","hash":"f60f696a3c9abfa4059c5239adb69779c5f71544","modified":1657335300342},{"_id":"source/_posts/前端/Javascript函数.md","hash":"d893404deaa6517a7cacd9af2adad7787f80ec00","modified":1657331514728},{"_id":"source/_posts/前端/Javascript基础.md","hash":"1d84f744d282601f8d0d98e947ab2eb367e0e45c","modified":1657329522220},{"_id":"source/_posts/前端/Javascript数组.md","hash":"2c73a71983239eb86ac663b6de7bae6f3119c0c4","modified":1657330775046},{"_id":"source/_posts/英语/括号法解读英语句子.md","hash":"c68299040d3b87a424548f9eccf2d1f45f91bc31","modified":1652702415557},{"_id":"source/_posts/前端/Javascript流程控制.md","hash":"f6f60d61a714bc817e6f48efc663f79356e3cede","modified":1657330502954},{"_id":"source/_posts/前端/简单数据类型.md","hash":"a16f42e747c9d7ecdb77dca366f5be3fc49b8aec","modified":1657335560213},{"_id":"source/_posts/英语/英语语法概念系统.md","hash":"dc4c487431ac8c924e302edcb321b70bf52a18a4","modified":1653640545241},{"_id":"source/_posts/前端/Javascript对象.md","hash":"6142963cbc9d3bd3945001f2506bf41b39fbb37a","modified":1657332723266},{"_id":"source/img/bg13.jpg","hash":"05386b929fe9b6c227ab78a4e02920b9fe41b330","modified":1641869385440},{"_id":"source/img/bg19.jpg","hash":"52999b32480a47a3bb9111da1f47d7a46c2c8bce","modified":1641869547633},{"_id":"source/img/bg2.jpg","hash":"bf2a549098e6bea94f7d92983271c7b561b7358b","modified":1641868595684},{"_id":"source/img/bg20.jpg","hash":"53c7a41cd88bafb99dbcf231f4f8e8cf2dd9358a","modified":1641869572131},{"_id":"source/img/bg21.jpg","hash":"15a1cac5262f7c52e059871addabefada3ba3345","modified":1641869597411},{"_id":"source/img/bg5.jpeg","hash":"b90851093d62758249b1619a3e2f788423972ef5","modified":1641868715611},{"_id":"source/img/bg8.jpeg","hash":"9f8e950649b054b02dc22aeb6cf9327869cd9169","modified":1641868914020},{"_id":"source/img/bg3.jpeg","hash":"2515cefb59d74a75f66c77178d0a68a2d126d0f5","modified":1641868647904},{"_id":"source/img/bg7.jpeg","hash":"8db9a1df6f7433455333254a2c9a13e44730bb60","modified":1641868830665},{"_id":"source/img/bg10.jpg","hash":"ed8418dd85ec23c3828066856214b33a17f4d372","modified":1641869248255},{"_id":"source/img/bg4.jpg","hash":"23dce7fbd7b994559117352b9110036c9acc4dfc","modified":1641869049188},{"_id":"source/img/bg22.jpg","hash":"319fabfc54fd5a9596f142ce2e25fe004a7eb5da","modified":1641957872771},{"_id":"source/img/bg3.jpg","hash":"b57c57dd1bc7b1918747260395e497d086dff778","modified":1641868963290},{"_id":"themes/butterfly/LICENSE","hash":"c8bc7df08db9dd3b39c2c2259a163a36cf2f6808","modified":1641784166532},{"_id":"themes/butterfly/README.md","hash":"0f0eaee9c30ef1e9aed588fbb3e8263401348b55","modified":1641784166532},{"_id":"themes/butterfly/languages/default.yml","hash":"b9dbdb20bd1f1c7ca8a8f38635bdc4ed8bb1d44c","modified":1641784166534},{"_id":"themes/butterfly/README_CN.md","hash":"70ec43a8aa0776b5a0a2a6b6009dd253fa3679eb","modified":1641784166533},{"_id":"themes/butterfly/.github/stale.yml","hash":"7a131b8aa4936fbcedea3517299e1cdc1bcbcaab","modified":1641784166532},{"_id":"themes/butterfly/_config.yml","hash":"d76f32ed21a07a6c2bbf3b86ab67aa77eeb696bd","modified":1648301644918},{"_id":"themes/butterfly/package.json","hash":"6a5ddc166980502757c1413b5e04a3a8a91c0a48","modified":1641784166559},{"_id":"themes/butterfly/languages/en.yml","hash":"fd1c1211c8f166d089a7697872185a81182d92e1","modified":1641784166534},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"46685048a05b419ed9c72cf31bd6e5efef7524f2","modified":1641784166534},{"_id":"themes/butterfly/layout/archive.pug","hash":"2d5bf4b1755f89898c579c18d601be83d2bc8ebd","modified":1641784166535},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"736bec8eeb3a29d0d43669d81f1fa686e02be18e","modified":1641784166535},{"_id":"themes/butterfly/layout/index.pug","hash":"648dcbdb3d145a710de81c909e000e8664d2ac9c","modified":1641784166558},{"_id":"themes/butterfly/layout/category.pug","hash":"5ac3cd8172088843cec03175c612a9c85f49cf2e","modified":1641784166535},{"_id":"themes/butterfly/layout/page.pug","hash":"cae76ce64c114fd192b5da5a7d14aa0240df2f06","modified":1641784166558},{"_id":"themes/butterfly/layout/post.pug","hash":"8f2f13c9ae099dd83827ce3dbac5abc8d7d5bde3","modified":1641784166559},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.md","hash":"0b7979a908ebe8c350d73b6731f0be3e29d401c2","modified":1641784166531},{"_id":"themes/butterfly/layout/tag.pug","hash":"4bb5efc6dabdf1626685bf6771aaa1467155ae86","modified":1641784166559},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/custom.md","hash":"b41123ce5f0ccfa9e06a68b9f3cb59ba040a049a","modified":1641784166531},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"e320b40c051bae1549156cd5ea4a51383cf78598","modified":1641784166532},{"_id":"themes/butterfly/layout/includes/404.pug","hash":"3cdc5e32d0f1e5866bcf86f94a0d76aaf7142937","modified":1641784166535},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.md","hash":"205a69ba038cf76affcdc1f39d88a8cb8079fc12","modified":1641784166531},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"a1ca58fdff74b890cade94479f8f0eb9ce7e5e73","modified":1641784166535},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"8715948b93e7508b84d913be1969b28c6b067b9b","modified":1641784166535},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"f4dcc0a596eb9801c4d3c033d018d0abb413c8e5","modified":1641784166536},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"f2e1d8a05d2e409c4804f67a98f5f59f527d6627","modified":1641784166540},{"_id":"themes/butterfly/scripts/events/404.js","hash":"f1d1c378356b776e9b2a8411e6dca88dc8c3245c","modified":1641784166559},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"66b14189a1913119ff5927c0b933b5c73fb37f48","modified":1641784166543},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"bb1847f45e713cc88b1c0a97035ec01f0209c995","modified":1641784166542},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"1e1da036fae593be7e2cc502f0a5cbeb2e7881d1","modified":1641784166560},{"_id":"themes/butterfly/scripts/events/init.js","hash":"5803aa55d9c21e51ea64c1ae50c9b602979aaee2","modified":1641784166560},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"9b5243385f7a90e0103c25c531a1e7f2f1884c15","modified":1641784166543},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"98ef86305b8d2ad9dbab969715e1ac93b407f036","modified":1641784166560},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"bd29f20fad3d3fab600940e7a6dc9a803943cb33","modified":1641784166560},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"4f712b4ea383b59a3122683db1d54c04a79ccc5d","modified":1641784166561},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"376e1884ea764404c38b1e73b16de0358ece519e","modified":1641784166561},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"384de3c04809ec5fa996e8aa0628f770cd4bff3e","modified":1641784166561},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"98ab13a60413d68bd9d02d54d121c66a6d4634d2","modified":1641784166561},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"8cb7ef368cc2ac7f4a13c2959908b1574e572acf","modified":1641784166562},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"26dd1900e68a3e10a5cf3f3484a93139a0f1340e","modified":1641784166562},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"7ffbe625f184116e442648c8416ea58614a1cef8","modified":1641784166562},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"eb019da8c190923e759d2fd7cb846281eef8594e","modified":1641784166563},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"7641adb0d520c5ff29dd36fc1fb8617c52ecc9fb","modified":1641784166563},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"551f1b8edc973bd8afc5cce2eae546f002fa84c3","modified":1641784166563},{"_id":"themes/butterfly/source/css/index.styl","hash":"c7924868adcb046b46498626a9223c7a7b3f2e30","modified":1641784166576},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"829229b0074b332ba779e159219eb2466612ff6e","modified":1641784166563},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"420ba8b11e7316b4c09eb301d39814bc9bae9f90","modified":1641784166564},{"_id":"themes/butterfly/source/css/var.styl","hash":"31198af95fecc6819d3b2cb7ef03988ef67257da","modified":1641784166576},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"08ea00791bd4738952234cb5d8360e119df6f875","modified":1641784166564},{"_id":"themes/butterfly/source/img/algolia.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1641784166577},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1641784166577},{"_id":"themes/butterfly/source/img/bg.jpg","hash":"e4f952f4efd3fc4226ad2a24248d678dfbabc24e","modified":1641823463067},{"_id":"themes/butterfly/source/img/bg12.jpg","hash":"d07b78169ca788736a2a3667713a5e5eb2107905","modified":1641869364301},{"_id":"themes/butterfly/source/img/bg14.jpg","hash":"dac1c1a0a999e69b31b357b4ec2bc16608420b49","modified":1641869404243},{"_id":"themes/butterfly/source/img/bg15.jpg","hash":"3d3413bb6814fffac2a73797ba226be80aa76b27","modified":1641869441616},{"_id":"themes/butterfly/source/img/bg16.jpg","hash":"f8595e9fb4f440fd47174f61c8e5640777215f28","modified":1641869461135},{"_id":"themes/butterfly/source/img/bg17.jpg","hash":"789da747f8a2cb8f1b3f7d9c68f3378bcf8e72bb","modified":1641869486169},{"_id":"themes/butterfly/source/img/bg18.jpg","hash":"b1e05dadc2c772dc296948ebede351fa8ff14262","modified":1641869503396},{"_id":"themes/butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1641784166577},{"_id":"themes/butterfly/source/img/头像2.jpg","hash":"a53b805540ee2139b4e58a81b2aabd1127b8b6d3","modified":1641873380003},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1641784166578},{"_id":"themes/butterfly/source/js/main.js","hash":"53c6df70de6e7949b102ab06fd0cd53b9b39b01c","modified":1641784166578},{"_id":"themes/butterfly/source/img/头像1.jpg","hash":"e9048c17e4e742152f558dcb72f9b76b471589d7","modified":1641698256694},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"4db1170be7a9360e2c5399d281b979da730df2a3","modified":1641784166579},{"_id":"themes/butterfly/source/js/utils.js","hash":"1b8bf1e6d50fa8ffe2aff7548b141cab72540ba0","modified":1641784166579},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"07380718ed3af19a7e64b30e8c13726fe5983947","modified":1641784166536},{"_id":"themes/butterfly/source/img/头像4.jpg","hash":"a4760aa6d9d0bb88c07bfc9a37a01f91311be53b","modified":1641873380095},{"_id":"themes/butterfly/source/img/头像3.jpg","hash":"dd1e90baf4a61eb6650a28145736a657fc872a8a","modified":1641873380049},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"903d12250ce70713dd5b8ac7e1f7a20fe15eb815","modified":1641784166536},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"73c04d62055840545112dd12d73807835ca62347","modified":1641784166537},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"3ca9d9cdfd6e61df1d5b07de40f34349cda7a7c7","modified":1641784166537},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"f29123e603cbbcc6ce277d4e8f600ba67498077c","modified":1641784166537},{"_id":"themes/butterfly/layout/includes/head/noscript.pug","hash":"72efaa09ff60843567458bd54152e06f0cb2757e","modified":1641784166537},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"3a2797d2744607ba6cdb5a02853851957c0f7e29","modified":1641784166538},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"d6556d5396eb0e10ea0ec10158779c21dc78f738","modified":1641784166538},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"4d52000cae1fce333329c382dac6c9a21ad0b195","modified":1641784166539},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"6dc2c9b85df9ab4f5b554305339fd80a90a6cf43","modified":1641784166538},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"5168caadc4cf541f5d6676a9c5e8ae47a948f9ad","modified":1641784166538},{"_id":"themes/butterfly/layout/includes/loading/loading-js.pug","hash":"2e1ab0c2ca59a1ff5a5ba9b6ef60f3e34af5430c","modified":1641784166540},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"419807903e5586b8804b1f8f17cea97bd05f0b17","modified":1641784166539},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"7677911bd3f43edaf8230eea02f60a248eee9934","modified":1641784166539},{"_id":"themes/butterfly/layout/includes/loading/loading.pug","hash":"dd8e6813976be64e80eba6562b54e74527ab306d","modified":1641784166540},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"631ec7000fd4d6cfa2de118ee02ad8a42ffb34f5","modified":1641784166539},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"971038debf539333b1687b4a1d87cf4fc965a846","modified":1641784166541},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"dcccb1425fabcf12a1bed955518b0e7b1054cab0","modified":1641784166541},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"95924d28d71b28769963529f82b376a9dc731fad","modified":1641784166541},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"f5ea1e10a169aeb98e42b19ac084c4eb27693b46","modified":1641784166541},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"bee06b3f01fa1f0d8fa08c154234b452da425101","modified":1641784166543},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"9aa743b1f6fb7fafabee38f9204ce9c8f1be7f9a","modified":1641784166542},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"6ec54b77e3a90e148e66e317e5bb6c89624fddca","modified":1641784166542},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"62dc2e683d56ddc9b588abc44dc1cfb778a2c68f","modified":1641784166542},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"c762732e200ff2627bc046af5f170b3269343341","modified":1641784166543},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"4c3da5a89b4e6fd3ab527f5c6d27790359d57f71","modified":1641784166550},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"d06dafe7faf3a2e328ef62f26166a51ffe7a5579","modified":1641784166552},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"ad59dcce32e4e67066303a1ffd1dd95874d9953e","modified":1641784166552},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"2448b243ded58aa1d5fc22fd115e6d06b636f9fd","modified":1641784166553},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"4a2ea9fe59f1dc8cb4f4f6a28cf24a40fc300254","modified":1641784166555},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"009bdbef23381f10664622fafdc602f2ff5bf1ec","modified":1641784166555},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"73d33b6930e7944187a4b3403daf25d27077a2dd","modified":1641784166556},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"a8312b527493dabbadbb1280760168d3bc909a3b","modified":1641784166555},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"6c3449a44ae1a80f71dd4d9d6a85cec1781ceff1","modified":1641784166556},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"1dba77d250eeebfb6e293d504352c7e9ea31980b","modified":1641784166556},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"0b5c165664f9f8691551fc5ff435b40e7f73c737","modified":1641784166557},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"66e383b4ef374951eb87dd1bf4cdb7a667193fb5","modified":1641784166557},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"471b20e71a19db1f5115727082e5188200c49383","modified":1641784166557},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"0f1a5c356c1ffd47ff49e153226e2d670dc61057","modified":1641784166557},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"f9de9db2a49ac4d5447660ab159171ac5c228e3c","modified":1641784166565},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"9755cac8424dc578e9ec07dbcaa429fddbedd392","modified":1641784166557},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"03164bca4546707543828cb2a41bc672b77bfa5a","modified":1641784166565},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"62adef7998fb9bebc5891a49472cfea944a1bf7a","modified":1641784166558},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"e4c39101d7087066a86f7743985a53d6a246470b","modified":1641784166558},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"7b5ae404a1205546b7de4be42291315cf918f2b3","modified":1641784166558},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"2e8e391b211b2416d3c9430ab5361659c073f348","modified":1641784166565},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"f27ad7b5d781c98bcac5c12c2d70b69b830e0374","modified":1641784166568},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"23ea60f8becc91f6e9f6cfb1cbfd25689c263b9c","modified":1641784166568},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"f25415a436100688248fef0ad90e3d4397627833","modified":1641784166567},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"8e6c9a2c1881985e4b2ae14ef1bdfdbb1bc83b37","modified":1641784166568},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"807f18717c29b5c41de6fc600a69a80ce8b7a19c","modified":1641784166569},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"bfc4b9d8df66593c11c9ae78899f54e69785ca90","modified":1641784166568},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"db7fe645662d87be4f8dfc08e55bbe1a3734bf93","modified":1641784166569},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"dd71e34edece4e06b59e941fb3cc5ad9a3ad09cf","modified":1641784166569},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"814729d1d71f4326623a4f34b621bf0421503103","modified":1641784166569},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"4ae98e703440b616d2a36da139bda844c94d425e","modified":1641784166569},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"8c4e08c8a63dacdfb2a733a0d0035fa97c7f5e9e","modified":1641784166569},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"a00ad74074513a1c7f6e02977b8fa778beaa2108","modified":1641784166569},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"191ce31ce0f2b1d22a64225801a88cee6054f574","modified":1641784166570},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"87c576a3361f30eefafec27a872ad76e9fbb2765","modified":1641784166571},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"89a6cb63a97cc08675319c403e4a89391f6ab401","modified":1641784166571},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"943aa34c83c87d0225db65ae90621870472972fa","modified":1641784166570},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"ca1d3a885a85a91fcd6f7b55fca96cafb6a1b0a3","modified":1641784166571},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"190b85de3e686393e45869d12464995f23b304dc","modified":1641784166571},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"8489722684aa9b4baa38386f4d4b39f4dbd60113","modified":1641784166570},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"5e5c1d6d104cc15314ae365d0da7cb07334a6457","modified":1641784166572},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"48ad198d0ea97a25db4d2a3e587a16ef41617c0b","modified":1641784166572},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"0da09b1811a776106ca66c56be6e2a396dca5680","modified":1641784166572},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"26e26797b3175498e20b2a8bf1679d3ed9fac5a6","modified":1641784166572},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"25ac939fc57346de07ba9e15a1a760b492baefd7","modified":1641784166573},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"c3369a14f4111c098d0177036ca57df6deb59d72","modified":1641784166574},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"e65ed98056e6c91e622f94bad5283d00fdb22142","modified":1641784166573},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"6c12a03e26ca5d538537d472657d3d03a7fcbb87","modified":1641784166574},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"fa2985afd08556b25f5f1a01bc1a7c76b294a962","modified":1641784166573},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"aa0728c556af75f5d66ecd44fa207722d474c26d","modified":1641784166574},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"8549829fb7d3c21cd9e119884962e8c463a4a267","modified":1641784166576},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"56691537c7f06c2cf1ffa1509a328f506d938ee8","modified":1641784166574},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"5a873d01fabebcf7ddf7a6b1c2e2e5e2714097f4","modified":1641784166574},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"75a5c15c7029197ec5cffd27f7c5455891c946c9","modified":1641784166575},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"c91609b7f431cacecc3718ae2fb7403c55f8267a","modified":1641784166575},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"a19f12257b14f70806a0c3cb0e9df1090f36e919","modified":1641784166578},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"8520674768dd0b1837f947892e8402b192a4f9c1","modified":1641784166575},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"54378d52d275e4ab84173bb02e17ea02ae46e55f","modified":1641784166579},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"4eebb2d94ca75809ef0cf32d70f13e9bf1e87091","modified":1641784166544},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"f4d21dcbc3b00eed9b1f604e132c4c6811a0a059","modified":1641784166544},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"a18415004d03c0a1783eccac522fbcb6ce0ea1f1","modified":1641784166544},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"eb2d840fa42de3ec7a7fda0eaa30246d52f543e2","modified":1641784166544},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"f3f6eaecbcf9352342e259f4a5a3ad7160f31fc9","modified":1641784166545},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"896dc0b7480151562c5717771e3000c5a7fc1b16","modified":1641784166545},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"f3db5c5e738e097a191dc0de59c61d3e1444f7c3","modified":1641784166545},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"b741b5e942481d779a8a1fe94c45154a62a6b748","modified":1641784166545},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"e5af55cdb87d1ffd3d8702bc77097159acf95b54","modified":1641784166546},{"_id":"themes/butterfly/layout/includes/third-party/chat/gitter.pug","hash":"794ce3911f17d354b7196deb8c36d191afac63fb","modified":1641784166546},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"cd7ab4a776be93eea96a6f6fd0a547977fbe1ea3","modified":1641784166546},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"bb467bb22f3d0775b33f9eacbfc086ecb7831e78","modified":1641784166546},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"50126b2e841b01584b8b65b2f834038e3997b694","modified":1641784166547},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"d5f81fd5443a1b09efb165b5f4447a35949d14ad","modified":1641784166547},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"0bf6a47e804fb793b40f82690a24816b902edd41","modified":1641784166547},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"0254203aae73e70b90dfce6ec4f9c9d3be9ac9f8","modified":1641784166547},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"d97403cdd58c759cfd1752dd85aa4a0f9b73dc46","modified":1641784166548},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"2afa4c21dd19890f47fb568cfb0d90efb676a253","modified":1641784166550},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"e877c98949873a62659db7501d19eb3d66650b51","modified":1641784166548},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"589f8503f264d4fda971c8daf2028f45c4f2867b","modified":1641784166549},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"afffc4ac8ce93d39dcc892bd518805cf33531244","modified":1641784166549},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"1c7e9fe86b7d7ef18cc876dfce19263fd4e73066","modified":1641784166549},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"8290994cf1ee2faff60214ff245cf513fbbe94aa","modified":1641784166549},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"266caf985dc0703ff81b871b8f8d206f57db6e79","modified":1641784166550},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"0bf1c53b914443c66be5077ff09cfc218f111e11","modified":1641784166550},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"8890becd8220c57db2c7451409710942c103a7f4","modified":1641784166551},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"87e40f0c315407ab88571a2b3450d640f15c96bc","modified":1641784166551},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"faf1113de12d6db0486572d7e99b03cbd0c4a896","modified":1641784166551},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"0ad766ae491e6fcba2ef3d136a7af6158cd4153e","modified":1641784166551},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"16cf05cf9649322da57e9b8d316573bb65f8d8d8","modified":1641784166551},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"1c06e60b120c946c1856904848ceba6ab58d1f82","modified":1641784166553},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"ff3727c3ec698ec61a28c55cbc8c8508f0efb0a0","modified":1641784166553},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"767c38e3dfa0097b0dc1fdfd0df292c16f757d05","modified":1641784166551},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"fbcf94ecdca30bed7cfc4f4ec08b200579c2614e","modified":1641784166554},{"_id":"themes/butterfly/layout/includes/third-party/share/add-this.pug","hash":"8b4034e53ca5bf85097f681a6e76a53ce685c205","modified":1641784166554},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"83103bad0db195bce095330c4a84e7529bbd40dd","modified":1641784166552},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"a3d43cc360666b5b9730e8bb9e5c8fd940ae5b3d","modified":1641784166552},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"fbac21a6c5924fb2f8d1190fd634105fdbc603d4","modified":1641784166554},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"b0916c8c7d15b67b55cb1618be8370870fedbf42","modified":1641784166566},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"b74c61f6e15b422e9d2df23133552bbd1b5fe513","modified":1641784166566},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"4898a09d8e67fb358ffd74b3a1f0014f555dd856","modified":1641784166554},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"1309292f1c8c53d96cd7333507b106bcc24ca8fc","modified":1641784166567},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"7e9a7347dd8ca4c33c564fb62512743b6012bb2d","modified":1641784166555},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"4d71aab9082c67d3ee52ad58dfc3c1c9b41f2ab1","modified":1641784166567},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"0b8aea62d1550113e1fcc237fae1b03743190208","modified":1641784166567},{"_id":"source/img/bg4.jpeg","hash":"3a51151284c23ddecbb9bb4f3f0acbabb9f28f38","modified":1641868684371},{"_id":"themes/butterfly/source/img/bg13.jpg","hash":"05386b929fe9b6c227ab78a4e02920b9fe41b330","modified":1641869385440},{"_id":"themes/butterfly/source/img/bg19.jpg","hash":"52999b32480a47a3bb9111da1f47d7a46c2c8bce","modified":1641869547633},{"_id":"themes/butterfly/source/img/bg2.jpg","hash":"bf2a549098e6bea94f7d92983271c7b561b7358b","modified":1641868595684},{"_id":"themes/butterfly/source/img/bg20.jpg","hash":"53c7a41cd88bafb99dbcf231f4f8e8cf2dd9358a","modified":1641869572131},{"_id":"themes/butterfly/source/img/bg21.jpg","hash":"15a1cac5262f7c52e059871addabefada3ba3345","modified":1641869597411},{"_id":"source/img/bg1.jpg","hash":"77a7b4577142f183ee8f1e95e0353797e6e1cfe0","modified":1641868426166},{"_id":"source/img/bg6.jpeg","hash":"52c1db01c566484a125fb33904f258ff860d0609","modified":1641868769648},{"_id":"themes/butterfly/source/img/bg5.jpeg","hash":"b90851093d62758249b1619a3e2f788423972ef5","modified":1641868715611},{"_id":"themes/butterfly/source/img/bg8.jpeg","hash":"9f8e950649b054b02dc22aeb6cf9327869cd9169","modified":1641868914020},{"_id":"source/img/bg11.jpg","hash":"830b78b5739a61ad7652c880d2ea1fbad0caa8a9","modified":1641869283988},{"_id":"source/img/bg9.jpg","hash":"1dadfaed6a7d602285aa7132ad60c870d528be80","modified":1641869216563},{"_id":"themes/butterfly/source/img/bg3.jpeg","hash":"2515cefb59d74a75f66c77178d0a68a2d126d0f5","modified":1641868647904},{"_id":"themes/butterfly/source/img/bg7.jpeg","hash":"8db9a1df6f7433455333254a2c9a13e44730bb60","modified":1641868830665},{"_id":"source/img/bg7.jpg","hash":"4e62be61986f0863888bc109950ab6d505010d7f","modified":1641869164773},{"_id":"source/img/bg5.jpg","hash":"4472030d30cd2ef67014460fc3d60e7660fcc996","modified":1641869106819},{"_id":"themes/butterfly/source/img/bg10.jpg","hash":"ed8418dd85ec23c3828066856214b33a17f4d372","modified":1641869248255},{"_id":"themes/butterfly/source/img/bg4.jpg","hash":"23dce7fbd7b994559117352b9110036c9acc4dfc","modified":1641869049188},{"_id":"themes/butterfly/source/img/bg3.jpg","hash":"b57c57dd1bc7b1918747260395e497d086dff778","modified":1641868963290},{"_id":"themes/butterfly/source/img/bg4.jpeg","hash":"3a51151284c23ddecbb9bb4f3f0acbabb9f28f38","modified":1641868684371},{"_id":"themes/butterfly/source/img/bg1.jpg","hash":"77a7b4577142f183ee8f1e95e0353797e6e1cfe0","modified":1641868426166},{"_id":"themes/butterfly/source/img/bg6.jpeg","hash":"52c1db01c566484a125fb33904f258ff860d0609","modified":1641868769648},{"_id":"themes/butterfly/source/img/bg11.jpg","hash":"830b78b5739a61ad7652c880d2ea1fbad0caa8a9","modified":1641869283988},{"_id":"themes/butterfly/source/img/bg9.jpg","hash":"1dadfaed6a7d602285aa7132ad60c870d528be80","modified":1641869216563},{"_id":"source/img/bg6.jpg","hash":"e2fed0b4a4db139c0881b8b8dca3ccb68f936f06","modified":1641869126523},{"_id":"themes/butterfly/source/img/bg7.jpg","hash":"4e62be61986f0863888bc109950ab6d505010d7f","modified":1641869164773},{"_id":"themes/butterfly/source/img/bg5.jpg","hash":"4472030d30cd2ef67014460fc3d60e7660fcc996","modified":1641869106819},{"_id":"themes/butterfly/source/img/bg6.jpg","hash":"e2fed0b4a4db139c0881b8b8dca3ccb68f936f06","modified":1641869126523},{"_id":"source/img/bg8.jpg","hash":"7cfee459f086c2f75a1c7d8057c2b43d0a837595","modified":1641869203922},{"_id":"themes/butterfly/source/img/bg8.jpg","hash":"7cfee459f086c2f75a1c7d8057c2b43d0a837595","modified":1641869203922},{"_id":"source/img/bg24.jpg","hash":"3f35c3868ad9332fb7f71f80e307dfb3bbeb4eb4","modified":1641958185074},{"_id":"public/css/style.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1657336230253},{"_id":"public/search.xml","hash":"de44dd5349bbe4ec06229659d7cfda227a1c610d","modified":1657336230253},{"_id":"public/404.html","hash":"82f9487484c9df9f63fb1298d824f8913c6a781d","modified":1657336230253},{"_id":"public/categories/index.html","hash":"da3879196bc5a2bc2d644bb6e221347126b2b5a5","modified":1657336230253},{"_id":"public/about/index.html","hash":"3a2f6f8fbd016f78194254deb234f9a0fa61c5cb","modified":1657336230253},{"_id":"public/link/index.html","hash":"cab97307b6e41dda0e90887a1d0a8be97e623d7a","modified":1657336230253},{"_id":"public/tags/index.html","hash":"e261278cd0e5303cb0092b9d2b98d148f3cbd39e","modified":1657336230253},{"_id":"public/前端/JavaScript事件高级/index.html","hash":"66a7041288bcf02e657281af4ef613776f52ede9","modified":1657336230253},{"_id":"public/前端/Javascript DOM/index.html","hash":"e471e18d43f9edea775d801cea831c65454479cb","modified":1657336230253},{"_id":"public/前端/Javascript内置对象/index.html","hash":"e27195ecb3ebb93802f7065078731c837eb704fb","modified":1657336230253},{"_id":"public/前端/简单数据类型/index.html","hash":"d59af9e75994d7c7781d07a410e88e87bced366e","modified":1657336230253},{"_id":"public/前端/Javascript对象/index.html","hash":"b3f9b6c69d5e85c26f087310707c0a40fe142bde","modified":1657336230253},{"_id":"public/前端/Javascript函数/index.html","hash":"bb2e52f711157f9c0439ca10a2b63cf91ceb32c7","modified":1657336230253},{"_id":"public/前端/Javascript数组/index.html","hash":"2d5d4362bec5f0afca0615eb02fb99c6564378cf","modified":1657336230253},{"_id":"public/前端/H5C3新增属性/index.html","hash":"e80656ca610f2499a629cfb7495d833a711b7421","modified":1657336230253},{"_id":"public/前端/CSS高级技巧/index.html","hash":"dc4834e1f339f4d9794a98d02502cd748bcf36d9","modified":1657336230253},{"_id":"public/前端/Javascript流程控制/index.html","hash":"c1276928bb9515532d2cba850fe93791553defaa","modified":1657336230253},{"_id":"public/前端/CSS定位/index.html","hash":"2f85754e888e7e825286aa4646a479e04ef5c758","modified":1657336230253},{"_id":"public/前端/Javascript基础/index.html","hash":"cb0dfd318cc166a8c64a63785490063a0d0140a8","modified":1657336230253},{"_id":"public/英语/括号法解读英语句子/index.html","hash":"9c311c93e545d515bfd00fb2b8583de4ee2e558e","modified":1657336230253},{"_id":"public/前端/CSS浮动/index.html","hash":"d0eee86d56dd133558f7b25bf22b5aa7721660be","modified":1657336230253},{"_id":"public/英语/英语语法概念系统/index.html","hash":"39f9d0d1b795e109060c87e78d1f82405ea6b483","modified":1657336230253},{"_id":"public/前端/CSS属性/index.html","hash":"e483358fcf076eb595738aad7f69a3a851965dd4","modified":1657336230253},{"_id":"public/前端/CSS盒子模型/index.html","hash":"817b4763e1bffaf9eeab5f3f40a4a5d317c783ec","modified":1657336230253},{"_id":"public/前端/CSS选择器/index.html","hash":"c405d99c743b58a86cfb01d1c644a3e9fa765a38","modified":1657336230253},{"_id":"public/前端/CSS基础/index.html","hash":"9f96dfb293e52d66026777d61e5f78583aa958c5","modified":1657336230253},{"_id":"public/前端/HTML基础/index.html","hash":"5d0bd36ef40f4f9b5e16cb1eefc3b07cb50079fd","modified":1657336230253},{"_id":"public/测试/index.html","hash":"8aed6dd31d30006651a1c4977f689799c228f019","modified":1657336230253},{"_id":"public/随记/index.html","hash":"c58cb6a4e66a09c28f58d41ccb815998432de5f9","modified":1657336230253},{"_id":"public/hello-world/index.html","hash":"9981f36ac22b141d416749a1c7a0c92b32e24d8a","modified":1657336230253},{"_id":"public/categories/随笔/index.html","hash":"bae51b0975c6ead36e2a35cb805d6afe4a9e878c","modified":1657336230253},{"_id":"public/categories/前端开发/index.html","hash":"31847880aa8b93e383b88d99571e9770cbacd0f7","modified":1657336230253},{"_id":"public/categories/前端开发/page/2/index.html","hash":"10665352d622b6f6762a5b2015f0265be237faad","modified":1657336230253},{"_id":"public/categories/英语/index.html","hash":"c7a10c3dfd79a2597f58990481b7cda972827fb0","modified":1657336230253},{"_id":"public/archives/index.html","hash":"3c243be84f6ee705ee4056357042743eae078c7d","modified":1657336230253},{"_id":"public/archives/page/2/index.html","hash":"9f4ebb229297de551bd31e0a079714903e0b4ee6","modified":1657336230253},{"_id":"public/archives/page/3/index.html","hash":"a3ea1f4bf7eedf2efd5fb974ddf86a6850d09d12","modified":1657336230253},{"_id":"public/archives/2022/index.html","hash":"618adf3dc54e70ef5719d3c60d0653405f6804a8","modified":1657336230253},{"_id":"public/archives/2022/page/2/index.html","hash":"5e8797062664ee47c49cf4dd2c99e84c15ea5c27","modified":1657336230253},{"_id":"public/archives/2022/page/3/index.html","hash":"3629fb08568e00595ae8e6a5ae97cd9d28e246bc","modified":1657336230253},{"_id":"public/archives/2022/01/index.html","hash":"8b90b80548966a6afb40091cd66f657b6946338e","modified":1657336230253},{"_id":"public/archives/2022/03/index.html","hash":"bbfc5dc115f116ac2ba5929736367d6d585c60bf","modified":1657336230253},{"_id":"public/archives/2022/04/index.html","hash":"81eda6bde0a7f048f88a96d5fc540e74db0a0db5","modified":1657336230253},{"_id":"public/archives/2022/05/index.html","hash":"655165ed7642b3b56222c608d23b99c19e260816","modified":1657336230253},{"_id":"public/archives/2022/06/index.html","hash":"171b416b9ae6b51430cb1b6b28e36eb3a3dbc22f","modified":1657336230253},{"_id":"public/archives/2022/07/index.html","hash":"67ee11029a6639e0d2e46ca0dcf86fc6ec24099e","modified":1657336230253},{"_id":"public/index.html","hash":"3221d700a19828df56a787e966b65aa55bee0980","modified":1657336230253},{"_id":"public/page/2/index.html","hash":"bc7831d6ad49932032a678f697b3017b18a8e677","modified":1657336230253},{"_id":"public/page/3/index.html","hash":"ea11541c0eb6089ddeee3eaf992ec26b062ac856","modified":1657336230253},{"_id":"public/tags/感想/index.html","hash":"58fca1baa47066777f0cad1f00b22bca4230efd5","modified":1657336230253},{"_id":"public/tags/小白的前端之路/index.html","hash":"f7b8bd0c9690649b5d5b3a216ab5ce7770dabe23","modified":1657336230253},{"_id":"public/tags/小白的前端之路/page/2/index.html","hash":"a1c9b456b840756362ec74b7ea0e84ee3c61786e","modified":1657336230253},{"_id":"public/tags/CSS基础/index.html","hash":"0d6f3de9cfd4e514a90722c400af7c9a66aac00e","modified":1657336230253},{"_id":"public/tags/CSS三大重点/index.html","hash":"e948d501c30862a1fbfb3c000002e71ae173cdab","modified":1657336230253},{"_id":"public/tags/JavaScript基础/index.html","hash":"3f8402c928920cce99dfd29601c9a5993bab8cac","modified":1657336230253},{"_id":"public/tags/JavaScript-API/index.html","hash":"7b8f4e948d9e42669dab5bde38f5b2e580884376","modified":1657336230253},{"_id":"public/tags/DOM/index.html","hash":"06f3183d92e5f7811c29576d5cfaa8443951d11f","modified":1657336230253},{"_id":"public/tags/HTML基础/index.html","hash":"649d62efaf1a7f9cca988cfdc4831692d16e2824","modified":1657336230253},{"_id":"public/tags/英语/index.html","hash":"40517b049d597651d12ba9534a39a74f61c93aba","modified":1657336230253},{"_id":"public/img/algolia.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1657336230253},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1657336230253},{"_id":"public/img/bg.jpg","hash":"e4f952f4efd3fc4226ad2a24248d678dfbabc24e","modified":1657336230253},{"_id":"public/img/bg12.jpg","hash":"d07b78169ca788736a2a3667713a5e5eb2107905","modified":1657336230253},{"_id":"public/img/bg14.jpg","hash":"dac1c1a0a999e69b31b357b4ec2bc16608420b49","modified":1657336230253},{"_id":"public/img/bg17.jpg","hash":"789da747f8a2cb8f1b3f7d9c68f3378bcf8e72bb","modified":1657336230253},{"_id":"public/img/bg16.jpg","hash":"f8595e9fb4f440fd47174f61c8e5640777215f28","modified":1657336230253},{"_id":"public/img/bg15.jpg","hash":"3d3413bb6814fffac2a73797ba226be80aa76b27","modified":1657336230253},{"_id":"public/img/bg18.jpg","hash":"b1e05dadc2c772dc296948ebede351fa8ff14262","modified":1657336230253},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1657336230253},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1657336230253},{"_id":"public/img/头像1.jpg","hash":"e9048c17e4e742152f558dcb72f9b76b471589d7","modified":1657336230253},{"_id":"public/img/头像2.jpg","hash":"a53b805540ee2139b4e58a81b2aabd1127b8b6d3","modified":1657336230253},{"_id":"public/CNAME","hash":"e66f2517a598170751d1080bd68ec7bbbb7f090d","modified":1657336230253},{"_id":"public/img/头像3.jpg","hash":"dd1e90baf4a61eb6650a28145736a657fc872a8a","modified":1657336230253},{"_id":"public/img/头像4.jpg","hash":"a4760aa6d9d0bb88c07bfc9a37a01f91311be53b","modified":1657336230253},{"_id":"public/desktop.ini","hash":"d48418a9c291d7272431cc5a93102aaba7a94e04","modified":1657336230253},{"_id":"public/img/bg13.jpg","hash":"05386b929fe9b6c227ab78a4e02920b9fe41b330","modified":1657336230253},{"_id":"public/img/bg19.jpg","hash":"52999b32480a47a3bb9111da1f47d7a46c2c8bce","modified":1657336230253},{"_id":"public/img/bg2.jpg","hash":"bf2a549098e6bea94f7d92983271c7b561b7358b","modified":1657336230253},{"_id":"public/img/bg20.jpg","hash":"53c7a41cd88bafb99dbcf231f4f8e8cf2dd9358a","modified":1657336230253},{"_id":"public/img/bg21.jpg","hash":"15a1cac5262f7c52e059871addabefada3ba3345","modified":1657336230253},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1657336230253},{"_id":"public/js/search/local-search.js","hash":"b1429e9f80ef6b9a77434819ffb87d90bdad25e8","modified":1657336230253},{"_id":"public/js/utils.js","hash":"8319b59c26ce8cd2b0ae7d030c4912215148fa92","modified":1657336230253},{"_id":"public/js/search/algolia.js","hash":"65b45e61586f7e66c3f338370bfd9daadd71a4b7","modified":1657336230253},{"_id":"public/css/index.css","hash":"09a24a2c23e55242803e0c9b2422269433c26d35","modified":1657336230253},{"_id":"public/js/main.js","hash":"b244f28124a46d7f1e8ef76ba6e925289691f93b","modified":1657336230253},{"_id":"public/js/tw_cn.js","hash":"00053ce73210274b3679f42607edef1206eebc68","modified":1657336230253},{"_id":"public/img/bg5.jpeg","hash":"b90851093d62758249b1619a3e2f788423972ef5","modified":1657336230253},{"_id":"public/img/bg8.jpeg","hash":"9f8e950649b054b02dc22aeb6cf9327869cd9169","modified":1657336230253},{"_id":"public/img/bg3.jpeg","hash":"2515cefb59d74a75f66c77178d0a68a2d126d0f5","modified":1657336230253},{"_id":"public/img/bg7.jpeg","hash":"8db9a1df6f7433455333254a2c9a13e44730bb60","modified":1657336230253},{"_id":"public/img/bg10.jpg","hash":"ed8418dd85ec23c3828066856214b33a17f4d372","modified":1657336230253},{"_id":"public/img/bg4.jpg","hash":"23dce7fbd7b994559117352b9110036c9acc4dfc","modified":1657336230253},{"_id":"public/img/bg3.jpg","hash":"b57c57dd1bc7b1918747260395e497d086dff778","modified":1657336230253},{"_id":"public/img/bg22.jpg","hash":"319fabfc54fd5a9596f142ce2e25fe004a7eb5da","modified":1657336230253},{"_id":"public/img/bg4.jpeg","hash":"3a51151284c23ddecbb9bb4f3f0acbabb9f28f38","modified":1657336230253},{"_id":"public/img/bg1.jpg","hash":"77a7b4577142f183ee8f1e95e0353797e6e1cfe0","modified":1657336230253},{"_id":"public/img/bg6.jpeg","hash":"52c1db01c566484a125fb33904f258ff860d0609","modified":1657336230253},{"_id":"public/img/bg11.jpg","hash":"830b78b5739a61ad7652c880d2ea1fbad0caa8a9","modified":1657336230253},{"_id":"public/img/bg9.jpg","hash":"1dadfaed6a7d602285aa7132ad60c870d528be80","modified":1657336230253},{"_id":"public/img/bg7.jpg","hash":"4e62be61986f0863888bc109950ab6d505010d7f","modified":1657336230253},{"_id":"public/img/bg5.jpg","hash":"4472030d30cd2ef67014460fc3d60e7660fcc996","modified":1657336230253},{"_id":"public/img/bg6.jpg","hash":"e2fed0b4a4db139c0881b8b8dca3ccb68f936f06","modified":1657336230253},{"_id":"public/img/bg8.jpg","hash":"7cfee459f086c2f75a1c7d8057c2b43d0a837595","modified":1657336230253},{"_id":"public/img/bg24.jpg","hash":"3f35c3868ad9332fb7f71f80e307dfb3bbeb4eb4","modified":1657336230253}],"Category":[{"name":"随笔","_id":"cl5db79jw0008ywtu0tcrd9yl"},{"name":"前端开发","_id":"cl5db79jz000eywtubk9q157q"},{"name":"英语","_id":"cl5db79kj003gywtuh3oy7ych"}],"Data":[{"_id":"link","data":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}],"Page":[{"title":"categories","date":"2022-01-10T04:30:55.000Z","type":"categories","top_img":"./img/bg7.jpeg","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2022-01-10 12:30:55\ntype: \"categories\"\ntop_img: ./img/bg7.jpeg\n---\n","updated":"2022-03-21T10:19:54.977Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cl5db79jn0000ywtu2x1q0r02","content":"","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"./img/bg5.jpeg","excerpt":"","more":""},{"title":"关于我","date":"2022-01-12T04:50:11.000Z","type":"about","top_img":"./img/bg22.jpg","_content":"我们我们\n我们\n我们\n我们\n我们\n我们\n我们\n","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2022-01-12 12:50:11\ntype: \"about\"\ntop_img: ./img/bg22.jpg\n---\n我们我们\n我们\n我们\n我们\n我们\n我们\n我们\n","updated":"2022-03-21T10:19:54.977Z","path":"about/index.html","comments":1,"layout":"page","_id":"cl5db79js0002ywtu7ra7hm31","content":"<p>我们我们<br>我们<br>我们<br>我们<br>我们<br>我们<br>我们</p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"./img/bg19.jpg","excerpt":"","more":"<p>我们我们<br>我们<br>我们<br>我们<br>我们<br>我们<br>我们</p>\n"},{"title":"友情链接","date":"2022-01-10T04:35:20.000Z","type":"link","_content":"","source":"link/index.md","raw":"---\ntitle: 友情链接\ndate: 2022-01-10 12:35:20\ntype: \"link\"\n---\n","updated":"2022-01-10T04:36:23.376Z","path":"link/index.html","comments":1,"layout":"page","_id":"cl5db79ju0004ywtu87u5a82z","content":"","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"./img/bg3.jpg","excerpt":"","more":""},{"title":"tags","date":"2022-01-10T04:07:19.000Z","type":"tags","top_img":"./img/bg4.jpg","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2022-01-10 12:07:19\ntype: \"tags\"\ntop_img: ./img/bg4.jpg\n---\n","updated":"2022-03-21T10:17:03.301Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cl5db79jv0006ywtu8064h8mp","content":"","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"./img/bg8.jpg","excerpt":"","more":""},{"_content":"","source":"css/style.css","raw":"","date":"2022-04-17T07:58:28.216Z","updated":"2022-04-17T07:58:28.216Z","path":"css/style.css","layout":"false","title":"","comments":1,"_id":"cl5db79jx000aywtu7jjwemw8","content":"","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"./img/bg8.jpg","excerpt":"","more":""}],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2022-01-06T06:20:57.218Z","updated":"2022-01-06T06:20:57.218Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5db79jq0001ywtuegt9f76z","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"./img/bg19.jpg","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"测试","date":"2022-01-09T16:00:00.000Z","updated":"2022-01-09T16:00:00.000Z","type":null,"comments":1,"description":"代码块的演示","keywords":null,"top_img":"./img/bg5.jpg","cover":"./img/bg14.jpg","mathjax":null,"katex":null,"aside":null,"aplayer":null,"highlight_shrink":null,"sticky":null,"_content":"\n##二级标题\nweb前端开发web前端开发web前端开发\nweb前端开发web前端开发web前端开发\nweb前端开发web前端开发web前端开发\nweb前端开发web前端开发web前端开发\n\n###三级标题\nweb前端开发web前端开发web前端开发\nweb前端开发web前端开发web前端开发\nweb前端开发web前端开发web前端开发\n\n##实例演示\nwivbiurgeuiwvevbuiewveiuwiwvnioewub\nwivbiurgeuiwvevbuiewveiuwiwvnioewub\nwivbiurgeuiwvevbuiewveiuwiwvnioewub\nwivbiurgeuiwvevbuiewveiuwiwvnioewub\n\n###三级标题1\nwivbiurgeuiwvevbuiewveiuwiwvnioewub\nwivbiurgeuiwvevbuiewveiuwiwvnioewub\n\n```C/C++\n#include<stdio.h>\nint main()\n{\nprintf(\"hello world!\\n\");\nreturn 0;\n}\n```","source":"_posts/测试.md","raw":"---\ntitle: 测试\ndate: 2022-1-10 00:00:00\nupdated: 2022-1-10 \ntype:\ncomments:\ndescription: 代码块的演示\nkeywords:\ntop_img: ./img/bg5.jpg\ncover: ./img/bg14.jpg\nmathjax:\nkatex:\naside:\naplayer:\nhighlight_shrink:\nsticky: \n---\n\n##二级标题\nweb前端开发web前端开发web前端开发\nweb前端开发web前端开发web前端开发\nweb前端开发web前端开发web前端开发\nweb前端开发web前端开发web前端开发\n\n###三级标题\nweb前端开发web前端开发web前端开发\nweb前端开发web前端开发web前端开发\nweb前端开发web前端开发web前端开发\n\n##实例演示\nwivbiurgeuiwvevbuiewveiuwiwvnioewub\nwivbiurgeuiwvevbuiewveiuwiwvnioewub\nwivbiurgeuiwvevbuiewveiuwiwvnioewub\nwivbiurgeuiwvevbuiewveiuwiwvnioewub\n\n###三级标题1\nwivbiurgeuiwvevbuiewveiuwiwvnioewub\nwivbiurgeuiwvevbuiewveiuwiwvnioewub\n\n```C/C++\n#include<stdio.h>\nint main()\n{\nprintf(\"hello world!\\n\");\nreturn 0;\n}\n```","slug":"测试","published":1,"layout":"post","photos":[],"link":"","_id":"cl5db79jt0003ywtu3aughiu5","content":"<p>##二级标题<br>web前端开发web前端开发web前端开发<br>web前端开发web前端开发web前端开发<br>web前端开发web前端开发web前端开发<br>web前端开发web前端开发web前端开发</p>\n<p>###三级标题<br>web前端开发web前端开发web前端开发<br>web前端开发web前端开发web前端开发<br>web前端开发web前端开发web前端开发</p>\n<p>##实例演示<br>wivbiurgeuiwvevbuiewveiuwiwvnioewub<br>wivbiurgeuiwvevbuiewveiuwiwvnioewub<br>wivbiurgeuiwvevbuiewveiuwiwvnioewub<br>wivbiurgeuiwvevbuiewveiuwiwvnioewub</p>\n<p>###三级标题1<br>wivbiurgeuiwvevbuiewveiuwiwvnioewub<br>wivbiurgeuiwvevbuiewveiuwiwvnioewub</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;stdio.h&gt;</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">printf(&quot;hello world!\\n&quot;);</span><br><span class=\"line\">return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<p>##二级标题<br>web前端开发web前端开发web前端开发<br>web前端开发web前端开发web前端开发<br>web前端开发web前端开发web前端开发<br>web前端开发web前端开发web前端开发</p>\n<p>###三级标题<br>web前端开发web前端开发web前端开发<br>web前端开发web前端开发web前端开发<br>web前端开发web前端开发web前端开发</p>\n<p>##实例演示<br>wivbiurgeuiwvevbuiewveiuwiwvnioewub<br>wivbiurgeuiwvevbuiewveiuwiwvnioewub<br>wivbiurgeuiwvevbuiewveiuwiwvnioewub<br>wivbiurgeuiwvevbuiewveiuwiwvnioewub</p>\n<p>###三级标题1<br>wivbiurgeuiwvevbuiewveiuwiwvnioewub<br>wivbiurgeuiwvevbuiewveiuwiwvnioewub</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;stdio.h&gt;</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">printf(&quot;hello world!\\n&quot;);</span><br><span class=\"line\">return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"随记","date":"2022-01-09T16:00:00.000Z","updated":"2022-04-24T16:00:00.000Z","keywords":null,"description":null,"top_img":"./img/bg10.jpg","comments":1,"cover":"./img/bg3.jpg","toc":null,"toc_number":null,"copyright":null,"copyright_author":null,"copyright_author_href":null,"copyright_url":null,"copyright_info":null,"mathjax":null,"katex":null,"aplayer":null,"highlight_shrink":null,"aside":null,"_content":"## 开始\n<strong>一个满眼是你的人才配得上你全部的爱一个满眼是你的人才配得上你全部的爱</strong>\n\n","source":"_posts/随记.md","raw":"---\ntitle: 随记\ndate: 2022-1-10 00:00:00\nupdated: 2022-04-25\ntags: 感想\ncategories: 随笔\nkeywords: \ndescription: \ntop_img: ./img/bg10.jpg\ncomments:\ncover: \ntoc: \ntoc_number: \ncopyright: \ncopyright_author: \ncopyright_author_href: \ncopyright_url: \ncopyright_info: \nmathjax: \nkatex:\naplayer:\nhighlight_shrink:\naside:\n---\n## 开始\n<strong>一个满眼是你的人才配得上你全部的爱一个满眼是你的人才配得上你全部的爱</strong>\n\n","slug":"随记","published":1,"layout":"post","photos":[],"link":"","_id":"cl5db79ju0005ywtu30l49swh","content":"<h2 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h2><p><strong>一个满眼是你的人才配得上你全部的爱一个满眼是你的人才配得上你全部的爱</strong></p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<h2 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h2><p><strong>一个满眼是你的人才配得上你全部的爱一个满眼是你的人才配得上你全部的爱</strong></p>\n"},{"title":"CSS基础","date":"2022-03-20T13:04:30.000Z","updated":"2022-03-23T16:00:00.000Z","keywords":null,"description":null,"top_img":"./img/bg12.jpg","cover":"./img/bg7.jpg","_content":"# CSS简介\n\n## 「1.1HTML的局限性」\n\n- HTML满足不了设计者的需求，可以将网页结构与样式相分离，这样就可以在不更改网页结构的前提下，更换网站的样式。\n- 操作html属性不方便\n- HTML里面添加样式带来的是无尽的臃肿和繁琐\n\n## 「1.2CSS网页美容师」\n\nCSS是<font color=\"red\">层叠样式表</font>(Cascading Style Sheets)的简称,有时我们也会称之为CSS样式表或级联样式表，CSS是也是一种<font color=\"red\">标记语言</font>。主要用于设置HTML页面中的<font color=\"red\">文本内容</font>(字体、大小、对齐方式等)、<font color=\"red\">图片外形</font>(宽高、边框样式、边距等）以及<font color=\"red\">版面布局</font>和<font color=\"red\">外观显示样式</font>。CSS让我们的网页更加丰富多彩，布局更加灵活自如。简单理解：**CSS可以美化HTML，让HTML更漂亮，让页面布局更简洁。**\n\n### **总结**：\n\n-  HTML主要做结构，显示元素内容. \n\n-  CSS美化HTML，布局网页.\n-  CSS最大价值：由HTML专注去做结构呈现，样式交给   CSS，即结构(HTML)与样式(CSS)相分离\n\n## 「1.3CSS语法规范」\n\n使用HTML时，需要遵从一定的规范，CSS也是如此。要想熟练地使用CSS对网页进行修饰，首先需要了解CSS样式规则。 CSS规则由两个主要的部分构成：**选择器以及一条或多条声明**。 \n\n1. 选择器是用于指定CSS样式的<font color=\"red\">HTML标签</font>，花括号内是对该对象设置的具体样式 \n\n2. 属性和属性值以“<font color=\"red\">键值对</font>”的形式出现 \n\n3. 属性是对指定的对象设置的样式属性，例如字体大小、文本颜色等 \n\n4. 属性和属性值之间用英文“<font color=\"red\">**:**</font>”分开 \n\n5. 多个“键值对”之间用英文“<font color=\"red\">**;**</font>”进行区分\n\n\n## 「1.4CSS注释」\n\n```css\n/*这是注释*/\n```\n\n# CSS引入方式\n\nCSS的三种样式表\n\n按照CSS样式书写的位置（或者引入的方式），css样式表可以分为三大类：\n\n1. 内部样式表（嵌入式）\n2. 行内样式表（行内式）\n3. 外部样式表（外链式）\n\n## 「2.1内部样式表」\n\n内部样式表（内嵌样式表）是写到html页面内部，是将所有CSS代码抽取出来，单独放到一个style标签中。\n\n```html\n<head>\n<style type=\"text/CSS\">\n    选择器（选择的标签） { \n      属性1: 属性值1;\n      属性2: 属性值2; \n      属性3: 属性值3;\n    }\n    div {\n     color: red;\n     font-size: 12px; \n}\n</style>\n</head>\n```\n\n- style标签理论上可以放在html文档的任何地方，但一般会放在文档的head标签中\n- 通过此种方法，可以方便控制当前整个页面中元素样式设置\n- 代码结构清晰，但并没有实现结构与样式完全分离\n- 使用内部样式表设定CSS，通常被称为嵌入式引入，这种是练习常用的方法\n\n## 「2.2行内样式表」\n\n行内样式表（内联样式表）是在元素标签内部的style属性中设定CSS样式，适合于修改简单样式。\n\n```html\n<标签名 style=\"属性1:属性值1; 属性2:属性值2; 属性3:属性值3;\"> \n    内容 \n</标签名>\n<div style=\"color: red; font-size: 12px;\">\n    示例\n</div>\n```\n\n- style其实就是标签的属性\n- 在双引号中间，写法要符合CSS规范\n- 可以控制当前的标签设置样式\n- 书写繁琐，没有体现结构与样式相分离的思想，不推荐大量使用\n- 使用行内样式表设定CSS，通常被称为行内式引入\n\n## 「2.3外部样式表」\n\n实际开发中使用的都是外部样式表，适合样式较多的情况，核心是样式单独写到CSS文件中，之后把CSS文件引入到HTML页面中使用\n\n引入外部样式表分为两步：\n\n1. 新建一个后缀名为**.css**的样式文件，把所有CSS代码都放在此文件中\n2. 在HTML页面中，使用link标签引入这个文件\n\n```html\n<link rel=\"stylesheet\" href=\"index.css\">\n```\n\n| 属性 | 作用                                                         |\n| ---- | ------------------------------------------------------------ |\n| rel  | 定义当前文档与被链接文档之间的关系，在这里需要指定为“stylesheet\"，表示被链接的文档是一个样式表文件 |\n| href | 定义所链接外部样式表文件的URL，可以是相对路径，也可以是绝对路径 |\n\n在使用外部样式表设定CSS，通常也被称为外链式和链接式引入，这种方法是开发中常用的方法。\n\n## 「2.4CSS引入方法总结」\n\n| 样式表     | 优点                 | 缺点         | 使用情况 | 控制范围     |\n| ---------- | -------------------- | ------------ | -------- | ------------ |\n| 内部样式表 | 部分结构与样式相分离 | 没有彻底分离 | 较多     | 控制一个页面 |\n| 行内样式表 | 书写方便，权重高     | 结构样式混合 | 较少     | 控制一个标签 |\n| 外部样式表 | 完全结构与样式相分离 | 需要引入     | 最多     | 控制多个页面 |\n\n# CSS三大特性\n\nCSS有三个非常重要的特性：<font color=\"red\">层叠性</font>、<font color=\"red\">\n继承性</font>、<font color=\"red\">优先级</font>。\n\n\n\n## 「3.1层叠性」\n\n相同选择器给设置相同的样式，此时一个样式就会<font color=\"red\">覆盖（层叠）</font>另一个冲突的样式。层叠性主要解决样式冲突的问题。\n\n### **层叠性原则：**\n\n- 样式冲突，遵循的是<font color=\"red\">就近原则</font>，哪个样式离结构近，就执行哪个样式\n- 样式不冲突，不会层叠\n\n![层叠性](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/css1.png)\n\n## 「3.2继承性」\n\n现实中的继承：我们继承了父亲的姓氏\n\nCSS中的继承：子标签会继承父标签的某些样式，如文本颜色和字号\n\n简单理解就是<font color=\"red\">子承父业</font>。\n\n- 恰当的使用继承性可以简化代码，降低CSS样式的复杂性\n- 子元素可以继承父元素的样式（text- font- line-这些元素开头的可以继承，以及color属性）\n- 继承性口诀：**龙生龙，凤生凤，老鼠的孩子会打洞**\n\n![继承性](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/css2.png)\n\n## 「3.3优先级」\n\ncss特殊性\n\n**概念：**定义CSS样式时，经常出现两个或更多规则应用在同一元素上，此时如果：\n\n1. 选择器相同，则执行层叠性\n2. 选择器不同，就会出现优先级的问题\n\n关于CSS权重，我们需要一套计算公式来去计算，这个就是 CSS Specificity（特殊性）。\n\n### **选择器权重**\n\n| 选择器                           | 选择器权重 |\n| -------------------------------- | ---------- |\n| 继承或者*                        | 0，0，0，0 |\n| 元素选择器（每个元素）           | 0，0，0，1 |\n| 类，伪类选择器（每个类，伪类）   | 0，0，1，0 |\n| id选择器（每个id）               | 0，1，0，0 |\n| 行内样式style=\"\"（每个行内样式） | 1，0，0，0 |\n| 每个!important 最重要的          | 无穷大     |\n\n```css\ndiv { color: pink !important; }\n```\n\n### **优先级注意点：**\n\n1. 权重是由4组数字组成的，但是不会有进位\n2. 可以理解为**类选择器永远大于元素选择器**，**id选择器永远大于类选择器**，以此类推\n3. 等级判断从左到右，左面的最大，一级大于一级，如果某一位数值相同，则判断下一位数值\n4. 可以简单记忆：**通配符和继承权重为0，标签选择器为1，类（伪类）选择器为10，id选择器100，行内样式表为1000，！important无穷大**\n5. 继承权重是0，如果该元素没有直接选中，不管父元素权重多高，子元素得到的权重都是0\n\n### **权重叠加：**\n\n如果是复合选择器，则会有权重叠加，需要计算权重。\n\n```css\n\n div ul  li   ------>      0,0,0,3\n .nav ul li   ------>      0,0,1,2\n a:hover      -----—>      0,0,1,1\n .nav a       ------>      0,0,1,1\n```\n\n- 我们修改样式，一定要看该标签有没有被选中\n- 如果选中了，那么以上面的公式来计权重。谁大听谁的。\n- 如果没有选中，那么权重是0，因为继承的权重为0.\n\n![优先级](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/css3.png)\n\n# 代码风格\n\n**团队约定：**\n\n- 展开格式\n- 样式选择器，属性名，属性值关键字全部使用小写字母书写，属性字符串允许使用大小写\n\n```css\n\n/*1.紧凑格式 (Compact)不推荐*/\nh3 { color: deeppink;font-size: 20px;}\n\n/*展开格式（推荐）*/\nh3 {\n color: deeppink;\n    font-size: 20px;    \n}\n\n/* 推荐 */\nh3{\n color: pink;\n}\n \n/* 不推荐 */\nH3{\n COLOR: PINK;\n}\n```\n\n\n\n","source":"_posts/前端/CSS基础.md","raw":"---\ntitle: CSS基础\ndate: 2022-03-20 21:04:30\nupdated: 2022-03-24\ntags:\n  - 小白的前端之路\n  - CSS基础\ncategories: 前端开发\nkeywords: \ndescription: \ntop_img: ./img/bg12.jpg\ncover: ./img/bg7.jpg\n\n---\n# CSS简介\n\n## 「1.1HTML的局限性」\n\n- HTML满足不了设计者的需求，可以将网页结构与样式相分离，这样就可以在不更改网页结构的前提下，更换网站的样式。\n- 操作html属性不方便\n- HTML里面添加样式带来的是无尽的臃肿和繁琐\n\n## 「1.2CSS网页美容师」\n\nCSS是<font color=\"red\">层叠样式表</font>(Cascading Style Sheets)的简称,有时我们也会称之为CSS样式表或级联样式表，CSS是也是一种<font color=\"red\">标记语言</font>。主要用于设置HTML页面中的<font color=\"red\">文本内容</font>(字体、大小、对齐方式等)、<font color=\"red\">图片外形</font>(宽高、边框样式、边距等）以及<font color=\"red\">版面布局</font>和<font color=\"red\">外观显示样式</font>。CSS让我们的网页更加丰富多彩，布局更加灵活自如。简单理解：**CSS可以美化HTML，让HTML更漂亮，让页面布局更简洁。**\n\n### **总结**：\n\n-  HTML主要做结构，显示元素内容. \n\n-  CSS美化HTML，布局网页.\n-  CSS最大价值：由HTML专注去做结构呈现，样式交给   CSS，即结构(HTML)与样式(CSS)相分离\n\n## 「1.3CSS语法规范」\n\n使用HTML时，需要遵从一定的规范，CSS也是如此。要想熟练地使用CSS对网页进行修饰，首先需要了解CSS样式规则。 CSS规则由两个主要的部分构成：**选择器以及一条或多条声明**。 \n\n1. 选择器是用于指定CSS样式的<font color=\"red\">HTML标签</font>，花括号内是对该对象设置的具体样式 \n\n2. 属性和属性值以“<font color=\"red\">键值对</font>”的形式出现 \n\n3. 属性是对指定的对象设置的样式属性，例如字体大小、文本颜色等 \n\n4. 属性和属性值之间用英文“<font color=\"red\">**:**</font>”分开 \n\n5. 多个“键值对”之间用英文“<font color=\"red\">**;**</font>”进行区分\n\n\n## 「1.4CSS注释」\n\n```css\n/*这是注释*/\n```\n\n# CSS引入方式\n\nCSS的三种样式表\n\n按照CSS样式书写的位置（或者引入的方式），css样式表可以分为三大类：\n\n1. 内部样式表（嵌入式）\n2. 行内样式表（行内式）\n3. 外部样式表（外链式）\n\n## 「2.1内部样式表」\n\n内部样式表（内嵌样式表）是写到html页面内部，是将所有CSS代码抽取出来，单独放到一个style标签中。\n\n```html\n<head>\n<style type=\"text/CSS\">\n    选择器（选择的标签） { \n      属性1: 属性值1;\n      属性2: 属性值2; \n      属性3: 属性值3;\n    }\n    div {\n     color: red;\n     font-size: 12px; \n}\n</style>\n</head>\n```\n\n- style标签理论上可以放在html文档的任何地方，但一般会放在文档的head标签中\n- 通过此种方法，可以方便控制当前整个页面中元素样式设置\n- 代码结构清晰，但并没有实现结构与样式完全分离\n- 使用内部样式表设定CSS，通常被称为嵌入式引入，这种是练习常用的方法\n\n## 「2.2行内样式表」\n\n行内样式表（内联样式表）是在元素标签内部的style属性中设定CSS样式，适合于修改简单样式。\n\n```html\n<标签名 style=\"属性1:属性值1; 属性2:属性值2; 属性3:属性值3;\"> \n    内容 \n</标签名>\n<div style=\"color: red; font-size: 12px;\">\n    示例\n</div>\n```\n\n- style其实就是标签的属性\n- 在双引号中间，写法要符合CSS规范\n- 可以控制当前的标签设置样式\n- 书写繁琐，没有体现结构与样式相分离的思想，不推荐大量使用\n- 使用行内样式表设定CSS，通常被称为行内式引入\n\n## 「2.3外部样式表」\n\n实际开发中使用的都是外部样式表，适合样式较多的情况，核心是样式单独写到CSS文件中，之后把CSS文件引入到HTML页面中使用\n\n引入外部样式表分为两步：\n\n1. 新建一个后缀名为**.css**的样式文件，把所有CSS代码都放在此文件中\n2. 在HTML页面中，使用link标签引入这个文件\n\n```html\n<link rel=\"stylesheet\" href=\"index.css\">\n```\n\n| 属性 | 作用                                                         |\n| ---- | ------------------------------------------------------------ |\n| rel  | 定义当前文档与被链接文档之间的关系，在这里需要指定为“stylesheet\"，表示被链接的文档是一个样式表文件 |\n| href | 定义所链接外部样式表文件的URL，可以是相对路径，也可以是绝对路径 |\n\n在使用外部样式表设定CSS，通常也被称为外链式和链接式引入，这种方法是开发中常用的方法。\n\n## 「2.4CSS引入方法总结」\n\n| 样式表     | 优点                 | 缺点         | 使用情况 | 控制范围     |\n| ---------- | -------------------- | ------------ | -------- | ------------ |\n| 内部样式表 | 部分结构与样式相分离 | 没有彻底分离 | 较多     | 控制一个页面 |\n| 行内样式表 | 书写方便，权重高     | 结构样式混合 | 较少     | 控制一个标签 |\n| 外部样式表 | 完全结构与样式相分离 | 需要引入     | 最多     | 控制多个页面 |\n\n# CSS三大特性\n\nCSS有三个非常重要的特性：<font color=\"red\">层叠性</font>、<font color=\"red\">\n继承性</font>、<font color=\"red\">优先级</font>。\n\n\n\n## 「3.1层叠性」\n\n相同选择器给设置相同的样式，此时一个样式就会<font color=\"red\">覆盖（层叠）</font>另一个冲突的样式。层叠性主要解决样式冲突的问题。\n\n### **层叠性原则：**\n\n- 样式冲突，遵循的是<font color=\"red\">就近原则</font>，哪个样式离结构近，就执行哪个样式\n- 样式不冲突，不会层叠\n\n![层叠性](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/css1.png)\n\n## 「3.2继承性」\n\n现实中的继承：我们继承了父亲的姓氏\n\nCSS中的继承：子标签会继承父标签的某些样式，如文本颜色和字号\n\n简单理解就是<font color=\"red\">子承父业</font>。\n\n- 恰当的使用继承性可以简化代码，降低CSS样式的复杂性\n- 子元素可以继承父元素的样式（text- font- line-这些元素开头的可以继承，以及color属性）\n- 继承性口诀：**龙生龙，凤生凤，老鼠的孩子会打洞**\n\n![继承性](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/css2.png)\n\n## 「3.3优先级」\n\ncss特殊性\n\n**概念：**定义CSS样式时，经常出现两个或更多规则应用在同一元素上，此时如果：\n\n1. 选择器相同，则执行层叠性\n2. 选择器不同，就会出现优先级的问题\n\n关于CSS权重，我们需要一套计算公式来去计算，这个就是 CSS Specificity（特殊性）。\n\n### **选择器权重**\n\n| 选择器                           | 选择器权重 |\n| -------------------------------- | ---------- |\n| 继承或者*                        | 0，0，0，0 |\n| 元素选择器（每个元素）           | 0，0，0，1 |\n| 类，伪类选择器（每个类，伪类）   | 0，0，1，0 |\n| id选择器（每个id）               | 0，1，0，0 |\n| 行内样式style=\"\"（每个行内样式） | 1，0，0，0 |\n| 每个!important 最重要的          | 无穷大     |\n\n```css\ndiv { color: pink !important; }\n```\n\n### **优先级注意点：**\n\n1. 权重是由4组数字组成的，但是不会有进位\n2. 可以理解为**类选择器永远大于元素选择器**，**id选择器永远大于类选择器**，以此类推\n3. 等级判断从左到右，左面的最大，一级大于一级，如果某一位数值相同，则判断下一位数值\n4. 可以简单记忆：**通配符和继承权重为0，标签选择器为1，类（伪类）选择器为10，id选择器100，行内样式表为1000，！important无穷大**\n5. 继承权重是0，如果该元素没有直接选中，不管父元素权重多高，子元素得到的权重都是0\n\n### **权重叠加：**\n\n如果是复合选择器，则会有权重叠加，需要计算权重。\n\n```css\n\n div ul  li   ------>      0,0,0,3\n .nav ul li   ------>      0,0,1,2\n a:hover      -----—>      0,0,1,1\n .nav a       ------>      0,0,1,1\n```\n\n- 我们修改样式，一定要看该标签有没有被选中\n- 如果选中了，那么以上面的公式来计权重。谁大听谁的。\n- 如果没有选中，那么权重是0，因为继承的权重为0.\n\n![优先级](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/css3.png)\n\n# 代码风格\n\n**团队约定：**\n\n- 展开格式\n- 样式选择器，属性名，属性值关键字全部使用小写字母书写，属性字符串允许使用大小写\n\n```css\n\n/*1.紧凑格式 (Compact)不推荐*/\nh3 { color: deeppink;font-size: 20px;}\n\n/*展开格式（推荐）*/\nh3 {\n color: deeppink;\n    font-size: 20px;    \n}\n\n/* 推荐 */\nh3{\n color: pink;\n}\n \n/* 不推荐 */\nH3{\n COLOR: PINK;\n}\n```\n\n\n\n","slug":"前端/CSS基础","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cl5db79jv0007ywtu8rhggqvv","content":"<h1 id=\"CSS简介\"><a href=\"#CSS简介\" class=\"headerlink\" title=\"CSS简介\"></a>CSS简介</h1><h2 id=\"「1-1HTML的局限性」\"><a href=\"#「1-1HTML的局限性」\" class=\"headerlink\" title=\"「1.1HTML的局限性」\"></a>「1.1HTML的局限性」</h2><ul>\n<li>HTML满足不了设计者的需求，可以将网页结构与样式相分离，这样就可以在不更改网页结构的前提下，更换网站的样式。</li>\n<li>操作html属性不方便</li>\n<li>HTML里面添加样式带来的是无尽的臃肿和繁琐</li>\n</ul>\n<h2 id=\"「1-2CSS网页美容师」\"><a href=\"#「1-2CSS网页美容师」\" class=\"headerlink\" title=\"「1.2CSS网页美容师」\"></a>「1.2CSS网页美容师」</h2><p>CSS是<font color=\"red\">层叠样式表</font>(Cascading Style Sheets)的简称,有时我们也会称之为CSS样式表或级联样式表，CSS是也是一种<font color=\"red\">标记语言</font>。主要用于设置HTML页面中的<font color=\"red\">文本内容</font>(字体、大小、对齐方式等)、<font color=\"red\">图片外形</font>(宽高、边框样式、边距等）以及<font color=\"red\">版面布局</font>和<font color=\"red\">外观显示样式</font>。CSS让我们的网页更加丰富多彩，布局更加灵活自如。简单理解：<strong>CSS可以美化HTML，让HTML更漂亮，让页面布局更简洁。</strong></p>\n<h3 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a><strong>总结</strong>：</h3><ul>\n<li><p> HTML主要做结构，显示元素内容. </p>\n</li>\n<li><p> CSS美化HTML，布局网页.</p>\n</li>\n<li><p> CSS最大价值：由HTML专注去做结构呈现，样式交给   CSS，即结构(HTML)与样式(CSS)相分离</p>\n</li>\n</ul>\n<h2 id=\"「1-3CSS语法规范」\"><a href=\"#「1-3CSS语法规范」\" class=\"headerlink\" title=\"「1.3CSS语法规范」\"></a>「1.3CSS语法规范」</h2><p>使用HTML时，需要遵从一定的规范，CSS也是如此。要想熟练地使用CSS对网页进行修饰，首先需要了解CSS样式规则。 CSS规则由两个主要的部分构成：<strong>选择器以及一条或多条声明</strong>。 </p>\n<ol>\n<li><p>选择器是用于指定CSS样式的<font color=\"red\">HTML标签</font>，花括号内是对该对象设置的具体样式 </p>\n</li>\n<li><p>属性和属性值以“<font color=\"red\">键值对</font>”的形式出现 </p>\n</li>\n<li><p>属性是对指定的对象设置的样式属性，例如字体大小、文本颜色等 </p>\n</li>\n<li><p>属性和属性值之间用英文“<font color=\"red\"><strong>:</strong></font>”分开 </p>\n</li>\n<li><p>多个“键值对”之间用英文“<font color=\"red\"><strong>;</strong></font>”进行区分</p>\n</li>\n</ol>\n<h2 id=\"「1-4CSS注释」\"><a href=\"#「1-4CSS注释」\" class=\"headerlink\" title=\"「1.4CSS注释」\"></a>「1.4CSS注释」</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*这是注释*/</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"CSS引入方式\"><a href=\"#CSS引入方式\" class=\"headerlink\" title=\"CSS引入方式\"></a>CSS引入方式</h1><p>CSS的三种样式表</p>\n<p>按照CSS样式书写的位置（或者引入的方式），css样式表可以分为三大类：</p>\n<ol>\n<li>内部样式表（嵌入式）</li>\n<li>行内样式表（行内式）</li>\n<li>外部样式表（外链式）</li>\n</ol>\n<h2 id=\"「2-1内部样式表」\"><a href=\"#「2-1内部样式表」\" class=\"headerlink\" title=\"「2.1内部样式表」\"></a>「2.1内部样式表」</h2><p>内部样式表（内嵌样式表）是写到html页面内部，是将所有CSS代码抽取出来，单独放到一个style标签中。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/CSS&quot;</span>&gt;</span><span class=\"css\"></span></span><br><span class=\"line\"><span class=\"css\">    选择器（选择的标签） &#123; </span></span><br><span class=\"line\"><span class=\"css\">      属性<span class=\"number\">1</span>: 属性值<span class=\"number\">1</span>;</span></span><br><span class=\"line\"><span class=\"css\">      属性<span class=\"number\">2</span>: 属性值<span class=\"number\">2</span>; </span></span><br><span class=\"line\"><span class=\"css\">      属性<span class=\"number\">3</span>: 属性值<span class=\"number\">3</span>;</span></span><br><span class=\"line\"><span class=\"css\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">div</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">     <span class=\"attribute\">color</span>: red;</span></span><br><span class=\"line\"><span class=\"css\">     <span class=\"attribute\">font-size</span>: <span class=\"number\">12px</span>; </span></span><br><span class=\"line\"><span class=\"css\">&#125;</span></span><br><span class=\"line\"><span class=\"css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>style标签理论上可以放在html文档的任何地方，但一般会放在文档的head标签中</li>\n<li>通过此种方法，可以方便控制当前整个页面中元素样式设置</li>\n<li>代码结构清晰，但并没有实现结构与样式完全分离</li>\n<li>使用内部样式表设定CSS，通常被称为嵌入式引入，这种是练习常用的方法</li>\n</ul>\n<h2 id=\"「2-2行内样式表」\"><a href=\"#「2-2行内样式表」\" class=\"headerlink\" title=\"「2.2行内样式表」\"></a>「2.2行内样式表」</h2><p>行内样式表（内联样式表）是在元素标签内部的style属性中设定CSS样式，适合于修改简单样式。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;标签名 style=&quot;属性1:属性值1; 属性2:属性值2; 属性3:属性值3;&quot;&gt; </span><br><span class=\"line\">    内容 </span><br><span class=\"line\">&lt;/标签名&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;color: red; font-size: 12px;&quot;</span>&gt;</span></span><br><span class=\"line\">    示例</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>style其实就是标签的属性</li>\n<li>在双引号中间，写法要符合CSS规范</li>\n<li>可以控制当前的标签设置样式</li>\n<li>书写繁琐，没有体现结构与样式相分离的思想，不推荐大量使用</li>\n<li>使用行内样式表设定CSS，通常被称为行内式引入</li>\n</ul>\n<h2 id=\"「2-3外部样式表」\"><a href=\"#「2-3外部样式表」\" class=\"headerlink\" title=\"「2.3外部样式表」\"></a>「2.3外部样式表」</h2><p>实际开发中使用的都是外部样式表，适合样式较多的情况，核心是样式单独写到CSS文件中，之后把CSS文件引入到HTML页面中使用</p>\n<p>引入外部样式表分为两步：</p>\n<ol>\n<li>新建一个后缀名为**.css**的样式文件，把所有CSS代码都放在此文件中</li>\n<li>在HTML页面中，使用link标签引入这个文件</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;index.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>rel</td>\n<td>定义当前文档与被链接文档之间的关系，在这里需要指定为“stylesheet”，表示被链接的文档是一个样式表文件</td>\n</tr>\n<tr>\n<td>href</td>\n<td>定义所链接外部样式表文件的URL，可以是相对路径，也可以是绝对路径</td>\n</tr>\n</tbody></table>\n<p>在使用外部样式表设定CSS，通常也被称为外链式和链接式引入，这种方法是开发中常用的方法。</p>\n<h2 id=\"「2-4CSS引入方法总结」\"><a href=\"#「2-4CSS引入方法总结」\" class=\"headerlink\" title=\"「2.4CSS引入方法总结」\"></a>「2.4CSS引入方法总结」</h2><table>\n<thead>\n<tr>\n<th>样式表</th>\n<th>优点</th>\n<th>缺点</th>\n<th>使用情况</th>\n<th>控制范围</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>内部样式表</td>\n<td>部分结构与样式相分离</td>\n<td>没有彻底分离</td>\n<td>较多</td>\n<td>控制一个页面</td>\n</tr>\n<tr>\n<td>行内样式表</td>\n<td>书写方便，权重高</td>\n<td>结构样式混合</td>\n<td>较少</td>\n<td>控制一个标签</td>\n</tr>\n<tr>\n<td>外部样式表</td>\n<td>完全结构与样式相分离</td>\n<td>需要引入</td>\n<td>最多</td>\n<td>控制多个页面</td>\n</tr>\n</tbody></table>\n<h1 id=\"CSS三大特性\"><a href=\"#CSS三大特性\" class=\"headerlink\" title=\"CSS三大特性\"></a>CSS三大特性</h1><p>CSS有三个非常重要的特性：<font color=\"red\">层叠性</font>、<font color=\"red\"><br>继承性</font>、<font color=\"red\">优先级</font>。</p>\n<h2 id=\"「3-1层叠性」\"><a href=\"#「3-1层叠性」\" class=\"headerlink\" title=\"「3.1层叠性」\"></a>「3.1层叠性」</h2><p>相同选择器给设置相同的样式，此时一个样式就会<font color=\"red\">覆盖（层叠）</font>另一个冲突的样式。层叠性主要解决样式冲突的问题。</p>\n<h3 id=\"层叠性原则：\"><a href=\"#层叠性原则：\" class=\"headerlink\" title=\"层叠性原则：\"></a><strong>层叠性原则：</strong></h3><ul>\n<li>样式冲突，遵循的是<font color=\"red\">就近原则</font>，哪个样式离结构近，就执行哪个样式</li>\n<li>样式不冲突，不会层叠</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/css1.png\" alt=\"层叠性\"></p>\n<h2 id=\"「3-2继承性」\"><a href=\"#「3-2继承性」\" class=\"headerlink\" title=\"「3.2继承性」\"></a>「3.2继承性」</h2><p>现实中的继承：我们继承了父亲的姓氏</p>\n<p>CSS中的继承：子标签会继承父标签的某些样式，如文本颜色和字号</p>\n<p>简单理解就是<font color=\"red\">子承父业</font>。</p>\n<ul>\n<li>恰当的使用继承性可以简化代码，降低CSS样式的复杂性</li>\n<li>子元素可以继承父元素的样式（text- font- line-这些元素开头的可以继承，以及color属性）</li>\n<li>继承性口诀：<strong>龙生龙，凤生凤，老鼠的孩子会打洞</strong></li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/css2.png\" alt=\"继承性\"></p>\n<h2 id=\"「3-3优先级」\"><a href=\"#「3-3优先级」\" class=\"headerlink\" title=\"「3.3优先级」\"></a>「3.3优先级」</h2><p>css特殊性</p>\n<p><strong>概念：</strong>定义CSS样式时，经常出现两个或更多规则应用在同一元素上，此时如果：</p>\n<ol>\n<li>选择器相同，则执行层叠性</li>\n<li>选择器不同，就会出现优先级的问题</li>\n</ol>\n<p>关于CSS权重，我们需要一套计算公式来去计算，这个就是 CSS Specificity（特殊性）。</p>\n<h3 id=\"选择器权重\"><a href=\"#选择器权重\" class=\"headerlink\" title=\"选择器权重\"></a><strong>选择器权重</strong></h3><table>\n<thead>\n<tr>\n<th>选择器</th>\n<th>选择器权重</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>继承或者*</td>\n<td>0，0，0，0</td>\n</tr>\n<tr>\n<td>元素选择器（每个元素）</td>\n<td>0，0，0，1</td>\n</tr>\n<tr>\n<td>类，伪类选择器（每个类，伪类）</td>\n<td>0，0，1，0</td>\n</tr>\n<tr>\n<td>id选择器（每个id）</td>\n<td>0，1，0，0</td>\n</tr>\n<tr>\n<td>行内样式style=””（每个行内样式）</td>\n<td>1，0，0，0</td>\n</tr>\n<tr>\n<td>每个!important 最重要的</td>\n<td>无穷大</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span> &#123; <span class=\"attribute\">color</span>: pink <span class=\"meta\">!important</span>; &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"优先级注意点：\"><a href=\"#优先级注意点：\" class=\"headerlink\" title=\"优先级注意点：\"></a><strong>优先级注意点：</strong></h3><ol>\n<li>权重是由4组数字组成的，但是不会有进位</li>\n<li>可以理解为<strong>类选择器永远大于元素选择器</strong>，<strong>id选择器永远大于类选择器</strong>，以此类推</li>\n<li>等级判断从左到右，左面的最大，一级大于一级，如果某一位数值相同，则判断下一位数值</li>\n<li>可以简单记忆：<strong>通配符和继承权重为0，标签选择器为1，类（伪类）选择器为10，id选择器100，行内样式表为1000，！important无穷大</strong></li>\n<li>继承权重是0，如果该元素没有直接选中，不管父元素权重多高，子元素得到的权重都是0</li>\n</ol>\n<h3 id=\"权重叠加：\"><a href=\"#权重叠加：\" class=\"headerlink\" title=\"权重叠加：\"></a><strong>权重叠加：</strong></h3><p>如果是复合选择器，则会有权重叠加，需要计算权重。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">div</span> <span class=\"selector-tag\">ul</span>  <span class=\"selector-tag\">li</span>   ------&gt;      <span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"selector-class\">.nav</span> <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span>   ------&gt;      <span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:hover</span>      -----—&gt;      <span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"selector-class\">.nav</span> <span class=\"selector-tag\">a</span>       ------&gt;      <span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>我们修改样式，一定要看该标签有没有被选中</li>\n<li>如果选中了，那么以上面的公式来计权重。谁大听谁的。</li>\n<li>如果没有选中，那么权重是0，因为继承的权重为0.</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/css3.png\" alt=\"优先级\"></p>\n<h1 id=\"代码风格\"><a href=\"#代码风格\" class=\"headerlink\" title=\"代码风格\"></a>代码风格</h1><p><strong>团队约定：</strong></p>\n<ul>\n<li>展开格式</li>\n<li>样式选择器，属性名，属性值关键字全部使用小写字母书写，属性字符串允许使用大小写</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*1.紧凑格式 (Compact)不推荐*/</span></span><br><span class=\"line\"><span class=\"selector-tag\">h3</span> &#123; <span class=\"attribute\">color</span>: deeppink;<span class=\"attribute\">font-size</span>: <span class=\"number\">20px</span>;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*展开格式（推荐）*/</span></span><br><span class=\"line\"><span class=\"selector-tag\">h3</span> &#123;</span><br><span class=\"line\"> <span class=\"attribute\">color</span>: deeppink;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">20px</span>;    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 推荐 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">h3</span>&#123;</span><br><span class=\"line\"> <span class=\"attribute\">color</span>: pink;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">/* 不推荐 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">H3</span>&#123;</span><br><span class=\"line\"> <span class=\"attribute\">COLOR</span>: PINK;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<h1 id=\"CSS简介\"><a href=\"#CSS简介\" class=\"headerlink\" title=\"CSS简介\"></a>CSS简介</h1><h2 id=\"「1-1HTML的局限性」\"><a href=\"#「1-1HTML的局限性」\" class=\"headerlink\" title=\"「1.1HTML的局限性」\"></a>「1.1HTML的局限性」</h2><ul>\n<li>HTML满足不了设计者的需求，可以将网页结构与样式相分离，这样就可以在不更改网页结构的前提下，更换网站的样式。</li>\n<li>操作html属性不方便</li>\n<li>HTML里面添加样式带来的是无尽的臃肿和繁琐</li>\n</ul>\n<h2 id=\"「1-2CSS网页美容师」\"><a href=\"#「1-2CSS网页美容师」\" class=\"headerlink\" title=\"「1.2CSS网页美容师」\"></a>「1.2CSS网页美容师」</h2><p>CSS是<font color=\"red\">层叠样式表</font>(Cascading Style Sheets)的简称,有时我们也会称之为CSS样式表或级联样式表，CSS是也是一种<font color=\"red\">标记语言</font>。主要用于设置HTML页面中的<font color=\"red\">文本内容</font>(字体、大小、对齐方式等)、<font color=\"red\">图片外形</font>(宽高、边框样式、边距等）以及<font color=\"red\">版面布局</font>和<font color=\"red\">外观显示样式</font>。CSS让我们的网页更加丰富多彩，布局更加灵活自如。简单理解：<strong>CSS可以美化HTML，让HTML更漂亮，让页面布局更简洁。</strong></p>\n<h3 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a><strong>总结</strong>：</h3><ul>\n<li><p> HTML主要做结构，显示元素内容. </p>\n</li>\n<li><p> CSS美化HTML，布局网页.</p>\n</li>\n<li><p> CSS最大价值：由HTML专注去做结构呈现，样式交给   CSS，即结构(HTML)与样式(CSS)相分离</p>\n</li>\n</ul>\n<h2 id=\"「1-3CSS语法规范」\"><a href=\"#「1-3CSS语法规范」\" class=\"headerlink\" title=\"「1.3CSS语法规范」\"></a>「1.3CSS语法规范」</h2><p>使用HTML时，需要遵从一定的规范，CSS也是如此。要想熟练地使用CSS对网页进行修饰，首先需要了解CSS样式规则。 CSS规则由两个主要的部分构成：<strong>选择器以及一条或多条声明</strong>。 </p>\n<ol>\n<li><p>选择器是用于指定CSS样式的<font color=\"red\">HTML标签</font>，花括号内是对该对象设置的具体样式 </p>\n</li>\n<li><p>属性和属性值以“<font color=\"red\">键值对</font>”的形式出现 </p>\n</li>\n<li><p>属性是对指定的对象设置的样式属性，例如字体大小、文本颜色等 </p>\n</li>\n<li><p>属性和属性值之间用英文“<font color=\"red\"><strong>:</strong></font>”分开 </p>\n</li>\n<li><p>多个“键值对”之间用英文“<font color=\"red\"><strong>;</strong></font>”进行区分</p>\n</li>\n</ol>\n<h2 id=\"「1-4CSS注释」\"><a href=\"#「1-4CSS注释」\" class=\"headerlink\" title=\"「1.4CSS注释」\"></a>「1.4CSS注释」</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*这是注释*/</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"CSS引入方式\"><a href=\"#CSS引入方式\" class=\"headerlink\" title=\"CSS引入方式\"></a>CSS引入方式</h1><p>CSS的三种样式表</p>\n<p>按照CSS样式书写的位置（或者引入的方式），css样式表可以分为三大类：</p>\n<ol>\n<li>内部样式表（嵌入式）</li>\n<li>行内样式表（行内式）</li>\n<li>外部样式表（外链式）</li>\n</ol>\n<h2 id=\"「2-1内部样式表」\"><a href=\"#「2-1内部样式表」\" class=\"headerlink\" title=\"「2.1内部样式表」\"></a>「2.1内部样式表」</h2><p>内部样式表（内嵌样式表）是写到html页面内部，是将所有CSS代码抽取出来，单独放到一个style标签中。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/CSS&quot;</span>&gt;</span><span class=\"css\"></span></span><br><span class=\"line\"><span class=\"css\">    选择器（选择的标签） &#123; </span></span><br><span class=\"line\"><span class=\"css\">      属性<span class=\"number\">1</span>: 属性值<span class=\"number\">1</span>;</span></span><br><span class=\"line\"><span class=\"css\">      属性<span class=\"number\">2</span>: 属性值<span class=\"number\">2</span>; </span></span><br><span class=\"line\"><span class=\"css\">      属性<span class=\"number\">3</span>: 属性值<span class=\"number\">3</span>;</span></span><br><span class=\"line\"><span class=\"css\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">div</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">     <span class=\"attribute\">color</span>: red;</span></span><br><span class=\"line\"><span class=\"css\">     <span class=\"attribute\">font-size</span>: <span class=\"number\">12px</span>; </span></span><br><span class=\"line\"><span class=\"css\">&#125;</span></span><br><span class=\"line\"><span class=\"css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>style标签理论上可以放在html文档的任何地方，但一般会放在文档的head标签中</li>\n<li>通过此种方法，可以方便控制当前整个页面中元素样式设置</li>\n<li>代码结构清晰，但并没有实现结构与样式完全分离</li>\n<li>使用内部样式表设定CSS，通常被称为嵌入式引入，这种是练习常用的方法</li>\n</ul>\n<h2 id=\"「2-2行内样式表」\"><a href=\"#「2-2行内样式表」\" class=\"headerlink\" title=\"「2.2行内样式表」\"></a>「2.2行内样式表」</h2><p>行内样式表（内联样式表）是在元素标签内部的style属性中设定CSS样式，适合于修改简单样式。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;标签名 style=&quot;属性1:属性值1; 属性2:属性值2; 属性3:属性值3;&quot;&gt; </span><br><span class=\"line\">    内容 </span><br><span class=\"line\">&lt;/标签名&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;color: red; font-size: 12px;&quot;</span>&gt;</span></span><br><span class=\"line\">    示例</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>style其实就是标签的属性</li>\n<li>在双引号中间，写法要符合CSS规范</li>\n<li>可以控制当前的标签设置样式</li>\n<li>书写繁琐，没有体现结构与样式相分离的思想，不推荐大量使用</li>\n<li>使用行内样式表设定CSS，通常被称为行内式引入</li>\n</ul>\n<h2 id=\"「2-3外部样式表」\"><a href=\"#「2-3外部样式表」\" class=\"headerlink\" title=\"「2.3外部样式表」\"></a>「2.3外部样式表」</h2><p>实际开发中使用的都是外部样式表，适合样式较多的情况，核心是样式单独写到CSS文件中，之后把CSS文件引入到HTML页面中使用</p>\n<p>引入外部样式表分为两步：</p>\n<ol>\n<li>新建一个后缀名为**.css**的样式文件，把所有CSS代码都放在此文件中</li>\n<li>在HTML页面中，使用link标签引入这个文件</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;index.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>rel</td>\n<td>定义当前文档与被链接文档之间的关系，在这里需要指定为“stylesheet”，表示被链接的文档是一个样式表文件</td>\n</tr>\n<tr>\n<td>href</td>\n<td>定义所链接外部样式表文件的URL，可以是相对路径，也可以是绝对路径</td>\n</tr>\n</tbody></table>\n<p>在使用外部样式表设定CSS，通常也被称为外链式和链接式引入，这种方法是开发中常用的方法。</p>\n<h2 id=\"「2-4CSS引入方法总结」\"><a href=\"#「2-4CSS引入方法总结」\" class=\"headerlink\" title=\"「2.4CSS引入方法总结」\"></a>「2.4CSS引入方法总结」</h2><table>\n<thead>\n<tr>\n<th>样式表</th>\n<th>优点</th>\n<th>缺点</th>\n<th>使用情况</th>\n<th>控制范围</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>内部样式表</td>\n<td>部分结构与样式相分离</td>\n<td>没有彻底分离</td>\n<td>较多</td>\n<td>控制一个页面</td>\n</tr>\n<tr>\n<td>行内样式表</td>\n<td>书写方便，权重高</td>\n<td>结构样式混合</td>\n<td>较少</td>\n<td>控制一个标签</td>\n</tr>\n<tr>\n<td>外部样式表</td>\n<td>完全结构与样式相分离</td>\n<td>需要引入</td>\n<td>最多</td>\n<td>控制多个页面</td>\n</tr>\n</tbody></table>\n<h1 id=\"CSS三大特性\"><a href=\"#CSS三大特性\" class=\"headerlink\" title=\"CSS三大特性\"></a>CSS三大特性</h1><p>CSS有三个非常重要的特性：<font color=\"red\">层叠性</font>、<font color=\"red\"><br>继承性</font>、<font color=\"red\">优先级</font>。</p>\n<h2 id=\"「3-1层叠性」\"><a href=\"#「3-1层叠性」\" class=\"headerlink\" title=\"「3.1层叠性」\"></a>「3.1层叠性」</h2><p>相同选择器给设置相同的样式，此时一个样式就会<font color=\"red\">覆盖（层叠）</font>另一个冲突的样式。层叠性主要解决样式冲突的问题。</p>\n<h3 id=\"层叠性原则：\"><a href=\"#层叠性原则：\" class=\"headerlink\" title=\"层叠性原则：\"></a><strong>层叠性原则：</strong></h3><ul>\n<li>样式冲突，遵循的是<font color=\"red\">就近原则</font>，哪个样式离结构近，就执行哪个样式</li>\n<li>样式不冲突，不会层叠</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/css1.png\" alt=\"层叠性\"></p>\n<h2 id=\"「3-2继承性」\"><a href=\"#「3-2继承性」\" class=\"headerlink\" title=\"「3.2继承性」\"></a>「3.2继承性」</h2><p>现实中的继承：我们继承了父亲的姓氏</p>\n<p>CSS中的继承：子标签会继承父标签的某些样式，如文本颜色和字号</p>\n<p>简单理解就是<font color=\"red\">子承父业</font>。</p>\n<ul>\n<li>恰当的使用继承性可以简化代码，降低CSS样式的复杂性</li>\n<li>子元素可以继承父元素的样式（text- font- line-这些元素开头的可以继承，以及color属性）</li>\n<li>继承性口诀：<strong>龙生龙，凤生凤，老鼠的孩子会打洞</strong></li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/css2.png\" alt=\"继承性\"></p>\n<h2 id=\"「3-3优先级」\"><a href=\"#「3-3优先级」\" class=\"headerlink\" title=\"「3.3优先级」\"></a>「3.3优先级」</h2><p>css特殊性</p>\n<p><strong>概念：</strong>定义CSS样式时，经常出现两个或更多规则应用在同一元素上，此时如果：</p>\n<ol>\n<li>选择器相同，则执行层叠性</li>\n<li>选择器不同，就会出现优先级的问题</li>\n</ol>\n<p>关于CSS权重，我们需要一套计算公式来去计算，这个就是 CSS Specificity（特殊性）。</p>\n<h3 id=\"选择器权重\"><a href=\"#选择器权重\" class=\"headerlink\" title=\"选择器权重\"></a><strong>选择器权重</strong></h3><table>\n<thead>\n<tr>\n<th>选择器</th>\n<th>选择器权重</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>继承或者*</td>\n<td>0，0，0，0</td>\n</tr>\n<tr>\n<td>元素选择器（每个元素）</td>\n<td>0，0，0，1</td>\n</tr>\n<tr>\n<td>类，伪类选择器（每个类，伪类）</td>\n<td>0，0，1，0</td>\n</tr>\n<tr>\n<td>id选择器（每个id）</td>\n<td>0，1，0，0</td>\n</tr>\n<tr>\n<td>行内样式style=””（每个行内样式）</td>\n<td>1，0，0，0</td>\n</tr>\n<tr>\n<td>每个!important 最重要的</td>\n<td>无穷大</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span> &#123; <span class=\"attribute\">color</span>: pink <span class=\"meta\">!important</span>; &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"优先级注意点：\"><a href=\"#优先级注意点：\" class=\"headerlink\" title=\"优先级注意点：\"></a><strong>优先级注意点：</strong></h3><ol>\n<li>权重是由4组数字组成的，但是不会有进位</li>\n<li>可以理解为<strong>类选择器永远大于元素选择器</strong>，<strong>id选择器永远大于类选择器</strong>，以此类推</li>\n<li>等级判断从左到右，左面的最大，一级大于一级，如果某一位数值相同，则判断下一位数值</li>\n<li>可以简单记忆：<strong>通配符和继承权重为0，标签选择器为1，类（伪类）选择器为10，id选择器100，行内样式表为1000，！important无穷大</strong></li>\n<li>继承权重是0，如果该元素没有直接选中，不管父元素权重多高，子元素得到的权重都是0</li>\n</ol>\n<h3 id=\"权重叠加：\"><a href=\"#权重叠加：\" class=\"headerlink\" title=\"权重叠加：\"></a><strong>权重叠加：</strong></h3><p>如果是复合选择器，则会有权重叠加，需要计算权重。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">div</span> <span class=\"selector-tag\">ul</span>  <span class=\"selector-tag\">li</span>   ------&gt;      <span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"selector-class\">.nav</span> <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span>   ------&gt;      <span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:hover</span>      -----—&gt;      <span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"selector-class\">.nav</span> <span class=\"selector-tag\">a</span>       ------&gt;      <span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>我们修改样式，一定要看该标签有没有被选中</li>\n<li>如果选中了，那么以上面的公式来计权重。谁大听谁的。</li>\n<li>如果没有选中，那么权重是0，因为继承的权重为0.</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/css3.png\" alt=\"优先级\"></p>\n<h1 id=\"代码风格\"><a href=\"#代码风格\" class=\"headerlink\" title=\"代码风格\"></a>代码风格</h1><p><strong>团队约定：</strong></p>\n<ul>\n<li>展开格式</li>\n<li>样式选择器，属性名，属性值关键字全部使用小写字母书写，属性字符串允许使用大小写</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*1.紧凑格式 (Compact)不推荐*/</span></span><br><span class=\"line\"><span class=\"selector-tag\">h3</span> &#123; <span class=\"attribute\">color</span>: deeppink;<span class=\"attribute\">font-size</span>: <span class=\"number\">20px</span>;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*展开格式（推荐）*/</span></span><br><span class=\"line\"><span class=\"selector-tag\">h3</span> &#123;</span><br><span class=\"line\"> <span class=\"attribute\">color</span>: deeppink;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">20px</span>;    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 推荐 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">h3</span>&#123;</span><br><span class=\"line\"> <span class=\"attribute\">color</span>: pink;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">/* 不推荐 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">H3</span>&#123;</span><br><span class=\"line\"> <span class=\"attribute\">COLOR</span>: PINK;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n"},{"title":"CSS定位","date":"2022-05-19T16:00:00.000Z","updated":"2022-06-19T16:00:00.000Z","type":null,"comments":1,"description":null,"keywords":null,"top_img":"./img/bg6.jpg","cover":"./img/bg10.jpg","mathjax":null,"katex":null,"aside":null,"aplayer":null,"highlight_shrink":null,"sticky":null,"_content":"# 定位基础\n\n定位就是将盒子定在某一位置，定位=定位模式+位偏移。\n\n**定位模式**和**位偏移**都属于属性\n\n- 定位模式用于指定一个元素在文档中的定位方式\n- 边偏移就是决定该元素的最终位置。\n\n定位模式由position属性设置，属性值分为四个\n\n| 属性     | 属性值   | 语义     |\n| -------- | -------- | -------- |\n| position | static   | 静态定位 |\n|          | relative | 相对定位 |\n|          | absolute | 绝对定位 |\n|          | fixed    | 固定定位 |\n|          | sticky   | 粘性定位 |\n\n边偏移有四个属性 top left right bottom\n\n| 属性   | 属性值示例    | 描述                                           |\n| ------ | ------------- | ---------------------------------------------- |\n| top    | top: 50px;    | 顶端偏移量，定义元素相对于其父元素上边线的距离 |\n| bottom | bottom: 50px; | 下端偏移量，定义元素相对于其父元素下边线的距离 |\n| left   | left: 50px;   | 左端偏移量，定义元素相对于其父元素左边线的距离 |\n| right  | right: 50px   | 右端偏移量，定义元素相对于其父元素右边线的距离 |\n\n```css\n选择器 {\n    position: relative;\n    top；0px；\n    left: 0px;\n}\n```\n\n## 「static定位」\n\nstatic定位是元素的默认定位方式，无定位的意思，按照标准流的位置，平时很少用到这种\n\n## 「relative定位」\n\n相对定位\n\n**特点：**\n\n1. 元素在移动位置时，相对于它原来的位置来移动的，移动位置时以自身位置为参考点\n2. 不会脱标，继续保留原来标准流的位置，后面盒子仍以标准流对待他\n3. 子绝父相\n\n## 「absolute定位」\n\n绝对定位\n\n**特点：**\n\n1. 移动位置时相对它祖先元素来移动，如果没有祖先元素或者祖先元素没有添加定位，则以浏览器为准定位\n2. 如果祖先元素有定位（相对绝对固定），则以最近一级有定位的祖先元素为参考点\n3. 会脱标，不占有原来的位置\n4. 子绝父相\n\n## 「fixed定位」\n\n固定定位，是固定在浏览器可视区的位置，浏览器滚动时元素位置不改变\n\n**特点：**\n\n1. 以浏览器可视窗口为参考点移动元素，与父元素无关，不随滚动条滚动\n2. 也会脱标，不占有原来的位置，可以看作时特殊的绝对定位\n\n## 「sticky定位」\n\n粘性定位，被认为是相对定位和固定定位的混合\n\n**特点：**\n\n1. 以浏览器可视窗口为参照物（固定特点)\n2. 不会脱标，占有原来的位置（相对特点）\n3. 必须添加边偏移其中一个元素才有效\n4. 跟页面滚动搭配使用，兼容性差\n\n## 「子绝父相」\n\n子元素用绝对定位，父元素用相对定位。可以让子元素固定在父元素里面显示，父元素占有位置\n\n## 「CSS小算法」\n\n固定定位固定在版心右侧位置，多走版心宽度一半位置就可让固定定位盒子贴着版心右侧对齐了\n\n1. 让固定定位的盒子left:50%，走到版心一半的位置\n2. 让固定定位的盒子margin:left;版心宽度一半的距离\n\n# 定位拓展\n\n## 「定位叠放次序」\n\n多个盒子使用定位时，可能会出现重叠，可通过z-index属性来控制盒子前后次序（z轴）\n\n```css\n选择器{\n\tz-index: 1;\n}\n```\n\n1. 属性值可以是正整数，负整数，或0。默认是auto，数值越大越靠上\n2. 若属性值相同按书写顺序，后来居上\n3. 数字不加单位\n4. 只有定位的盒子才有z-index 属性\n\n## 「定位盒子垂直居中」\n\n加了定位的盒子不能通过margin: 0 auto;水平居中，需要通过下面算法实现水平和垂直居中\n\n1. left: 50%；让盒子左侧移动到父级元素的水平中心位置\n2. margin-left: 100px; 让盒子向左移动自身宽度的一半\n3. 垂直居中同理\n\n# 定位特殊性\n\n## 「绝对定位和固定定位和浮动类似」\n\n1. 行内元素添加绝对或固定后，可以直接设置宽度和高度\n2. 块级元素添加后，如不设置宽度和高度，默认为内容大小\n\n## 「脱标盒子不会引发外边距塌陷」\n\n**浮动元素**，**绝对定位**，**固定定位**都不会触发外边距合并问题\n\n## 「绝对固定定位会完全压住盒子」\n\n1. 浮动元素会压住标准流和盒子，但不会压住标准流盒子里面的文字图片\n2. 绝对和固定会压住盒子所有内容\n3. 浮动之所以不会压住文字，是因为浮动最初目的就是做文字环绕效果\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/前端/CSS定位.md","raw":"---\ntitle: CSS定位\ndate: 2022-05-20\nupdated: 2022-06-20\ntype:\ncomments:\ndescription:\nkeywords:\ntags:\n  - 小白的前端之路\n  - CSS基础\n  - CSS三大重点\ncategories: 前端开发\ntop_img: ./img/bg6.jpg\ncover: ./img/bg10.jpg\nmathjax:\nkatex:\naside:\naplayer:\nhighlight_shrink:\nsticky: \n---\n# 定位基础\n\n定位就是将盒子定在某一位置，定位=定位模式+位偏移。\n\n**定位模式**和**位偏移**都属于属性\n\n- 定位模式用于指定一个元素在文档中的定位方式\n- 边偏移就是决定该元素的最终位置。\n\n定位模式由position属性设置，属性值分为四个\n\n| 属性     | 属性值   | 语义     |\n| -------- | -------- | -------- |\n| position | static   | 静态定位 |\n|          | relative | 相对定位 |\n|          | absolute | 绝对定位 |\n|          | fixed    | 固定定位 |\n|          | sticky   | 粘性定位 |\n\n边偏移有四个属性 top left right bottom\n\n| 属性   | 属性值示例    | 描述                                           |\n| ------ | ------------- | ---------------------------------------------- |\n| top    | top: 50px;    | 顶端偏移量，定义元素相对于其父元素上边线的距离 |\n| bottom | bottom: 50px; | 下端偏移量，定义元素相对于其父元素下边线的距离 |\n| left   | left: 50px;   | 左端偏移量，定义元素相对于其父元素左边线的距离 |\n| right  | right: 50px   | 右端偏移量，定义元素相对于其父元素右边线的距离 |\n\n```css\n选择器 {\n    position: relative;\n    top；0px；\n    left: 0px;\n}\n```\n\n## 「static定位」\n\nstatic定位是元素的默认定位方式，无定位的意思，按照标准流的位置，平时很少用到这种\n\n## 「relative定位」\n\n相对定位\n\n**特点：**\n\n1. 元素在移动位置时，相对于它原来的位置来移动的，移动位置时以自身位置为参考点\n2. 不会脱标，继续保留原来标准流的位置，后面盒子仍以标准流对待他\n3. 子绝父相\n\n## 「absolute定位」\n\n绝对定位\n\n**特点：**\n\n1. 移动位置时相对它祖先元素来移动，如果没有祖先元素或者祖先元素没有添加定位，则以浏览器为准定位\n2. 如果祖先元素有定位（相对绝对固定），则以最近一级有定位的祖先元素为参考点\n3. 会脱标，不占有原来的位置\n4. 子绝父相\n\n## 「fixed定位」\n\n固定定位，是固定在浏览器可视区的位置，浏览器滚动时元素位置不改变\n\n**特点：**\n\n1. 以浏览器可视窗口为参考点移动元素，与父元素无关，不随滚动条滚动\n2. 也会脱标，不占有原来的位置，可以看作时特殊的绝对定位\n\n## 「sticky定位」\n\n粘性定位，被认为是相对定位和固定定位的混合\n\n**特点：**\n\n1. 以浏览器可视窗口为参照物（固定特点)\n2. 不会脱标，占有原来的位置（相对特点）\n3. 必须添加边偏移其中一个元素才有效\n4. 跟页面滚动搭配使用，兼容性差\n\n## 「子绝父相」\n\n子元素用绝对定位，父元素用相对定位。可以让子元素固定在父元素里面显示，父元素占有位置\n\n## 「CSS小算法」\n\n固定定位固定在版心右侧位置，多走版心宽度一半位置就可让固定定位盒子贴着版心右侧对齐了\n\n1. 让固定定位的盒子left:50%，走到版心一半的位置\n2. 让固定定位的盒子margin:left;版心宽度一半的距离\n\n# 定位拓展\n\n## 「定位叠放次序」\n\n多个盒子使用定位时，可能会出现重叠，可通过z-index属性来控制盒子前后次序（z轴）\n\n```css\n选择器{\n\tz-index: 1;\n}\n```\n\n1. 属性值可以是正整数，负整数，或0。默认是auto，数值越大越靠上\n2. 若属性值相同按书写顺序，后来居上\n3. 数字不加单位\n4. 只有定位的盒子才有z-index 属性\n\n## 「定位盒子垂直居中」\n\n加了定位的盒子不能通过margin: 0 auto;水平居中，需要通过下面算法实现水平和垂直居中\n\n1. left: 50%；让盒子左侧移动到父级元素的水平中心位置\n2. margin-left: 100px; 让盒子向左移动自身宽度的一半\n3. 垂直居中同理\n\n# 定位特殊性\n\n## 「绝对定位和固定定位和浮动类似」\n\n1. 行内元素添加绝对或固定后，可以直接设置宽度和高度\n2. 块级元素添加后，如不设置宽度和高度，默认为内容大小\n\n## 「脱标盒子不会引发外边距塌陷」\n\n**浮动元素**，**绝对定位**，**固定定位**都不会触发外边距合并问题\n\n## 「绝对固定定位会完全压住盒子」\n\n1. 浮动元素会压住标准流和盒子，但不会压住标准流盒子里面的文字图片\n2. 绝对和固定会压住盒子所有内容\n3. 浮动之所以不会压住文字，是因为浮动最初目的就是做文字环绕效果\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"前端/CSS定位","published":1,"layout":"post","photos":[],"link":"","_id":"cl5db79jy000bywtubtogefsv","content":"<h1 id=\"定位基础\"><a href=\"#定位基础\" class=\"headerlink\" title=\"定位基础\"></a>定位基础</h1><p>定位就是将盒子定在某一位置，定位=定位模式+位偏移。</p>\n<p><strong>定位模式</strong>和<strong>位偏移</strong>都属于属性</p>\n<ul>\n<li>定位模式用于指定一个元素在文档中的定位方式</li>\n<li>边偏移就是决定该元素的最终位置。</li>\n</ul>\n<p>定位模式由position属性设置，属性值分为四个</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>属性值</th>\n<th>语义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>position</td>\n<td>static</td>\n<td>静态定位</td>\n</tr>\n<tr>\n<td></td>\n<td>relative</td>\n<td>相对定位</td>\n</tr>\n<tr>\n<td></td>\n<td>absolute</td>\n<td>绝对定位</td>\n</tr>\n<tr>\n<td></td>\n<td>fixed</td>\n<td>固定定位</td>\n</tr>\n<tr>\n<td></td>\n<td>sticky</td>\n<td>粘性定位</td>\n</tr>\n</tbody></table>\n<p>边偏移有四个属性 top left right bottom</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>属性值示例</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>top</td>\n<td>top: 50px;</td>\n<td>顶端偏移量，定义元素相对于其父元素上边线的距离</td>\n</tr>\n<tr>\n<td>bottom</td>\n<td>bottom: 50px;</td>\n<td>下端偏移量，定义元素相对于其父元素下边线的距离</td>\n</tr>\n<tr>\n<td>left</td>\n<td>left: 50px;</td>\n<td>左端偏移量，定义元素相对于其父元素左边线的距离</td>\n</tr>\n<tr>\n<td>right</td>\n<td>right: 50px</td>\n<td>右端偏移量，定义元素相对于其父元素右边线的距离</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">选择器 &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>；<span class=\"number\">0px</span>；</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">0px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「static定位」\"><a href=\"#「static定位」\" class=\"headerlink\" title=\"「static定位」\"></a>「static定位」</h2><p>static定位是元素的默认定位方式，无定位的意思，按照标准流的位置，平时很少用到这种</p>\n<h2 id=\"「relative定位」\"><a href=\"#「relative定位」\" class=\"headerlink\" title=\"「relative定位」\"></a>「relative定位」</h2><p>相对定位</p>\n<p><strong>特点：</strong></p>\n<ol>\n<li>元素在移动位置时，相对于它原来的位置来移动的，移动位置时以自身位置为参考点</li>\n<li>不会脱标，继续保留原来标准流的位置，后面盒子仍以标准流对待他</li>\n<li>子绝父相</li>\n</ol>\n<h2 id=\"「absolute定位」\"><a href=\"#「absolute定位」\" class=\"headerlink\" title=\"「absolute定位」\"></a>「absolute定位」</h2><p>绝对定位</p>\n<p><strong>特点：</strong></p>\n<ol>\n<li>移动位置时相对它祖先元素来移动，如果没有祖先元素或者祖先元素没有添加定位，则以浏览器为准定位</li>\n<li>如果祖先元素有定位（相对绝对固定），则以最近一级有定位的祖先元素为参考点</li>\n<li>会脱标，不占有原来的位置</li>\n<li>子绝父相</li>\n</ol>\n<h2 id=\"「fixed定位」\"><a href=\"#「fixed定位」\" class=\"headerlink\" title=\"「fixed定位」\"></a>「fixed定位」</h2><p>固定定位，是固定在浏览器可视区的位置，浏览器滚动时元素位置不改变</p>\n<p><strong>特点：</strong></p>\n<ol>\n<li>以浏览器可视窗口为参考点移动元素，与父元素无关，不随滚动条滚动</li>\n<li>也会脱标，不占有原来的位置，可以看作时特殊的绝对定位</li>\n</ol>\n<h2 id=\"「sticky定位」\"><a href=\"#「sticky定位」\" class=\"headerlink\" title=\"「sticky定位」\"></a>「sticky定位」</h2><p>粘性定位，被认为是相对定位和固定定位的混合</p>\n<p><strong>特点：</strong></p>\n<ol>\n<li>以浏览器可视窗口为参照物（固定特点)</li>\n<li>不会脱标，占有原来的位置（相对特点）</li>\n<li>必须添加边偏移其中一个元素才有效</li>\n<li>跟页面滚动搭配使用，兼容性差</li>\n</ol>\n<h2 id=\"「子绝父相」\"><a href=\"#「子绝父相」\" class=\"headerlink\" title=\"「子绝父相」\"></a>「子绝父相」</h2><p>子元素用绝对定位，父元素用相对定位。可以让子元素固定在父元素里面显示，父元素占有位置</p>\n<h2 id=\"「CSS小算法」\"><a href=\"#「CSS小算法」\" class=\"headerlink\" title=\"「CSS小算法」\"></a>「CSS小算法」</h2><p>固定定位固定在版心右侧位置，多走版心宽度一半位置就可让固定定位盒子贴着版心右侧对齐了</p>\n<ol>\n<li>让固定定位的盒子left:50%，走到版心一半的位置</li>\n<li>让固定定位的盒子margin:left;版心宽度一半的距离</li>\n</ol>\n<h1 id=\"定位拓展\"><a href=\"#定位拓展\" class=\"headerlink\" title=\"定位拓展\"></a>定位拓展</h1><h2 id=\"「定位叠放次序」\"><a href=\"#「定位叠放次序」\" class=\"headerlink\" title=\"「定位叠放次序」\"></a>「定位叠放次序」</h2><p>多个盒子使用定位时，可能会出现重叠，可通过z-index属性来控制盒子前后次序（z轴）</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">选择器&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">z-index</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>属性值可以是正整数，负整数，或0。默认是auto，数值越大越靠上</li>\n<li>若属性值相同按书写顺序，后来居上</li>\n<li>数字不加单位</li>\n<li>只有定位的盒子才有z-index 属性</li>\n</ol>\n<h2 id=\"「定位盒子垂直居中」\"><a href=\"#「定位盒子垂直居中」\" class=\"headerlink\" title=\"「定位盒子垂直居中」\"></a>「定位盒子垂直居中」</h2><p>加了定位的盒子不能通过margin: 0 auto;水平居中，需要通过下面算法实现水平和垂直居中</p>\n<ol>\n<li>left: 50%；让盒子左侧移动到父级元素的水平中心位置</li>\n<li>margin-left: 100px; 让盒子向左移动自身宽度的一半</li>\n<li>垂直居中同理</li>\n</ol>\n<h1 id=\"定位特殊性\"><a href=\"#定位特殊性\" class=\"headerlink\" title=\"定位特殊性\"></a>定位特殊性</h1><h2 id=\"「绝对定位和固定定位和浮动类似」\"><a href=\"#「绝对定位和固定定位和浮动类似」\" class=\"headerlink\" title=\"「绝对定位和固定定位和浮动类似」\"></a>「绝对定位和固定定位和浮动类似」</h2><ol>\n<li>行内元素添加绝对或固定后，可以直接设置宽度和高度</li>\n<li>块级元素添加后，如不设置宽度和高度，默认为内容大小</li>\n</ol>\n<h2 id=\"「脱标盒子不会引发外边距塌陷」\"><a href=\"#「脱标盒子不会引发外边距塌陷」\" class=\"headerlink\" title=\"「脱标盒子不会引发外边距塌陷」\"></a>「脱标盒子不会引发外边距塌陷」</h2><p><strong>浮动元素</strong>，<strong>绝对定位</strong>，<strong>固定定位</strong>都不会触发外边距合并问题</p>\n<h2 id=\"「绝对固定定位会完全压住盒子」\"><a href=\"#「绝对固定定位会完全压住盒子」\" class=\"headerlink\" title=\"「绝对固定定位会完全压住盒子」\"></a>「绝对固定定位会完全压住盒子」</h2><ol>\n<li>浮动元素会压住标准流和盒子，但不会压住标准流盒子里面的文字图片</li>\n<li>绝对和固定会压住盒子所有内容</li>\n<li>浮动之所以不会压住文字，是因为浮动最初目的就是做文字环绕效果</li>\n</ol>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<h1 id=\"定位基础\"><a href=\"#定位基础\" class=\"headerlink\" title=\"定位基础\"></a>定位基础</h1><p>定位就是将盒子定在某一位置，定位=定位模式+位偏移。</p>\n<p><strong>定位模式</strong>和<strong>位偏移</strong>都属于属性</p>\n<ul>\n<li>定位模式用于指定一个元素在文档中的定位方式</li>\n<li>边偏移就是决定该元素的最终位置。</li>\n</ul>\n<p>定位模式由position属性设置，属性值分为四个</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>属性值</th>\n<th>语义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>position</td>\n<td>static</td>\n<td>静态定位</td>\n</tr>\n<tr>\n<td></td>\n<td>relative</td>\n<td>相对定位</td>\n</tr>\n<tr>\n<td></td>\n<td>absolute</td>\n<td>绝对定位</td>\n</tr>\n<tr>\n<td></td>\n<td>fixed</td>\n<td>固定定位</td>\n</tr>\n<tr>\n<td></td>\n<td>sticky</td>\n<td>粘性定位</td>\n</tr>\n</tbody></table>\n<p>边偏移有四个属性 top left right bottom</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>属性值示例</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>top</td>\n<td>top: 50px;</td>\n<td>顶端偏移量，定义元素相对于其父元素上边线的距离</td>\n</tr>\n<tr>\n<td>bottom</td>\n<td>bottom: 50px;</td>\n<td>下端偏移量，定义元素相对于其父元素下边线的距离</td>\n</tr>\n<tr>\n<td>left</td>\n<td>left: 50px;</td>\n<td>左端偏移量，定义元素相对于其父元素左边线的距离</td>\n</tr>\n<tr>\n<td>right</td>\n<td>right: 50px</td>\n<td>右端偏移量，定义元素相对于其父元素右边线的距离</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">选择器 &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>；<span class=\"number\">0px</span>；</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">0px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「static定位」\"><a href=\"#「static定位」\" class=\"headerlink\" title=\"「static定位」\"></a>「static定位」</h2><p>static定位是元素的默认定位方式，无定位的意思，按照标准流的位置，平时很少用到这种</p>\n<h2 id=\"「relative定位」\"><a href=\"#「relative定位」\" class=\"headerlink\" title=\"「relative定位」\"></a>「relative定位」</h2><p>相对定位</p>\n<p><strong>特点：</strong></p>\n<ol>\n<li>元素在移动位置时，相对于它原来的位置来移动的，移动位置时以自身位置为参考点</li>\n<li>不会脱标，继续保留原来标准流的位置，后面盒子仍以标准流对待他</li>\n<li>子绝父相</li>\n</ol>\n<h2 id=\"「absolute定位」\"><a href=\"#「absolute定位」\" class=\"headerlink\" title=\"「absolute定位」\"></a>「absolute定位」</h2><p>绝对定位</p>\n<p><strong>特点：</strong></p>\n<ol>\n<li>移动位置时相对它祖先元素来移动，如果没有祖先元素或者祖先元素没有添加定位，则以浏览器为准定位</li>\n<li>如果祖先元素有定位（相对绝对固定），则以最近一级有定位的祖先元素为参考点</li>\n<li>会脱标，不占有原来的位置</li>\n<li>子绝父相</li>\n</ol>\n<h2 id=\"「fixed定位」\"><a href=\"#「fixed定位」\" class=\"headerlink\" title=\"「fixed定位」\"></a>「fixed定位」</h2><p>固定定位，是固定在浏览器可视区的位置，浏览器滚动时元素位置不改变</p>\n<p><strong>特点：</strong></p>\n<ol>\n<li>以浏览器可视窗口为参考点移动元素，与父元素无关，不随滚动条滚动</li>\n<li>也会脱标，不占有原来的位置，可以看作时特殊的绝对定位</li>\n</ol>\n<h2 id=\"「sticky定位」\"><a href=\"#「sticky定位」\" class=\"headerlink\" title=\"「sticky定位」\"></a>「sticky定位」</h2><p>粘性定位，被认为是相对定位和固定定位的混合</p>\n<p><strong>特点：</strong></p>\n<ol>\n<li>以浏览器可视窗口为参照物（固定特点)</li>\n<li>不会脱标，占有原来的位置（相对特点）</li>\n<li>必须添加边偏移其中一个元素才有效</li>\n<li>跟页面滚动搭配使用，兼容性差</li>\n</ol>\n<h2 id=\"「子绝父相」\"><a href=\"#「子绝父相」\" class=\"headerlink\" title=\"「子绝父相」\"></a>「子绝父相」</h2><p>子元素用绝对定位，父元素用相对定位。可以让子元素固定在父元素里面显示，父元素占有位置</p>\n<h2 id=\"「CSS小算法」\"><a href=\"#「CSS小算法」\" class=\"headerlink\" title=\"「CSS小算法」\"></a>「CSS小算法」</h2><p>固定定位固定在版心右侧位置，多走版心宽度一半位置就可让固定定位盒子贴着版心右侧对齐了</p>\n<ol>\n<li>让固定定位的盒子left:50%，走到版心一半的位置</li>\n<li>让固定定位的盒子margin:left;版心宽度一半的距离</li>\n</ol>\n<h1 id=\"定位拓展\"><a href=\"#定位拓展\" class=\"headerlink\" title=\"定位拓展\"></a>定位拓展</h1><h2 id=\"「定位叠放次序」\"><a href=\"#「定位叠放次序」\" class=\"headerlink\" title=\"「定位叠放次序」\"></a>「定位叠放次序」</h2><p>多个盒子使用定位时，可能会出现重叠，可通过z-index属性来控制盒子前后次序（z轴）</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">选择器&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">z-index</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>属性值可以是正整数，负整数，或0。默认是auto，数值越大越靠上</li>\n<li>若属性值相同按书写顺序，后来居上</li>\n<li>数字不加单位</li>\n<li>只有定位的盒子才有z-index 属性</li>\n</ol>\n<h2 id=\"「定位盒子垂直居中」\"><a href=\"#「定位盒子垂直居中」\" class=\"headerlink\" title=\"「定位盒子垂直居中」\"></a>「定位盒子垂直居中」</h2><p>加了定位的盒子不能通过margin: 0 auto;水平居中，需要通过下面算法实现水平和垂直居中</p>\n<ol>\n<li>left: 50%；让盒子左侧移动到父级元素的水平中心位置</li>\n<li>margin-left: 100px; 让盒子向左移动自身宽度的一半</li>\n<li>垂直居中同理</li>\n</ol>\n<h1 id=\"定位特殊性\"><a href=\"#定位特殊性\" class=\"headerlink\" title=\"定位特殊性\"></a>定位特殊性</h1><h2 id=\"「绝对定位和固定定位和浮动类似」\"><a href=\"#「绝对定位和固定定位和浮动类似」\" class=\"headerlink\" title=\"「绝对定位和固定定位和浮动类似」\"></a>「绝对定位和固定定位和浮动类似」</h2><ol>\n<li>行内元素添加绝对或固定后，可以直接设置宽度和高度</li>\n<li>块级元素添加后，如不设置宽度和高度，默认为内容大小</li>\n</ol>\n<h2 id=\"「脱标盒子不会引发外边距塌陷」\"><a href=\"#「脱标盒子不会引发外边距塌陷」\" class=\"headerlink\" title=\"「脱标盒子不会引发外边距塌陷」\"></a>「脱标盒子不会引发外边距塌陷」</h2><p><strong>浮动元素</strong>，<strong>绝对定位</strong>，<strong>固定定位</strong>都不会触发外边距合并问题</p>\n<h2 id=\"「绝对固定定位会完全压住盒子」\"><a href=\"#「绝对固定定位会完全压住盒子」\" class=\"headerlink\" title=\"「绝对固定定位会完全压住盒子」\"></a>「绝对固定定位会完全压住盒子」</h2><ol>\n<li>浮动元素会压住标准流和盒子，但不会压住标准流盒子里面的文字图片</li>\n<li>绝对和固定会压住盒子所有内容</li>\n<li>浮动之所以不会压住文字，是因为浮动最初目的就是做文字环绕效果</li>\n</ol>\n"},{"title":"CSS基础","date":"2022-04-19T16:00:00.000Z","updated":"2022-07-03T16:00:00.000Z","keywords":null,"description":null,"top_img":"./img/bg14.jpg","cover":"./img/bg7.jpg","_content":"# CSS字体样式\n\n## **「1. font-size」**\n\n- font-size属性用于设置字号(字体大小)\n- `谷歌浏览器`默认的文字大小为16px\n- 不同浏览器可能默认显示的字号大小不一致，我们尽量给一个明确值大小，不要默认大小。一般给body指定整个页面文字的大小。\n\n```css\np { font-size:20px; }\n```\n\n**单位**\n\n相对长度单位、绝对长度单位\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207081954476.png)\n\n## **「2. font-family」**\n\nfont-family属性用于设置哪一种字体。\n\n```css\np { font-family:\"微软雅黑\";}\n```\n\n指定多个字体，如果浏览器不支持第一个字体就会尝试下一个直到找到合适的字体，如果都没有，以电脑默认字体为准。\n\n```css\np {font-family: Arial,\"Microsoft Yahei\", \"微软雅黑\";}\n```\n\nCSS Unicode字体\n\n- 在 CSS 中设置字体名称，直接写中文是可以的。但是在文件编码（GB2312、UTF-8 等）不匹配时会产生乱码的错误。\n- xp 系统不支持 类似微软雅黑的中文。\n- 解决方案：英文来替代。比如`font-family:\"Microsoft Yahei\"`。在 CSS 直接使用 Unicode 编码来写字体名称可以避免这些错误。使用 Unicode 写中文字体名称，浏览器是可以正确的解析的。\n\n```css\nfont-family: \"\\5FAE\\8F6F\\96C5\\9ED1\";   表示设置字体为“微软雅黑”。\n```\n\n## **「3. font-weight」**\n\n| 属性值  | 描述                                                        |\n| ------- | ----------------------------------------------------------- |\n| normal  | 默认值（不加粗的）                                          |\n| bold    | 定义粗体（加粗的）                                          |\n| 100~900 | 400 等同于 normal，而 700 等同于 bold  (数字表示粗细用的多) |\n\n## **「4. font-style」**\n\nfont-style属性用于定义字体风格，如设置斜体、倾斜或正常字体，其可用属性值如下：\n\n| 属性   | 作用                                                    |\n| ------ | ------------------------------------------------------- |\n| normal | 默认值，浏览器会显示标准的字体样式  font-style: normal; |\n| italic | 浏览器会显示斜体的字体样式。                            |\n\n## **「5. font:综合设置字体样式」**\n\n```css\n选择器 { font: font-style  font-weight  font-size/line-height  font-family;}\n```\n\n**注意：**\n\n- 使用font属性时，必须按上面语法格式中的顺序书写，不能更换顺序，各个属性以`空格`隔开\n- 其中不需要设置的属性可以省略(取默认值),但必须保留`font-size`和`font-family`属性，否则font属性将不起作用\n\n- \n\n## **「6. font总结」**\n\n| 属性        | 表示     | **注意点**                                                   |\n| ----------- | -------- | ------------------------------------------------------------ |\n| font-size   | 字号     | 我们通常用的单位是px 像素，一定要跟上单位                    |\n| font-family | 字体     | 实际工作中按照团队约定来写字体                               |\n| font-weight | 字体粗细 | 记住加粗是 700 或者 bold  不加粗 是 normal 或者  400  记住数字不要跟单位 |\n| font-style  | 字体样式 | 记住倾斜是 italic   不倾斜 是 normal  工作中我们最常用 normal |\n| font        | 字体连写 | 1. 字体连写是有顺序的  不能随意换位置 2. 其中字号 和 字体 必须同时出现 |\n\n# CSS外观属性\n\n## **「1. color」**\n\ncolor属性用于定义文本的颜色\n其取值方式有以下3种：\n\n实际工作中，用16进制的写法是最多的，且我们更喜欢简写方式比如#f0代表红色。\n\n| 表示           | 属性值                        |\n| -------------- | ----------------------------- |\n| 预定义的颜色值 | red，green，blue，pink        |\n| 十六进制       | \\#FF0000，#FF6600，#29D794    |\n| RGB代码        | rgb(255,0,0)或rgb(100%,0%,0%) |\n\n## **「2.text-align」**\n\ntext-align属性用于设置文本内容的水平对齐方式，相当于html中的align对齐属性。\n\n注意：是让盒子里面的文本内容水平居中， 而不是让盒子居中对齐\n\n其可用属性值如下：\n\n| 属性   | 解释             |\n| ------ | ---------------- |\n| left   | 左对齐（默认值） |\n| right  | 右对齐           |\n| center | 居中对齐         |\n\n## **「3. line-height」**\n\nline-height属性用于设置行间距，就是行与行之间的距离，即字符的垂直间距，一般称为行高。\n\n- line-height常用的属性值单位有三种，分别为像素px，相对值em和百分比%，实际工作中使用最多的是像素px\n\n```css\n一般情况下，行距比字号大7--8像素左右就可以了。\nline-height: 24px;\n```\n\n### 行高测量\n\n行高测量方法：\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207082015839.png)\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207082016559.png)\n\n行高我们利用最多的一个地方是：**可以让单行文本在盒子中垂直居中对齐**。\n\n**文字的行高等于盒子的高度**行高  =  上距离 +  内容高度  + 下距离\n上距离和下距离总是相等的，因此文字看上去是垂直居中的。\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207082017497.png)\n\n### 行高与高度的三种关系\n\n- 如果 行高 等 高度  文字会 垂直居中\n- 如果行高 大于 高度  文字会 偏下\n- 如果行高小于高度  文字会  偏上\n\n```css\n  /*line-height 要设置在font属性下面，否则无效，例如：*/\n  height: 80px;\n  text-align: center;\n  font: normal bold 30px \"宋体\";\n  line-height: 80px;\n```\n\n可以使用display:flex;布局方式让文字水平垂直居中\n\n```css\n  display: flex;\n  align-items: center;     /* 侧轴对齐方式*/\n  justify-content: center; /* 主轴对齐方式 */\n```\n\n## **「4. text-indent」**\n\ntext-indent属性用于设置首行文本的缩进\n\n- 其属性值可为不同单位的数值、em字符宽度的倍数、或相对于浏览器窗口宽度的百分比%，允许使用负值。\n- 建议使用em作为设置单位。\n- 1em 就是一个字的宽度。如果是汉字的段落，1em 就是一个汉字的宽度\n\n```css\np {\n      /*行间距*/\n      line-height: 25px;\n      /*首行缩进2个字  em  1个em 就是1个字的大小*/\n      text-indent: 2em;  \n }\n```\n\n## **「5. text-decoration」**\n\n文本的装饰text-decoration,通常我们用于给链接修改装饰效果\n\n| 值           | 描述                                                  |\n| ------------ | ----------------------------------------------------- |\n| none         | 默认。定义标准的文本。取消下划线（最常用）            |\n| underline    | 定义文本下的一条线。下划线 也是我们链接自带的（常用） |\n| overline     | 定义文本上的一条线。（不用）                          |\n| line-through | 定义穿过文本下的一条线。（不常用）                    |\n\n## **「6. CSS外观属性总结」**\n\n| 属性            | 表示     | 注意点                                                 |\n| --------------- | -------- | ------------------------------------------------------ |\n| color           | 颜色     | 我们通常用  十六进制  比如 而且是简写形式 #fff         |\n| line-height     | 行高     | 控制行与行之间的距离                                   |\n| text-align      | 水平对齐 | 可以设定文字水平的对齐方式                             |\n| text-indent     | 首行缩进 | 通常我们用于段落首行缩进2个字的距离  text-indent: 2em; |\n| text-decoration | 文本修饰 | 记住 添加 下划线  underline  取消下划线  none          |\n\n# 标签显示模式\n\n`标签显示模式`是标签以什么方式进行显示。HTML标签一般分为块标签和行内标签两种类型，它们也称为块元素和行内元素\n\n**标签显示模式转换 display**\n\n- 块转行内：display:inline;\n- 行内转块：display:block;\n- 块、行内元素转换为行内块：display: inline-block;\n\n## **「1. 块级元素(block-level)」**\n\n```html\n常见的块元素有<h1>~<h6>、<p>、<div>、<ul>、<ol>、<li>等，其中<div>标签是最典型的块元素。\n```\n\n### 块级元素的特点\n\n- 独占一行\n- 高度，宽度，外边距以及内边距都可以控制。\n- 宽度默认是容器(父级宽度)的100%\n- 是一个容器及盒子，里面可以放行内或者块级元素\n- **注意**：只有文字才能组成段落，因此p标签里面不能放块级元素，特别是p不能放div。同理，还有h1~h6，dt,它们都是文字类块级标签，里面不能放其他块级元素。\n\n## **「2. 行内元素(inline-level)」**\n\n```html\n有的地方也称为内联元素\n\n常见的行内元素有<a>、<strong>、<b>、<em>、<i>、<del>、<s>、<ins>、<u>、<span>等，其中<span>标签最典型的行内元素。\n```\n\n### 行内元素的特点\n\n1. 相邻行内元素在一行上，一行可以显示多个。\n2. 高度、宽度直接设置是无效的。\n3. 默认高度就是它本身内容的宽度。\n4. 行内元素只能容纳文本或其他行内元素。\n\n###### 注意\n\n- 链接里面不能再放链接\n- 特殊情况a里面可以放块级元素，但是给a转换一下块级模式最安全。\n\n## **「3. 行内块元素(inline-block)」**\n\n```html\n在行内元素中有几个特殊的标签——<img>、<input >、<td>，可以对它们设置宽高和对齐属性，有些资料可能会称它们为行内块元素。\n```\n\n### **行内块元素的特点**\n\n1. 和相邻行内元素(行内块)在一行上，但是之间会有空白风险。一行可以显示多个\n2. 默认宽度就是它本身内容的宽度。\n3. 高度，行高，外边距以及内边距都可以控制。\n\n\n\n## 三种模式总结\n\n| 元素模式   | 元素排列                 | 设置样式         | 默认宽度         | 包含                   |\n| ---------- | ------------------------ | ---------------- | ---------------- | ---------------------- |\n| 块级元素   | 一行只能放一个块级元素   | 可以设置宽度高度 | 容器的100%       | 容器级可以包含任何标签 |\n| 行内元素   | 一行可以放多个行内元素   | 不可设置宽度高度 | 它本身内容的宽度 | 容纳文本或其他行内元素 |\n| 行内块元素 | 一行可以放多个行内块元素 | 可以设置宽度高度 | 它本身内容的宽度 |                        |\n\n# CSS背景(background)\n\n1. \n\n## **「1. 背景颜色」**\n\n```css\nbackground-color: 颜色值;   默认的值是 transparent  透明的\n```\n\n## **「2. 背景图片(image)」**\n\n```css\n语法：\nbackground-image : none | url (url) ;\n例如:\nbackground-image: url(images/1.png);\n```\n\n## **「3. 背景平铺（repeat）」**\n\n```css\nbackground-repeat : repeat | no-repeat | repeat-x | repeat-y \n```\n\n| 参数      | 作用                                 |\n| --------- | ------------------------------------ |\n| repeat    | 背景图像在纵向和横向上平铺（默认的） |\n| no-repeat | 背景图像不平铺                       |\n| repeat-x  | 背景图像在横向上平铺                 |\n| repeat-y  | 背景图像在纵向平铺                   |\n\n## **「4. 背景位置(position)」**\n\n```css\nbackground-position : length || length\nbackground-position : position || position \n```\n\n| 参数     | 值                                                           |\n| -------- | ------------------------------------------------------------ |\n| length   | 百分数 \\| 由浮点数字和单位标识符组成的长度值                 |\n| position | top \\| center \\| bottom \\| left \\| center \\| right  方位名词 |\n\n**注意：**\n\n- 必须先指定background-image属性\n- position 后面是x坐标和y坐标。可以使用方位名词或者 精确单位。\n- 如果指定两个值，两个值都是方位名字，则两个值前后顺序无关，比如left  top和top  left效果一致\n- 如果只指定了一个方位名词，另一个值默认居中对齐。\n- 如果position 后面是精确坐标， 那么第一个，肯定是 x 第二个一定是y\n- 如果只指定一个数值,那该数值一定是x坐标，另一个默认垂直居中\n- 如果指定的两个值是 精确单位和方位名字混合使用，则第一个值是x坐标，第二个值是y坐标\n\n### 背景简写：\n\n- background：属性的值的书写顺序官方没有强制的标准。为了可读性，建议如下写：\n- background: 背景颜色 背景图片地址 背景平铺 背景滚动 背景位置;\n\n```css\n/* 有背景图片背景颜色可以不用写*/\nbackground: transparent url(image.jpg) repeat-y  scroll center top ;\n```\n\n## **「5. 背景半透明(CSS3)」**\n\n```css\nbackground: rgba(0, 0, 0, 0.3);\nbackground: rgba(0, 0, 0, .3);\n```\n\n- 等同于background-color: rgba(0, 0, 0, .3)\n- 最后一个参数是alpha 透明度 取值范围 0~1之间\n- 我们习惯把0.3 的 0 省略掉 这样写 background: rgba(0, 0, 0, .3);\n- 注意：背景半透明是指盒子背景半透明，盒子里面的内容不受影响\n- 低于IE 9的版本不支持\n\n### 盒子半透明 opacity\n\n设置opacity元素的所有后代元素会随着一起具有透明性，一般用于调整图片或者模块的整体不透明度\n\n```css\nopacity: .2;\n```\n\n## **「6. 背景总结」**\n\n| 属性                  | 作用             | 值                                                           |\n| --------------------- | ---------------- | ------------------------------------------------------------ |\n| background-color      | 背景颜色         | 预定义的颜色值/十六进制/RGB代码                              |\n| background-image      | 背景图片         | url(图片路径)                                                |\n| background-repeat     | 是否平铺         | repeat/no-repeat/repeat-x/repeat-y                           |\n| background-position   | 背景位置         | length/position   分别是x  和 y坐标， 切记 如果有 精确数值单位，则必须按照先X 后Y 的写法 |\n| background-attachment | 背景固定还是滚动 | scroll/fixed                                                 |\n| 背景简写              | 更简单           | 背景颜色 背景图片地址 背景平铺 背景滚动 背景位置;  他们没有顺序 |\n| 背景透明              | 让盒子半透明     | background: rgba(0,0,0,0.3);  后面必须是 4个值               |\n\n\n\n","source":"_posts/前端/CSS属性.md","raw":"---\ntitle: CSS基础\ndate: 2022-04-20\nupdated: 2022-07-04\ntags:\n  - 小白的前端之路\n  - CSS基础\ncategories: 前端开发\nkeywords: \ndescription: \ntop_img: ./img/bg14.jpg\ncover: ./img/bg7.jpg\n\n---\n# CSS字体样式\n\n## **「1. font-size」**\n\n- font-size属性用于设置字号(字体大小)\n- `谷歌浏览器`默认的文字大小为16px\n- 不同浏览器可能默认显示的字号大小不一致，我们尽量给一个明确值大小，不要默认大小。一般给body指定整个页面文字的大小。\n\n```css\np { font-size:20px; }\n```\n\n**单位**\n\n相对长度单位、绝对长度单位\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207081954476.png)\n\n## **「2. font-family」**\n\nfont-family属性用于设置哪一种字体。\n\n```css\np { font-family:\"微软雅黑\";}\n```\n\n指定多个字体，如果浏览器不支持第一个字体就会尝试下一个直到找到合适的字体，如果都没有，以电脑默认字体为准。\n\n```css\np {font-family: Arial,\"Microsoft Yahei\", \"微软雅黑\";}\n```\n\nCSS Unicode字体\n\n- 在 CSS 中设置字体名称，直接写中文是可以的。但是在文件编码（GB2312、UTF-8 等）不匹配时会产生乱码的错误。\n- xp 系统不支持 类似微软雅黑的中文。\n- 解决方案：英文来替代。比如`font-family:\"Microsoft Yahei\"`。在 CSS 直接使用 Unicode 编码来写字体名称可以避免这些错误。使用 Unicode 写中文字体名称，浏览器是可以正确的解析的。\n\n```css\nfont-family: \"\\5FAE\\8F6F\\96C5\\9ED1\";   表示设置字体为“微软雅黑”。\n```\n\n## **「3. font-weight」**\n\n| 属性值  | 描述                                                        |\n| ------- | ----------------------------------------------------------- |\n| normal  | 默认值（不加粗的）                                          |\n| bold    | 定义粗体（加粗的）                                          |\n| 100~900 | 400 等同于 normal，而 700 等同于 bold  (数字表示粗细用的多) |\n\n## **「4. font-style」**\n\nfont-style属性用于定义字体风格，如设置斜体、倾斜或正常字体，其可用属性值如下：\n\n| 属性   | 作用                                                    |\n| ------ | ------------------------------------------------------- |\n| normal | 默认值，浏览器会显示标准的字体样式  font-style: normal; |\n| italic | 浏览器会显示斜体的字体样式。                            |\n\n## **「5. font:综合设置字体样式」**\n\n```css\n选择器 { font: font-style  font-weight  font-size/line-height  font-family;}\n```\n\n**注意：**\n\n- 使用font属性时，必须按上面语法格式中的顺序书写，不能更换顺序，各个属性以`空格`隔开\n- 其中不需要设置的属性可以省略(取默认值),但必须保留`font-size`和`font-family`属性，否则font属性将不起作用\n\n- \n\n## **「6. font总结」**\n\n| 属性        | 表示     | **注意点**                                                   |\n| ----------- | -------- | ------------------------------------------------------------ |\n| font-size   | 字号     | 我们通常用的单位是px 像素，一定要跟上单位                    |\n| font-family | 字体     | 实际工作中按照团队约定来写字体                               |\n| font-weight | 字体粗细 | 记住加粗是 700 或者 bold  不加粗 是 normal 或者  400  记住数字不要跟单位 |\n| font-style  | 字体样式 | 记住倾斜是 italic   不倾斜 是 normal  工作中我们最常用 normal |\n| font        | 字体连写 | 1. 字体连写是有顺序的  不能随意换位置 2. 其中字号 和 字体 必须同时出现 |\n\n# CSS外观属性\n\n## **「1. color」**\n\ncolor属性用于定义文本的颜色\n其取值方式有以下3种：\n\n实际工作中，用16进制的写法是最多的，且我们更喜欢简写方式比如#f0代表红色。\n\n| 表示           | 属性值                        |\n| -------------- | ----------------------------- |\n| 预定义的颜色值 | red，green，blue，pink        |\n| 十六进制       | \\#FF0000，#FF6600，#29D794    |\n| RGB代码        | rgb(255,0,0)或rgb(100%,0%,0%) |\n\n## **「2.text-align」**\n\ntext-align属性用于设置文本内容的水平对齐方式，相当于html中的align对齐属性。\n\n注意：是让盒子里面的文本内容水平居中， 而不是让盒子居中对齐\n\n其可用属性值如下：\n\n| 属性   | 解释             |\n| ------ | ---------------- |\n| left   | 左对齐（默认值） |\n| right  | 右对齐           |\n| center | 居中对齐         |\n\n## **「3. line-height」**\n\nline-height属性用于设置行间距，就是行与行之间的距离，即字符的垂直间距，一般称为行高。\n\n- line-height常用的属性值单位有三种，分别为像素px，相对值em和百分比%，实际工作中使用最多的是像素px\n\n```css\n一般情况下，行距比字号大7--8像素左右就可以了。\nline-height: 24px;\n```\n\n### 行高测量\n\n行高测量方法：\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207082015839.png)\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207082016559.png)\n\n行高我们利用最多的一个地方是：**可以让单行文本在盒子中垂直居中对齐**。\n\n**文字的行高等于盒子的高度**行高  =  上距离 +  内容高度  + 下距离\n上距离和下距离总是相等的，因此文字看上去是垂直居中的。\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207082017497.png)\n\n### 行高与高度的三种关系\n\n- 如果 行高 等 高度  文字会 垂直居中\n- 如果行高 大于 高度  文字会 偏下\n- 如果行高小于高度  文字会  偏上\n\n```css\n  /*line-height 要设置在font属性下面，否则无效，例如：*/\n  height: 80px;\n  text-align: center;\n  font: normal bold 30px \"宋体\";\n  line-height: 80px;\n```\n\n可以使用display:flex;布局方式让文字水平垂直居中\n\n```css\n  display: flex;\n  align-items: center;     /* 侧轴对齐方式*/\n  justify-content: center; /* 主轴对齐方式 */\n```\n\n## **「4. text-indent」**\n\ntext-indent属性用于设置首行文本的缩进\n\n- 其属性值可为不同单位的数值、em字符宽度的倍数、或相对于浏览器窗口宽度的百分比%，允许使用负值。\n- 建议使用em作为设置单位。\n- 1em 就是一个字的宽度。如果是汉字的段落，1em 就是一个汉字的宽度\n\n```css\np {\n      /*行间距*/\n      line-height: 25px;\n      /*首行缩进2个字  em  1个em 就是1个字的大小*/\n      text-indent: 2em;  \n }\n```\n\n## **「5. text-decoration」**\n\n文本的装饰text-decoration,通常我们用于给链接修改装饰效果\n\n| 值           | 描述                                                  |\n| ------------ | ----------------------------------------------------- |\n| none         | 默认。定义标准的文本。取消下划线（最常用）            |\n| underline    | 定义文本下的一条线。下划线 也是我们链接自带的（常用） |\n| overline     | 定义文本上的一条线。（不用）                          |\n| line-through | 定义穿过文本下的一条线。（不常用）                    |\n\n## **「6. CSS外观属性总结」**\n\n| 属性            | 表示     | 注意点                                                 |\n| --------------- | -------- | ------------------------------------------------------ |\n| color           | 颜色     | 我们通常用  十六进制  比如 而且是简写形式 #fff         |\n| line-height     | 行高     | 控制行与行之间的距离                                   |\n| text-align      | 水平对齐 | 可以设定文字水平的对齐方式                             |\n| text-indent     | 首行缩进 | 通常我们用于段落首行缩进2个字的距离  text-indent: 2em; |\n| text-decoration | 文本修饰 | 记住 添加 下划线  underline  取消下划线  none          |\n\n# 标签显示模式\n\n`标签显示模式`是标签以什么方式进行显示。HTML标签一般分为块标签和行内标签两种类型，它们也称为块元素和行内元素\n\n**标签显示模式转换 display**\n\n- 块转行内：display:inline;\n- 行内转块：display:block;\n- 块、行内元素转换为行内块：display: inline-block;\n\n## **「1. 块级元素(block-level)」**\n\n```html\n常见的块元素有<h1>~<h6>、<p>、<div>、<ul>、<ol>、<li>等，其中<div>标签是最典型的块元素。\n```\n\n### 块级元素的特点\n\n- 独占一行\n- 高度，宽度，外边距以及内边距都可以控制。\n- 宽度默认是容器(父级宽度)的100%\n- 是一个容器及盒子，里面可以放行内或者块级元素\n- **注意**：只有文字才能组成段落，因此p标签里面不能放块级元素，特别是p不能放div。同理，还有h1~h6，dt,它们都是文字类块级标签，里面不能放其他块级元素。\n\n## **「2. 行内元素(inline-level)」**\n\n```html\n有的地方也称为内联元素\n\n常见的行内元素有<a>、<strong>、<b>、<em>、<i>、<del>、<s>、<ins>、<u>、<span>等，其中<span>标签最典型的行内元素。\n```\n\n### 行内元素的特点\n\n1. 相邻行内元素在一行上，一行可以显示多个。\n2. 高度、宽度直接设置是无效的。\n3. 默认高度就是它本身内容的宽度。\n4. 行内元素只能容纳文本或其他行内元素。\n\n###### 注意\n\n- 链接里面不能再放链接\n- 特殊情况a里面可以放块级元素，但是给a转换一下块级模式最安全。\n\n## **「3. 行内块元素(inline-block)」**\n\n```html\n在行内元素中有几个特殊的标签——<img>、<input >、<td>，可以对它们设置宽高和对齐属性，有些资料可能会称它们为行内块元素。\n```\n\n### **行内块元素的特点**\n\n1. 和相邻行内元素(行内块)在一行上，但是之间会有空白风险。一行可以显示多个\n2. 默认宽度就是它本身内容的宽度。\n3. 高度，行高，外边距以及内边距都可以控制。\n\n\n\n## 三种模式总结\n\n| 元素模式   | 元素排列                 | 设置样式         | 默认宽度         | 包含                   |\n| ---------- | ------------------------ | ---------------- | ---------------- | ---------------------- |\n| 块级元素   | 一行只能放一个块级元素   | 可以设置宽度高度 | 容器的100%       | 容器级可以包含任何标签 |\n| 行内元素   | 一行可以放多个行内元素   | 不可设置宽度高度 | 它本身内容的宽度 | 容纳文本或其他行内元素 |\n| 行内块元素 | 一行可以放多个行内块元素 | 可以设置宽度高度 | 它本身内容的宽度 |                        |\n\n# CSS背景(background)\n\n1. \n\n## **「1. 背景颜色」**\n\n```css\nbackground-color: 颜色值;   默认的值是 transparent  透明的\n```\n\n## **「2. 背景图片(image)」**\n\n```css\n语法：\nbackground-image : none | url (url) ;\n例如:\nbackground-image: url(images/1.png);\n```\n\n## **「3. 背景平铺（repeat）」**\n\n```css\nbackground-repeat : repeat | no-repeat | repeat-x | repeat-y \n```\n\n| 参数      | 作用                                 |\n| --------- | ------------------------------------ |\n| repeat    | 背景图像在纵向和横向上平铺（默认的） |\n| no-repeat | 背景图像不平铺                       |\n| repeat-x  | 背景图像在横向上平铺                 |\n| repeat-y  | 背景图像在纵向平铺                   |\n\n## **「4. 背景位置(position)」**\n\n```css\nbackground-position : length || length\nbackground-position : position || position \n```\n\n| 参数     | 值                                                           |\n| -------- | ------------------------------------------------------------ |\n| length   | 百分数 \\| 由浮点数字和单位标识符组成的长度值                 |\n| position | top \\| center \\| bottom \\| left \\| center \\| right  方位名词 |\n\n**注意：**\n\n- 必须先指定background-image属性\n- position 后面是x坐标和y坐标。可以使用方位名词或者 精确单位。\n- 如果指定两个值，两个值都是方位名字，则两个值前后顺序无关，比如left  top和top  left效果一致\n- 如果只指定了一个方位名词，另一个值默认居中对齐。\n- 如果position 后面是精确坐标， 那么第一个，肯定是 x 第二个一定是y\n- 如果只指定一个数值,那该数值一定是x坐标，另一个默认垂直居中\n- 如果指定的两个值是 精确单位和方位名字混合使用，则第一个值是x坐标，第二个值是y坐标\n\n### 背景简写：\n\n- background：属性的值的书写顺序官方没有强制的标准。为了可读性，建议如下写：\n- background: 背景颜色 背景图片地址 背景平铺 背景滚动 背景位置;\n\n```css\n/* 有背景图片背景颜色可以不用写*/\nbackground: transparent url(image.jpg) repeat-y  scroll center top ;\n```\n\n## **「5. 背景半透明(CSS3)」**\n\n```css\nbackground: rgba(0, 0, 0, 0.3);\nbackground: rgba(0, 0, 0, .3);\n```\n\n- 等同于background-color: rgba(0, 0, 0, .3)\n- 最后一个参数是alpha 透明度 取值范围 0~1之间\n- 我们习惯把0.3 的 0 省略掉 这样写 background: rgba(0, 0, 0, .3);\n- 注意：背景半透明是指盒子背景半透明，盒子里面的内容不受影响\n- 低于IE 9的版本不支持\n\n### 盒子半透明 opacity\n\n设置opacity元素的所有后代元素会随着一起具有透明性，一般用于调整图片或者模块的整体不透明度\n\n```css\nopacity: .2;\n```\n\n## **「6. 背景总结」**\n\n| 属性                  | 作用             | 值                                                           |\n| --------------------- | ---------------- | ------------------------------------------------------------ |\n| background-color      | 背景颜色         | 预定义的颜色值/十六进制/RGB代码                              |\n| background-image      | 背景图片         | url(图片路径)                                                |\n| background-repeat     | 是否平铺         | repeat/no-repeat/repeat-x/repeat-y                           |\n| background-position   | 背景位置         | length/position   分别是x  和 y坐标， 切记 如果有 精确数值单位，则必须按照先X 后Y 的写法 |\n| background-attachment | 背景固定还是滚动 | scroll/fixed                                                 |\n| 背景简写              | 更简单           | 背景颜色 背景图片地址 背景平铺 背景滚动 背景位置;  他们没有顺序 |\n| 背景透明              | 让盒子半透明     | background: rgba(0,0,0,0.3);  后面必须是 4个值               |\n\n\n\n","slug":"前端/CSS属性","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cl5db79jy000cywtug3u614gk","content":"<h1 id=\"CSS字体样式\"><a href=\"#CSS字体样式\" class=\"headerlink\" title=\"CSS字体样式\"></a>CSS字体样式</h1><h2 id=\"「1-font-size」\"><a href=\"#「1-font-size」\" class=\"headerlink\" title=\"「1. font-size」\"></a><strong>「1. font-size」</strong></h2><ul>\n<li>font-size属性用于设置字号(字体大小)</li>\n<li><code>谷歌浏览器</code>默认的文字大小为16px</li>\n<li>不同浏览器可能默认显示的字号大小不一致，我们尽量给一个明确值大小，不要默认大小。一般给body指定整个页面文字的大小。</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">p</span> &#123; <span class=\"attribute\">font-size</span>:<span class=\"number\">20px</span>; &#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>单位</strong></p>\n<p>相对长度单位、绝对长度单位</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207081954476.png\"></p>\n<h2 id=\"「2-font-family」\"><a href=\"#「2-font-family」\" class=\"headerlink\" title=\"「2. font-family」\"></a><strong>「2. font-family」</strong></h2><p>font-family属性用于设置哪一种字体。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">p</span> &#123; <span class=\"attribute\">font-family</span>:<span class=\"string\">&quot;微软雅黑&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>指定多个字体，如果浏览器不支持第一个字体就会尝试下一个直到找到合适的字体，如果都没有，以电脑默认字体为准。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">p</span> &#123;<span class=\"attribute\">font-family</span>: Arial,<span class=\"string\">&quot;Microsoft Yahei&quot;</span>, <span class=\"string\">&quot;微软雅黑&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>CSS Unicode字体</p>\n<ul>\n<li>在 CSS 中设置字体名称，直接写中文是可以的。但是在文件编码（GB2312、UTF-8 等）不匹配时会产生乱码的错误。</li>\n<li>xp 系统不支持 类似微软雅黑的中文。</li>\n<li>解决方案：英文来替代。比如<code>font-family:&quot;Microsoft Yahei&quot;</code>。在 CSS 直接使用 Unicode 编码来写字体名称可以避免这些错误。使用 Unicode 写中文字体名称，浏览器是可以正确的解析的。</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">font-family</span>: <span class=\"string\">&quot;\\5FAE\\8F6F\\96C5\\9ED1&quot;</span>;   表示设置字体为“微软雅黑”。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「3-font-weight」\"><a href=\"#「3-font-weight」\" class=\"headerlink\" title=\"「3. font-weight」\"></a><strong>「3. font-weight」</strong></h2><table>\n<thead>\n<tr>\n<th>属性值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>normal</td>\n<td>默认值（不加粗的）</td>\n</tr>\n<tr>\n<td>bold</td>\n<td>定义粗体（加粗的）</td>\n</tr>\n<tr>\n<td>100~900</td>\n<td>400 等同于 normal，而 700 等同于 bold  (数字表示粗细用的多)</td>\n</tr>\n</tbody></table>\n<h2 id=\"「4-font-style」\"><a href=\"#「4-font-style」\" class=\"headerlink\" title=\"「4. font-style」\"></a><strong>「4. font-style」</strong></h2><p>font-style属性用于定义字体风格，如设置斜体、倾斜或正常字体，其可用属性值如下：</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>normal</td>\n<td>默认值，浏览器会显示标准的字体样式  font-style: normal;</td>\n</tr>\n<tr>\n<td>italic</td>\n<td>浏览器会显示斜体的字体样式。</td>\n</tr>\n</tbody></table>\n<h2 id=\"「5-font-综合设置字体样式」\"><a href=\"#「5-font-综合设置字体样式」\" class=\"headerlink\" title=\"「5. font:综合设置字体样式」\"></a><strong>「5. font:综合设置字体样式」</strong></h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">选择器 &#123; <span class=\"attribute\">font</span>: font-style  font-weight  font-size/line-height  font-family;&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：</strong></p>\n<ul>\n<li><p>使用font属性时，必须按上面语法格式中的顺序书写，不能更换顺序，各个属性以<code>空格</code>隔开</p>\n</li>\n<li><p>其中不需要设置的属性可以省略(取默认值),但必须保留<code>font-size</code>和<code>font-family</code>属性，否则font属性将不起作用</p>\n</li>\n<li></li>\n</ul>\n<h2 id=\"「6-font总结」\"><a href=\"#「6-font总结」\" class=\"headerlink\" title=\"「6. font总结」\"></a><strong>「6. font总结」</strong></h2><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>表示</th>\n<th><strong>注意点</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>font-size</td>\n<td>字号</td>\n<td>我们通常用的单位是px 像素，一定要跟上单位</td>\n</tr>\n<tr>\n<td>font-family</td>\n<td>字体</td>\n<td>实际工作中按照团队约定来写字体</td>\n</tr>\n<tr>\n<td>font-weight</td>\n<td>字体粗细</td>\n<td>记住加粗是 700 或者 bold  不加粗 是 normal 或者  400  记住数字不要跟单位</td>\n</tr>\n<tr>\n<td>font-style</td>\n<td>字体样式</td>\n<td>记住倾斜是 italic   不倾斜 是 normal  工作中我们最常用 normal</td>\n</tr>\n<tr>\n<td>font</td>\n<td>字体连写</td>\n<td>1. 字体连写是有顺序的  不能随意换位置 2. 其中字号 和 字体 必须同时出现</td>\n</tr>\n</tbody></table>\n<h1 id=\"CSS外观属性\"><a href=\"#CSS外观属性\" class=\"headerlink\" title=\"CSS外观属性\"></a>CSS外观属性</h1><h2 id=\"「1-color」\"><a href=\"#「1-color」\" class=\"headerlink\" title=\"「1. color」\"></a><strong>「1. color」</strong></h2><p>color属性用于定义文本的颜色<br>其取值方式有以下3种：</p>\n<p>实际工作中，用16进制的写法是最多的，且我们更喜欢简写方式比如#f0代表红色。</p>\n<table>\n<thead>\n<tr>\n<th>表示</th>\n<th>属性值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>预定义的颜色值</td>\n<td>red，green，blue，pink</td>\n</tr>\n<tr>\n<td>十六进制</td>\n<td>#FF0000，#FF6600，#29D794</td>\n</tr>\n<tr>\n<td>RGB代码</td>\n<td>rgb(255,0,0)或rgb(100%,0%,0%)</td>\n</tr>\n</tbody></table>\n<h2 id=\"「2-text-align」\"><a href=\"#「2-text-align」\" class=\"headerlink\" title=\"「2.text-align」\"></a><strong>「2.text-align」</strong></h2><p>text-align属性用于设置文本内容的水平对齐方式，相当于html中的align对齐属性。</p>\n<p>注意：是让盒子里面的文本内容水平居中， 而不是让盒子居中对齐</p>\n<p>其可用属性值如下：</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>left</td>\n<td>左对齐（默认值）</td>\n</tr>\n<tr>\n<td>right</td>\n<td>右对齐</td>\n</tr>\n<tr>\n<td>center</td>\n<td>居中对齐</td>\n</tr>\n</tbody></table>\n<h2 id=\"「3-line-height」\"><a href=\"#「3-line-height」\" class=\"headerlink\" title=\"「3. line-height」\"></a><strong>「3. line-height」</strong></h2><p>line-height属性用于设置行间距，就是行与行之间的距离，即字符的垂直间距，一般称为行高。</p>\n<ul>\n<li>line-height常用的属性值单位有三种，分别为像素px，相对值em和百分比%，实际工作中使用最多的是像素px</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一般情况下，行距比字号大<span class=\"number\">7</span>--<span class=\"number\">8</span>像素左右就可以了。</span><br><span class=\"line\"><span class=\"attribute\">line-height</span>: <span class=\"number\">24px</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"行高测量\"><a href=\"#行高测量\" class=\"headerlink\" title=\"行高测量\"></a>行高测量</h3><p>行高测量方法：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207082015839.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207082016559.png\"></p>\n<p>行高我们利用最多的一个地方是：<strong>可以让单行文本在盒子中垂直居中对齐</strong>。</p>\n<p><strong>文字的行高等于盒子的高度</strong>行高  =  上距离 +  内容高度  + 下距离<br>上距离和下距离总是相等的，因此文字看上去是垂直居中的。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207082017497.png\"></p>\n<h3 id=\"行高与高度的三种关系\"><a href=\"#行高与高度的三种关系\" class=\"headerlink\" title=\"行高与高度的三种关系\"></a>行高与高度的三种关系</h3><ul>\n<li>如果 行高 等 高度  文字会 垂直居中</li>\n<li>如果行高 大于 高度  文字会 偏下</li>\n<li>如果行高小于高度  文字会  偏上</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*line-height 要设置在font属性下面，否则无效，例如：*/</span></span><br><span class=\"line\"><span class=\"attribute\">height</span>: <span class=\"number\">80px</span>;</span><br><span class=\"line\"><span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\"><span class=\"attribute\">font</span>: normal bold <span class=\"number\">30px</span> <span class=\"string\">&quot;宋体&quot;</span>;</span><br><span class=\"line\"><span class=\"attribute\">line-height</span>: <span class=\"number\">80px</span>;</span><br></pre></td></tr></table></figure>\n\n<p>可以使用display:flex;布局方式让文字水平垂直居中</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\"><span class=\"attribute\">align-items</span>: center;     <span class=\"comment\">/* 侧轴对齐方式*/</span></span><br><span class=\"line\"><span class=\"attribute\">justify-content</span>: center; <span class=\"comment\">/* 主轴对齐方式 */</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「4-text-indent」\"><a href=\"#「4-text-indent」\" class=\"headerlink\" title=\"「4. text-indent」\"></a><strong>「4. text-indent」</strong></h2><p>text-indent属性用于设置首行文本的缩进</p>\n<ul>\n<li>其属性值可为不同单位的数值、em字符宽度的倍数、或相对于浏览器窗口宽度的百分比%，允许使用负值。</li>\n<li>建议使用em作为设置单位。</li>\n<li>1em 就是一个字的宽度。如果是汉字的段落，1em 就是一个汉字的宽度</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">/*行间距*/</span></span><br><span class=\"line\">      <span class=\"attribute\">line-height</span>: <span class=\"number\">25px</span>;</span><br><span class=\"line\">      <span class=\"comment\">/*首行缩进2个字  em  1个em 就是1个字的大小*/</span></span><br><span class=\"line\">      <span class=\"attribute\">text-indent</span>: <span class=\"number\">2em</span>;  </span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「5-text-decoration」\"><a href=\"#「5-text-decoration」\" class=\"headerlink\" title=\"「5. text-decoration」\"></a><strong>「5. text-decoration」</strong></h2><p>文本的装饰text-decoration,通常我们用于给链接修改装饰效果</p>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>none</td>\n<td>默认。定义标准的文本。取消下划线（最常用）</td>\n</tr>\n<tr>\n<td>underline</td>\n<td>定义文本下的一条线。下划线 也是我们链接自带的（常用）</td>\n</tr>\n<tr>\n<td>overline</td>\n<td>定义文本上的一条线。（不用）</td>\n</tr>\n<tr>\n<td>line-through</td>\n<td>定义穿过文本下的一条线。（不常用）</td>\n</tr>\n</tbody></table>\n<h2 id=\"「6-CSS外观属性总结」\"><a href=\"#「6-CSS外观属性总结」\" class=\"headerlink\" title=\"「6. CSS外观属性总结」\"></a><strong>「6. CSS外观属性总结」</strong></h2><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>表示</th>\n<th>注意点</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>color</td>\n<td>颜色</td>\n<td>我们通常用  十六进制  比如 而且是简写形式 #fff</td>\n</tr>\n<tr>\n<td>line-height</td>\n<td>行高</td>\n<td>控制行与行之间的距离</td>\n</tr>\n<tr>\n<td>text-align</td>\n<td>水平对齐</td>\n<td>可以设定文字水平的对齐方式</td>\n</tr>\n<tr>\n<td>text-indent</td>\n<td>首行缩进</td>\n<td>通常我们用于段落首行缩进2个字的距离  text-indent: 2em;</td>\n</tr>\n<tr>\n<td>text-decoration</td>\n<td>文本修饰</td>\n<td>记住 添加 下划线  underline  取消下划线  none</td>\n</tr>\n</tbody></table>\n<h1 id=\"标签显示模式\"><a href=\"#标签显示模式\" class=\"headerlink\" title=\"标签显示模式\"></a>标签显示模式</h1><p><code>标签显示模式</code>是标签以什么方式进行显示。HTML标签一般分为块标签和行内标签两种类型，它们也称为块元素和行内元素</p>\n<p><strong>标签显示模式转换 display</strong></p>\n<ul>\n<li>块转行内：display:inline;</li>\n<li>行内转块：display:block;</li>\n<li>块、行内元素转换为行内块：display: inline-block;</li>\n</ul>\n<h2 id=\"「1-块级元素-block-level-」\"><a href=\"#「1-块级元素-block-level-」\" class=\"headerlink\" title=\"「1. 块级元素(block-level)」\"></a><strong>「1. 块级元素(block-level)」</strong></h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">常见的块元素有<span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>~<span class=\"tag\">&lt;<span class=\"name\">h6</span>&gt;</span>、<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>、<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>、<span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span>、<span class=\"tag\">&lt;<span class=\"name\">ol</span>&gt;</span>、<span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>等，其中<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>标签是最典型的块元素。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"块级元素的特点\"><a href=\"#块级元素的特点\" class=\"headerlink\" title=\"块级元素的特点\"></a>块级元素的特点</h3><ul>\n<li>独占一行</li>\n<li>高度，宽度，外边距以及内边距都可以控制。</li>\n<li>宽度默认是容器(父级宽度)的100%</li>\n<li>是一个容器及盒子，里面可以放行内或者块级元素</li>\n<li><strong>注意</strong>：只有文字才能组成段落，因此p标签里面不能放块级元素，特别是p不能放div。同理，还有h1~h6，dt,它们都是文字类块级标签，里面不能放其他块级元素。</li>\n</ul>\n<h2 id=\"「2-行内元素-inline-level-」\"><a href=\"#「2-行内元素-inline-level-」\" class=\"headerlink\" title=\"「2. 行内元素(inline-level)」\"></a><strong>「2. 行内元素(inline-level)」</strong></h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">有的地方也称为内联元素</span><br><span class=\"line\"></span><br><span class=\"line\">常见的行内元素有<span class=\"tag\">&lt;<span class=\"name\">a</span>&gt;</span>、<span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>、<span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>、<span class=\"tag\">&lt;<span class=\"name\">em</span>&gt;</span>、<span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span>、<span class=\"tag\">&lt;<span class=\"name\">del</span>&gt;</span>、<span class=\"tag\">&lt;<span class=\"name\">s</span>&gt;</span>、<span class=\"tag\">&lt;<span class=\"name\">ins</span>&gt;</span>、<span class=\"tag\">&lt;<span class=\"name\">u</span>&gt;</span>、<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>等，其中<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>标签最典型的行内元素。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"行内元素的特点\"><a href=\"#行内元素的特点\" class=\"headerlink\" title=\"行内元素的特点\"></a>行内元素的特点</h3><ol>\n<li>相邻行内元素在一行上，一行可以显示多个。</li>\n<li>高度、宽度直接设置是无效的。</li>\n<li>默认高度就是它本身内容的宽度。</li>\n<li>行内元素只能容纳文本或其他行内元素。</li>\n</ol>\n<h6 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h6><ul>\n<li>链接里面不能再放链接</li>\n<li>特殊情况a里面可以放块级元素，但是给a转换一下块级模式最安全。</li>\n</ul>\n<h2 id=\"「3-行内块元素-inline-block-」\"><a href=\"#「3-行内块元素-inline-block-」\" class=\"headerlink\" title=\"「3. 行内块元素(inline-block)」\"></a><strong>「3. 行内块元素(inline-block)」</strong></h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在行内元素中有几个特殊的标签——<span class=\"tag\">&lt;<span class=\"name\">img</span>&gt;</span>、<span class=\"tag\">&lt;<span class=\"name\">input</span> &gt;</span>、<span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>，可以对它们设置宽高和对齐属性，有些资料可能会称它们为行内块元素。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"行内块元素的特点\"><a href=\"#行内块元素的特点\" class=\"headerlink\" title=\"行内块元素的特点\"></a><strong>行内块元素的特点</strong></h3><ol>\n<li>和相邻行内元素(行内块)在一行上，但是之间会有空白风险。一行可以显示多个</li>\n<li>默认宽度就是它本身内容的宽度。</li>\n<li>高度，行高，外边距以及内边距都可以控制。</li>\n</ol>\n<h2 id=\"三种模式总结\"><a href=\"#三种模式总结\" class=\"headerlink\" title=\"三种模式总结\"></a>三种模式总结</h2><table>\n<thead>\n<tr>\n<th>元素模式</th>\n<th>元素排列</th>\n<th>设置样式</th>\n<th>默认宽度</th>\n<th>包含</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>块级元素</td>\n<td>一行只能放一个块级元素</td>\n<td>可以设置宽度高度</td>\n<td>容器的100%</td>\n<td>容器级可以包含任何标签</td>\n</tr>\n<tr>\n<td>行内元素</td>\n<td>一行可以放多个行内元素</td>\n<td>不可设置宽度高度</td>\n<td>它本身内容的宽度</td>\n<td>容纳文本或其他行内元素</td>\n</tr>\n<tr>\n<td>行内块元素</td>\n<td>一行可以放多个行内块元素</td>\n<td>可以设置宽度高度</td>\n<td>它本身内容的宽度</td>\n<td></td>\n</tr>\n</tbody></table>\n<h1 id=\"CSS背景-background\"><a href=\"#CSS背景-background\" class=\"headerlink\" title=\"CSS背景(background)\"></a>CSS背景(background)</h1><ol>\n<li></li>\n</ol>\n<h2 id=\"「1-背景颜色」\"><a href=\"#「1-背景颜色」\" class=\"headerlink\" title=\"「1. 背景颜色」\"></a><strong>「1. 背景颜色」</strong></h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">background-color</span>: 颜色值;   默认的值是 transparent  透明的</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「2-背景图片-image-」\"><a href=\"#「2-背景图片-image-」\" class=\"headerlink\" title=\"「2. 背景图片(image)」\"></a><strong>「2. 背景图片(image)」</strong></h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">语法：</span><br><span class=\"line\"><span class=\"attribute\">background-image</span> : none | url (url) ;</span><br><span class=\"line\">例如:</span><br><span class=\"line\">background-image: <span class=\"built_in\">url</span>(<span class=\"string\">images/1.png</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「3-背景平铺（repeat）」\"><a href=\"#「3-背景平铺（repeat）」\" class=\"headerlink\" title=\"「3. 背景平铺（repeat）」\"></a><strong>「3. 背景平铺（repeat）」</strong></h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">background-repeat</span> : repeat | no-repeat | repeat-x | repeat-y </span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>repeat</td>\n<td>背景图像在纵向和横向上平铺（默认的）</td>\n</tr>\n<tr>\n<td>no-repeat</td>\n<td>背景图像不平铺</td>\n</tr>\n<tr>\n<td>repeat-x</td>\n<td>背景图像在横向上平铺</td>\n</tr>\n<tr>\n<td>repeat-y</td>\n<td>背景图像在纵向平铺</td>\n</tr>\n</tbody></table>\n<h2 id=\"「4-背景位置-position-」\"><a href=\"#「4-背景位置-position-」\" class=\"headerlink\" title=\"「4. 背景位置(position)」\"></a><strong>「4. 背景位置(position)」</strong></h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">background-position</span> : length || length</span><br><span class=\"line\">background-position : position || position </span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>length</td>\n<td>百分数 | 由浮点数字和单位标识符组成的长度值</td>\n</tr>\n<tr>\n<td>position</td>\n<td>top | center | bottom | left | center | right  方位名词</td>\n</tr>\n</tbody></table>\n<p><strong>注意：</strong></p>\n<ul>\n<li>必须先指定background-image属性</li>\n<li>position 后面是x坐标和y坐标。可以使用方位名词或者 精确单位。</li>\n<li>如果指定两个值，两个值都是方位名字，则两个值前后顺序无关，比如left  top和top  left效果一致</li>\n<li>如果只指定了一个方位名词，另一个值默认居中对齐。</li>\n<li>如果position 后面是精确坐标， 那么第一个，肯定是 x 第二个一定是y</li>\n<li>如果只指定一个数值,那该数值一定是x坐标，另一个默认垂直居中</li>\n<li>如果指定的两个值是 精确单位和方位名字混合使用，则第一个值是x坐标，第二个值是y坐标</li>\n</ul>\n<h3 id=\"背景简写：\"><a href=\"#背景简写：\" class=\"headerlink\" title=\"背景简写：\"></a>背景简写：</h3><ul>\n<li>background：属性的值的书写顺序官方没有强制的标准。为了可读性，建议如下写：</li>\n<li>background: 背景颜色 背景图片地址 背景平铺 背景滚动 背景位置;</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 有背景图片背景颜色可以不用写*/</span></span><br><span class=\"line\"><span class=\"attribute\">background</span>: transparent <span class=\"built_in\">url</span>(<span class=\"string\">image.jpg</span>) repeat-y  scroll center top ;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「5-背景半透明-CSS3-」\"><a href=\"#「5-背景半透明-CSS3-」\" class=\"headerlink\" title=\"「5. 背景半透明(CSS3)」\"></a><strong>「5. 背景半透明(CSS3)」</strong></h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">background</span>: <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0.3</span>);</span><br><span class=\"line\"><span class=\"attribute\">background</span>: <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, .<span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>等同于background-color: rgba(0, 0, 0, .3)</li>\n<li>最后一个参数是alpha 透明度 取值范围 0~1之间</li>\n<li>我们习惯把0.3 的 0 省略掉 这样写 background: rgba(0, 0, 0, .3);</li>\n<li>注意：背景半透明是指盒子背景半透明，盒子里面的内容不受影响</li>\n<li>低于IE 9的版本不支持</li>\n</ul>\n<h3 id=\"盒子半透明-opacity\"><a href=\"#盒子半透明-opacity\" class=\"headerlink\" title=\"盒子半透明 opacity\"></a>盒子半透明 opacity</h3><p>设置opacity元素的所有后代元素会随着一起具有透明性，一般用于调整图片或者模块的整体不透明度</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">opacity</span>: .<span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「6-背景总结」\"><a href=\"#「6-背景总结」\" class=\"headerlink\" title=\"「6. 背景总结」\"></a><strong>「6. 背景总结」</strong></h2><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>作用</th>\n<th>值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>background-color</td>\n<td>背景颜色</td>\n<td>预定义的颜色值/十六进制/RGB代码</td>\n</tr>\n<tr>\n<td>background-image</td>\n<td>背景图片</td>\n<td>url(图片路径)</td>\n</tr>\n<tr>\n<td>background-repeat</td>\n<td>是否平铺</td>\n<td>repeat/no-repeat/repeat-x/repeat-y</td>\n</tr>\n<tr>\n<td>background-position</td>\n<td>背景位置</td>\n<td>length/position   分别是x  和 y坐标， 切记 如果有 精确数值单位，则必须按照先X 后Y 的写法</td>\n</tr>\n<tr>\n<td>background-attachment</td>\n<td>背景固定还是滚动</td>\n<td>scroll/fixed</td>\n</tr>\n<tr>\n<td>背景简写</td>\n<td>更简单</td>\n<td>背景颜色 背景图片地址 背景平铺 背景滚动 背景位置;  他们没有顺序</td>\n</tr>\n<tr>\n<td>背景透明</td>\n<td>让盒子半透明</td>\n<td>background: rgba(0,0,0,0.3);  后面必须是 4个值</td>\n</tr>\n</tbody></table>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<h1 id=\"CSS字体样式\"><a href=\"#CSS字体样式\" class=\"headerlink\" title=\"CSS字体样式\"></a>CSS字体样式</h1><h2 id=\"「1-font-size」\"><a href=\"#「1-font-size」\" class=\"headerlink\" title=\"「1. font-size」\"></a><strong>「1. font-size」</strong></h2><ul>\n<li>font-size属性用于设置字号(字体大小)</li>\n<li><code>谷歌浏览器</code>默认的文字大小为16px</li>\n<li>不同浏览器可能默认显示的字号大小不一致，我们尽量给一个明确值大小，不要默认大小。一般给body指定整个页面文字的大小。</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">p</span> &#123; <span class=\"attribute\">font-size</span>:<span class=\"number\">20px</span>; &#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>单位</strong></p>\n<p>相对长度单位、绝对长度单位</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207081954476.png\"></p>\n<h2 id=\"「2-font-family」\"><a href=\"#「2-font-family」\" class=\"headerlink\" title=\"「2. font-family」\"></a><strong>「2. font-family」</strong></h2><p>font-family属性用于设置哪一种字体。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">p</span> &#123; <span class=\"attribute\">font-family</span>:<span class=\"string\">&quot;微软雅黑&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>指定多个字体，如果浏览器不支持第一个字体就会尝试下一个直到找到合适的字体，如果都没有，以电脑默认字体为准。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">p</span> &#123;<span class=\"attribute\">font-family</span>: Arial,<span class=\"string\">&quot;Microsoft Yahei&quot;</span>, <span class=\"string\">&quot;微软雅黑&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>CSS Unicode字体</p>\n<ul>\n<li>在 CSS 中设置字体名称，直接写中文是可以的。但是在文件编码（GB2312、UTF-8 等）不匹配时会产生乱码的错误。</li>\n<li>xp 系统不支持 类似微软雅黑的中文。</li>\n<li>解决方案：英文来替代。比如<code>font-family:&quot;Microsoft Yahei&quot;</code>。在 CSS 直接使用 Unicode 编码来写字体名称可以避免这些错误。使用 Unicode 写中文字体名称，浏览器是可以正确的解析的。</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">font-family</span>: <span class=\"string\">&quot;\\5FAE\\8F6F\\96C5\\9ED1&quot;</span>;   表示设置字体为“微软雅黑”。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「3-font-weight」\"><a href=\"#「3-font-weight」\" class=\"headerlink\" title=\"「3. font-weight」\"></a><strong>「3. font-weight」</strong></h2><table>\n<thead>\n<tr>\n<th>属性值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>normal</td>\n<td>默认值（不加粗的）</td>\n</tr>\n<tr>\n<td>bold</td>\n<td>定义粗体（加粗的）</td>\n</tr>\n<tr>\n<td>100~900</td>\n<td>400 等同于 normal，而 700 等同于 bold  (数字表示粗细用的多)</td>\n</tr>\n</tbody></table>\n<h2 id=\"「4-font-style」\"><a href=\"#「4-font-style」\" class=\"headerlink\" title=\"「4. font-style」\"></a><strong>「4. font-style」</strong></h2><p>font-style属性用于定义字体风格，如设置斜体、倾斜或正常字体，其可用属性值如下：</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>normal</td>\n<td>默认值，浏览器会显示标准的字体样式  font-style: normal;</td>\n</tr>\n<tr>\n<td>italic</td>\n<td>浏览器会显示斜体的字体样式。</td>\n</tr>\n</tbody></table>\n<h2 id=\"「5-font-综合设置字体样式」\"><a href=\"#「5-font-综合设置字体样式」\" class=\"headerlink\" title=\"「5. font:综合设置字体样式」\"></a><strong>「5. font:综合设置字体样式」</strong></h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">选择器 &#123; <span class=\"attribute\">font</span>: font-style  font-weight  font-size/line-height  font-family;&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：</strong></p>\n<ul>\n<li><p>使用font属性时，必须按上面语法格式中的顺序书写，不能更换顺序，各个属性以<code>空格</code>隔开</p>\n</li>\n<li><p>其中不需要设置的属性可以省略(取默认值),但必须保留<code>font-size</code>和<code>font-family</code>属性，否则font属性将不起作用</p>\n</li>\n<li></li>\n</ul>\n<h2 id=\"「6-font总结」\"><a href=\"#「6-font总结」\" class=\"headerlink\" title=\"「6. font总结」\"></a><strong>「6. font总结」</strong></h2><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>表示</th>\n<th><strong>注意点</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>font-size</td>\n<td>字号</td>\n<td>我们通常用的单位是px 像素，一定要跟上单位</td>\n</tr>\n<tr>\n<td>font-family</td>\n<td>字体</td>\n<td>实际工作中按照团队约定来写字体</td>\n</tr>\n<tr>\n<td>font-weight</td>\n<td>字体粗细</td>\n<td>记住加粗是 700 或者 bold  不加粗 是 normal 或者  400  记住数字不要跟单位</td>\n</tr>\n<tr>\n<td>font-style</td>\n<td>字体样式</td>\n<td>记住倾斜是 italic   不倾斜 是 normal  工作中我们最常用 normal</td>\n</tr>\n<tr>\n<td>font</td>\n<td>字体连写</td>\n<td>1. 字体连写是有顺序的  不能随意换位置 2. 其中字号 和 字体 必须同时出现</td>\n</tr>\n</tbody></table>\n<h1 id=\"CSS外观属性\"><a href=\"#CSS外观属性\" class=\"headerlink\" title=\"CSS外观属性\"></a>CSS外观属性</h1><h2 id=\"「1-color」\"><a href=\"#「1-color」\" class=\"headerlink\" title=\"「1. color」\"></a><strong>「1. color」</strong></h2><p>color属性用于定义文本的颜色<br>其取值方式有以下3种：</p>\n<p>实际工作中，用16进制的写法是最多的，且我们更喜欢简写方式比如#f0代表红色。</p>\n<table>\n<thead>\n<tr>\n<th>表示</th>\n<th>属性值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>预定义的颜色值</td>\n<td>red，green，blue，pink</td>\n</tr>\n<tr>\n<td>十六进制</td>\n<td>#FF0000，#FF6600，#29D794</td>\n</tr>\n<tr>\n<td>RGB代码</td>\n<td>rgb(255,0,0)或rgb(100%,0%,0%)</td>\n</tr>\n</tbody></table>\n<h2 id=\"「2-text-align」\"><a href=\"#「2-text-align」\" class=\"headerlink\" title=\"「2.text-align」\"></a><strong>「2.text-align」</strong></h2><p>text-align属性用于设置文本内容的水平对齐方式，相当于html中的align对齐属性。</p>\n<p>注意：是让盒子里面的文本内容水平居中， 而不是让盒子居中对齐</p>\n<p>其可用属性值如下：</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>left</td>\n<td>左对齐（默认值）</td>\n</tr>\n<tr>\n<td>right</td>\n<td>右对齐</td>\n</tr>\n<tr>\n<td>center</td>\n<td>居中对齐</td>\n</tr>\n</tbody></table>\n<h2 id=\"「3-line-height」\"><a href=\"#「3-line-height」\" class=\"headerlink\" title=\"「3. line-height」\"></a><strong>「3. line-height」</strong></h2><p>line-height属性用于设置行间距，就是行与行之间的距离，即字符的垂直间距，一般称为行高。</p>\n<ul>\n<li>line-height常用的属性值单位有三种，分别为像素px，相对值em和百分比%，实际工作中使用最多的是像素px</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一般情况下，行距比字号大<span class=\"number\">7</span>--<span class=\"number\">8</span>像素左右就可以了。</span><br><span class=\"line\"><span class=\"attribute\">line-height</span>: <span class=\"number\">24px</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"行高测量\"><a href=\"#行高测量\" class=\"headerlink\" title=\"行高测量\"></a>行高测量</h3><p>行高测量方法：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207082015839.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207082016559.png\"></p>\n<p>行高我们利用最多的一个地方是：<strong>可以让单行文本在盒子中垂直居中对齐</strong>。</p>\n<p><strong>文字的行高等于盒子的高度</strong>行高  =  上距离 +  内容高度  + 下距离<br>上距离和下距离总是相等的，因此文字看上去是垂直居中的。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207082017497.png\"></p>\n<h3 id=\"行高与高度的三种关系\"><a href=\"#行高与高度的三种关系\" class=\"headerlink\" title=\"行高与高度的三种关系\"></a>行高与高度的三种关系</h3><ul>\n<li>如果 行高 等 高度  文字会 垂直居中</li>\n<li>如果行高 大于 高度  文字会 偏下</li>\n<li>如果行高小于高度  文字会  偏上</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*line-height 要设置在font属性下面，否则无效，例如：*/</span></span><br><span class=\"line\"><span class=\"attribute\">height</span>: <span class=\"number\">80px</span>;</span><br><span class=\"line\"><span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\"><span class=\"attribute\">font</span>: normal bold <span class=\"number\">30px</span> <span class=\"string\">&quot;宋体&quot;</span>;</span><br><span class=\"line\"><span class=\"attribute\">line-height</span>: <span class=\"number\">80px</span>;</span><br></pre></td></tr></table></figure>\n\n<p>可以使用display:flex;布局方式让文字水平垂直居中</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\"><span class=\"attribute\">align-items</span>: center;     <span class=\"comment\">/* 侧轴对齐方式*/</span></span><br><span class=\"line\"><span class=\"attribute\">justify-content</span>: center; <span class=\"comment\">/* 主轴对齐方式 */</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「4-text-indent」\"><a href=\"#「4-text-indent」\" class=\"headerlink\" title=\"「4. text-indent」\"></a><strong>「4. text-indent」</strong></h2><p>text-indent属性用于设置首行文本的缩进</p>\n<ul>\n<li>其属性值可为不同单位的数值、em字符宽度的倍数、或相对于浏览器窗口宽度的百分比%，允许使用负值。</li>\n<li>建议使用em作为设置单位。</li>\n<li>1em 就是一个字的宽度。如果是汉字的段落，1em 就是一个汉字的宽度</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">/*行间距*/</span></span><br><span class=\"line\">      <span class=\"attribute\">line-height</span>: <span class=\"number\">25px</span>;</span><br><span class=\"line\">      <span class=\"comment\">/*首行缩进2个字  em  1个em 就是1个字的大小*/</span></span><br><span class=\"line\">      <span class=\"attribute\">text-indent</span>: <span class=\"number\">2em</span>;  </span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「5-text-decoration」\"><a href=\"#「5-text-decoration」\" class=\"headerlink\" title=\"「5. text-decoration」\"></a><strong>「5. text-decoration」</strong></h2><p>文本的装饰text-decoration,通常我们用于给链接修改装饰效果</p>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>none</td>\n<td>默认。定义标准的文本。取消下划线（最常用）</td>\n</tr>\n<tr>\n<td>underline</td>\n<td>定义文本下的一条线。下划线 也是我们链接自带的（常用）</td>\n</tr>\n<tr>\n<td>overline</td>\n<td>定义文本上的一条线。（不用）</td>\n</tr>\n<tr>\n<td>line-through</td>\n<td>定义穿过文本下的一条线。（不常用）</td>\n</tr>\n</tbody></table>\n<h2 id=\"「6-CSS外观属性总结」\"><a href=\"#「6-CSS外观属性总结」\" class=\"headerlink\" title=\"「6. CSS外观属性总结」\"></a><strong>「6. CSS外观属性总结」</strong></h2><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>表示</th>\n<th>注意点</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>color</td>\n<td>颜色</td>\n<td>我们通常用  十六进制  比如 而且是简写形式 #fff</td>\n</tr>\n<tr>\n<td>line-height</td>\n<td>行高</td>\n<td>控制行与行之间的距离</td>\n</tr>\n<tr>\n<td>text-align</td>\n<td>水平对齐</td>\n<td>可以设定文字水平的对齐方式</td>\n</tr>\n<tr>\n<td>text-indent</td>\n<td>首行缩进</td>\n<td>通常我们用于段落首行缩进2个字的距离  text-indent: 2em;</td>\n</tr>\n<tr>\n<td>text-decoration</td>\n<td>文本修饰</td>\n<td>记住 添加 下划线  underline  取消下划线  none</td>\n</tr>\n</tbody></table>\n<h1 id=\"标签显示模式\"><a href=\"#标签显示模式\" class=\"headerlink\" title=\"标签显示模式\"></a>标签显示模式</h1><p><code>标签显示模式</code>是标签以什么方式进行显示。HTML标签一般分为块标签和行内标签两种类型，它们也称为块元素和行内元素</p>\n<p><strong>标签显示模式转换 display</strong></p>\n<ul>\n<li>块转行内：display:inline;</li>\n<li>行内转块：display:block;</li>\n<li>块、行内元素转换为行内块：display: inline-block;</li>\n</ul>\n<h2 id=\"「1-块级元素-block-level-」\"><a href=\"#「1-块级元素-block-level-」\" class=\"headerlink\" title=\"「1. 块级元素(block-level)」\"></a><strong>「1. 块级元素(block-level)」</strong></h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">常见的块元素有<span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>~<span class=\"tag\">&lt;<span class=\"name\">h6</span>&gt;</span>、<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>、<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>、<span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span>、<span class=\"tag\">&lt;<span class=\"name\">ol</span>&gt;</span>、<span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>等，其中<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>标签是最典型的块元素。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"块级元素的特点\"><a href=\"#块级元素的特点\" class=\"headerlink\" title=\"块级元素的特点\"></a>块级元素的特点</h3><ul>\n<li>独占一行</li>\n<li>高度，宽度，外边距以及内边距都可以控制。</li>\n<li>宽度默认是容器(父级宽度)的100%</li>\n<li>是一个容器及盒子，里面可以放行内或者块级元素</li>\n<li><strong>注意</strong>：只有文字才能组成段落，因此p标签里面不能放块级元素，特别是p不能放div。同理，还有h1~h6，dt,它们都是文字类块级标签，里面不能放其他块级元素。</li>\n</ul>\n<h2 id=\"「2-行内元素-inline-level-」\"><a href=\"#「2-行内元素-inline-level-」\" class=\"headerlink\" title=\"「2. 行内元素(inline-level)」\"></a><strong>「2. 行内元素(inline-level)」</strong></h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">有的地方也称为内联元素</span><br><span class=\"line\"></span><br><span class=\"line\">常见的行内元素有<span class=\"tag\">&lt;<span class=\"name\">a</span>&gt;</span>、<span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>、<span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>、<span class=\"tag\">&lt;<span class=\"name\">em</span>&gt;</span>、<span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span>、<span class=\"tag\">&lt;<span class=\"name\">del</span>&gt;</span>、<span class=\"tag\">&lt;<span class=\"name\">s</span>&gt;</span>、<span class=\"tag\">&lt;<span class=\"name\">ins</span>&gt;</span>、<span class=\"tag\">&lt;<span class=\"name\">u</span>&gt;</span>、<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>等，其中<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>标签最典型的行内元素。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"行内元素的特点\"><a href=\"#行内元素的特点\" class=\"headerlink\" title=\"行内元素的特点\"></a>行内元素的特点</h3><ol>\n<li>相邻行内元素在一行上，一行可以显示多个。</li>\n<li>高度、宽度直接设置是无效的。</li>\n<li>默认高度就是它本身内容的宽度。</li>\n<li>行内元素只能容纳文本或其他行内元素。</li>\n</ol>\n<h6 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h6><ul>\n<li>链接里面不能再放链接</li>\n<li>特殊情况a里面可以放块级元素，但是给a转换一下块级模式最安全。</li>\n</ul>\n<h2 id=\"「3-行内块元素-inline-block-」\"><a href=\"#「3-行内块元素-inline-block-」\" class=\"headerlink\" title=\"「3. 行内块元素(inline-block)」\"></a><strong>「3. 行内块元素(inline-block)」</strong></h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在行内元素中有几个特殊的标签——<span class=\"tag\">&lt;<span class=\"name\">img</span>&gt;</span>、<span class=\"tag\">&lt;<span class=\"name\">input</span> &gt;</span>、<span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>，可以对它们设置宽高和对齐属性，有些资料可能会称它们为行内块元素。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"行内块元素的特点\"><a href=\"#行内块元素的特点\" class=\"headerlink\" title=\"行内块元素的特点\"></a><strong>行内块元素的特点</strong></h3><ol>\n<li>和相邻行内元素(行内块)在一行上，但是之间会有空白风险。一行可以显示多个</li>\n<li>默认宽度就是它本身内容的宽度。</li>\n<li>高度，行高，外边距以及内边距都可以控制。</li>\n</ol>\n<h2 id=\"三种模式总结\"><a href=\"#三种模式总结\" class=\"headerlink\" title=\"三种模式总结\"></a>三种模式总结</h2><table>\n<thead>\n<tr>\n<th>元素模式</th>\n<th>元素排列</th>\n<th>设置样式</th>\n<th>默认宽度</th>\n<th>包含</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>块级元素</td>\n<td>一行只能放一个块级元素</td>\n<td>可以设置宽度高度</td>\n<td>容器的100%</td>\n<td>容器级可以包含任何标签</td>\n</tr>\n<tr>\n<td>行内元素</td>\n<td>一行可以放多个行内元素</td>\n<td>不可设置宽度高度</td>\n<td>它本身内容的宽度</td>\n<td>容纳文本或其他行内元素</td>\n</tr>\n<tr>\n<td>行内块元素</td>\n<td>一行可以放多个行内块元素</td>\n<td>可以设置宽度高度</td>\n<td>它本身内容的宽度</td>\n<td></td>\n</tr>\n</tbody></table>\n<h1 id=\"CSS背景-background\"><a href=\"#CSS背景-background\" class=\"headerlink\" title=\"CSS背景(background)\"></a>CSS背景(background)</h1><ol>\n<li></li>\n</ol>\n<h2 id=\"「1-背景颜色」\"><a href=\"#「1-背景颜色」\" class=\"headerlink\" title=\"「1. 背景颜色」\"></a><strong>「1. 背景颜色」</strong></h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">background-color</span>: 颜色值;   默认的值是 transparent  透明的</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「2-背景图片-image-」\"><a href=\"#「2-背景图片-image-」\" class=\"headerlink\" title=\"「2. 背景图片(image)」\"></a><strong>「2. 背景图片(image)」</strong></h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">语法：</span><br><span class=\"line\"><span class=\"attribute\">background-image</span> : none | url (url) ;</span><br><span class=\"line\">例如:</span><br><span class=\"line\">background-image: <span class=\"built_in\">url</span>(<span class=\"string\">images/1.png</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「3-背景平铺（repeat）」\"><a href=\"#「3-背景平铺（repeat）」\" class=\"headerlink\" title=\"「3. 背景平铺（repeat）」\"></a><strong>「3. 背景平铺（repeat）」</strong></h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">background-repeat</span> : repeat | no-repeat | repeat-x | repeat-y </span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>repeat</td>\n<td>背景图像在纵向和横向上平铺（默认的）</td>\n</tr>\n<tr>\n<td>no-repeat</td>\n<td>背景图像不平铺</td>\n</tr>\n<tr>\n<td>repeat-x</td>\n<td>背景图像在横向上平铺</td>\n</tr>\n<tr>\n<td>repeat-y</td>\n<td>背景图像在纵向平铺</td>\n</tr>\n</tbody></table>\n<h2 id=\"「4-背景位置-position-」\"><a href=\"#「4-背景位置-position-」\" class=\"headerlink\" title=\"「4. 背景位置(position)」\"></a><strong>「4. 背景位置(position)」</strong></h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">background-position</span> : length || length</span><br><span class=\"line\">background-position : position || position </span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>length</td>\n<td>百分数 | 由浮点数字和单位标识符组成的长度值</td>\n</tr>\n<tr>\n<td>position</td>\n<td>top | center | bottom | left | center | right  方位名词</td>\n</tr>\n</tbody></table>\n<p><strong>注意：</strong></p>\n<ul>\n<li>必须先指定background-image属性</li>\n<li>position 后面是x坐标和y坐标。可以使用方位名词或者 精确单位。</li>\n<li>如果指定两个值，两个值都是方位名字，则两个值前后顺序无关，比如left  top和top  left效果一致</li>\n<li>如果只指定了一个方位名词，另一个值默认居中对齐。</li>\n<li>如果position 后面是精确坐标， 那么第一个，肯定是 x 第二个一定是y</li>\n<li>如果只指定一个数值,那该数值一定是x坐标，另一个默认垂直居中</li>\n<li>如果指定的两个值是 精确单位和方位名字混合使用，则第一个值是x坐标，第二个值是y坐标</li>\n</ul>\n<h3 id=\"背景简写：\"><a href=\"#背景简写：\" class=\"headerlink\" title=\"背景简写：\"></a>背景简写：</h3><ul>\n<li>background：属性的值的书写顺序官方没有强制的标准。为了可读性，建议如下写：</li>\n<li>background: 背景颜色 背景图片地址 背景平铺 背景滚动 背景位置;</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 有背景图片背景颜色可以不用写*/</span></span><br><span class=\"line\"><span class=\"attribute\">background</span>: transparent <span class=\"built_in\">url</span>(<span class=\"string\">image.jpg</span>) repeat-y  scroll center top ;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「5-背景半透明-CSS3-」\"><a href=\"#「5-背景半透明-CSS3-」\" class=\"headerlink\" title=\"「5. 背景半透明(CSS3)」\"></a><strong>「5. 背景半透明(CSS3)」</strong></h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">background</span>: <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0.3</span>);</span><br><span class=\"line\"><span class=\"attribute\">background</span>: <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, .<span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>等同于background-color: rgba(0, 0, 0, .3)</li>\n<li>最后一个参数是alpha 透明度 取值范围 0~1之间</li>\n<li>我们习惯把0.3 的 0 省略掉 这样写 background: rgba(0, 0, 0, .3);</li>\n<li>注意：背景半透明是指盒子背景半透明，盒子里面的内容不受影响</li>\n<li>低于IE 9的版本不支持</li>\n</ul>\n<h3 id=\"盒子半透明-opacity\"><a href=\"#盒子半透明-opacity\" class=\"headerlink\" title=\"盒子半透明 opacity\"></a>盒子半透明 opacity</h3><p>设置opacity元素的所有后代元素会随着一起具有透明性，一般用于调整图片或者模块的整体不透明度</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">opacity</span>: .<span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「6-背景总结」\"><a href=\"#「6-背景总结」\" class=\"headerlink\" title=\"「6. 背景总结」\"></a><strong>「6. 背景总结」</strong></h2><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>作用</th>\n<th>值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>background-color</td>\n<td>背景颜色</td>\n<td>预定义的颜色值/十六进制/RGB代码</td>\n</tr>\n<tr>\n<td>background-image</td>\n<td>背景图片</td>\n<td>url(图片路径)</td>\n</tr>\n<tr>\n<td>background-repeat</td>\n<td>是否平铺</td>\n<td>repeat/no-repeat/repeat-x/repeat-y</td>\n</tr>\n<tr>\n<td>background-position</td>\n<td>背景位置</td>\n<td>length/position   分别是x  和 y坐标， 切记 如果有 精确数值单位，则必须按照先X 后Y 的写法</td>\n</tr>\n<tr>\n<td>background-attachment</td>\n<td>背景固定还是滚动</td>\n<td>scroll/fixed</td>\n</tr>\n<tr>\n<td>背景简写</td>\n<td>更简单</td>\n<td>背景颜色 背景图片地址 背景平铺 背景滚动 背景位置;  他们没有顺序</td>\n</tr>\n<tr>\n<td>背景透明</td>\n<td>让盒子半透明</td>\n<td>background: rgba(0,0,0,0.3);  后面必须是 4个值</td>\n</tr>\n</tbody></table>\n"},{"title":"CSS浮动","date":"2022-04-30T16:00:00.000Z","updated":"2022-06-30T16:00:00.000Z","type":null,"comments":1,"description":null,"keywords":null,"top_img":"./img/bg8.jpg","cover":"./img/bg11.jpg","mathjax":null,"katex":null,"aside":null,"aplayer":null,"highlight_shrink":null,"sticky":null,"_content":"# 浮动\n\n## **「1. CSS布局的三种机制」**\n\n```css\n网页布局的核心——就是用CSS来摆放盒子。\n```\n\nCSS 提供了3种机制来设置盒子的摆放位置，分别是普通流（标准流）、浮动和定位，其中：\n\n### **A. 普通流（标准流）**\n\n1. 块级元素会独占一行，从上向下顺序排列；\n\n2. - 常用元素：div、hr、p、h1~h6、ul、ol、dl、form、table\n\n3. 行内元素会按照顺序，从左到右顺序排列，碰到父元素边缘则自动换行；\n\n4. - 常用元素：span、a、i、em等\n\n### **B. 浮动**\n\n- 让盒子从普通流中浮起来,主要作用让多个块级盒子一行显示。\n\n### **C. 定位**\n\n- 将盒子定在浏览器的某一个位置——CSS 离不开定位，特别是后面的 js 特效。\n\n## **「2. 什么是浮动」**\n\n元素的浮动是指设置了浮动属性的元素会：\n\n- 脱离标准普通流的控制,不占位置，脱标\n- 移动到指定位置。\n\n### 作用\n\n1. 让多个盒子(div)水平排列成一行，使得浮动称为布局的重要手段。\n2. 可以实现盒子的左右对齐等等。\n3. 浮动最早是用来控制图片，实现文字环绕图片效果。\n4. float属性会改变元素的display属性，任何元素都可以浮动。浮动元素会生成一个块级框，而不论它本身是何种元素。生成的块级框和我们前面的行内块极其相似。\n\n## **语法**\n\n```css\n选择器 { float: 属性值; }\n```\n\n| 属性值 | 描述                 |\n| ------ | -------------------- |\n| none   | 元素不浮动（默认值） |\n| left   | 元素向左浮动         |\n| right  | 元素向右浮动         |\n\n浮动只会影响当前的或者是后面的标准流盒子，不会影响前面的标准流。\n**建议:**如果一个盒子里面有多个子盒子，如果其中一个盒子浮动了，其他兄弟也应该浮动。防止引起问题\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207090743663.jpg)\n\n## **浮动(float)小结**\n\n| 特点 | 说明                                                         |\n| ---- | ------------------------------------------------------------ |\n| 浮   | 加了浮动的盒子**「是浮起来」**的，漂浮在其他标准流盒子的上面。 |\n| 漏   | 加了浮动的盒子**「是不占位置的」**，它原来的位置**「漏给了标准流的盒子」**。 |\n| 特   | 「特别注意」：浮动元素会改变display属性， 类似转换为了行内块，但是元素之间没有空白缝隙 |\n\n# 清除浮动\n\n因为父级盒子很多情况下，不方便给高度，但是子盒子浮动就不占有位置，最后父级盒子高度为0，就影响了下面的标准流盒子。\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207090744999.jpg)\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207090745976.jpg)\n\n**总结：**\n\n- 由于浮动元素不再占用原文档流的位置，所以它会对后面的元素排版产生影响\n- 准确地说，并不是清除浮动，而是清除浮动后造成的影响\n\n**清除浮动本质**：\n\n清除浮动主要为了解决父级元素因为子级浮动引起内部高度为0 的问题。清除浮动之后， 父级就会根据浮动的子盒子自动检测高度。父级有了高度，就不会影响下面的标准流了\n\n## 清除浮动的方法\n\n```css\n选择器 { clear: 属性值; }   clear 清除  \n```\n\n| 属性值 | 描述                                       |\n| ------ | ------------------------------------------ |\n| left   | 不允许左侧有浮动元素（清除左侧浮动的影响） |\n| right  | 不允许右侧有浮动元素（清除右侧浮动的影响） |\n| both   | 同时清除左右两侧浮动的影响                 |\n\n实际工作中,几乎只用clear: both\n\n### **1).额外标签法(隔墙法)**\n\n是W3C推荐的做法是通过在浮动元素**末尾**添加一个空的标签例如 div style=\"clear:both\"，或则其他标签br等亦可。\n\n```css\n <div style=\"clear:both\">\n </div>\n```\n\n\n\n- 优点：通俗易懂，书写方便\n- 缺点：添加许多无意义的标签，结构化较差。\n\n**2).父级添加overflow属性方法**\n\n```css\n可以给父级添加： \noverflow为 hidden| auto| scroll  都可以实现。\n```\n\n- 优点： 代码简洁\n- 缺点： 内容增多时候容易造成不会自动换行导致内容被隐藏掉，无法显示需要溢出的元素。\n\n**3).使用after伪元素清除浮动**\n\nafter 方式为空元素额外标签法的升级版，好处是不用单独加标签了\n\n```css\n    .clearfix:after {\n        content: \"\";\n        display: block;\n        height: 0;\n        clear: both;\n        visibility: hidden;\n    }\n  \n    /* IE6、7 专有 */\n    .clearfix {\n        *zoom: 1;\n    }\n        \n```\n\n- 优点：符合闭合浮动思想  结构语义化正确\n- 缺点：由于IE6-7不支持:after，使用 zoom:1触发 hasLayout。\n\n**4).使用双伪元素清除浮动**\n\n```css\n    .clearfix:before,\n    .clearfix:after {\n        content: \"\";\n        display: table;\n    }\n\n    .clearfix:after {\n        clear: both;\n    }\n\n    .clearfix {\n       *zoom: 1;\n    }\n\n```\n\n- 优点： 代码更简洁\n- 缺点： 由于IE6-7不支持:after，使用 zoom:1触发 hasLayout。\n\n## 清除浮动总结\n\n### 什么时候用清除浮动呢？\n\n1. 父级没高度\n2. 子盒子浮动了\n3. 影响下面布局了，我们就应该清除浮动了\n\n| 清除浮动的方法       | 优点               | 缺点                               |\n| -------------------- | ------------------ | ---------------------------------- |\n| 额外标签法（隔墙法） | 通俗易懂，书写方便 | 添加许多无意义的标签，结构化较差。 |\n| 父级overflow:hidden; | 书写简单           | 溢出隐藏                           |\n| 父级after伪元素      | 结构语义化正确     | 由于IE6-7不支持:after，兼容性问题  |\n| 父级双伪元素         | 结构语义化正确     | 由于IE6-7不支持:after，兼容性问题  |\n\n# CSS属性书写顺序\n\n建议遵循以下顺序：\n\n1. 布局定位属性：display / position / float / clear / visibility / overflow（建议 display 第一个写，毕竟关系到模式）\n2. 自身属性：width / height / margin / padding / border / background\n3. 文本属性：color / font / text-decoration / text-align / vertical-align / white- space / break-word\n4. 其他属性（CSS3）：content / cursor / border-radius / box-shadow / text-shadow / background:linear-gradient …\n\n```css\n.jdc {\n    display: block;\n    position: relative;\n    float: left;\n    \n    width: 100px;\n    height: 100px;\n    margin: 0 10px;\n    padding: 20px 0;\n    \n    font-family: Arial, 'Helvetica Neue', Helvetica, sans-serif;\n    color: #333;\n    background: rgba(0,0,0,.5);\n    -webkit-border-radius: 10px;\n    -moz-border-radius: 10px;\n    -o-border-radius: 10px;\n    -ms-border-radius: 10px;\n    border-radius: 10px;\n}\n```\n\n\n\n\n\n\n\n","source":"_posts/前端/CSS浮动.md","raw":"---\ntitle: CSS浮动\ndate: 2022-05-01\nupdated: 2022-07-01\ntype:\ncomments:\ndescription:\nkeywords:\ntags:\n  - 小白的前端之路\n  - CSS基础\n  - CSS三大重点\ncategories: 前端开发\ntop_img: ./img/bg8.jpg\ncover: ./img/bg11.jpg\nmathjax:\nkatex:\naside:\naplayer:\nhighlight_shrink:\nsticky: \n---\n# 浮动\n\n## **「1. CSS布局的三种机制」**\n\n```css\n网页布局的核心——就是用CSS来摆放盒子。\n```\n\nCSS 提供了3种机制来设置盒子的摆放位置，分别是普通流（标准流）、浮动和定位，其中：\n\n### **A. 普通流（标准流）**\n\n1. 块级元素会独占一行，从上向下顺序排列；\n\n2. - 常用元素：div、hr、p、h1~h6、ul、ol、dl、form、table\n\n3. 行内元素会按照顺序，从左到右顺序排列，碰到父元素边缘则自动换行；\n\n4. - 常用元素：span、a、i、em等\n\n### **B. 浮动**\n\n- 让盒子从普通流中浮起来,主要作用让多个块级盒子一行显示。\n\n### **C. 定位**\n\n- 将盒子定在浏览器的某一个位置——CSS 离不开定位，特别是后面的 js 特效。\n\n## **「2. 什么是浮动」**\n\n元素的浮动是指设置了浮动属性的元素会：\n\n- 脱离标准普通流的控制,不占位置，脱标\n- 移动到指定位置。\n\n### 作用\n\n1. 让多个盒子(div)水平排列成一行，使得浮动称为布局的重要手段。\n2. 可以实现盒子的左右对齐等等。\n3. 浮动最早是用来控制图片，实现文字环绕图片效果。\n4. float属性会改变元素的display属性，任何元素都可以浮动。浮动元素会生成一个块级框，而不论它本身是何种元素。生成的块级框和我们前面的行内块极其相似。\n\n## **语法**\n\n```css\n选择器 { float: 属性值; }\n```\n\n| 属性值 | 描述                 |\n| ------ | -------------------- |\n| none   | 元素不浮动（默认值） |\n| left   | 元素向左浮动         |\n| right  | 元素向右浮动         |\n\n浮动只会影响当前的或者是后面的标准流盒子，不会影响前面的标准流。\n**建议:**如果一个盒子里面有多个子盒子，如果其中一个盒子浮动了，其他兄弟也应该浮动。防止引起问题\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207090743663.jpg)\n\n## **浮动(float)小结**\n\n| 特点 | 说明                                                         |\n| ---- | ------------------------------------------------------------ |\n| 浮   | 加了浮动的盒子**「是浮起来」**的，漂浮在其他标准流盒子的上面。 |\n| 漏   | 加了浮动的盒子**「是不占位置的」**，它原来的位置**「漏给了标准流的盒子」**。 |\n| 特   | 「特别注意」：浮动元素会改变display属性， 类似转换为了行内块，但是元素之间没有空白缝隙 |\n\n# 清除浮动\n\n因为父级盒子很多情况下，不方便给高度，但是子盒子浮动就不占有位置，最后父级盒子高度为0，就影响了下面的标准流盒子。\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207090744999.jpg)\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207090745976.jpg)\n\n**总结：**\n\n- 由于浮动元素不再占用原文档流的位置，所以它会对后面的元素排版产生影响\n- 准确地说，并不是清除浮动，而是清除浮动后造成的影响\n\n**清除浮动本质**：\n\n清除浮动主要为了解决父级元素因为子级浮动引起内部高度为0 的问题。清除浮动之后， 父级就会根据浮动的子盒子自动检测高度。父级有了高度，就不会影响下面的标准流了\n\n## 清除浮动的方法\n\n```css\n选择器 { clear: 属性值; }   clear 清除  \n```\n\n| 属性值 | 描述                                       |\n| ------ | ------------------------------------------ |\n| left   | 不允许左侧有浮动元素（清除左侧浮动的影响） |\n| right  | 不允许右侧有浮动元素（清除右侧浮动的影响） |\n| both   | 同时清除左右两侧浮动的影响                 |\n\n实际工作中,几乎只用clear: both\n\n### **1).额外标签法(隔墙法)**\n\n是W3C推荐的做法是通过在浮动元素**末尾**添加一个空的标签例如 div style=\"clear:both\"，或则其他标签br等亦可。\n\n```css\n <div style=\"clear:both\">\n </div>\n```\n\n\n\n- 优点：通俗易懂，书写方便\n- 缺点：添加许多无意义的标签，结构化较差。\n\n**2).父级添加overflow属性方法**\n\n```css\n可以给父级添加： \noverflow为 hidden| auto| scroll  都可以实现。\n```\n\n- 优点： 代码简洁\n- 缺点： 内容增多时候容易造成不会自动换行导致内容被隐藏掉，无法显示需要溢出的元素。\n\n**3).使用after伪元素清除浮动**\n\nafter 方式为空元素额外标签法的升级版，好处是不用单独加标签了\n\n```css\n    .clearfix:after {\n        content: \"\";\n        display: block;\n        height: 0;\n        clear: both;\n        visibility: hidden;\n    }\n  \n    /* IE6、7 专有 */\n    .clearfix {\n        *zoom: 1;\n    }\n        \n```\n\n- 优点：符合闭合浮动思想  结构语义化正确\n- 缺点：由于IE6-7不支持:after，使用 zoom:1触发 hasLayout。\n\n**4).使用双伪元素清除浮动**\n\n```css\n    .clearfix:before,\n    .clearfix:after {\n        content: \"\";\n        display: table;\n    }\n\n    .clearfix:after {\n        clear: both;\n    }\n\n    .clearfix {\n       *zoom: 1;\n    }\n\n```\n\n- 优点： 代码更简洁\n- 缺点： 由于IE6-7不支持:after，使用 zoom:1触发 hasLayout。\n\n## 清除浮动总结\n\n### 什么时候用清除浮动呢？\n\n1. 父级没高度\n2. 子盒子浮动了\n3. 影响下面布局了，我们就应该清除浮动了\n\n| 清除浮动的方法       | 优点               | 缺点                               |\n| -------------------- | ------------------ | ---------------------------------- |\n| 额外标签法（隔墙法） | 通俗易懂，书写方便 | 添加许多无意义的标签，结构化较差。 |\n| 父级overflow:hidden; | 书写简单           | 溢出隐藏                           |\n| 父级after伪元素      | 结构语义化正确     | 由于IE6-7不支持:after，兼容性问题  |\n| 父级双伪元素         | 结构语义化正确     | 由于IE6-7不支持:after，兼容性问题  |\n\n# CSS属性书写顺序\n\n建议遵循以下顺序：\n\n1. 布局定位属性：display / position / float / clear / visibility / overflow（建议 display 第一个写，毕竟关系到模式）\n2. 自身属性：width / height / margin / padding / border / background\n3. 文本属性：color / font / text-decoration / text-align / vertical-align / white- space / break-word\n4. 其他属性（CSS3）：content / cursor / border-radius / box-shadow / text-shadow / background:linear-gradient …\n\n```css\n.jdc {\n    display: block;\n    position: relative;\n    float: left;\n    \n    width: 100px;\n    height: 100px;\n    margin: 0 10px;\n    padding: 20px 0;\n    \n    font-family: Arial, 'Helvetica Neue', Helvetica, sans-serif;\n    color: #333;\n    background: rgba(0,0,0,.5);\n    -webkit-border-radius: 10px;\n    -moz-border-radius: 10px;\n    -o-border-radius: 10px;\n    -ms-border-radius: 10px;\n    border-radius: 10px;\n}\n```\n\n\n\n\n\n\n\n","slug":"前端/CSS浮动","published":1,"layout":"post","photos":[],"link":"","_id":"cl5db79jz000dywtu5rvv25pr","content":"<h1 id=\"浮动\"><a href=\"#浮动\" class=\"headerlink\" title=\"浮动\"></a>浮动</h1><h2 id=\"「1-CSS布局的三种机制」\"><a href=\"#「1-CSS布局的三种机制」\" class=\"headerlink\" title=\"「1. CSS布局的三种机制」\"></a><strong>「1. CSS布局的三种机制」</strong></h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">网页布局的核心——就是用CSS来摆放盒子。</span><br></pre></td></tr></table></figure>\n\n<p>CSS 提供了3种机制来设置盒子的摆放位置，分别是普通流（标准流）、浮动和定位，其中：</p>\n<h3 id=\"A-普通流（标准流）\"><a href=\"#A-普通流（标准流）\" class=\"headerlink\" title=\"A. 普通流（标准流）\"></a><strong>A. 普通流（标准流）</strong></h3><ol>\n<li><p>块级元素会独占一行，从上向下顺序排列；</p>\n</li>\n<li><ul>\n<li>常用元素：div、hr、p、h1~h6、ul、ol、dl、form、table</li>\n</ul>\n</li>\n<li><p>行内元素会按照顺序，从左到右顺序排列，碰到父元素边缘则自动换行；</p>\n</li>\n<li><ul>\n<li>常用元素：span、a、i、em等</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"B-浮动\"><a href=\"#B-浮动\" class=\"headerlink\" title=\"B. 浮动\"></a><strong>B. 浮动</strong></h3><ul>\n<li>让盒子从普通流中浮起来,主要作用让多个块级盒子一行显示。</li>\n</ul>\n<h3 id=\"C-定位\"><a href=\"#C-定位\" class=\"headerlink\" title=\"C. 定位\"></a><strong>C. 定位</strong></h3><ul>\n<li>将盒子定在浏览器的某一个位置——CSS 离不开定位，特别是后面的 js 特效。</li>\n</ul>\n<h2 id=\"「2-什么是浮动」\"><a href=\"#「2-什么是浮动」\" class=\"headerlink\" title=\"「2. 什么是浮动」\"></a><strong>「2. 什么是浮动」</strong></h2><p>元素的浮动是指设置了浮动属性的元素会：</p>\n<ul>\n<li>脱离标准普通流的控制,不占位置，脱标</li>\n<li>移动到指定位置。</li>\n</ul>\n<h3 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h3><ol>\n<li>让多个盒子(div)水平排列成一行，使得浮动称为布局的重要手段。</li>\n<li>可以实现盒子的左右对齐等等。</li>\n<li>浮动最早是用来控制图片，实现文字环绕图片效果。</li>\n<li>float属性会改变元素的display属性，任何元素都可以浮动。浮动元素会生成一个块级框，而不论它本身是何种元素。生成的块级框和我们前面的行内块极其相似。</li>\n</ol>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a><strong>语法</strong></h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">选择器 &#123; <span class=\"attribute\">float</span>: 属性值; &#125;</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>属性值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>none</td>\n<td>元素不浮动（默认值）</td>\n</tr>\n<tr>\n<td>left</td>\n<td>元素向左浮动</td>\n</tr>\n<tr>\n<td>right</td>\n<td>元素向右浮动</td>\n</tr>\n</tbody></table>\n<p>浮动只会影响当前的或者是后面的标准流盒子，不会影响前面的标准流。<br>**建议:**如果一个盒子里面有多个子盒子，如果其中一个盒子浮动了，其他兄弟也应该浮动。防止引起问题</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207090743663.jpg\"></p>\n<h2 id=\"浮动-float-小结\"><a href=\"#浮动-float-小结\" class=\"headerlink\" title=\"浮动(float)小结\"></a><strong>浮动(float)小结</strong></h2><table>\n<thead>\n<tr>\n<th>特点</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>浮</td>\n<td>加了浮动的盒子<strong>「是浮起来」</strong>的，漂浮在其他标准流盒子的上面。</td>\n</tr>\n<tr>\n<td>漏</td>\n<td>加了浮动的盒子<strong>「是不占位置的」</strong>，它原来的位置<strong>「漏给了标准流的盒子」</strong>。</td>\n</tr>\n<tr>\n<td>特</td>\n<td>「特别注意」：浮动元素会改变display属性， 类似转换为了行内块，但是元素之间没有空白缝隙</td>\n</tr>\n</tbody></table>\n<h1 id=\"清除浮动\"><a href=\"#清除浮动\" class=\"headerlink\" title=\"清除浮动\"></a>清除浮动</h1><p>因为父级盒子很多情况下，不方便给高度，但是子盒子浮动就不占有位置，最后父级盒子高度为0，就影响了下面的标准流盒子。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207090744999.jpg\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207090745976.jpg\"></p>\n<p><strong>总结：</strong></p>\n<ul>\n<li>由于浮动元素不再占用原文档流的位置，所以它会对后面的元素排版产生影响</li>\n<li>准确地说，并不是清除浮动，而是清除浮动后造成的影响</li>\n</ul>\n<p><strong>清除浮动本质</strong>：</p>\n<p>清除浮动主要为了解决父级元素因为子级浮动引起内部高度为0 的问题。清除浮动之后， 父级就会根据浮动的子盒子自动检测高度。父级有了高度，就不会影响下面的标准流了</p>\n<h2 id=\"清除浮动的方法\"><a href=\"#清除浮动的方法\" class=\"headerlink\" title=\"清除浮动的方法\"></a>清除浮动的方法</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">选择器 &#123; <span class=\"attribute\">clear</span>: 属性值; &#125;   <span class=\"attribute\">clear</span> 清除  </span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>属性值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>left</td>\n<td>不允许左侧有浮动元素（清除左侧浮动的影响）</td>\n</tr>\n<tr>\n<td>right</td>\n<td>不允许右侧有浮动元素（清除右侧浮动的影响）</td>\n</tr>\n<tr>\n<td>both</td>\n<td>同时清除左右两侧浮动的影响</td>\n</tr>\n</tbody></table>\n<p>实际工作中,几乎只用clear: both</p>\n<h3 id=\"1-额外标签法-隔墙法\"><a href=\"#1-额外标签法-隔墙法\" class=\"headerlink\" title=\"1).额外标签法(隔墙法)\"></a><strong>1).额外标签法(隔墙法)</strong></h3><p>是W3C推荐的做法是通过在浮动元素<strong>末尾</strong>添加一个空的标签例如 div style=”clear:both”，或则其他标签br等亦可。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"selector-tag\">div</span> style=&quot;<span class=\"attribute\">clear</span>:both<span class=\"string\">&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/div&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>优点：通俗易懂，书写方便</li>\n<li>缺点：添加许多无意义的标签，结构化较差。</li>\n</ul>\n<p><strong>2).父级添加overflow属性方法</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">可以给父级添加： </span><br><span class=\"line\"><span class=\"attribute\">overflow</span>为 hidden| <span class=\"attribute\">auto</span>| scroll  都可以实现。</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>优点： 代码简洁</li>\n<li>缺点： 内容增多时候容易造成不会自动换行导致内容被隐藏掉，无法显示需要溢出的元素。</li>\n</ul>\n<p><strong>3).使用after伪元素清除浮动</strong></p>\n<p>after 方式为空元素额外标签法的升级版，好处是不用单独加标签了</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.clearfix</span>:after &#123;</span><br><span class=\"line\">    content: <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">clear</span>: both;</span><br><span class=\"line\">    <span class=\"attribute\">visibility</span>: hidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">/* IE6、7 专有 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.clearfix</span> &#123;</span><br><span class=\"line\">    *zoom: <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>优点：符合闭合浮动思想  结构语义化正确</li>\n<li>缺点：由于IE6-7不支持:after，使用 zoom:1触发 hasLayout。</li>\n</ul>\n<p><strong>4).使用双伪元素清除浮动</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.clearfix</span>:before,</span><br><span class=\"line\">.clearfix:after &#123;</span><br><span class=\"line\">    content: <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: table;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.clearfix</span>:after &#123;</span><br><span class=\"line\">    clear: both;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.clearfix</span> &#123;</span><br><span class=\"line\">   *zoom: <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>优点： 代码更简洁</li>\n<li>缺点： 由于IE6-7不支持:after，使用 zoom:1触发 hasLayout。</li>\n</ul>\n<h2 id=\"清除浮动总结\"><a href=\"#清除浮动总结\" class=\"headerlink\" title=\"清除浮动总结\"></a>清除浮动总结</h2><h3 id=\"什么时候用清除浮动呢？\"><a href=\"#什么时候用清除浮动呢？\" class=\"headerlink\" title=\"什么时候用清除浮动呢？\"></a>什么时候用清除浮动呢？</h3><ol>\n<li>父级没高度</li>\n<li>子盒子浮动了</li>\n<li>影响下面布局了，我们就应该清除浮动了</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>清除浮动的方法</th>\n<th>优点</th>\n<th>缺点</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>额外标签法（隔墙法）</td>\n<td>通俗易懂，书写方便</td>\n<td>添加许多无意义的标签，结构化较差。</td>\n</tr>\n<tr>\n<td>父级overflow:hidden;</td>\n<td>书写简单</td>\n<td>溢出隐藏</td>\n</tr>\n<tr>\n<td>父级after伪元素</td>\n<td>结构语义化正确</td>\n<td>由于IE6-7不支持:after，兼容性问题</td>\n</tr>\n<tr>\n<td>父级双伪元素</td>\n<td>结构语义化正确</td>\n<td>由于IE6-7不支持:after，兼容性问题</td>\n</tr>\n</tbody></table>\n<h1 id=\"CSS属性书写顺序\"><a href=\"#CSS属性书写顺序\" class=\"headerlink\" title=\"CSS属性书写顺序\"></a>CSS属性书写顺序</h1><p>建议遵循以下顺序：</p>\n<ol>\n<li>布局定位属性：display / position / float / clear / visibility / overflow（建议 display 第一个写，毕竟关系到模式）</li>\n<li>自身属性：width / height / margin / padding / border / background</li>\n<li>文本属性：color / font / text-decoration / text-align / vertical-align / white- space / break-word</li>\n<li>其他属性（CSS3）：content / cursor / border-radius / box-shadow / text-shadow / background:linear-gradient …</li>\n</ol>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.jdc</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> <span class=\"number\">10px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">20px</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: Arial, <span class=\"string\">&#x27;Helvetica Neue&#x27;</span>, Helvetica, sans-serif;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,.<span class=\"number\">5</span>);</span><br><span class=\"line\">    -webkit-<span class=\"attribute\">border-radius</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">    -moz-<span class=\"attribute\">border-radius</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">    -o-<span class=\"attribute\">border-radius</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">    -ms-<span class=\"attribute\">border-radius</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<h1 id=\"浮动\"><a href=\"#浮动\" class=\"headerlink\" title=\"浮动\"></a>浮动</h1><h2 id=\"「1-CSS布局的三种机制」\"><a href=\"#「1-CSS布局的三种机制」\" class=\"headerlink\" title=\"「1. CSS布局的三种机制」\"></a><strong>「1. CSS布局的三种机制」</strong></h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">网页布局的核心——就是用CSS来摆放盒子。</span><br></pre></td></tr></table></figure>\n\n<p>CSS 提供了3种机制来设置盒子的摆放位置，分别是普通流（标准流）、浮动和定位，其中：</p>\n<h3 id=\"A-普通流（标准流）\"><a href=\"#A-普通流（标准流）\" class=\"headerlink\" title=\"A. 普通流（标准流）\"></a><strong>A. 普通流（标准流）</strong></h3><ol>\n<li><p>块级元素会独占一行，从上向下顺序排列；</p>\n</li>\n<li><ul>\n<li>常用元素：div、hr、p、h1~h6、ul、ol、dl、form、table</li>\n</ul>\n</li>\n<li><p>行内元素会按照顺序，从左到右顺序排列，碰到父元素边缘则自动换行；</p>\n</li>\n<li><ul>\n<li>常用元素：span、a、i、em等</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"B-浮动\"><a href=\"#B-浮动\" class=\"headerlink\" title=\"B. 浮动\"></a><strong>B. 浮动</strong></h3><ul>\n<li>让盒子从普通流中浮起来,主要作用让多个块级盒子一行显示。</li>\n</ul>\n<h3 id=\"C-定位\"><a href=\"#C-定位\" class=\"headerlink\" title=\"C. 定位\"></a><strong>C. 定位</strong></h3><ul>\n<li>将盒子定在浏览器的某一个位置——CSS 离不开定位，特别是后面的 js 特效。</li>\n</ul>\n<h2 id=\"「2-什么是浮动」\"><a href=\"#「2-什么是浮动」\" class=\"headerlink\" title=\"「2. 什么是浮动」\"></a><strong>「2. 什么是浮动」</strong></h2><p>元素的浮动是指设置了浮动属性的元素会：</p>\n<ul>\n<li>脱离标准普通流的控制,不占位置，脱标</li>\n<li>移动到指定位置。</li>\n</ul>\n<h3 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h3><ol>\n<li>让多个盒子(div)水平排列成一行，使得浮动称为布局的重要手段。</li>\n<li>可以实现盒子的左右对齐等等。</li>\n<li>浮动最早是用来控制图片，实现文字环绕图片效果。</li>\n<li>float属性会改变元素的display属性，任何元素都可以浮动。浮动元素会生成一个块级框，而不论它本身是何种元素。生成的块级框和我们前面的行内块极其相似。</li>\n</ol>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a><strong>语法</strong></h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">选择器 &#123; <span class=\"attribute\">float</span>: 属性值; &#125;</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>属性值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>none</td>\n<td>元素不浮动（默认值）</td>\n</tr>\n<tr>\n<td>left</td>\n<td>元素向左浮动</td>\n</tr>\n<tr>\n<td>right</td>\n<td>元素向右浮动</td>\n</tr>\n</tbody></table>\n<p>浮动只会影响当前的或者是后面的标准流盒子，不会影响前面的标准流。<br>**建议:**如果一个盒子里面有多个子盒子，如果其中一个盒子浮动了，其他兄弟也应该浮动。防止引起问题</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207090743663.jpg\"></p>\n<h2 id=\"浮动-float-小结\"><a href=\"#浮动-float-小结\" class=\"headerlink\" title=\"浮动(float)小结\"></a><strong>浮动(float)小结</strong></h2><table>\n<thead>\n<tr>\n<th>特点</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>浮</td>\n<td>加了浮动的盒子<strong>「是浮起来」</strong>的，漂浮在其他标准流盒子的上面。</td>\n</tr>\n<tr>\n<td>漏</td>\n<td>加了浮动的盒子<strong>「是不占位置的」</strong>，它原来的位置<strong>「漏给了标准流的盒子」</strong>。</td>\n</tr>\n<tr>\n<td>特</td>\n<td>「特别注意」：浮动元素会改变display属性， 类似转换为了行内块，但是元素之间没有空白缝隙</td>\n</tr>\n</tbody></table>\n<h1 id=\"清除浮动\"><a href=\"#清除浮动\" class=\"headerlink\" title=\"清除浮动\"></a>清除浮动</h1><p>因为父级盒子很多情况下，不方便给高度，但是子盒子浮动就不占有位置，最后父级盒子高度为0，就影响了下面的标准流盒子。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207090744999.jpg\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207090745976.jpg\"></p>\n<p><strong>总结：</strong></p>\n<ul>\n<li>由于浮动元素不再占用原文档流的位置，所以它会对后面的元素排版产生影响</li>\n<li>准确地说，并不是清除浮动，而是清除浮动后造成的影响</li>\n</ul>\n<p><strong>清除浮动本质</strong>：</p>\n<p>清除浮动主要为了解决父级元素因为子级浮动引起内部高度为0 的问题。清除浮动之后， 父级就会根据浮动的子盒子自动检测高度。父级有了高度，就不会影响下面的标准流了</p>\n<h2 id=\"清除浮动的方法\"><a href=\"#清除浮动的方法\" class=\"headerlink\" title=\"清除浮动的方法\"></a>清除浮动的方法</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">选择器 &#123; <span class=\"attribute\">clear</span>: 属性值; &#125;   <span class=\"attribute\">clear</span> 清除  </span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>属性值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>left</td>\n<td>不允许左侧有浮动元素（清除左侧浮动的影响）</td>\n</tr>\n<tr>\n<td>right</td>\n<td>不允许右侧有浮动元素（清除右侧浮动的影响）</td>\n</tr>\n<tr>\n<td>both</td>\n<td>同时清除左右两侧浮动的影响</td>\n</tr>\n</tbody></table>\n<p>实际工作中,几乎只用clear: both</p>\n<h3 id=\"1-额外标签法-隔墙法\"><a href=\"#1-额外标签法-隔墙法\" class=\"headerlink\" title=\"1).额外标签法(隔墙法)\"></a><strong>1).额外标签法(隔墙法)</strong></h3><p>是W3C推荐的做法是通过在浮动元素<strong>末尾</strong>添加一个空的标签例如 div style=”clear:both”，或则其他标签br等亦可。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"selector-tag\">div</span> style=&quot;<span class=\"attribute\">clear</span>:both<span class=\"string\">&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/div&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>优点：通俗易懂，书写方便</li>\n<li>缺点：添加许多无意义的标签，结构化较差。</li>\n</ul>\n<p><strong>2).父级添加overflow属性方法</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">可以给父级添加： </span><br><span class=\"line\"><span class=\"attribute\">overflow</span>为 hidden| <span class=\"attribute\">auto</span>| scroll  都可以实现。</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>优点： 代码简洁</li>\n<li>缺点： 内容增多时候容易造成不会自动换行导致内容被隐藏掉，无法显示需要溢出的元素。</li>\n</ul>\n<p><strong>3).使用after伪元素清除浮动</strong></p>\n<p>after 方式为空元素额外标签法的升级版，好处是不用单独加标签了</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.clearfix</span>:after &#123;</span><br><span class=\"line\">    content: <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">clear</span>: both;</span><br><span class=\"line\">    <span class=\"attribute\">visibility</span>: hidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">/* IE6、7 专有 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.clearfix</span> &#123;</span><br><span class=\"line\">    *zoom: <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>优点：符合闭合浮动思想  结构语义化正确</li>\n<li>缺点：由于IE6-7不支持:after，使用 zoom:1触发 hasLayout。</li>\n</ul>\n<p><strong>4).使用双伪元素清除浮动</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.clearfix</span>:before,</span><br><span class=\"line\">.clearfix:after &#123;</span><br><span class=\"line\">    content: <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: table;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.clearfix</span>:after &#123;</span><br><span class=\"line\">    clear: both;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.clearfix</span> &#123;</span><br><span class=\"line\">   *zoom: <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>优点： 代码更简洁</li>\n<li>缺点： 由于IE6-7不支持:after，使用 zoom:1触发 hasLayout。</li>\n</ul>\n<h2 id=\"清除浮动总结\"><a href=\"#清除浮动总结\" class=\"headerlink\" title=\"清除浮动总结\"></a>清除浮动总结</h2><h3 id=\"什么时候用清除浮动呢？\"><a href=\"#什么时候用清除浮动呢？\" class=\"headerlink\" title=\"什么时候用清除浮动呢？\"></a>什么时候用清除浮动呢？</h3><ol>\n<li>父级没高度</li>\n<li>子盒子浮动了</li>\n<li>影响下面布局了，我们就应该清除浮动了</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>清除浮动的方法</th>\n<th>优点</th>\n<th>缺点</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>额外标签法（隔墙法）</td>\n<td>通俗易懂，书写方便</td>\n<td>添加许多无意义的标签，结构化较差。</td>\n</tr>\n<tr>\n<td>父级overflow:hidden;</td>\n<td>书写简单</td>\n<td>溢出隐藏</td>\n</tr>\n<tr>\n<td>父级after伪元素</td>\n<td>结构语义化正确</td>\n<td>由于IE6-7不支持:after，兼容性问题</td>\n</tr>\n<tr>\n<td>父级双伪元素</td>\n<td>结构语义化正确</td>\n<td>由于IE6-7不支持:after，兼容性问题</td>\n</tr>\n</tbody></table>\n<h1 id=\"CSS属性书写顺序\"><a href=\"#CSS属性书写顺序\" class=\"headerlink\" title=\"CSS属性书写顺序\"></a>CSS属性书写顺序</h1><p>建议遵循以下顺序：</p>\n<ol>\n<li>布局定位属性：display / position / float / clear / visibility / overflow（建议 display 第一个写，毕竟关系到模式）</li>\n<li>自身属性：width / height / margin / padding / border / background</li>\n<li>文本属性：color / font / text-decoration / text-align / vertical-align / white- space / break-word</li>\n<li>其他属性（CSS3）：content / cursor / border-radius / box-shadow / text-shadow / background:linear-gradient …</li>\n</ol>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.jdc</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> <span class=\"number\">10px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">20px</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: Arial, <span class=\"string\">&#x27;Helvetica Neue&#x27;</span>, Helvetica, sans-serif;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,.<span class=\"number\">5</span>);</span><br><span class=\"line\">    -webkit-<span class=\"attribute\">border-radius</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">    -moz-<span class=\"attribute\">border-radius</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">    -o-<span class=\"attribute\">border-radius</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">    -ms-<span class=\"attribute\">border-radius</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n"},{"title":"CSS盒子模型","date":"2022-04-19T16:00:00.000Z","updated":"2022-07-05T16:00:00.000Z","keywords":null,"description":null,"top_img":"./img/bg13.jpg","cover":"./img/bg7.jpg","_content":"# 概述\n\ncss学习三大重点： css 盒子模型 、 浮动 、 定位 \n\n## **网页布局的本质**\n\n- 首先利用CSS设置好盒子的大小，然后摆放盒子的位置。\n- 最后把网页元素比如文字图片等等，放入盒子里面。\n\n# 1. 盒子模型(Box Model)\n\n- 盒子模型就是把HTML页面中的布局元素看作是一个矩形的盒子，也就是一个盛装内容的容器。\n- 盒子模型由元素的内容、边框（border）、内边距（padding）、和外边距（margin）组成。\n- 盒子里面的文字和图片等元素是 内容区域\n- 盒子的厚度 我们称为为盒子的边框\n- 盒子内容与边框的距离是内边距\n- 盒子与盒子之间的距离是外边距\n\n## **W3c标准盒子模型**\n\n标准 w3c 盒子模型的范围包括 margin、border、padding、content\n\n当设置为box-sizing: content-box;时，将采用标准模式解析计算，也是默认模式；\n\n内盒尺寸计算(元素实际大小)\n\n- 宽度：Element Height = content height + padding + border （Height为内容高度）\n- 高度：Element  Width = content width + padding + border （Width为内容宽度）\n- 盒子的实际大小：**内容的宽度和高度 +  内边距  +  边框**  \n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207082125688.png)\n\n## **IE盒子模型**\n\nIE 盒子模型的 content 部分包含了 border 和 pading\n\n当设置为box-sizing: border-box时，将采用怪异模式解析计算；\n\n# 2. 盒子边框(border)\n\n| 属性         | 作用                   |\n| ------------ | ---------------------- |\n| border-width | 定义边框粗细，单位是px |\n| border-style | 边框的样式             |\n| border-color | 边框颜色               |\n\n### **边框的样式：**\n\n- none：没有边框即忽略所有边框的宽度（默认值）\n- solid：边框为单实线(最为常用的)\n- dashed：边框为虚线\n- dotted：边框为点线\n\n```css\n边框综合设置\nborder : border-width || border-style || border-color \n\nborder: 1px solid red;  没有顺序要求  \n```\n\n### **盒子边框写法总结表：**\n\n很多情况下，我们不需要指定4个边框，我们是可以单独给4个边框分别指定的。\n\n| 上边框                     | 下边框                        | 左边框                      | 右边框                       |\n| -------------------------- | ----------------------------- | --------------------------- | ---------------------------- |\n| border-top-style:样式;     | border-bottom-style:样式;     | border-left-style:样式;     | border-right-style:样式;     |\n| border-top-width:宽度;     | border- bottom-width:宽度;    | border-left-width:宽度;     | border-right-width:宽度;     |\n| border-top-color:颜色;     | border- bottom-color:颜色;    | border-left-color:颜色;     | border-right-color:颜色;     |\n| border-top:宽度 样式 颜色; | border-bottom:宽度 样式 颜色; | border-left:宽度 样式 颜色; | border-right:宽度 样式 颜色; |\n\n### **表格的细线边框：**\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207082133984.png)\n\n- 通过表格的`cellspacing=\"0\"`,将单元格与单元格之间的距离设置为0，\n- 但是两个单元格之间的边框会出现重叠，从而使边框变粗\n- 通过css属性：table{ border-collapse:collapse; }  \n\n`collapse` 单词是合并的意思,`border-collapse: collapse;`表示相邻边框合并在一起。\n\n```css\n<style>\n table {\n  width: 500px;\n  height: 300px;\n  border: 1px solid red;\n }\n td {\n  border: 1px solid red;\n  text-align: center;\n }\n table, td {\n  border-collapse: collapse;  /*合并相邻边框*/\n }\n</style>\n```\n\n# 3. 内边距(padding)\n\npadding属性用于设置内边距。是指边框与内容之间的距离。\n\n### **设置**\n\n| 属性           | 作用     |\n| -------------- | -------- |\n| padding-left   | 左内边距 |\n| padding-left   | 右内边距 |\n| padding-top    | 上内边距 |\n| padding-bottom | 下内边距 |\n\n### **padding简写**\n\n| 值的个数 | 表达意思                                          |\n| -------- | ------------------------------------------------- |\n| 1个值    | padding：上下左右内边距;                          |\n| 2个值    | padding:   上下内边距   左右内边距 ；             |\n| 3个值    | padding：上内边距  左右内边距  下内边距；         |\n| 4个值    | padding:   上内边距 右内边距 下内边距 左内边距 ； |\n\n当我们给盒子指定padding值之后， 发生了2件事情：\n\n1. 内容和边框 有了距离，添加了内边距。\n2. 盒子会变大\n\n**解决措施：**通过给设置了宽高的盒子，减去相应的内边距的值，维持盒子原有的大小。\n\n**padding不影响盒子大小情况：**如果没有给一个盒子指定宽度， 此时，如果给这个盒子指定padding， 则不会撑开盒子。\n\n# 4. 外边距（margin）\n\nmargin属性用于设置外边距。margin就是控制`盒子和盒子之间的距离`\n\n## **设置**\n\n| 属性          | 作用     |\n| ------------- | -------- |\n| margin-left   | 左外边距 |\n| margin-right  | 右外边距 |\n| margin-top    | 上外边距 |\n| margin-bottom | 下外边距 |\n\nmargin值的简写 （复合写法）代表意思  跟 padding 完全相同。\n\n## **块级盒子水平居中**\n\n- 盒子必须指定宽度（width）\n- 然后就给左右的外边距都设置为auto\n\n实际工作中常用这种方式进行网页布局，示例代码如下：\n\n```css\n.header  { \n    width: 960px; \n    margin: 0 auto;\n}\n```\n\n常见的写法，以下三种都可以\n\n- margin-left: auto;  margin-right: auto;\n- margin: auto;\n- margin: 0 auto;\n\n## **文字居中和盒子居中区别**\n\n1. 盒子内的文字水平居中是 text-align: center; 而且还可以让 行内元素和行内块居中对齐\n2. 块级盒子水平居中  左右margin 改为 auto\n\n## **插入图片和背景图片区别**\n\n1. `插入图片`我们用的最多 比如产品展示类  移动位置只能靠盒模型 padding margin\n2. `背景图片`我们一般用于小图标背景或者超大背景图片、背景图片，移动位置只能通过  background-position\n\n## **清除元素的默认内外边距**\n\n- 行内元素为了照顾兼容性,尽量只设置左右内外边距，不要设置上下内外边距。\n\n```css\n* {\n   padding:0;         /* 清除内边距 */\n   margin:0;          /* 清除外边距 */\n}\n```\n\n# 5.外边距合并\n\n使用margin定义块元素的**「垂直外边距」**时，可能会出现外边距的合并。\n\n## (1). 相邻块元素垂直外边距的合并\n\n- 当上下相邻的两个块元素相遇时，如果上面的元素有下外边距margin-bottom\n- 下面的元素有上外边距margin-top，则他们之间的垂直间距不是margin-bottom与margin-top之和\n- **「取两个值中的较大者」**这种现象被称为相邻块元素垂直外边距的合并（也称外边距塌陷）。\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207082147271.png)\n\n\n\n**「解决方案：尽量给只给一个盒子添加margin值」**。\n\n## (2). 嵌套块元素垂直外边距的合并（塌陷）\n\n- 对于两个嵌套关系的块元素，如果父元素没有**上内边距及边框**\n- 父元素的上外边距会与子元素的上外边距发生合并\n- 合并后的外边距为两者中的较大者\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207082149140.png)\n\n**「解决方案：」**\n\n1. 可以为父元素定义上边框。\n2. 可以为父元素定义上内边距\n3. 可以为父元素添加overflow: hidden。\n\n还有其他方法，比如浮动、固定、绝对定位的盒子不会有问题，后面咱们再总结。。。\n\n## 盒子模型布局稳定性\n\n优先使用  宽度 （width）  其次 使用内边距（padding）   再次  外边距（margin）\n\n```css\nwidth >  padding  >   margin   \n```\n\n**原因：**\n\n- margin 会有外边距合并 还有 ie6下面margin 加倍的bug（讨厌）所以最后使用。\n- padding  会影响盒子大小， 需要进行加减计算（麻烦） 其次使用。\n- width  没有问题（嗨皮）我们经常使用宽度剩余法 高度剩余法来做。\n\n# 6. CSS3 新增\n\n## **圆角边框：**\n\n```css\nborder-radius:length;\n\nborder-top-left-radius   定义了左上角的弧度\nborder-top-right-radius   定义了右上角的弧度\nborder-bottom-right-radius   定义了右下角的弧度\nborder-bottom-left-radius   定义了左下角的弧度\n```\n\n- 其中每一个值可以为 数值或百分比的形式。\n- 技巧：让一个正方形 变成圆圈\n\n```css\nborder-radius: 50%;\n```\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207082152730.png)\n\n如果要在四个角上一一指定，可以使用以下规则：\n\n```css\nborder-radius: 左上角 右上角  右下角  左下角;\n```\n\n1. 四个值: 第一个值为左上角，第二个值为右上角，第三个值为右下角，第四个值为左下角。\n2. 三个值: 第一个值为左上角, 第二个值为右上角和左下角，第三个值为右下角\n3. 两个值: 第一个值为左上角与右下角，第二个值为右上角与左下角\n4. 一个值：四个圆角值相同\n\n## **盒子阴影(box-shadow)：**\n\n```css\nbox-shadow: offset-x offset-y [blur [spread]] [color] [inset]\n```\n\n| 值       | 描述                                           |\n| -------- | ---------------------------------------------- |\n| offset-x | 阴影的水平偏移量。正数向右偏移，负数向左偏移。 |\n| offset-y | 阴影的垂直偏移量。正数向下偏移，负数向上偏移。 |\n| blur     | 可选。阴影模糊距离，不能取负数。               |\n| spread   | 可选。阴影大小                                 |\n| color    | 可选。阴影的颜色                               |\n| inset    | 可选。表示添加内阴影，默认为外阴影             |\n\n```css\ndiv {\n   width: 200px;\n   height: 200px;\n   border: 10px solid red;\n   /* box-shadow: 5px 5px 3px 4px rgba(0, 0, 0, .4);  */\n   /* box-shadow:水平位置 垂直位置 模糊距离 阴影尺寸（影子大小） 阴影颜色  内/外阴影； */\n   box-shadow: 0 15px 30px  rgba(0, 0, 0, .4);   \n}\n```\n\n\n\n\n\n\n\n","source":"_posts/前端/CSS盒子模型.md","raw":"---\ntitle: CSS盒子模型\ndate: 2022-04-20\nupdated: 2022-07-06\ntags:\n  - 小白的前端之路\n  - CSS基础\n  - CSS三大重点\ncategories: 前端开发\nkeywords: \ndescription: \ntop_img: ./img/bg13.jpg\ncover: ./img/bg7.jpg\n\n---\n# 概述\n\ncss学习三大重点： css 盒子模型 、 浮动 、 定位 \n\n## **网页布局的本质**\n\n- 首先利用CSS设置好盒子的大小，然后摆放盒子的位置。\n- 最后把网页元素比如文字图片等等，放入盒子里面。\n\n# 1. 盒子模型(Box Model)\n\n- 盒子模型就是把HTML页面中的布局元素看作是一个矩形的盒子，也就是一个盛装内容的容器。\n- 盒子模型由元素的内容、边框（border）、内边距（padding）、和外边距（margin）组成。\n- 盒子里面的文字和图片等元素是 内容区域\n- 盒子的厚度 我们称为为盒子的边框\n- 盒子内容与边框的距离是内边距\n- 盒子与盒子之间的距离是外边距\n\n## **W3c标准盒子模型**\n\n标准 w3c 盒子模型的范围包括 margin、border、padding、content\n\n当设置为box-sizing: content-box;时，将采用标准模式解析计算，也是默认模式；\n\n内盒尺寸计算(元素实际大小)\n\n- 宽度：Element Height = content height + padding + border （Height为内容高度）\n- 高度：Element  Width = content width + padding + border （Width为内容宽度）\n- 盒子的实际大小：**内容的宽度和高度 +  内边距  +  边框**  \n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207082125688.png)\n\n## **IE盒子模型**\n\nIE 盒子模型的 content 部分包含了 border 和 pading\n\n当设置为box-sizing: border-box时，将采用怪异模式解析计算；\n\n# 2. 盒子边框(border)\n\n| 属性         | 作用                   |\n| ------------ | ---------------------- |\n| border-width | 定义边框粗细，单位是px |\n| border-style | 边框的样式             |\n| border-color | 边框颜色               |\n\n### **边框的样式：**\n\n- none：没有边框即忽略所有边框的宽度（默认值）\n- solid：边框为单实线(最为常用的)\n- dashed：边框为虚线\n- dotted：边框为点线\n\n```css\n边框综合设置\nborder : border-width || border-style || border-color \n\nborder: 1px solid red;  没有顺序要求  \n```\n\n### **盒子边框写法总结表：**\n\n很多情况下，我们不需要指定4个边框，我们是可以单独给4个边框分别指定的。\n\n| 上边框                     | 下边框                        | 左边框                      | 右边框                       |\n| -------------------------- | ----------------------------- | --------------------------- | ---------------------------- |\n| border-top-style:样式;     | border-bottom-style:样式;     | border-left-style:样式;     | border-right-style:样式;     |\n| border-top-width:宽度;     | border- bottom-width:宽度;    | border-left-width:宽度;     | border-right-width:宽度;     |\n| border-top-color:颜色;     | border- bottom-color:颜色;    | border-left-color:颜色;     | border-right-color:颜色;     |\n| border-top:宽度 样式 颜色; | border-bottom:宽度 样式 颜色; | border-left:宽度 样式 颜色; | border-right:宽度 样式 颜色; |\n\n### **表格的细线边框：**\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207082133984.png)\n\n- 通过表格的`cellspacing=\"0\"`,将单元格与单元格之间的距离设置为0，\n- 但是两个单元格之间的边框会出现重叠，从而使边框变粗\n- 通过css属性：table{ border-collapse:collapse; }  \n\n`collapse` 单词是合并的意思,`border-collapse: collapse;`表示相邻边框合并在一起。\n\n```css\n<style>\n table {\n  width: 500px;\n  height: 300px;\n  border: 1px solid red;\n }\n td {\n  border: 1px solid red;\n  text-align: center;\n }\n table, td {\n  border-collapse: collapse;  /*合并相邻边框*/\n }\n</style>\n```\n\n# 3. 内边距(padding)\n\npadding属性用于设置内边距。是指边框与内容之间的距离。\n\n### **设置**\n\n| 属性           | 作用     |\n| -------------- | -------- |\n| padding-left   | 左内边距 |\n| padding-left   | 右内边距 |\n| padding-top    | 上内边距 |\n| padding-bottom | 下内边距 |\n\n### **padding简写**\n\n| 值的个数 | 表达意思                                          |\n| -------- | ------------------------------------------------- |\n| 1个值    | padding：上下左右内边距;                          |\n| 2个值    | padding:   上下内边距   左右内边距 ；             |\n| 3个值    | padding：上内边距  左右内边距  下内边距；         |\n| 4个值    | padding:   上内边距 右内边距 下内边距 左内边距 ； |\n\n当我们给盒子指定padding值之后， 发生了2件事情：\n\n1. 内容和边框 有了距离，添加了内边距。\n2. 盒子会变大\n\n**解决措施：**通过给设置了宽高的盒子，减去相应的内边距的值，维持盒子原有的大小。\n\n**padding不影响盒子大小情况：**如果没有给一个盒子指定宽度， 此时，如果给这个盒子指定padding， 则不会撑开盒子。\n\n# 4. 外边距（margin）\n\nmargin属性用于设置外边距。margin就是控制`盒子和盒子之间的距离`\n\n## **设置**\n\n| 属性          | 作用     |\n| ------------- | -------- |\n| margin-left   | 左外边距 |\n| margin-right  | 右外边距 |\n| margin-top    | 上外边距 |\n| margin-bottom | 下外边距 |\n\nmargin值的简写 （复合写法）代表意思  跟 padding 完全相同。\n\n## **块级盒子水平居中**\n\n- 盒子必须指定宽度（width）\n- 然后就给左右的外边距都设置为auto\n\n实际工作中常用这种方式进行网页布局，示例代码如下：\n\n```css\n.header  { \n    width: 960px; \n    margin: 0 auto;\n}\n```\n\n常见的写法，以下三种都可以\n\n- margin-left: auto;  margin-right: auto;\n- margin: auto;\n- margin: 0 auto;\n\n## **文字居中和盒子居中区别**\n\n1. 盒子内的文字水平居中是 text-align: center; 而且还可以让 行内元素和行内块居中对齐\n2. 块级盒子水平居中  左右margin 改为 auto\n\n## **插入图片和背景图片区别**\n\n1. `插入图片`我们用的最多 比如产品展示类  移动位置只能靠盒模型 padding margin\n2. `背景图片`我们一般用于小图标背景或者超大背景图片、背景图片，移动位置只能通过  background-position\n\n## **清除元素的默认内外边距**\n\n- 行内元素为了照顾兼容性,尽量只设置左右内外边距，不要设置上下内外边距。\n\n```css\n* {\n   padding:0;         /* 清除内边距 */\n   margin:0;          /* 清除外边距 */\n}\n```\n\n# 5.外边距合并\n\n使用margin定义块元素的**「垂直外边距」**时，可能会出现外边距的合并。\n\n## (1). 相邻块元素垂直外边距的合并\n\n- 当上下相邻的两个块元素相遇时，如果上面的元素有下外边距margin-bottom\n- 下面的元素有上外边距margin-top，则他们之间的垂直间距不是margin-bottom与margin-top之和\n- **「取两个值中的较大者」**这种现象被称为相邻块元素垂直外边距的合并（也称外边距塌陷）。\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207082147271.png)\n\n\n\n**「解决方案：尽量给只给一个盒子添加margin值」**。\n\n## (2). 嵌套块元素垂直外边距的合并（塌陷）\n\n- 对于两个嵌套关系的块元素，如果父元素没有**上内边距及边框**\n- 父元素的上外边距会与子元素的上外边距发生合并\n- 合并后的外边距为两者中的较大者\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207082149140.png)\n\n**「解决方案：」**\n\n1. 可以为父元素定义上边框。\n2. 可以为父元素定义上内边距\n3. 可以为父元素添加overflow: hidden。\n\n还有其他方法，比如浮动、固定、绝对定位的盒子不会有问题，后面咱们再总结。。。\n\n## 盒子模型布局稳定性\n\n优先使用  宽度 （width）  其次 使用内边距（padding）   再次  外边距（margin）\n\n```css\nwidth >  padding  >   margin   \n```\n\n**原因：**\n\n- margin 会有外边距合并 还有 ie6下面margin 加倍的bug（讨厌）所以最后使用。\n- padding  会影响盒子大小， 需要进行加减计算（麻烦） 其次使用。\n- width  没有问题（嗨皮）我们经常使用宽度剩余法 高度剩余法来做。\n\n# 6. CSS3 新增\n\n## **圆角边框：**\n\n```css\nborder-radius:length;\n\nborder-top-left-radius   定义了左上角的弧度\nborder-top-right-radius   定义了右上角的弧度\nborder-bottom-right-radius   定义了右下角的弧度\nborder-bottom-left-radius   定义了左下角的弧度\n```\n\n- 其中每一个值可以为 数值或百分比的形式。\n- 技巧：让一个正方形 变成圆圈\n\n```css\nborder-radius: 50%;\n```\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207082152730.png)\n\n如果要在四个角上一一指定，可以使用以下规则：\n\n```css\nborder-radius: 左上角 右上角  右下角  左下角;\n```\n\n1. 四个值: 第一个值为左上角，第二个值为右上角，第三个值为右下角，第四个值为左下角。\n2. 三个值: 第一个值为左上角, 第二个值为右上角和左下角，第三个值为右下角\n3. 两个值: 第一个值为左上角与右下角，第二个值为右上角与左下角\n4. 一个值：四个圆角值相同\n\n## **盒子阴影(box-shadow)：**\n\n```css\nbox-shadow: offset-x offset-y [blur [spread]] [color] [inset]\n```\n\n| 值       | 描述                                           |\n| -------- | ---------------------------------------------- |\n| offset-x | 阴影的水平偏移量。正数向右偏移，负数向左偏移。 |\n| offset-y | 阴影的垂直偏移量。正数向下偏移，负数向上偏移。 |\n| blur     | 可选。阴影模糊距离，不能取负数。               |\n| spread   | 可选。阴影大小                                 |\n| color    | 可选。阴影的颜色                               |\n| inset    | 可选。表示添加内阴影，默认为外阴影             |\n\n```css\ndiv {\n   width: 200px;\n   height: 200px;\n   border: 10px solid red;\n   /* box-shadow: 5px 5px 3px 4px rgba(0, 0, 0, .4);  */\n   /* box-shadow:水平位置 垂直位置 模糊距离 阴影尺寸（影子大小） 阴影颜色  内/外阴影； */\n   box-shadow: 0 15px 30px  rgba(0, 0, 0, .4);   \n}\n```\n\n\n\n\n\n\n\n","slug":"前端/CSS盒子模型","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cl5db79k0000hywtuaqmm8ycf","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>css学习三大重点： css 盒子模型 、 浮动 、 定位 </p>\n<h2 id=\"网页布局的本质\"><a href=\"#网页布局的本质\" class=\"headerlink\" title=\"网页布局的本质\"></a><strong>网页布局的本质</strong></h2><ul>\n<li>首先利用CSS设置好盒子的大小，然后摆放盒子的位置。</li>\n<li>最后把网页元素比如文字图片等等，放入盒子里面。</li>\n</ul>\n<h1 id=\"1-盒子模型-Box-Model\"><a href=\"#1-盒子模型-Box-Model\" class=\"headerlink\" title=\"1. 盒子模型(Box Model)\"></a>1. 盒子模型(Box Model)</h1><ul>\n<li>盒子模型就是把HTML页面中的布局元素看作是一个矩形的盒子，也就是一个盛装内容的容器。</li>\n<li>盒子模型由元素的内容、边框（border）、内边距（padding）、和外边距（margin）组成。</li>\n<li>盒子里面的文字和图片等元素是 内容区域</li>\n<li>盒子的厚度 我们称为为盒子的边框</li>\n<li>盒子内容与边框的距离是内边距</li>\n<li>盒子与盒子之间的距离是外边距</li>\n</ul>\n<h2 id=\"W3c标准盒子模型\"><a href=\"#W3c标准盒子模型\" class=\"headerlink\" title=\"W3c标准盒子模型\"></a><strong>W3c标准盒子模型</strong></h2><p>标准 w3c 盒子模型的范围包括 margin、border、padding、content</p>\n<p>当设置为box-sizing: content-box;时，将采用标准模式解析计算，也是默认模式；</p>\n<p>内盒尺寸计算(元素实际大小)</p>\n<ul>\n<li>宽度：Element Height = content height + padding + border （Height为内容高度）</li>\n<li>高度：Element  Width = content width + padding + border （Width为内容宽度）</li>\n<li>盒子的实际大小：<strong>内容的宽度和高度 +  内边距  +  边框</strong>  </li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207082125688.png\"></p>\n<h2 id=\"IE盒子模型\"><a href=\"#IE盒子模型\" class=\"headerlink\" title=\"IE盒子模型\"></a><strong>IE盒子模型</strong></h2><p>IE 盒子模型的 content 部分包含了 border 和 pading</p>\n<p>当设置为box-sizing: border-box时，将采用怪异模式解析计算；</p>\n<h1 id=\"2-盒子边框-border\"><a href=\"#2-盒子边框-border\" class=\"headerlink\" title=\"2. 盒子边框(border)\"></a>2. 盒子边框(border)</h1><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>border-width</td>\n<td>定义边框粗细，单位是px</td>\n</tr>\n<tr>\n<td>border-style</td>\n<td>边框的样式</td>\n</tr>\n<tr>\n<td>border-color</td>\n<td>边框颜色</td>\n</tr>\n</tbody></table>\n<h3 id=\"边框的样式：\"><a href=\"#边框的样式：\" class=\"headerlink\" title=\"边框的样式：\"></a><strong>边框的样式：</strong></h3><ul>\n<li>none：没有边框即忽略所有边框的宽度（默认值）</li>\n<li>solid：边框为单实线(最为常用的)</li>\n<li>dashed：边框为虚线</li>\n<li>dotted：边框为点线</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">边框综合设置</span><br><span class=\"line\"><span class=\"attribute\">border</span> : border-width || border-style || border-color </span><br><span class=\"line\"></span><br><span class=\"line\">border: <span class=\"number\">1px</span> solid red;  没有顺序要求  </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"盒子边框写法总结表：\"><a href=\"#盒子边框写法总结表：\" class=\"headerlink\" title=\"盒子边框写法总结表：\"></a><strong>盒子边框写法总结表：</strong></h3><p>很多情况下，我们不需要指定4个边框，我们是可以单独给4个边框分别指定的。</p>\n<table>\n<thead>\n<tr>\n<th>上边框</th>\n<th>下边框</th>\n<th>左边框</th>\n<th>右边框</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>border-top-style:样式;</td>\n<td>border-bottom-style:样式;</td>\n<td>border-left-style:样式;</td>\n<td>border-right-style:样式;</td>\n</tr>\n<tr>\n<td>border-top-width:宽度;</td>\n<td>border- bottom-width:宽度;</td>\n<td>border-left-width:宽度;</td>\n<td>border-right-width:宽度;</td>\n</tr>\n<tr>\n<td>border-top-color:颜色;</td>\n<td>border- bottom-color:颜色;</td>\n<td>border-left-color:颜色;</td>\n<td>border-right-color:颜色;</td>\n</tr>\n<tr>\n<td>border-top:宽度 样式 颜色;</td>\n<td>border-bottom:宽度 样式 颜色;</td>\n<td>border-left:宽度 样式 颜色;</td>\n<td>border-right:宽度 样式 颜色;</td>\n</tr>\n</tbody></table>\n<h3 id=\"表格的细线边框：\"><a href=\"#表格的细线边框：\" class=\"headerlink\" title=\"表格的细线边框：\"></a><strong>表格的细线边框：</strong></h3><p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207082133984.png\"></p>\n<ul>\n<li>通过表格的<code>cellspacing=&quot;0&quot;</code>,将单元格与单元格之间的距离设置为0，</li>\n<li>但是两个单元格之间的边框会出现重叠，从而使边框变粗</li>\n<li>通过css属性：table{ border-collapse:collapse; }  </li>\n</ul>\n<p><code>collapse</code> 单词是合并的意思,<code>border-collapse: collapse;</code>表示相邻边框合并在一起。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\"> <span class=\"selector-tag\">table</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">500px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid red;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"selector-tag\">td</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid red;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"selector-tag\">table</span>, <span class=\"selector-tag\">td</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border-collapse</span>: collapse;  <span class=\"comment\">/*合并相邻边框*/</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-内边距-padding\"><a href=\"#3-内边距-padding\" class=\"headerlink\" title=\"3. 内边距(padding)\"></a>3. 内边距(padding)</h1><p>padding属性用于设置内边距。是指边框与内容之间的距离。</p>\n<h3 id=\"设置\"><a href=\"#设置\" class=\"headerlink\" title=\"设置\"></a><strong>设置</strong></h3><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>padding-left</td>\n<td>左内边距</td>\n</tr>\n<tr>\n<td>padding-left</td>\n<td>右内边距</td>\n</tr>\n<tr>\n<td>padding-top</td>\n<td>上内边距</td>\n</tr>\n<tr>\n<td>padding-bottom</td>\n<td>下内边距</td>\n</tr>\n</tbody></table>\n<h3 id=\"padding简写\"><a href=\"#padding简写\" class=\"headerlink\" title=\"padding简写\"></a><strong>padding简写</strong></h3><table>\n<thead>\n<tr>\n<th>值的个数</th>\n<th>表达意思</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1个值</td>\n<td>padding：上下左右内边距;</td>\n</tr>\n<tr>\n<td>2个值</td>\n<td>padding:   上下内边距   左右内边距 ；</td>\n</tr>\n<tr>\n<td>3个值</td>\n<td>padding：上内边距  左右内边距  下内边距；</td>\n</tr>\n<tr>\n<td>4个值</td>\n<td>padding:   上内边距 右内边距 下内边距 左内边距 ；</td>\n</tr>\n</tbody></table>\n<p>当我们给盒子指定padding值之后， 发生了2件事情：</p>\n<ol>\n<li>内容和边框 有了距离，添加了内边距。</li>\n<li>盒子会变大</li>\n</ol>\n<p><strong>解决措施：</strong>通过给设置了宽高的盒子，减去相应的内边距的值，维持盒子原有的大小。</p>\n<p><strong>padding不影响盒子大小情况：</strong>如果没有给一个盒子指定宽度， 此时，如果给这个盒子指定padding， 则不会撑开盒子。</p>\n<h1 id=\"4-外边距（margin）\"><a href=\"#4-外边距（margin）\" class=\"headerlink\" title=\"4. 外边距（margin）\"></a>4. 外边距（margin）</h1><p>margin属性用于设置外边距。margin就是控制<code>盒子和盒子之间的距离</code></p>\n<h2 id=\"设置-1\"><a href=\"#设置-1\" class=\"headerlink\" title=\"设置\"></a><strong>设置</strong></h2><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>margin-left</td>\n<td>左外边距</td>\n</tr>\n<tr>\n<td>margin-right</td>\n<td>右外边距</td>\n</tr>\n<tr>\n<td>margin-top</td>\n<td>上外边距</td>\n</tr>\n<tr>\n<td>margin-bottom</td>\n<td>下外边距</td>\n</tr>\n</tbody></table>\n<p>margin值的简写 （复合写法）代表意思  跟 padding 完全相同。</p>\n<h2 id=\"块级盒子水平居中\"><a href=\"#块级盒子水平居中\" class=\"headerlink\" title=\"块级盒子水平居中\"></a><strong>块级盒子水平居中</strong></h2><ul>\n<li>盒子必须指定宽度（width）</li>\n<li>然后就给左右的外边距都设置为auto</li>\n</ul>\n<p>实际工作中常用这种方式进行网页布局，示例代码如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.header</span>  &#123; </span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">960px</span>; </span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>常见的写法，以下三种都可以</p>\n<ul>\n<li>margin-left: auto;  margin-right: auto;</li>\n<li>margin: auto;</li>\n<li>margin: 0 auto;</li>\n</ul>\n<h2 id=\"文字居中和盒子居中区别\"><a href=\"#文字居中和盒子居中区别\" class=\"headerlink\" title=\"文字居中和盒子居中区别\"></a><strong>文字居中和盒子居中区别</strong></h2><ol>\n<li>盒子内的文字水平居中是 text-align: center; 而且还可以让 行内元素和行内块居中对齐</li>\n<li>块级盒子水平居中  左右margin 改为 auto</li>\n</ol>\n<h2 id=\"插入图片和背景图片区别\"><a href=\"#插入图片和背景图片区别\" class=\"headerlink\" title=\"插入图片和背景图片区别\"></a><strong>插入图片和背景图片区别</strong></h2><ol>\n<li><code>插入图片</code>我们用的最多 比如产品展示类  移动位置只能靠盒模型 padding margin</li>\n<li><code>背景图片</code>我们一般用于小图标背景或者超大背景图片、背景图片，移动位置只能通过  background-position</li>\n</ol>\n<h2 id=\"清除元素的默认内外边距\"><a href=\"#清除元素的默认内外边距\" class=\"headerlink\" title=\"清除元素的默认内外边距\"></a><strong>清除元素的默认内外边距</strong></h2><ul>\n<li>行内元素为了照顾兼容性,尽量只设置左右内外边距，不要设置上下内外边距。</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* &#123;</span><br><span class=\"line\">   <span class=\"attribute\">padding</span>:<span class=\"number\">0</span>;         <span class=\"comment\">/* 清除内边距 */</span></span><br><span class=\"line\">   <span class=\"attribute\">margin</span>:<span class=\"number\">0</span>;          <span class=\"comment\">/* 清除外边距 */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"5-外边距合并\"><a href=\"#5-外边距合并\" class=\"headerlink\" title=\"5.外边距合并\"></a>5.外边距合并</h1><p>使用margin定义块元素的<strong>「垂直外边距」</strong>时，可能会出现外边距的合并。</p>\n<h2 id=\"1-相邻块元素垂直外边距的合并\"><a href=\"#1-相邻块元素垂直外边距的合并\" class=\"headerlink\" title=\"(1). 相邻块元素垂直外边距的合并\"></a>(1). 相邻块元素垂直外边距的合并</h2><ul>\n<li>当上下相邻的两个块元素相遇时，如果上面的元素有下外边距margin-bottom</li>\n<li>下面的元素有上外边距margin-top，则他们之间的垂直间距不是margin-bottom与margin-top之和</li>\n<li><strong>「取两个值中的较大者」</strong>这种现象被称为相邻块元素垂直外边距的合并（也称外边距塌陷）。</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207082147271.png\"></p>\n<p><strong>「解决方案：尽量给只给一个盒子添加margin值」</strong>。</p>\n<h2 id=\"2-嵌套块元素垂直外边距的合并（塌陷）\"><a href=\"#2-嵌套块元素垂直外边距的合并（塌陷）\" class=\"headerlink\" title=\"(2). 嵌套块元素垂直外边距的合并（塌陷）\"></a>(2). 嵌套块元素垂直外边距的合并（塌陷）</h2><ul>\n<li>对于两个嵌套关系的块元素，如果父元素没有<strong>上内边距及边框</strong></li>\n<li>父元素的上外边距会与子元素的上外边距发生合并</li>\n<li>合并后的外边距为两者中的较大者</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207082149140.png\"></p>\n<p><strong>「解决方案：」</strong></p>\n<ol>\n<li>可以为父元素定义上边框。</li>\n<li>可以为父元素定义上内边距</li>\n<li>可以为父元素添加overflow: hidden。</li>\n</ol>\n<p>还有其他方法，比如浮动、固定、绝对定位的盒子不会有问题，后面咱们再总结。。。</p>\n<h2 id=\"盒子模型布局稳定性\"><a href=\"#盒子模型布局稳定性\" class=\"headerlink\" title=\"盒子模型布局稳定性\"></a>盒子模型布局稳定性</h2><p>优先使用  宽度 （width）  其次 使用内边距（padding）   再次  外边距（margin）</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">width</span> &gt;  <span class=\"attribute\">padding</span>  &gt;   <span class=\"attribute\">margin</span>   </span><br></pre></td></tr></table></figure>\n\n<p><strong>原因：</strong></p>\n<ul>\n<li>margin 会有外边距合并 还有 ie6下面margin 加倍的bug（讨厌）所以最后使用。</li>\n<li>padding  会影响盒子大小， 需要进行加减计算（麻烦） 其次使用。</li>\n<li>width  没有问题（嗨皮）我们经常使用宽度剩余法 高度剩余法来做。</li>\n</ul>\n<h1 id=\"6-CSS3-新增\"><a href=\"#6-CSS3-新增\" class=\"headerlink\" title=\"6. CSS3 新增\"></a>6. CSS3 新增</h1><h2 id=\"圆角边框：\"><a href=\"#圆角边框：\" class=\"headerlink\" title=\"圆角边框：\"></a><strong>圆角边框：</strong></h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">border-radius</span>:length;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">border-top-left-radius</span>   定义了左上角的弧度</span><br><span class=\"line\"><span class=\"attribute\">border-top-right-radius</span>   定义了右上角的弧度</span><br><span class=\"line\"><span class=\"attribute\">border-bottom-right-radius</span>   定义了右下角的弧度</span><br><span class=\"line\"><span class=\"attribute\">border-bottom-left-radius</span>   定义了左下角的弧度</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>其中每一个值可以为 数值或百分比的形式。</li>\n<li>技巧：让一个正方形 变成圆圈</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207082152730.png\"></p>\n<p>如果要在四个角上一一指定，可以使用以下规则：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">border-radius</span>: 左上角 右上角  右下角  左下角;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>四个值: 第一个值为左上角，第二个值为右上角，第三个值为右下角，第四个值为左下角。</li>\n<li>三个值: 第一个值为左上角, 第二个值为右上角和左下角，第三个值为右下角</li>\n<li>两个值: 第一个值为左上角与右下角，第二个值为右上角与左下角</li>\n<li>一个值：四个圆角值相同</li>\n</ol>\n<h2 id=\"盒子阴影-box-shadow-：\"><a href=\"#盒子阴影-box-shadow-：\" class=\"headerlink\" title=\"盒子阴影(box-shadow)：\"></a><strong>盒子阴影(box-shadow)：</strong></h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">box-shadow</span>: offset-x offset-y [blur [spread]] [color] [inset]</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>offset-x</td>\n<td>阴影的水平偏移量。正数向右偏移，负数向左偏移。</td>\n</tr>\n<tr>\n<td>offset-y</td>\n<td>阴影的垂直偏移量。正数向下偏移，负数向上偏移。</td>\n</tr>\n<tr>\n<td>blur</td>\n<td>可选。阴影模糊距离，不能取负数。</td>\n</tr>\n<tr>\n<td>spread</td>\n<td>可选。阴影大小</td>\n</tr>\n<tr>\n<td>color</td>\n<td>可选。阴影的颜色</td>\n</tr>\n<tr>\n<td>inset</td>\n<td>可选。表示添加内阴影，默认为外阴影</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">   <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">   <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">   <span class=\"attribute\">border</span>: <span class=\"number\">10px</span> solid red;</span><br><span class=\"line\">   <span class=\"comment\">/* box-shadow: 5px 5px 3px 4px rgba(0, 0, 0, .4);  */</span></span><br><span class=\"line\">   <span class=\"comment\">/* box-shadow:水平位置 垂直位置 模糊距离 阴影尺寸（影子大小） 阴影颜色  内/外阴影； */</span></span><br><span class=\"line\">   <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">15px</span> <span class=\"number\">30px</span>  <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, .<span class=\"number\">4</span>);   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>css学习三大重点： css 盒子模型 、 浮动 、 定位 </p>\n<h2 id=\"网页布局的本质\"><a href=\"#网页布局的本质\" class=\"headerlink\" title=\"网页布局的本质\"></a><strong>网页布局的本质</strong></h2><ul>\n<li>首先利用CSS设置好盒子的大小，然后摆放盒子的位置。</li>\n<li>最后把网页元素比如文字图片等等，放入盒子里面。</li>\n</ul>\n<h1 id=\"1-盒子模型-Box-Model\"><a href=\"#1-盒子模型-Box-Model\" class=\"headerlink\" title=\"1. 盒子模型(Box Model)\"></a>1. 盒子模型(Box Model)</h1><ul>\n<li>盒子模型就是把HTML页面中的布局元素看作是一个矩形的盒子，也就是一个盛装内容的容器。</li>\n<li>盒子模型由元素的内容、边框（border）、内边距（padding）、和外边距（margin）组成。</li>\n<li>盒子里面的文字和图片等元素是 内容区域</li>\n<li>盒子的厚度 我们称为为盒子的边框</li>\n<li>盒子内容与边框的距离是内边距</li>\n<li>盒子与盒子之间的距离是外边距</li>\n</ul>\n<h2 id=\"W3c标准盒子模型\"><a href=\"#W3c标准盒子模型\" class=\"headerlink\" title=\"W3c标准盒子模型\"></a><strong>W3c标准盒子模型</strong></h2><p>标准 w3c 盒子模型的范围包括 margin、border、padding、content</p>\n<p>当设置为box-sizing: content-box;时，将采用标准模式解析计算，也是默认模式；</p>\n<p>内盒尺寸计算(元素实际大小)</p>\n<ul>\n<li>宽度：Element Height = content height + padding + border （Height为内容高度）</li>\n<li>高度：Element  Width = content width + padding + border （Width为内容宽度）</li>\n<li>盒子的实际大小：<strong>内容的宽度和高度 +  内边距  +  边框</strong>  </li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207082125688.png\"></p>\n<h2 id=\"IE盒子模型\"><a href=\"#IE盒子模型\" class=\"headerlink\" title=\"IE盒子模型\"></a><strong>IE盒子模型</strong></h2><p>IE 盒子模型的 content 部分包含了 border 和 pading</p>\n<p>当设置为box-sizing: border-box时，将采用怪异模式解析计算；</p>\n<h1 id=\"2-盒子边框-border\"><a href=\"#2-盒子边框-border\" class=\"headerlink\" title=\"2. 盒子边框(border)\"></a>2. 盒子边框(border)</h1><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>border-width</td>\n<td>定义边框粗细，单位是px</td>\n</tr>\n<tr>\n<td>border-style</td>\n<td>边框的样式</td>\n</tr>\n<tr>\n<td>border-color</td>\n<td>边框颜色</td>\n</tr>\n</tbody></table>\n<h3 id=\"边框的样式：\"><a href=\"#边框的样式：\" class=\"headerlink\" title=\"边框的样式：\"></a><strong>边框的样式：</strong></h3><ul>\n<li>none：没有边框即忽略所有边框的宽度（默认值）</li>\n<li>solid：边框为单实线(最为常用的)</li>\n<li>dashed：边框为虚线</li>\n<li>dotted：边框为点线</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">边框综合设置</span><br><span class=\"line\"><span class=\"attribute\">border</span> : border-width || border-style || border-color </span><br><span class=\"line\"></span><br><span class=\"line\">border: <span class=\"number\">1px</span> solid red;  没有顺序要求  </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"盒子边框写法总结表：\"><a href=\"#盒子边框写法总结表：\" class=\"headerlink\" title=\"盒子边框写法总结表：\"></a><strong>盒子边框写法总结表：</strong></h3><p>很多情况下，我们不需要指定4个边框，我们是可以单独给4个边框分别指定的。</p>\n<table>\n<thead>\n<tr>\n<th>上边框</th>\n<th>下边框</th>\n<th>左边框</th>\n<th>右边框</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>border-top-style:样式;</td>\n<td>border-bottom-style:样式;</td>\n<td>border-left-style:样式;</td>\n<td>border-right-style:样式;</td>\n</tr>\n<tr>\n<td>border-top-width:宽度;</td>\n<td>border- bottom-width:宽度;</td>\n<td>border-left-width:宽度;</td>\n<td>border-right-width:宽度;</td>\n</tr>\n<tr>\n<td>border-top-color:颜色;</td>\n<td>border- bottom-color:颜色;</td>\n<td>border-left-color:颜色;</td>\n<td>border-right-color:颜色;</td>\n</tr>\n<tr>\n<td>border-top:宽度 样式 颜色;</td>\n<td>border-bottom:宽度 样式 颜色;</td>\n<td>border-left:宽度 样式 颜色;</td>\n<td>border-right:宽度 样式 颜色;</td>\n</tr>\n</tbody></table>\n<h3 id=\"表格的细线边框：\"><a href=\"#表格的细线边框：\" class=\"headerlink\" title=\"表格的细线边框：\"></a><strong>表格的细线边框：</strong></h3><p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207082133984.png\"></p>\n<ul>\n<li>通过表格的<code>cellspacing=&quot;0&quot;</code>,将单元格与单元格之间的距离设置为0，</li>\n<li>但是两个单元格之间的边框会出现重叠，从而使边框变粗</li>\n<li>通过css属性：table{ border-collapse:collapse; }  </li>\n</ul>\n<p><code>collapse</code> 单词是合并的意思,<code>border-collapse: collapse;</code>表示相邻边框合并在一起。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\"> <span class=\"selector-tag\">table</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">500px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid red;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"selector-tag\">td</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid red;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"selector-tag\">table</span>, <span class=\"selector-tag\">td</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border-collapse</span>: collapse;  <span class=\"comment\">/*合并相邻边框*/</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-内边距-padding\"><a href=\"#3-内边距-padding\" class=\"headerlink\" title=\"3. 内边距(padding)\"></a>3. 内边距(padding)</h1><p>padding属性用于设置内边距。是指边框与内容之间的距离。</p>\n<h3 id=\"设置\"><a href=\"#设置\" class=\"headerlink\" title=\"设置\"></a><strong>设置</strong></h3><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>padding-left</td>\n<td>左内边距</td>\n</tr>\n<tr>\n<td>padding-left</td>\n<td>右内边距</td>\n</tr>\n<tr>\n<td>padding-top</td>\n<td>上内边距</td>\n</tr>\n<tr>\n<td>padding-bottom</td>\n<td>下内边距</td>\n</tr>\n</tbody></table>\n<h3 id=\"padding简写\"><a href=\"#padding简写\" class=\"headerlink\" title=\"padding简写\"></a><strong>padding简写</strong></h3><table>\n<thead>\n<tr>\n<th>值的个数</th>\n<th>表达意思</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1个值</td>\n<td>padding：上下左右内边距;</td>\n</tr>\n<tr>\n<td>2个值</td>\n<td>padding:   上下内边距   左右内边距 ；</td>\n</tr>\n<tr>\n<td>3个值</td>\n<td>padding：上内边距  左右内边距  下内边距；</td>\n</tr>\n<tr>\n<td>4个值</td>\n<td>padding:   上内边距 右内边距 下内边距 左内边距 ；</td>\n</tr>\n</tbody></table>\n<p>当我们给盒子指定padding值之后， 发生了2件事情：</p>\n<ol>\n<li>内容和边框 有了距离，添加了内边距。</li>\n<li>盒子会变大</li>\n</ol>\n<p><strong>解决措施：</strong>通过给设置了宽高的盒子，减去相应的内边距的值，维持盒子原有的大小。</p>\n<p><strong>padding不影响盒子大小情况：</strong>如果没有给一个盒子指定宽度， 此时，如果给这个盒子指定padding， 则不会撑开盒子。</p>\n<h1 id=\"4-外边距（margin）\"><a href=\"#4-外边距（margin）\" class=\"headerlink\" title=\"4. 外边距（margin）\"></a>4. 外边距（margin）</h1><p>margin属性用于设置外边距。margin就是控制<code>盒子和盒子之间的距离</code></p>\n<h2 id=\"设置-1\"><a href=\"#设置-1\" class=\"headerlink\" title=\"设置\"></a><strong>设置</strong></h2><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>margin-left</td>\n<td>左外边距</td>\n</tr>\n<tr>\n<td>margin-right</td>\n<td>右外边距</td>\n</tr>\n<tr>\n<td>margin-top</td>\n<td>上外边距</td>\n</tr>\n<tr>\n<td>margin-bottom</td>\n<td>下外边距</td>\n</tr>\n</tbody></table>\n<p>margin值的简写 （复合写法）代表意思  跟 padding 完全相同。</p>\n<h2 id=\"块级盒子水平居中\"><a href=\"#块级盒子水平居中\" class=\"headerlink\" title=\"块级盒子水平居中\"></a><strong>块级盒子水平居中</strong></h2><ul>\n<li>盒子必须指定宽度（width）</li>\n<li>然后就给左右的外边距都设置为auto</li>\n</ul>\n<p>实际工作中常用这种方式进行网页布局，示例代码如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.header</span>  &#123; </span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">960px</span>; </span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>常见的写法，以下三种都可以</p>\n<ul>\n<li>margin-left: auto;  margin-right: auto;</li>\n<li>margin: auto;</li>\n<li>margin: 0 auto;</li>\n</ul>\n<h2 id=\"文字居中和盒子居中区别\"><a href=\"#文字居中和盒子居中区别\" class=\"headerlink\" title=\"文字居中和盒子居中区别\"></a><strong>文字居中和盒子居中区别</strong></h2><ol>\n<li>盒子内的文字水平居中是 text-align: center; 而且还可以让 行内元素和行内块居中对齐</li>\n<li>块级盒子水平居中  左右margin 改为 auto</li>\n</ol>\n<h2 id=\"插入图片和背景图片区别\"><a href=\"#插入图片和背景图片区别\" class=\"headerlink\" title=\"插入图片和背景图片区别\"></a><strong>插入图片和背景图片区别</strong></h2><ol>\n<li><code>插入图片</code>我们用的最多 比如产品展示类  移动位置只能靠盒模型 padding margin</li>\n<li><code>背景图片</code>我们一般用于小图标背景或者超大背景图片、背景图片，移动位置只能通过  background-position</li>\n</ol>\n<h2 id=\"清除元素的默认内外边距\"><a href=\"#清除元素的默认内外边距\" class=\"headerlink\" title=\"清除元素的默认内外边距\"></a><strong>清除元素的默认内外边距</strong></h2><ul>\n<li>行内元素为了照顾兼容性,尽量只设置左右内外边距，不要设置上下内外边距。</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* &#123;</span><br><span class=\"line\">   <span class=\"attribute\">padding</span>:<span class=\"number\">0</span>;         <span class=\"comment\">/* 清除内边距 */</span></span><br><span class=\"line\">   <span class=\"attribute\">margin</span>:<span class=\"number\">0</span>;          <span class=\"comment\">/* 清除外边距 */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"5-外边距合并\"><a href=\"#5-外边距合并\" class=\"headerlink\" title=\"5.外边距合并\"></a>5.外边距合并</h1><p>使用margin定义块元素的<strong>「垂直外边距」</strong>时，可能会出现外边距的合并。</p>\n<h2 id=\"1-相邻块元素垂直外边距的合并\"><a href=\"#1-相邻块元素垂直外边距的合并\" class=\"headerlink\" title=\"(1). 相邻块元素垂直外边距的合并\"></a>(1). 相邻块元素垂直外边距的合并</h2><ul>\n<li>当上下相邻的两个块元素相遇时，如果上面的元素有下外边距margin-bottom</li>\n<li>下面的元素有上外边距margin-top，则他们之间的垂直间距不是margin-bottom与margin-top之和</li>\n<li><strong>「取两个值中的较大者」</strong>这种现象被称为相邻块元素垂直外边距的合并（也称外边距塌陷）。</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207082147271.png\"></p>\n<p><strong>「解决方案：尽量给只给一个盒子添加margin值」</strong>。</p>\n<h2 id=\"2-嵌套块元素垂直外边距的合并（塌陷）\"><a href=\"#2-嵌套块元素垂直外边距的合并（塌陷）\" class=\"headerlink\" title=\"(2). 嵌套块元素垂直外边距的合并（塌陷）\"></a>(2). 嵌套块元素垂直外边距的合并（塌陷）</h2><ul>\n<li>对于两个嵌套关系的块元素，如果父元素没有<strong>上内边距及边框</strong></li>\n<li>父元素的上外边距会与子元素的上外边距发生合并</li>\n<li>合并后的外边距为两者中的较大者</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207082149140.png\"></p>\n<p><strong>「解决方案：」</strong></p>\n<ol>\n<li>可以为父元素定义上边框。</li>\n<li>可以为父元素定义上内边距</li>\n<li>可以为父元素添加overflow: hidden。</li>\n</ol>\n<p>还有其他方法，比如浮动、固定、绝对定位的盒子不会有问题，后面咱们再总结。。。</p>\n<h2 id=\"盒子模型布局稳定性\"><a href=\"#盒子模型布局稳定性\" class=\"headerlink\" title=\"盒子模型布局稳定性\"></a>盒子模型布局稳定性</h2><p>优先使用  宽度 （width）  其次 使用内边距（padding）   再次  外边距（margin）</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">width</span> &gt;  <span class=\"attribute\">padding</span>  &gt;   <span class=\"attribute\">margin</span>   </span><br></pre></td></tr></table></figure>\n\n<p><strong>原因：</strong></p>\n<ul>\n<li>margin 会有外边距合并 还有 ie6下面margin 加倍的bug（讨厌）所以最后使用。</li>\n<li>padding  会影响盒子大小， 需要进行加减计算（麻烦） 其次使用。</li>\n<li>width  没有问题（嗨皮）我们经常使用宽度剩余法 高度剩余法来做。</li>\n</ul>\n<h1 id=\"6-CSS3-新增\"><a href=\"#6-CSS3-新增\" class=\"headerlink\" title=\"6. CSS3 新增\"></a>6. CSS3 新增</h1><h2 id=\"圆角边框：\"><a href=\"#圆角边框：\" class=\"headerlink\" title=\"圆角边框：\"></a><strong>圆角边框：</strong></h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">border-radius</span>:length;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">border-top-left-radius</span>   定义了左上角的弧度</span><br><span class=\"line\"><span class=\"attribute\">border-top-right-radius</span>   定义了右上角的弧度</span><br><span class=\"line\"><span class=\"attribute\">border-bottom-right-radius</span>   定义了右下角的弧度</span><br><span class=\"line\"><span class=\"attribute\">border-bottom-left-radius</span>   定义了左下角的弧度</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>其中每一个值可以为 数值或百分比的形式。</li>\n<li>技巧：让一个正方形 变成圆圈</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207082152730.png\"></p>\n<p>如果要在四个角上一一指定，可以使用以下规则：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">border-radius</span>: 左上角 右上角  右下角  左下角;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>四个值: 第一个值为左上角，第二个值为右上角，第三个值为右下角，第四个值为左下角。</li>\n<li>三个值: 第一个值为左上角, 第二个值为右上角和左下角，第三个值为右下角</li>\n<li>两个值: 第一个值为左上角与右下角，第二个值为右上角与左下角</li>\n<li>一个值：四个圆角值相同</li>\n</ol>\n<h2 id=\"盒子阴影-box-shadow-：\"><a href=\"#盒子阴影-box-shadow-：\" class=\"headerlink\" title=\"盒子阴影(box-shadow)：\"></a><strong>盒子阴影(box-shadow)：</strong></h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">box-shadow</span>: offset-x offset-y [blur [spread]] [color] [inset]</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>offset-x</td>\n<td>阴影的水平偏移量。正数向右偏移，负数向左偏移。</td>\n</tr>\n<tr>\n<td>offset-y</td>\n<td>阴影的垂直偏移量。正数向下偏移，负数向上偏移。</td>\n</tr>\n<tr>\n<td>blur</td>\n<td>可选。阴影模糊距离，不能取负数。</td>\n</tr>\n<tr>\n<td>spread</td>\n<td>可选。阴影大小</td>\n</tr>\n<tr>\n<td>color</td>\n<td>可选。阴影的颜色</td>\n</tr>\n<tr>\n<td>inset</td>\n<td>可选。表示添加内阴影，默认为外阴影</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">   <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">   <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">   <span class=\"attribute\">border</span>: <span class=\"number\">10px</span> solid red;</span><br><span class=\"line\">   <span class=\"comment\">/* box-shadow: 5px 5px 3px 4px rgba(0, 0, 0, .4);  */</span></span><br><span class=\"line\">   <span class=\"comment\">/* box-shadow:水平位置 垂直位置 模糊距离 阴影尺寸（影子大小） 阴影颜色  内/外阴影； */</span></span><br><span class=\"line\">   <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">15px</span> <span class=\"number\">30px</span>  <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, .<span class=\"number\">4</span>);   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n"},{"title":"CSS选择器","date":"2022-04-03T08:04:00.000Z","updated":"2022-04-05T16:00:00.000Z","keywords":null,"description":null,"top_img":"./img/bg17.jpg","cover":"./img/bg4.jpg","_content":"# 选择器简介\n\n## 「1.1作用」\n\n选择器（选择符）就是根据不同需求把不同的标签选出来，这就是选择器的作用。简单来说，就是选择标签用的。 CSS做了两件事： \n\n1. 找到标签（选对人）\n2. 设置这些标签的样式（做对事）\n\n## 「1.2分类」\n\n在CSS中，可以根据选择器类型把选择器分为**基础选择器**和**复合选择器**。\n\n- 基础选择器是由单个选择器组成的 \n- 基础选择器又包括：**标签选择器、类选择器、id选择器、通配符选择器**\n\n复合选择器是建立在基础选择器之上，对基础选择器进行组合形成的。\n\n- 复合选择器可以更精准，更高效的选择目标元素（标签）\n- 复合选择器是有两个或多个基础选择器，通过不同的方式组合而成的\n- 常用的复合选择器包括：**后代选择器，子选择器，并集选择器，伪类选择器等**\n\n# 基础选择器\n\n## 「2.1标签选择器」\n\n标签选择器（元素选择器）是指用HTML标签名称作为选择器，按标签名称分类，为页面中某一类标签指定统一的CSS样式。 \n\n- 作用: 标签选择器可以把某一类标签全部选择出来，比如所有的div标签和所有的span标签。 \n- 优点: 能快速为页面中同类型的标签统一设置样式。 \n- 缺点: 不能设计差异化样式，只能选择全部的当前标签。\n\n```css\n标签名 { 属性1:属性值1;\n        属性2:属性值2; \n        属性3:属性值3; \n      } \ndiv {\n    color: red;\n     }\n```\n\n## 「2.2类选择器」\n\n如果想要差异化选择不同的标签，单独选一个或者某几个标签，可以使用类选择器。\n\n类选择器在HTML中以class属性表示，在CSS中，类选择器以一个点“ **.** ”号显示。 \n\n**注意**\n\n-  ①类选择器使用 .（英文点号）进行标识，后面紧跟类名（自定义，我们自己命名的）。 \n-  ②可以理解为给这个标签起了一个名字来表示。 \n-  ③长名称或词组可以使用中横线来为选择器命名。 \n-  ④不要使用纯数字、中文等命名，尽量使用英文字母来表示。 \n-  ⑤命名要有意义，尽量使别人一眼就知道这个类名的目的。 \n\n```css\n.类名1  {   \n    属性1: 属性值1; \n    属性2: 属性值2; \n    属性3: 属性值3;     \n}\n```\n\n```html\n<p class=\"类名1 类名2\"> 样例 </p>\n```\n\n- 各个类名中间用空格隔开\n- 简单理解：就是给某个标签添加了多个类，或者这个标签有多个名字\n- 这个标签就可以分别具有这些类名的样式\n- 从而节省css代码，统一修改也非常方便\n- 多个类名选择器在后期布局比较复杂的情况下，还是较多使用的\n\n## 「2.3id选择器」\n\nid选择器可以为标有特定id的HTML元素指定特定的样式。\n\nHTML元素以id属性来设置id选择器，CSS中id选择器以“ **#** ”来定义。\n\n- **注意**：id属性只能在每个HTML文档中出现一次\n- **口诀**：样式#定义，结构id调用，只能调用一次，别人切勿使用\n\n```css\n#id名 { 属性1:属性值1; \n        属性2:属性值2; \n        属性3:属性值3; \n}\n```\n\n```html\n<p id=\"id名\">样例</p>\n```\n\n### **id选择器和类选择器的区别** \n\n1. 类选择器(class)好比人的名字，一个人可以有多个名字，同时一个名字也可以被多个人使用。 \n2. id选择器好比人的身份证号码β、全中国是唯一的,不得重复。 \n3. id选择器和类选择器最大的不同在于使用次数上。 \n4. 类选择器在修改样式中用的最多，id选择器一般用于页面唯一性的元素上，经常和 JavaScript 搭配使用。\n\n## 「2.4通配符选择器」\n\n在CSS中，通配符选择器使用*定义，它表示选取页面中所有元素(标签)。\n\n- 通配符选择器不需要调用，自动就给所有的元素使用样式\n- 特殊情况才使用，后面讲解使用\n\n**注意：**会匹配页面所有的元素，降低页面响应速度，不建议随便使用\n\n```css\n* { 属性1:属性值1; \n    属性2:属性值2; \n    属性3:属性值3; \n}\n```\n\n例如下面代码，使用通配符选择器定义CSS样式，清除所有HTML标记的默认边距。\n\n```css\n* {\n   margin: 0;                    /* 定义外边距*/\n   padding: 0;                   /* 定义内边距*/\n}\n```\n\n## 2.5基础选择器总结\n\n| 标签选择器   | 作用                   | 特点                               | 使用情况     | 用法              |\n| ------------ | ---------------------- | ---------------------------------- | ------------ | ----------------- |\n| 标签选择器   | 可以选出所有相同的标签 | 不能差异化选择                     | 较多         | p {color: red}    |\n| 类选择器     | 可以选出一个或多个标签 | 可以根据需求选择                   | 最多         | .nav {color: red} |\n| id选择器     | 一次只能选择一个标签   | id属性在每个html文档中只能出现一次 | 一般和js搭配 | #nav {color: red} |\n| 通配符选择器 | 选择所有标签           | 选择过多，有部分不需要             | 特殊情况使用 | * {color: red}    |\n\n每个基础选择器都有使用场景，都需要掌握，如果是修改样式，类选择器是使用最多的\n\n# 复合选择器\n\n## 「3.1后代选择器」\n\n后代选择器又称为包含选择器，可以选择父元素里面的子元素，其写法就是把外层标签写在前面，内层标签写在后面，中间用空格分隔，当标签发生嵌套时，内层标签就成为外层标签的后代。\n\n```css\n元素1 元素2 {属性:属性值;\n    属性:属性值;\n}\n\n.class h3 {color:red;\n    font-size:16px;\n}\n```\n\n上述语法表示选择元素1里面的所有元素2（后代元素）\n\n- 元素1和元素2中间用空格隔开\n- 元素1是父级，元素2是子级，**最终选择的是元素2**\n- 元素2可以是儿子，也可以是孙子等，只要是元素1 的后代即可\n- 元素1和元素2可以是任意基础选择器\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/CSS4.png)\n\n## 「3.2子选择器」\n\n子元素选择器（子选择器）只能选择作为某元素的最近一级子元素，简单理解就是选亲儿子元素。\n\n```css\n元素1>元素2 {样式声明\n    属性:属性值;\n    属性:属性值;\n}\n```\n\n上述语法表示选择元素1里面的所有直接后代（子元素）元素2.\n\n```css\ndiv>p {样式声明}  /*选择div里面所有最近一级p标签元素*/\n```\n\n- 元素1和元素2中间用大于号隔开\n- 元素1是父级，元素2是子级，**最终选择的是元素2**\n- 元素2必须是亲儿子，其孙子，重孙之类都不归他管，你也可以叫他亲儿子选择器\n\n## 「3.3交集选择器」\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/CSS5.png)\n\n其中第一个为标签选择器，第二个为class选择器，两个选择器之间`不能有空格`，如h3.special。\n\n```css\n交集选择器是并且的意思,即...又...的意思\n比如：   \np.one    \n/* 选择的是： 类名为 .one 的段落标签。\n用的相对来说比较少，不建议使用。*/\n```\n\n## 「3.4并集选择器」\n\n并集选择器可以选择多组标签，同时为他们定义相同的样式，通常用于整体声明。\n\n并集选择器是个选择器通过英文逗号“,”连接而成，任何形式的选择器都可以作为并集选择器的一部分。\n\n```css\n元素1,元素2 {样式声明}\n```\n\n上述语法表示选择元素1和元素2\n\n```css\nul,div\n{\n    样式声明\n} \n/*选择ul和div标签元素*/\n.one,p,#test \n{\n    color: #F00;\n}  \n/*表示 .one 和 p  和 #test 这三个选择器都会执行颜色为红色。 */\n/*通常用于集体声明。 */\n```\n\n- 元素1和元素2中间用逗号隔开\n- 逗号可以理解为和的意思\n- 并集选择器通常用于集体声明\n\n## 「3.5链接伪类选择器」\n\n伪类选择器用于向某些选择器添加特殊的效果，比如给链接添加特殊效果，或选择第一个，第n个元素。\n\n伪类选择器书写最大的特点是用冒号:表示，比如：hover,first-child.\n\n因为伪类选择器很多，比如有链接伪类，结构伪类等，所以这里先给大家讲解常用的链接伪类选择器。\n\n链接伪类，是利用交集选择器\n\n```css\na:link            /*选择所有未被访问的链接*/\na:visited         /*选择所有已被访问的链接*/\na:hover           /*选择鼠标指针位于其上的链接*/\na:active          /*选择活动链接（鼠标按下未弹起的链接）*/\n```\n\n写的时候，他们的顺序尽量不要颠倒，按照lvha的顺序。否则可能引起错误。\n\n**注意事项**\n\n1. 为确保生效，请按照LVHA的顺序声明：link visited hover active\n2. 记忆法：love hate或者Lv包包hao\n3. 因为a链接在浏览器中具有默认样式，所以我们实际工作中都需要给链接单独指定样式\n\n实际工作中，很少写全四个状态，一般写法如下：\n\n```css\n/* a是标签选择器  所有的链接 */\na {   \n   font-weight: 700;\n   font-size: 16px;\n   color: gray;\n   text-decoration: none; /* 清除链接默认的下划线*/\n}\n/* :hover 是链接伪类选择器 鼠标经过 */\na:hover {   \n   color: red; /*  鼠标经过的时候，由原来的 灰色 变成了红色 */\n}\n```\n\n## 「3.6foucs伪类选择器」\n\nfoucs伪类选择器用于选取获得焦点的表单元素。\n\n焦点就是光标，一般情况下类表单元素才能获取，因此这个选择器也主要针对表单元素来说。\n\n```css\ninput:foucs {\n    background-color:yellow;\n}\n```\n\n## 「3.7复合选择器总结」\n\n| 选择器          | 作用                   | 特征             | 使用情况 | 隔开符号及用法                     |\n| --------------- | ---------------------- | ---------------- | -------- | ---------------------------------- |\n| 后代选择器      | 用来选择后代元素       | 可以是子孙后代   | 较多     | 符号是空格.nav a                   |\n| 子选择器        | 选择最近一级元素       | 只选亲儿子       | 较少     | 符号是大于.nav>a                   |\n| 交集选择器      | 选择两个标签交集部分   | 既是 又是        | 较少     | 没有符号 p.one                     |\n| 并集选择器      | 选择某些相同样式的元素 | 可以用于集体声明 | 较多     | 符号是逗号.nav,a                   |\n| 链接伪类选择器  | 选择不同状态的链接     | 跟链接相关       | 较多     | 重点记住a{}和a:hover实际开发的写法 |\n| foucs伪类选择器 | 选择获得光标的表单     | 跟表单相关       | 较少     | input:focus记住这个写法            |\n\n# 团队约定\n\n1. 尽量少用通配符选择器 `*`\n2. 尽量少用ID选择器\n3. 不使用无具体语义定义的标签选择器\n\n```css\n/* 推荐 */\n.jdc {}\nli {}\np {}\n/* 不推荐 */\n*{}\n#jdc {}\ndiv{}   /*因为div 没有语义，我们尽量少用*/\n```\n\n","source":"_posts/前端/CSS选择器.md","raw":"---\ntitle: CSS选择器\ndate: 2022-04-03 16:04:00\nupdated: 2022-04-06\ntags:\n  - 小白的前端之路\n  - CSS基础\ncategories: 前端开发\nkeywords: \ndescription: \ntop_img: ./img/bg17.jpg\ncover: ./img/bg4.jpg\n\n---\n# 选择器简介\n\n## 「1.1作用」\n\n选择器（选择符）就是根据不同需求把不同的标签选出来，这就是选择器的作用。简单来说，就是选择标签用的。 CSS做了两件事： \n\n1. 找到标签（选对人）\n2. 设置这些标签的样式（做对事）\n\n## 「1.2分类」\n\n在CSS中，可以根据选择器类型把选择器分为**基础选择器**和**复合选择器**。\n\n- 基础选择器是由单个选择器组成的 \n- 基础选择器又包括：**标签选择器、类选择器、id选择器、通配符选择器**\n\n复合选择器是建立在基础选择器之上，对基础选择器进行组合形成的。\n\n- 复合选择器可以更精准，更高效的选择目标元素（标签）\n- 复合选择器是有两个或多个基础选择器，通过不同的方式组合而成的\n- 常用的复合选择器包括：**后代选择器，子选择器，并集选择器，伪类选择器等**\n\n# 基础选择器\n\n## 「2.1标签选择器」\n\n标签选择器（元素选择器）是指用HTML标签名称作为选择器，按标签名称分类，为页面中某一类标签指定统一的CSS样式。 \n\n- 作用: 标签选择器可以把某一类标签全部选择出来，比如所有的div标签和所有的span标签。 \n- 优点: 能快速为页面中同类型的标签统一设置样式。 \n- 缺点: 不能设计差异化样式，只能选择全部的当前标签。\n\n```css\n标签名 { 属性1:属性值1;\n        属性2:属性值2; \n        属性3:属性值3; \n      } \ndiv {\n    color: red;\n     }\n```\n\n## 「2.2类选择器」\n\n如果想要差异化选择不同的标签，单独选一个或者某几个标签，可以使用类选择器。\n\n类选择器在HTML中以class属性表示，在CSS中，类选择器以一个点“ **.** ”号显示。 \n\n**注意**\n\n-  ①类选择器使用 .（英文点号）进行标识，后面紧跟类名（自定义，我们自己命名的）。 \n-  ②可以理解为给这个标签起了一个名字来表示。 \n-  ③长名称或词组可以使用中横线来为选择器命名。 \n-  ④不要使用纯数字、中文等命名，尽量使用英文字母来表示。 \n-  ⑤命名要有意义，尽量使别人一眼就知道这个类名的目的。 \n\n```css\n.类名1  {   \n    属性1: 属性值1; \n    属性2: 属性值2; \n    属性3: 属性值3;     \n}\n```\n\n```html\n<p class=\"类名1 类名2\"> 样例 </p>\n```\n\n- 各个类名中间用空格隔开\n- 简单理解：就是给某个标签添加了多个类，或者这个标签有多个名字\n- 这个标签就可以分别具有这些类名的样式\n- 从而节省css代码，统一修改也非常方便\n- 多个类名选择器在后期布局比较复杂的情况下，还是较多使用的\n\n## 「2.3id选择器」\n\nid选择器可以为标有特定id的HTML元素指定特定的样式。\n\nHTML元素以id属性来设置id选择器，CSS中id选择器以“ **#** ”来定义。\n\n- **注意**：id属性只能在每个HTML文档中出现一次\n- **口诀**：样式#定义，结构id调用，只能调用一次，别人切勿使用\n\n```css\n#id名 { 属性1:属性值1; \n        属性2:属性值2; \n        属性3:属性值3; \n}\n```\n\n```html\n<p id=\"id名\">样例</p>\n```\n\n### **id选择器和类选择器的区别** \n\n1. 类选择器(class)好比人的名字，一个人可以有多个名字，同时一个名字也可以被多个人使用。 \n2. id选择器好比人的身份证号码β、全中国是唯一的,不得重复。 \n3. id选择器和类选择器最大的不同在于使用次数上。 \n4. 类选择器在修改样式中用的最多，id选择器一般用于页面唯一性的元素上，经常和 JavaScript 搭配使用。\n\n## 「2.4通配符选择器」\n\n在CSS中，通配符选择器使用*定义，它表示选取页面中所有元素(标签)。\n\n- 通配符选择器不需要调用，自动就给所有的元素使用样式\n- 特殊情况才使用，后面讲解使用\n\n**注意：**会匹配页面所有的元素，降低页面响应速度，不建议随便使用\n\n```css\n* { 属性1:属性值1; \n    属性2:属性值2; \n    属性3:属性值3; \n}\n```\n\n例如下面代码，使用通配符选择器定义CSS样式，清除所有HTML标记的默认边距。\n\n```css\n* {\n   margin: 0;                    /* 定义外边距*/\n   padding: 0;                   /* 定义内边距*/\n}\n```\n\n## 2.5基础选择器总结\n\n| 标签选择器   | 作用                   | 特点                               | 使用情况     | 用法              |\n| ------------ | ---------------------- | ---------------------------------- | ------------ | ----------------- |\n| 标签选择器   | 可以选出所有相同的标签 | 不能差异化选择                     | 较多         | p {color: red}    |\n| 类选择器     | 可以选出一个或多个标签 | 可以根据需求选择                   | 最多         | .nav {color: red} |\n| id选择器     | 一次只能选择一个标签   | id属性在每个html文档中只能出现一次 | 一般和js搭配 | #nav {color: red} |\n| 通配符选择器 | 选择所有标签           | 选择过多，有部分不需要             | 特殊情况使用 | * {color: red}    |\n\n每个基础选择器都有使用场景，都需要掌握，如果是修改样式，类选择器是使用最多的\n\n# 复合选择器\n\n## 「3.1后代选择器」\n\n后代选择器又称为包含选择器，可以选择父元素里面的子元素，其写法就是把外层标签写在前面，内层标签写在后面，中间用空格分隔，当标签发生嵌套时，内层标签就成为外层标签的后代。\n\n```css\n元素1 元素2 {属性:属性值;\n    属性:属性值;\n}\n\n.class h3 {color:red;\n    font-size:16px;\n}\n```\n\n上述语法表示选择元素1里面的所有元素2（后代元素）\n\n- 元素1和元素2中间用空格隔开\n- 元素1是父级，元素2是子级，**最终选择的是元素2**\n- 元素2可以是儿子，也可以是孙子等，只要是元素1 的后代即可\n- 元素1和元素2可以是任意基础选择器\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/CSS4.png)\n\n## 「3.2子选择器」\n\n子元素选择器（子选择器）只能选择作为某元素的最近一级子元素，简单理解就是选亲儿子元素。\n\n```css\n元素1>元素2 {样式声明\n    属性:属性值;\n    属性:属性值;\n}\n```\n\n上述语法表示选择元素1里面的所有直接后代（子元素）元素2.\n\n```css\ndiv>p {样式声明}  /*选择div里面所有最近一级p标签元素*/\n```\n\n- 元素1和元素2中间用大于号隔开\n- 元素1是父级，元素2是子级，**最终选择的是元素2**\n- 元素2必须是亲儿子，其孙子，重孙之类都不归他管，你也可以叫他亲儿子选择器\n\n## 「3.3交集选择器」\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/CSS5.png)\n\n其中第一个为标签选择器，第二个为class选择器，两个选择器之间`不能有空格`，如h3.special。\n\n```css\n交集选择器是并且的意思,即...又...的意思\n比如：   \np.one    \n/* 选择的是： 类名为 .one 的段落标签。\n用的相对来说比较少，不建议使用。*/\n```\n\n## 「3.4并集选择器」\n\n并集选择器可以选择多组标签，同时为他们定义相同的样式，通常用于整体声明。\n\n并集选择器是个选择器通过英文逗号“,”连接而成，任何形式的选择器都可以作为并集选择器的一部分。\n\n```css\n元素1,元素2 {样式声明}\n```\n\n上述语法表示选择元素1和元素2\n\n```css\nul,div\n{\n    样式声明\n} \n/*选择ul和div标签元素*/\n.one,p,#test \n{\n    color: #F00;\n}  \n/*表示 .one 和 p  和 #test 这三个选择器都会执行颜色为红色。 */\n/*通常用于集体声明。 */\n```\n\n- 元素1和元素2中间用逗号隔开\n- 逗号可以理解为和的意思\n- 并集选择器通常用于集体声明\n\n## 「3.5链接伪类选择器」\n\n伪类选择器用于向某些选择器添加特殊的效果，比如给链接添加特殊效果，或选择第一个，第n个元素。\n\n伪类选择器书写最大的特点是用冒号:表示，比如：hover,first-child.\n\n因为伪类选择器很多，比如有链接伪类，结构伪类等，所以这里先给大家讲解常用的链接伪类选择器。\n\n链接伪类，是利用交集选择器\n\n```css\na:link            /*选择所有未被访问的链接*/\na:visited         /*选择所有已被访问的链接*/\na:hover           /*选择鼠标指针位于其上的链接*/\na:active          /*选择活动链接（鼠标按下未弹起的链接）*/\n```\n\n写的时候，他们的顺序尽量不要颠倒，按照lvha的顺序。否则可能引起错误。\n\n**注意事项**\n\n1. 为确保生效，请按照LVHA的顺序声明：link visited hover active\n2. 记忆法：love hate或者Lv包包hao\n3. 因为a链接在浏览器中具有默认样式，所以我们实际工作中都需要给链接单独指定样式\n\n实际工作中，很少写全四个状态，一般写法如下：\n\n```css\n/* a是标签选择器  所有的链接 */\na {   \n   font-weight: 700;\n   font-size: 16px;\n   color: gray;\n   text-decoration: none; /* 清除链接默认的下划线*/\n}\n/* :hover 是链接伪类选择器 鼠标经过 */\na:hover {   \n   color: red; /*  鼠标经过的时候，由原来的 灰色 变成了红色 */\n}\n```\n\n## 「3.6foucs伪类选择器」\n\nfoucs伪类选择器用于选取获得焦点的表单元素。\n\n焦点就是光标，一般情况下类表单元素才能获取，因此这个选择器也主要针对表单元素来说。\n\n```css\ninput:foucs {\n    background-color:yellow;\n}\n```\n\n## 「3.7复合选择器总结」\n\n| 选择器          | 作用                   | 特征             | 使用情况 | 隔开符号及用法                     |\n| --------------- | ---------------------- | ---------------- | -------- | ---------------------------------- |\n| 后代选择器      | 用来选择后代元素       | 可以是子孙后代   | 较多     | 符号是空格.nav a                   |\n| 子选择器        | 选择最近一级元素       | 只选亲儿子       | 较少     | 符号是大于.nav>a                   |\n| 交集选择器      | 选择两个标签交集部分   | 既是 又是        | 较少     | 没有符号 p.one                     |\n| 并集选择器      | 选择某些相同样式的元素 | 可以用于集体声明 | 较多     | 符号是逗号.nav,a                   |\n| 链接伪类选择器  | 选择不同状态的链接     | 跟链接相关       | 较多     | 重点记住a{}和a:hover实际开发的写法 |\n| foucs伪类选择器 | 选择获得光标的表单     | 跟表单相关       | 较少     | input:focus记住这个写法            |\n\n# 团队约定\n\n1. 尽量少用通配符选择器 `*`\n2. 尽量少用ID选择器\n3. 不使用无具体语义定义的标签选择器\n\n```css\n/* 推荐 */\n.jdc {}\nli {}\np {}\n/* 不推荐 */\n*{}\n#jdc {}\ndiv{}   /*因为div 没有语义，我们尽量少用*/\n```\n\n","slug":"前端/CSS选择器","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cl5db79k0000iywtu14rihdlv","content":"<h1 id=\"选择器简介\"><a href=\"#选择器简介\" class=\"headerlink\" title=\"选择器简介\"></a>选择器简介</h1><h2 id=\"「1-1作用」\"><a href=\"#「1-1作用」\" class=\"headerlink\" title=\"「1.1作用」\"></a>「1.1作用」</h2><p>选择器（选择符）就是根据不同需求把不同的标签选出来，这就是选择器的作用。简单来说，就是选择标签用的。 CSS做了两件事： </p>\n<ol>\n<li>找到标签（选对人）</li>\n<li>设置这些标签的样式（做对事）</li>\n</ol>\n<h2 id=\"「1-2分类」\"><a href=\"#「1-2分类」\" class=\"headerlink\" title=\"「1.2分类」\"></a>「1.2分类」</h2><p>在CSS中，可以根据选择器类型把选择器分为<strong>基础选择器</strong>和<strong>复合选择器</strong>。</p>\n<ul>\n<li>基础选择器是由单个选择器组成的 </li>\n<li>基础选择器又包括：<strong>标签选择器、类选择器、id选择器、通配符选择器</strong></li>\n</ul>\n<p>复合选择器是建立在基础选择器之上，对基础选择器进行组合形成的。</p>\n<ul>\n<li>复合选择器可以更精准，更高效的选择目标元素（标签）</li>\n<li>复合选择器是有两个或多个基础选择器，通过不同的方式组合而成的</li>\n<li>常用的复合选择器包括：<strong>后代选择器，子选择器，并集选择器，伪类选择器等</strong></li>\n</ul>\n<h1 id=\"基础选择器\"><a href=\"#基础选择器\" class=\"headerlink\" title=\"基础选择器\"></a>基础选择器</h1><h2 id=\"「2-1标签选择器」\"><a href=\"#「2-1标签选择器」\" class=\"headerlink\" title=\"「2.1标签选择器」\"></a>「2.1标签选择器」</h2><p>标签选择器（元素选择器）是指用HTML标签名称作为选择器，按标签名称分类，为页面中某一类标签指定统一的CSS样式。 </p>\n<ul>\n<li>作用: 标签选择器可以把某一类标签全部选择出来，比如所有的div标签和所有的span标签。 </li>\n<li>优点: 能快速为页面中同类型的标签统一设置样式。 </li>\n<li>缺点: 不能设计差异化样式，只能选择全部的当前标签。</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">标签名 &#123; 属性<span class=\"number\">1</span>:属性值<span class=\"number\">1</span>;</span><br><span class=\"line\">        属性<span class=\"number\">2</span>:属性值<span class=\"number\">2</span>; </span><br><span class=\"line\">        属性<span class=\"number\">3</span>:属性值<span class=\"number\">3</span>; </span><br><span class=\"line\">      &#125; </span><br><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">     &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「2-2类选择器」\"><a href=\"#「2-2类选择器」\" class=\"headerlink\" title=\"「2.2类选择器」\"></a>「2.2类选择器」</h2><p>如果想要差异化选择不同的标签，单独选一个或者某几个标签，可以使用类选择器。</p>\n<p>类选择器在HTML中以class属性表示，在CSS中，类选择器以一个点“ <strong>.</strong> ”号显示。 </p>\n<p><strong>注意</strong></p>\n<ul>\n<li> ①类选择器使用 .（英文点号）进行标识，后面紧跟类名（自定义，我们自己命名的）。 </li>\n<li> ②可以理解为给这个标签起了一个名字来表示。 </li>\n<li> ③长名称或词组可以使用中横线来为选择器命名。 </li>\n<li> ④不要使用纯数字、中文等命名，尽量使用英文字母来表示。 </li>\n<li> ⑤命名要有意义，尽量使别人一眼就知道这个类名的目的。 </li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.类名<span class=\"number\">1</span>  &#123;   </span><br><span class=\"line\">    属性<span class=\"number\">1</span>: 属性值<span class=\"number\">1</span>; </span><br><span class=\"line\">    属性<span class=\"number\">2</span>: 属性值<span class=\"number\">2</span>; </span><br><span class=\"line\">    属性<span class=\"number\">3</span>: 属性值<span class=\"number\">3</span>;     </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;类名1 类名2&quot;</span>&gt;</span> 样例 <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>各个类名中间用空格隔开</li>\n<li>简单理解：就是给某个标签添加了多个类，或者这个标签有多个名字</li>\n<li>这个标签就可以分别具有这些类名的样式</li>\n<li>从而节省css代码，统一修改也非常方便</li>\n<li>多个类名选择器在后期布局比较复杂的情况下，还是较多使用的</li>\n</ul>\n<h2 id=\"「2-3id选择器」\"><a href=\"#「2-3id选择器」\" class=\"headerlink\" title=\"「2.3id选择器」\"></a>「2.3id选择器」</h2><p>id选择器可以为标有特定id的HTML元素指定特定的样式。</p>\n<p>HTML元素以id属性来设置id选择器，CSS中id选择器以“ <strong>#</strong> ”来定义。</p>\n<ul>\n<li><strong>注意</strong>：id属性只能在每个HTML文档中出现一次</li>\n<li><strong>口诀</strong>：样式#定义，结构id调用，只能调用一次，别人切勿使用</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#id</span>名 &#123; 属性<span class=\"number\">1</span>:属性值<span class=\"number\">1</span>; </span><br><span class=\"line\">        属性<span class=\"number\">2</span>:属性值<span class=\"number\">2</span>; </span><br><span class=\"line\">        属性<span class=\"number\">3</span>:属性值<span class=\"number\">3</span>; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;id名&quot;</span>&gt;</span>样例<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"id选择器和类选择器的区别\"><a href=\"#id选择器和类选择器的区别\" class=\"headerlink\" title=\"id选择器和类选择器的区别\"></a><strong>id选择器和类选择器的区别</strong></h3><ol>\n<li>类选择器(class)好比人的名字，一个人可以有多个名字，同时一个名字也可以被多个人使用。 </li>\n<li>id选择器好比人的身份证号码β、全中国是唯一的,不得重复。 </li>\n<li>id选择器和类选择器最大的不同在于使用次数上。 </li>\n<li>类选择器在修改样式中用的最多，id选择器一般用于页面唯一性的元素上，经常和 JavaScript 搭配使用。</li>\n</ol>\n<h2 id=\"「2-4通配符选择器」\"><a href=\"#「2-4通配符选择器」\" class=\"headerlink\" title=\"「2.4通配符选择器」\"></a>「2.4通配符选择器」</h2><p>在CSS中，通配符选择器使用*定义，它表示选取页面中所有元素(标签)。</p>\n<ul>\n<li>通配符选择器不需要调用，自动就给所有的元素使用样式</li>\n<li>特殊情况才使用，后面讲解使用</li>\n</ul>\n<p><strong>注意：</strong>会匹配页面所有的元素，降低页面响应速度，不建议随便使用</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* &#123; 属性<span class=\"number\">1</span>:属性值<span class=\"number\">1</span>; </span><br><span class=\"line\">    属性<span class=\"number\">2</span>:属性值<span class=\"number\">2</span>; </span><br><span class=\"line\">    属性<span class=\"number\">3</span>:属性值<span class=\"number\">3</span>; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>例如下面代码，使用通配符选择器定义CSS样式，清除所有HTML标记的默认边距。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* &#123;</span><br><span class=\"line\">   <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;                    <span class=\"comment\">/* 定义外边距*/</span></span><br><span class=\"line\">   <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;                   <span class=\"comment\">/* 定义内边距*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-5基础选择器总结\"><a href=\"#2-5基础选择器总结\" class=\"headerlink\" title=\"2.5基础选择器总结\"></a>2.5基础选择器总结</h2><table>\n<thead>\n<tr>\n<th>标签选择器</th>\n<th>作用</th>\n<th>特点</th>\n<th>使用情况</th>\n<th>用法</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>标签选择器</td>\n<td>可以选出所有相同的标签</td>\n<td>不能差异化选择</td>\n<td>较多</td>\n<td>p {color: red}</td>\n</tr>\n<tr>\n<td>类选择器</td>\n<td>可以选出一个或多个标签</td>\n<td>可以根据需求选择</td>\n<td>最多</td>\n<td>.nav {color: red}</td>\n</tr>\n<tr>\n<td>id选择器</td>\n<td>一次只能选择一个标签</td>\n<td>id属性在每个html文档中只能出现一次</td>\n<td>一般和js搭配</td>\n<td>#nav {color: red}</td>\n</tr>\n<tr>\n<td>通配符选择器</td>\n<td>选择所有标签</td>\n<td>选择过多，有部分不需要</td>\n<td>特殊情况使用</td>\n<td>* {color: red}</td>\n</tr>\n</tbody></table>\n<p>每个基础选择器都有使用场景，都需要掌握，如果是修改样式，类选择器是使用最多的</p>\n<h1 id=\"复合选择器\"><a href=\"#复合选择器\" class=\"headerlink\" title=\"复合选择器\"></a>复合选择器</h1><h2 id=\"「3-1后代选择器」\"><a href=\"#「3-1后代选择器」\" class=\"headerlink\" title=\"「3.1后代选择器」\"></a>「3.1后代选择器」</h2><p>后代选择器又称为包含选择器，可以选择父元素里面的子元素，其写法就是把外层标签写在前面，内层标签写在后面，中间用空格分隔，当标签发生嵌套时，内层标签就成为外层标签的后代。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">元素<span class=\"number\">1</span> 元素<span class=\"number\">2</span> &#123;属性:属性值;</span><br><span class=\"line\">    属性:属性值;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.class</span> <span class=\"selector-tag\">h3</span> &#123;<span class=\"attribute\">color</span>:red;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>:<span class=\"number\">16px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上述语法表示选择元素1里面的所有元素2（后代元素）</p>\n<ul>\n<li>元素1和元素2中间用空格隔开</li>\n<li>元素1是父级，元素2是子级，<strong>最终选择的是元素2</strong></li>\n<li>元素2可以是儿子，也可以是孙子等，只要是元素1 的后代即可</li>\n<li>元素1和元素2可以是任意基础选择器</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/CSS4.png\"></p>\n<h2 id=\"「3-2子选择器」\"><a href=\"#「3-2子选择器」\" class=\"headerlink\" title=\"「3.2子选择器」\"></a>「3.2子选择器」</h2><p>子元素选择器（子选择器）只能选择作为某元素的最近一级子元素，简单理解就是选亲儿子元素。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">元素<span class=\"number\">1</span>&gt;元素<span class=\"number\">2</span> &#123;样式声明</span><br><span class=\"line\">    属性:属性值;</span><br><span class=\"line\">    属性:属性值;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上述语法表示选择元素1里面的所有直接后代（子元素）元素2.</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span>&gt;<span class=\"selector-tag\">p</span> &#123;样式声明&#125;  <span class=\"comment\">/*选择div里面所有最近一级p标签元素*/</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>元素1和元素2中间用大于号隔开</li>\n<li>元素1是父级，元素2是子级，<strong>最终选择的是元素2</strong></li>\n<li>元素2必须是亲儿子，其孙子，重孙之类都不归他管，你也可以叫他亲儿子选择器</li>\n</ul>\n<h2 id=\"「3-3交集选择器」\"><a href=\"#「3-3交集选择器」\" class=\"headerlink\" title=\"「3.3交集选择器」\"></a>「3.3交集选择器」</h2><p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/CSS5.png\"></p>\n<p>其中第一个为标签选择器，第二个为class选择器，两个选择器之间<code>不能有空格</code>，如h3.special。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">交集选择器是并且的意思,即...又...的意思</span><br><span class=\"line\">比如：   </span><br><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-class\">.one</span>    </span><br><span class=\"line\"><span class=\"comment\">/* 选择的是： 类名为 .one 的段落标签。</span></span><br><span class=\"line\"><span class=\"comment\">用的相对来说比较少，不建议使用。*/</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「3-4并集选择器」\"><a href=\"#「3-4并集选择器」\" class=\"headerlink\" title=\"「3.4并集选择器」\"></a>「3.4并集选择器」</h2><p>并集选择器可以选择多组标签，同时为他们定义相同的样式，通常用于整体声明。</p>\n<p>并集选择器是个选择器通过英文逗号“,”连接而成，任何形式的选择器都可以作为并集选择器的一部分。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">元素<span class=\"number\">1</span>,元素<span class=\"number\">2</span> &#123;样式声明&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上述语法表示选择元素1和元素2</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">ul</span>,<span class=\"selector-tag\">div</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    样式声明</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"comment\">/*选择ul和div标签元素*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.one</span>,<span class=\"selector-tag\">p</span>,<span class=\"selector-id\">#test</span> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#F00</span>;</span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"comment\">/*表示 .one 和 p  和 #test 这三个选择器都会执行颜色为红色。 */</span></span><br><span class=\"line\"><span class=\"comment\">/*通常用于集体声明。 */</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>元素1和元素2中间用逗号隔开</li>\n<li>逗号可以理解为和的意思</li>\n<li>并集选择器通常用于集体声明</li>\n</ul>\n<h2 id=\"「3-5链接伪类选择器」\"><a href=\"#「3-5链接伪类选择器」\" class=\"headerlink\" title=\"「3.5链接伪类选择器」\"></a>「3.5链接伪类选择器」</h2><p>伪类选择器用于向某些选择器添加特殊的效果，比如给链接添加特殊效果，或选择第一个，第n个元素。</p>\n<p>伪类选择器书写最大的特点是用冒号:表示，比如：hover,first-child.</p>\n<p>因为伪类选择器很多，比如有链接伪类，结构伪类等，所以这里先给大家讲解常用的链接伪类选择器。</p>\n<p>链接伪类，是利用交集选择器</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:link</span>            <span class=\"comment\">/*选择所有未被访问的链接*/</span></span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:visited</span>         <span class=\"comment\">/*选择所有已被访问的链接*/</span></span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:hover</span>           <span class=\"comment\">/*选择鼠标指针位于其上的链接*/</span></span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:active</span>          <span class=\"comment\">/*选择活动链接（鼠标按下未弹起的链接）*/</span></span><br></pre></td></tr></table></figure>\n\n<p>写的时候，他们的顺序尽量不要颠倒，按照lvha的顺序。否则可能引起错误。</p>\n<p><strong>注意事项</strong></p>\n<ol>\n<li>为确保生效，请按照LVHA的顺序声明：link visited hover active</li>\n<li>记忆法：love hate或者Lv包包hao</li>\n<li>因为a链接在浏览器中具有默认样式，所以我们实际工作中都需要给链接单独指定样式</li>\n</ol>\n<p>实际工作中，很少写全四个状态，一般写法如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* a是标签选择器  所有的链接 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">a</span> &#123;   </span><br><span class=\"line\">   <span class=\"attribute\">font-weight</span>: <span class=\"number\">700</span>;</span><br><span class=\"line\">   <span class=\"attribute\">font-size</span>: <span class=\"number\">16px</span>;</span><br><span class=\"line\">   <span class=\"attribute\">color</span>: gray;</span><br><span class=\"line\">   <span class=\"attribute\">text-decoration</span>: none; <span class=\"comment\">/* 清除链接默认的下划线*/</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* :hover 是链接伪类选择器 鼠标经过 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:hover</span> &#123;   </span><br><span class=\"line\">   <span class=\"attribute\">color</span>: red; <span class=\"comment\">/*  鼠标经过的时候，由原来的 灰色 变成了红色 */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「3-6foucs伪类选择器」\"><a href=\"#「3-6foucs伪类选择器」\" class=\"headerlink\" title=\"「3.6foucs伪类选择器」\"></a>「3.6foucs伪类选择器」</h2><p>foucs伪类选择器用于选取获得焦点的表单元素。</p>\n<p>焦点就是光标，一般情况下类表单元素才能获取，因此这个选择器也主要针对表单元素来说。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">input</span>:foucs &#123;</span><br><span class=\"line\">    background-color:yellow;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「3-7复合选择器总结」\"><a href=\"#「3-7复合选择器总结」\" class=\"headerlink\" title=\"「3.7复合选择器总结」\"></a>「3.7复合选择器总结」</h2><table>\n<thead>\n<tr>\n<th>选择器</th>\n<th>作用</th>\n<th>特征</th>\n<th>使用情况</th>\n<th>隔开符号及用法</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>后代选择器</td>\n<td>用来选择后代元素</td>\n<td>可以是子孙后代</td>\n<td>较多</td>\n<td>符号是空格.nav a</td>\n</tr>\n<tr>\n<td>子选择器</td>\n<td>选择最近一级元素</td>\n<td>只选亲儿子</td>\n<td>较少</td>\n<td>符号是大于.nav&gt;a</td>\n</tr>\n<tr>\n<td>交集选择器</td>\n<td>选择两个标签交集部分</td>\n<td>既是 又是</td>\n<td>较少</td>\n<td>没有符号 p.one</td>\n</tr>\n<tr>\n<td>并集选择器</td>\n<td>选择某些相同样式的元素</td>\n<td>可以用于集体声明</td>\n<td>较多</td>\n<td>符号是逗号.nav,a</td>\n</tr>\n<tr>\n<td>链接伪类选择器</td>\n<td>选择不同状态的链接</td>\n<td>跟链接相关</td>\n<td>较多</td>\n<td>重点记住a{}和a:hover实际开发的写法</td>\n</tr>\n<tr>\n<td>foucs伪类选择器</td>\n<td>选择获得光标的表单</td>\n<td>跟表单相关</td>\n<td>较少</td>\n<td>input:focus记住这个写法</td>\n</tr>\n</tbody></table>\n<h1 id=\"团队约定\"><a href=\"#团队约定\" class=\"headerlink\" title=\"团队约定\"></a>团队约定</h1><ol>\n<li>尽量少用通配符选择器 <code>*</code></li>\n<li>尽量少用ID选择器</li>\n<li>不使用无具体语义定义的标签选择器</li>\n</ol>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 推荐 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.jdc</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">li</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">p</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 不推荐 */</span></span><br><span class=\"line\">*&#123;&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#jdc</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">div</span>&#123;&#125;   <span class=\"comment\">/*因为div 没有语义，我们尽量少用*/</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<h1 id=\"选择器简介\"><a href=\"#选择器简介\" class=\"headerlink\" title=\"选择器简介\"></a>选择器简介</h1><h2 id=\"「1-1作用」\"><a href=\"#「1-1作用」\" class=\"headerlink\" title=\"「1.1作用」\"></a>「1.1作用」</h2><p>选择器（选择符）就是根据不同需求把不同的标签选出来，这就是选择器的作用。简单来说，就是选择标签用的。 CSS做了两件事： </p>\n<ol>\n<li>找到标签（选对人）</li>\n<li>设置这些标签的样式（做对事）</li>\n</ol>\n<h2 id=\"「1-2分类」\"><a href=\"#「1-2分类」\" class=\"headerlink\" title=\"「1.2分类」\"></a>「1.2分类」</h2><p>在CSS中，可以根据选择器类型把选择器分为<strong>基础选择器</strong>和<strong>复合选择器</strong>。</p>\n<ul>\n<li>基础选择器是由单个选择器组成的 </li>\n<li>基础选择器又包括：<strong>标签选择器、类选择器、id选择器、通配符选择器</strong></li>\n</ul>\n<p>复合选择器是建立在基础选择器之上，对基础选择器进行组合形成的。</p>\n<ul>\n<li>复合选择器可以更精准，更高效的选择目标元素（标签）</li>\n<li>复合选择器是有两个或多个基础选择器，通过不同的方式组合而成的</li>\n<li>常用的复合选择器包括：<strong>后代选择器，子选择器，并集选择器，伪类选择器等</strong></li>\n</ul>\n<h1 id=\"基础选择器\"><a href=\"#基础选择器\" class=\"headerlink\" title=\"基础选择器\"></a>基础选择器</h1><h2 id=\"「2-1标签选择器」\"><a href=\"#「2-1标签选择器」\" class=\"headerlink\" title=\"「2.1标签选择器」\"></a>「2.1标签选择器」</h2><p>标签选择器（元素选择器）是指用HTML标签名称作为选择器，按标签名称分类，为页面中某一类标签指定统一的CSS样式。 </p>\n<ul>\n<li>作用: 标签选择器可以把某一类标签全部选择出来，比如所有的div标签和所有的span标签。 </li>\n<li>优点: 能快速为页面中同类型的标签统一设置样式。 </li>\n<li>缺点: 不能设计差异化样式，只能选择全部的当前标签。</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">标签名 &#123; 属性<span class=\"number\">1</span>:属性值<span class=\"number\">1</span>;</span><br><span class=\"line\">        属性<span class=\"number\">2</span>:属性值<span class=\"number\">2</span>; </span><br><span class=\"line\">        属性<span class=\"number\">3</span>:属性值<span class=\"number\">3</span>; </span><br><span class=\"line\">      &#125; </span><br><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">     &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「2-2类选择器」\"><a href=\"#「2-2类选择器」\" class=\"headerlink\" title=\"「2.2类选择器」\"></a>「2.2类选择器」</h2><p>如果想要差异化选择不同的标签，单独选一个或者某几个标签，可以使用类选择器。</p>\n<p>类选择器在HTML中以class属性表示，在CSS中，类选择器以一个点“ <strong>.</strong> ”号显示。 </p>\n<p><strong>注意</strong></p>\n<ul>\n<li> ①类选择器使用 .（英文点号）进行标识，后面紧跟类名（自定义，我们自己命名的）。 </li>\n<li> ②可以理解为给这个标签起了一个名字来表示。 </li>\n<li> ③长名称或词组可以使用中横线来为选择器命名。 </li>\n<li> ④不要使用纯数字、中文等命名，尽量使用英文字母来表示。 </li>\n<li> ⑤命名要有意义，尽量使别人一眼就知道这个类名的目的。 </li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.类名<span class=\"number\">1</span>  &#123;   </span><br><span class=\"line\">    属性<span class=\"number\">1</span>: 属性值<span class=\"number\">1</span>; </span><br><span class=\"line\">    属性<span class=\"number\">2</span>: 属性值<span class=\"number\">2</span>; </span><br><span class=\"line\">    属性<span class=\"number\">3</span>: 属性值<span class=\"number\">3</span>;     </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;类名1 类名2&quot;</span>&gt;</span> 样例 <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>各个类名中间用空格隔开</li>\n<li>简单理解：就是给某个标签添加了多个类，或者这个标签有多个名字</li>\n<li>这个标签就可以分别具有这些类名的样式</li>\n<li>从而节省css代码，统一修改也非常方便</li>\n<li>多个类名选择器在后期布局比较复杂的情况下，还是较多使用的</li>\n</ul>\n<h2 id=\"「2-3id选择器」\"><a href=\"#「2-3id选择器」\" class=\"headerlink\" title=\"「2.3id选择器」\"></a>「2.3id选择器」</h2><p>id选择器可以为标有特定id的HTML元素指定特定的样式。</p>\n<p>HTML元素以id属性来设置id选择器，CSS中id选择器以“ <strong>#</strong> ”来定义。</p>\n<ul>\n<li><strong>注意</strong>：id属性只能在每个HTML文档中出现一次</li>\n<li><strong>口诀</strong>：样式#定义，结构id调用，只能调用一次，别人切勿使用</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#id</span>名 &#123; 属性<span class=\"number\">1</span>:属性值<span class=\"number\">1</span>; </span><br><span class=\"line\">        属性<span class=\"number\">2</span>:属性值<span class=\"number\">2</span>; </span><br><span class=\"line\">        属性<span class=\"number\">3</span>:属性值<span class=\"number\">3</span>; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;id名&quot;</span>&gt;</span>样例<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"id选择器和类选择器的区别\"><a href=\"#id选择器和类选择器的区别\" class=\"headerlink\" title=\"id选择器和类选择器的区别\"></a><strong>id选择器和类选择器的区别</strong></h3><ol>\n<li>类选择器(class)好比人的名字，一个人可以有多个名字，同时一个名字也可以被多个人使用。 </li>\n<li>id选择器好比人的身份证号码β、全中国是唯一的,不得重复。 </li>\n<li>id选择器和类选择器最大的不同在于使用次数上。 </li>\n<li>类选择器在修改样式中用的最多，id选择器一般用于页面唯一性的元素上，经常和 JavaScript 搭配使用。</li>\n</ol>\n<h2 id=\"「2-4通配符选择器」\"><a href=\"#「2-4通配符选择器」\" class=\"headerlink\" title=\"「2.4通配符选择器」\"></a>「2.4通配符选择器」</h2><p>在CSS中，通配符选择器使用*定义，它表示选取页面中所有元素(标签)。</p>\n<ul>\n<li>通配符选择器不需要调用，自动就给所有的元素使用样式</li>\n<li>特殊情况才使用，后面讲解使用</li>\n</ul>\n<p><strong>注意：</strong>会匹配页面所有的元素，降低页面响应速度，不建议随便使用</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* &#123; 属性<span class=\"number\">1</span>:属性值<span class=\"number\">1</span>; </span><br><span class=\"line\">    属性<span class=\"number\">2</span>:属性值<span class=\"number\">2</span>; </span><br><span class=\"line\">    属性<span class=\"number\">3</span>:属性值<span class=\"number\">3</span>; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>例如下面代码，使用通配符选择器定义CSS样式，清除所有HTML标记的默认边距。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* &#123;</span><br><span class=\"line\">   <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;                    <span class=\"comment\">/* 定义外边距*/</span></span><br><span class=\"line\">   <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;                   <span class=\"comment\">/* 定义内边距*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-5基础选择器总结\"><a href=\"#2-5基础选择器总结\" class=\"headerlink\" title=\"2.5基础选择器总结\"></a>2.5基础选择器总结</h2><table>\n<thead>\n<tr>\n<th>标签选择器</th>\n<th>作用</th>\n<th>特点</th>\n<th>使用情况</th>\n<th>用法</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>标签选择器</td>\n<td>可以选出所有相同的标签</td>\n<td>不能差异化选择</td>\n<td>较多</td>\n<td>p {color: red}</td>\n</tr>\n<tr>\n<td>类选择器</td>\n<td>可以选出一个或多个标签</td>\n<td>可以根据需求选择</td>\n<td>最多</td>\n<td>.nav {color: red}</td>\n</tr>\n<tr>\n<td>id选择器</td>\n<td>一次只能选择一个标签</td>\n<td>id属性在每个html文档中只能出现一次</td>\n<td>一般和js搭配</td>\n<td>#nav {color: red}</td>\n</tr>\n<tr>\n<td>通配符选择器</td>\n<td>选择所有标签</td>\n<td>选择过多，有部分不需要</td>\n<td>特殊情况使用</td>\n<td>* {color: red}</td>\n</tr>\n</tbody></table>\n<p>每个基础选择器都有使用场景，都需要掌握，如果是修改样式，类选择器是使用最多的</p>\n<h1 id=\"复合选择器\"><a href=\"#复合选择器\" class=\"headerlink\" title=\"复合选择器\"></a>复合选择器</h1><h2 id=\"「3-1后代选择器」\"><a href=\"#「3-1后代选择器」\" class=\"headerlink\" title=\"「3.1后代选择器」\"></a>「3.1后代选择器」</h2><p>后代选择器又称为包含选择器，可以选择父元素里面的子元素，其写法就是把外层标签写在前面，内层标签写在后面，中间用空格分隔，当标签发生嵌套时，内层标签就成为外层标签的后代。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">元素<span class=\"number\">1</span> 元素<span class=\"number\">2</span> &#123;属性:属性值;</span><br><span class=\"line\">    属性:属性值;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.class</span> <span class=\"selector-tag\">h3</span> &#123;<span class=\"attribute\">color</span>:red;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>:<span class=\"number\">16px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上述语法表示选择元素1里面的所有元素2（后代元素）</p>\n<ul>\n<li>元素1和元素2中间用空格隔开</li>\n<li>元素1是父级，元素2是子级，<strong>最终选择的是元素2</strong></li>\n<li>元素2可以是儿子，也可以是孙子等，只要是元素1 的后代即可</li>\n<li>元素1和元素2可以是任意基础选择器</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/CSS4.png\"></p>\n<h2 id=\"「3-2子选择器」\"><a href=\"#「3-2子选择器」\" class=\"headerlink\" title=\"「3.2子选择器」\"></a>「3.2子选择器」</h2><p>子元素选择器（子选择器）只能选择作为某元素的最近一级子元素，简单理解就是选亲儿子元素。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">元素<span class=\"number\">1</span>&gt;元素<span class=\"number\">2</span> &#123;样式声明</span><br><span class=\"line\">    属性:属性值;</span><br><span class=\"line\">    属性:属性值;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上述语法表示选择元素1里面的所有直接后代（子元素）元素2.</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span>&gt;<span class=\"selector-tag\">p</span> &#123;样式声明&#125;  <span class=\"comment\">/*选择div里面所有最近一级p标签元素*/</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>元素1和元素2中间用大于号隔开</li>\n<li>元素1是父级，元素2是子级，<strong>最终选择的是元素2</strong></li>\n<li>元素2必须是亲儿子，其孙子，重孙之类都不归他管，你也可以叫他亲儿子选择器</li>\n</ul>\n<h2 id=\"「3-3交集选择器」\"><a href=\"#「3-3交集选择器」\" class=\"headerlink\" title=\"「3.3交集选择器」\"></a>「3.3交集选择器」</h2><p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/CSS5.png\"></p>\n<p>其中第一个为标签选择器，第二个为class选择器，两个选择器之间<code>不能有空格</code>，如h3.special。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">交集选择器是并且的意思,即...又...的意思</span><br><span class=\"line\">比如：   </span><br><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-class\">.one</span>    </span><br><span class=\"line\"><span class=\"comment\">/* 选择的是： 类名为 .one 的段落标签。</span></span><br><span class=\"line\"><span class=\"comment\">用的相对来说比较少，不建议使用。*/</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「3-4并集选择器」\"><a href=\"#「3-4并集选择器」\" class=\"headerlink\" title=\"「3.4并集选择器」\"></a>「3.4并集选择器」</h2><p>并集选择器可以选择多组标签，同时为他们定义相同的样式，通常用于整体声明。</p>\n<p>并集选择器是个选择器通过英文逗号“,”连接而成，任何形式的选择器都可以作为并集选择器的一部分。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">元素<span class=\"number\">1</span>,元素<span class=\"number\">2</span> &#123;样式声明&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上述语法表示选择元素1和元素2</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">ul</span>,<span class=\"selector-tag\">div</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    样式声明</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"comment\">/*选择ul和div标签元素*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.one</span>,<span class=\"selector-tag\">p</span>,<span class=\"selector-id\">#test</span> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#F00</span>;</span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"comment\">/*表示 .one 和 p  和 #test 这三个选择器都会执行颜色为红色。 */</span></span><br><span class=\"line\"><span class=\"comment\">/*通常用于集体声明。 */</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>元素1和元素2中间用逗号隔开</li>\n<li>逗号可以理解为和的意思</li>\n<li>并集选择器通常用于集体声明</li>\n</ul>\n<h2 id=\"「3-5链接伪类选择器」\"><a href=\"#「3-5链接伪类选择器」\" class=\"headerlink\" title=\"「3.5链接伪类选择器」\"></a>「3.5链接伪类选择器」</h2><p>伪类选择器用于向某些选择器添加特殊的效果，比如给链接添加特殊效果，或选择第一个，第n个元素。</p>\n<p>伪类选择器书写最大的特点是用冒号:表示，比如：hover,first-child.</p>\n<p>因为伪类选择器很多，比如有链接伪类，结构伪类等，所以这里先给大家讲解常用的链接伪类选择器。</p>\n<p>链接伪类，是利用交集选择器</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:link</span>            <span class=\"comment\">/*选择所有未被访问的链接*/</span></span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:visited</span>         <span class=\"comment\">/*选择所有已被访问的链接*/</span></span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:hover</span>           <span class=\"comment\">/*选择鼠标指针位于其上的链接*/</span></span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:active</span>          <span class=\"comment\">/*选择活动链接（鼠标按下未弹起的链接）*/</span></span><br></pre></td></tr></table></figure>\n\n<p>写的时候，他们的顺序尽量不要颠倒，按照lvha的顺序。否则可能引起错误。</p>\n<p><strong>注意事项</strong></p>\n<ol>\n<li>为确保生效，请按照LVHA的顺序声明：link visited hover active</li>\n<li>记忆法：love hate或者Lv包包hao</li>\n<li>因为a链接在浏览器中具有默认样式，所以我们实际工作中都需要给链接单独指定样式</li>\n</ol>\n<p>实际工作中，很少写全四个状态，一般写法如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* a是标签选择器  所有的链接 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">a</span> &#123;   </span><br><span class=\"line\">   <span class=\"attribute\">font-weight</span>: <span class=\"number\">700</span>;</span><br><span class=\"line\">   <span class=\"attribute\">font-size</span>: <span class=\"number\">16px</span>;</span><br><span class=\"line\">   <span class=\"attribute\">color</span>: gray;</span><br><span class=\"line\">   <span class=\"attribute\">text-decoration</span>: none; <span class=\"comment\">/* 清除链接默认的下划线*/</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* :hover 是链接伪类选择器 鼠标经过 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:hover</span> &#123;   </span><br><span class=\"line\">   <span class=\"attribute\">color</span>: red; <span class=\"comment\">/*  鼠标经过的时候，由原来的 灰色 变成了红色 */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「3-6foucs伪类选择器」\"><a href=\"#「3-6foucs伪类选择器」\" class=\"headerlink\" title=\"「3.6foucs伪类选择器」\"></a>「3.6foucs伪类选择器」</h2><p>foucs伪类选择器用于选取获得焦点的表单元素。</p>\n<p>焦点就是光标，一般情况下类表单元素才能获取，因此这个选择器也主要针对表单元素来说。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">input</span>:foucs &#123;</span><br><span class=\"line\">    background-color:yellow;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「3-7复合选择器总结」\"><a href=\"#「3-7复合选择器总结」\" class=\"headerlink\" title=\"「3.7复合选择器总结」\"></a>「3.7复合选择器总结」</h2><table>\n<thead>\n<tr>\n<th>选择器</th>\n<th>作用</th>\n<th>特征</th>\n<th>使用情况</th>\n<th>隔开符号及用法</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>后代选择器</td>\n<td>用来选择后代元素</td>\n<td>可以是子孙后代</td>\n<td>较多</td>\n<td>符号是空格.nav a</td>\n</tr>\n<tr>\n<td>子选择器</td>\n<td>选择最近一级元素</td>\n<td>只选亲儿子</td>\n<td>较少</td>\n<td>符号是大于.nav&gt;a</td>\n</tr>\n<tr>\n<td>交集选择器</td>\n<td>选择两个标签交集部分</td>\n<td>既是 又是</td>\n<td>较少</td>\n<td>没有符号 p.one</td>\n</tr>\n<tr>\n<td>并集选择器</td>\n<td>选择某些相同样式的元素</td>\n<td>可以用于集体声明</td>\n<td>较多</td>\n<td>符号是逗号.nav,a</td>\n</tr>\n<tr>\n<td>链接伪类选择器</td>\n<td>选择不同状态的链接</td>\n<td>跟链接相关</td>\n<td>较多</td>\n<td>重点记住a{}和a:hover实际开发的写法</td>\n</tr>\n<tr>\n<td>foucs伪类选择器</td>\n<td>选择获得光标的表单</td>\n<td>跟表单相关</td>\n<td>较少</td>\n<td>input:focus记住这个写法</td>\n</tr>\n</tbody></table>\n<h1 id=\"团队约定\"><a href=\"#团队约定\" class=\"headerlink\" title=\"团队约定\"></a>团队约定</h1><ol>\n<li>尽量少用通配符选择器 <code>*</code></li>\n<li>尽量少用ID选择器</li>\n<li>不使用无具体语义定义的标签选择器</li>\n</ol>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 推荐 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.jdc</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">li</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">p</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 不推荐 */</span></span><br><span class=\"line\">*&#123;&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#jdc</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">div</span>&#123;&#125;   <span class=\"comment\">/*因为div 没有语义，我们尽量少用*/</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"CSS高级技巧","date":"2022-05-27T16:00:00.000Z","updated":"2022-05-27T16:00:00.000Z","keywords":null,"description":null,"top_img":"./img/bg11.jpg","cover":"./img/bg21.jpg","_content":"# 元素的显示与隐藏\n\n让一个元素在页面中隐藏或显示出来\n\n共有三个属性\n\n| 属性       | 属性值                              |\n| ---------- | ----------------------------------- |\n| display    | none \\| display                     |\n| visibility | hidden \\| visible                   |\n| overflow   | visible \\| hidden \\| scroll \\| auto |\n\ndisplay属性隐藏后会脱标，不占有原来位置\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202205282000945.png)\n\nvisibility属性隐藏后不会脱标，继续占有原来位置\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202205282001733.png)\n\noverflow属性针对溢出，visible | hidden | scroll | auto\n\n| overflow属性值 | 描述                                 |\n| -------------- | ------------------------------------ |\n| visible        | 不剪切内容不添加滚动条               |\n| hidden         | 隐藏超出对象尺寸的内容               |\n| scroll         | 总分是显示滚动条                     |\n| auto           | 超出内容自动显示滚动条，不超出不显示 |\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202205282002302.png)\n\n# 精灵图技术\n\n## 「概述」\n\n- 图所示为网页的请求原理图，当用户访问一个网站时，需要向服务器发送请求，网页上的每张图像都要经过一次请求才能展现给用户。\n- 然而，一个网页中往往会应用很多小的背景图像作为修饰，当网页中的图像过多时，服务器就会频繁地接受和发送请求，这将大大降低页面的加载速度。\n\n为了有效地减少服务器接受和发送请求的次数，提高页面的加载速度。CSS 精灵其实是将网页中的一些背景图像整合到一张大图中（精灵图），然而，各个网页元素通常只需要精灵图中不同位置的某个小图，要想精确定位到精灵图中的某个小图。这样，当用户访问该页面时，只需向服务发送一次请求，网页中的背景图像即可全部展示出来。\n\n## 「需要的属性」\n\n- background-image、\n- background-repeat\n- background-position属性进行背景定位，\n- 其中最关键的是使用`background-position` 属性精确地定位。\n\n## 「核心总结」\n\n首先我们知道，css精灵技术主要针对于背景图片，插入的图片img 是不需要这个技术的。\n\n1. 精确测量，每个小背景图片的大小和位置。\n2. 给盒子指定小背景图片时，背景定位基本都是 负值。\n\n# 字体图标\n\n网页中的一些小图标通常用字体图标iconfont来显示，字体图标本质上是字体，现实的是图标。\n\n**字体图标下载网站**\n\n- icomoon字库 https://icomoon.io \n- 阿里iconfont字库 https://www.iconfont.cn\n\n1. 在字体图标网站选中图标下载后，需要将其引入到，将下载包里的fonts文件夹放入页面根目录下\n2. 在CSS样式中全局声明字体，把这些字体文件通过CSS引入到我们页面中，一定要注意字体文件路径问题\n\n**声明代码如下**\n\n```css\n@font-face {\nfont-family: ‘icomoon’;\nsrc: url(‘fonts/icomoon.eot?7kkyc2’);\nsrc: url(‘fonts/icomoon.eot?7kkyc2#iefix’) format(‘embedded-opentype’),\nurl(‘fonts/icomoon.ttf?7kkyc2’) format(‘truetype’),\nurl(‘fonts/icomoon.woff?7kkyc2’) format(‘woff’),\nurl(‘fonts/icomoon.svg?7kkyc2#icomoon’) format(‘svg’);\nfont-weight: normal;\nfont-style: normal;\n}\nspan {\n    font-family: 'icomoon';\n    font-size: 100px;\n    color: pink;\n}\n```\n\n```html\n<spam> </spam>  /复制图标网站上的源码\n```\n\n字体图标的追加：把压缩包中slection.json重新上传，然后选中自己想要更新的图标，重新下载压缩包，并途欢原来的文件即可。\n\n# CSS三角\n\n1. 我们用css 边框可以模拟三角效果\n2. 宽度高度为0\n3. 我们4个边框都要写， 只保留需要的边框颜色，其余的不能省略，都改为 transparent 透明就好了\n4. 为了照顾兼容性 低版本的浏览器，加上 font-size: 0;  line-height: 0;\n\n```css\ndiv {\n\n    width: 0; \n\n    height: 0;\n    line-height:0；\n    font-size: 0;\n   border-top: 10px solid red;\n\n   border-right: 10px solid green;\n\n   border-bottom: 10px solid blue;\n\n   border-left: 10px solid #000; \n\n     }\n```\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202205281959548.png)\n\n# CSS用户页面样式\n\n## 「鼠标样式cursor」\n\n设置或检索在对象上移动的鼠标指针采用何种系统预定义的光标形状。\n\n| 属性   | 属性值      | 描述       |\n| ------ | ----------- | ---------- |\n| cursor | default     | 小白(默认) |\n|        | pointer     | 小手       |\n|        | move        | 移动       |\n|        | text        | 文本       |\n|        | not-allowed | 禁止       |\n\n```css\n<ul>\n  <li style=\"cursor:default\">我是小白</li>\n  <li style=\"cursor:pointer\">我是小手</li>\n  <li style=\"cursor:move\">我是移动</li>\n  <li style=\"cursor:text\">我是文本</li>\n  <li style=\"cursor:not-allowed\">我是文本</li>\n</ul>\n```\n\n## 「轮廓线outline」\n\n是绘制于元素周围的一条线，位于边框边缘的外围，可起到突出元素的作用。\n\n```css\noutline : outline-color || outline-style || outline-width \n```\n\n但是我们都不关心可以设置多少，我们平时都是去掉的。\n最直接的写法是 ： outline: 0;  或者  outline: none;\n\n## 「防拖拽文本域resize」\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202205282012600.png)\n\n\n\n```html\n/*css行内式写法*/\n<textarea style=\"resize: none;\"> </textarea>\n```\n\n## 「vertical-align属性应用」\n\nvertical-align 垂直对齐，它只针对于**「行内元素」**或者**「行内块元素」**\n\n可以用来设置**图片表单文字对齐**和**去除图片底侧空白空袭**\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202205282016270.jpg)\n\n```css\n设置或检索对象内容的垂直对其方式。\nvertical-align : baseline |top |middle |bottom \n```\n\n**注意**\n\n- vertical-align 不影响块级元素中的内容对齐，它只针对于**「行内元素」**或者**「行内块元素」**\n- 特别是行内块元素， 通常用来控制图片/表单与文字的对齐。\n- 有宽度的块级元素居中对齐，是margin: 0 auto;\n- 让文字居中对齐，是 text-align: center;\n\n## 「溢出文字省略号显示」\n\n**三个步骤**\n\n1. 先强制一行内显示文本\n2. 超出的部分隐藏\n3. 文字用省略号替代超出的部分\n\nwhite-space属性设置或检索对象内文本显示方式。通常我们使用于强制一行显示内容\n\n```css\nwhite-space:normal ；默认处理方式\n\nwhite-space:nowrap ； 强制在同一行内显示所有文本，直到文本结束或者遭遇br标签对象才换行。\n```\n\ntext-overflow属性设置或检索是否使用一个省略标记（...）标示对象内文本的溢出\n\n```css\ntext-overflow : clip ；不显示省略标记（...），而是简单的裁切 \n\ntext-overflow：ellipsis ； 当对象内文本溢出时显示省略标记（...）\n```\n\n```css\n  /*1. 先强制一行内显示文本*/\n      white-space: nowrap;\n  /*2. 超出的部分隐藏*/\n      overflow: hidden;\n  /*3. 文字用省略号替代超出的部分*/\n      text-overflow: ellipsis;\n```\n\n# 常见布局技巧\n\n1. margin负值的运用\n2. 文字环绕浮动元素\n3. 行内块元素巧妙运用\n4. CSS三角强化\n\n","source":"_posts/前端/CSS高级技巧.md","raw":"---\ntitle: CSS高级技巧\ndate: 2022-05-28\nupdated: 2022-05-28\ntags:\n  - 小白的前端之路\n  - CSS基础\ncategories: 前端开发\nkeywords: \ndescription: \ntop_img: ./img/bg11.jpg\ncover: ./img/bg21.jpg\n\n---\n# 元素的显示与隐藏\n\n让一个元素在页面中隐藏或显示出来\n\n共有三个属性\n\n| 属性       | 属性值                              |\n| ---------- | ----------------------------------- |\n| display    | none \\| display                     |\n| visibility | hidden \\| visible                   |\n| overflow   | visible \\| hidden \\| scroll \\| auto |\n\ndisplay属性隐藏后会脱标，不占有原来位置\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202205282000945.png)\n\nvisibility属性隐藏后不会脱标，继续占有原来位置\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202205282001733.png)\n\noverflow属性针对溢出，visible | hidden | scroll | auto\n\n| overflow属性值 | 描述                                 |\n| -------------- | ------------------------------------ |\n| visible        | 不剪切内容不添加滚动条               |\n| hidden         | 隐藏超出对象尺寸的内容               |\n| scroll         | 总分是显示滚动条                     |\n| auto           | 超出内容自动显示滚动条，不超出不显示 |\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202205282002302.png)\n\n# 精灵图技术\n\n## 「概述」\n\n- 图所示为网页的请求原理图，当用户访问一个网站时，需要向服务器发送请求，网页上的每张图像都要经过一次请求才能展现给用户。\n- 然而，一个网页中往往会应用很多小的背景图像作为修饰，当网页中的图像过多时，服务器就会频繁地接受和发送请求，这将大大降低页面的加载速度。\n\n为了有效地减少服务器接受和发送请求的次数，提高页面的加载速度。CSS 精灵其实是将网页中的一些背景图像整合到一张大图中（精灵图），然而，各个网页元素通常只需要精灵图中不同位置的某个小图，要想精确定位到精灵图中的某个小图。这样，当用户访问该页面时，只需向服务发送一次请求，网页中的背景图像即可全部展示出来。\n\n## 「需要的属性」\n\n- background-image、\n- background-repeat\n- background-position属性进行背景定位，\n- 其中最关键的是使用`background-position` 属性精确地定位。\n\n## 「核心总结」\n\n首先我们知道，css精灵技术主要针对于背景图片，插入的图片img 是不需要这个技术的。\n\n1. 精确测量，每个小背景图片的大小和位置。\n2. 给盒子指定小背景图片时，背景定位基本都是 负值。\n\n# 字体图标\n\n网页中的一些小图标通常用字体图标iconfont来显示，字体图标本质上是字体，现实的是图标。\n\n**字体图标下载网站**\n\n- icomoon字库 https://icomoon.io \n- 阿里iconfont字库 https://www.iconfont.cn\n\n1. 在字体图标网站选中图标下载后，需要将其引入到，将下载包里的fonts文件夹放入页面根目录下\n2. 在CSS样式中全局声明字体，把这些字体文件通过CSS引入到我们页面中，一定要注意字体文件路径问题\n\n**声明代码如下**\n\n```css\n@font-face {\nfont-family: ‘icomoon’;\nsrc: url(‘fonts/icomoon.eot?7kkyc2’);\nsrc: url(‘fonts/icomoon.eot?7kkyc2#iefix’) format(‘embedded-opentype’),\nurl(‘fonts/icomoon.ttf?7kkyc2’) format(‘truetype’),\nurl(‘fonts/icomoon.woff?7kkyc2’) format(‘woff’),\nurl(‘fonts/icomoon.svg?7kkyc2#icomoon’) format(‘svg’);\nfont-weight: normal;\nfont-style: normal;\n}\nspan {\n    font-family: 'icomoon';\n    font-size: 100px;\n    color: pink;\n}\n```\n\n```html\n<spam> </spam>  /复制图标网站上的源码\n```\n\n字体图标的追加：把压缩包中slection.json重新上传，然后选中自己想要更新的图标，重新下载压缩包，并途欢原来的文件即可。\n\n# CSS三角\n\n1. 我们用css 边框可以模拟三角效果\n2. 宽度高度为0\n3. 我们4个边框都要写， 只保留需要的边框颜色，其余的不能省略，都改为 transparent 透明就好了\n4. 为了照顾兼容性 低版本的浏览器，加上 font-size: 0;  line-height: 0;\n\n```css\ndiv {\n\n    width: 0; \n\n    height: 0;\n    line-height:0；\n    font-size: 0;\n   border-top: 10px solid red;\n\n   border-right: 10px solid green;\n\n   border-bottom: 10px solid blue;\n\n   border-left: 10px solid #000; \n\n     }\n```\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202205281959548.png)\n\n# CSS用户页面样式\n\n## 「鼠标样式cursor」\n\n设置或检索在对象上移动的鼠标指针采用何种系统预定义的光标形状。\n\n| 属性   | 属性值      | 描述       |\n| ------ | ----------- | ---------- |\n| cursor | default     | 小白(默认) |\n|        | pointer     | 小手       |\n|        | move        | 移动       |\n|        | text        | 文本       |\n|        | not-allowed | 禁止       |\n\n```css\n<ul>\n  <li style=\"cursor:default\">我是小白</li>\n  <li style=\"cursor:pointer\">我是小手</li>\n  <li style=\"cursor:move\">我是移动</li>\n  <li style=\"cursor:text\">我是文本</li>\n  <li style=\"cursor:not-allowed\">我是文本</li>\n</ul>\n```\n\n## 「轮廓线outline」\n\n是绘制于元素周围的一条线，位于边框边缘的外围，可起到突出元素的作用。\n\n```css\noutline : outline-color || outline-style || outline-width \n```\n\n但是我们都不关心可以设置多少，我们平时都是去掉的。\n最直接的写法是 ： outline: 0;  或者  outline: none;\n\n## 「防拖拽文本域resize」\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202205282012600.png)\n\n\n\n```html\n/*css行内式写法*/\n<textarea style=\"resize: none;\"> </textarea>\n```\n\n## 「vertical-align属性应用」\n\nvertical-align 垂直对齐，它只针对于**「行内元素」**或者**「行内块元素」**\n\n可以用来设置**图片表单文字对齐**和**去除图片底侧空白空袭**\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202205282016270.jpg)\n\n```css\n设置或检索对象内容的垂直对其方式。\nvertical-align : baseline |top |middle |bottom \n```\n\n**注意**\n\n- vertical-align 不影响块级元素中的内容对齐，它只针对于**「行内元素」**或者**「行内块元素」**\n- 特别是行内块元素， 通常用来控制图片/表单与文字的对齐。\n- 有宽度的块级元素居中对齐，是margin: 0 auto;\n- 让文字居中对齐，是 text-align: center;\n\n## 「溢出文字省略号显示」\n\n**三个步骤**\n\n1. 先强制一行内显示文本\n2. 超出的部分隐藏\n3. 文字用省略号替代超出的部分\n\nwhite-space属性设置或检索对象内文本显示方式。通常我们使用于强制一行显示内容\n\n```css\nwhite-space:normal ；默认处理方式\n\nwhite-space:nowrap ； 强制在同一行内显示所有文本，直到文本结束或者遭遇br标签对象才换行。\n```\n\ntext-overflow属性设置或检索是否使用一个省略标记（...）标示对象内文本的溢出\n\n```css\ntext-overflow : clip ；不显示省略标记（...），而是简单的裁切 \n\ntext-overflow：ellipsis ； 当对象内文本溢出时显示省略标记（...）\n```\n\n```css\n  /*1. 先强制一行内显示文本*/\n      white-space: nowrap;\n  /*2. 超出的部分隐藏*/\n      overflow: hidden;\n  /*3. 文字用省略号替代超出的部分*/\n      text-overflow: ellipsis;\n```\n\n# 常见布局技巧\n\n1. margin负值的运用\n2. 文字环绕浮动元素\n3. 行内块元素巧妙运用\n4. CSS三角强化\n\n","slug":"前端/CSS高级技巧","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cl5db79k3000mywtu9b0wbm0t","content":"<h1 id=\"元素的显示与隐藏\"><a href=\"#元素的显示与隐藏\" class=\"headerlink\" title=\"元素的显示与隐藏\"></a>元素的显示与隐藏</h1><p>让一个元素在页面中隐藏或显示出来</p>\n<p>共有三个属性</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>属性值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>display</td>\n<td>none | display</td>\n</tr>\n<tr>\n<td>visibility</td>\n<td>hidden | visible</td>\n</tr>\n<tr>\n<td>overflow</td>\n<td>visible | hidden | scroll | auto</td>\n</tr>\n</tbody></table>\n<p>display属性隐藏后会脱标，不占有原来位置</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202205282000945.png\"></p>\n<p>visibility属性隐藏后不会脱标，继续占有原来位置</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202205282001733.png\"></p>\n<p>overflow属性针对溢出，visible | hidden | scroll | auto</p>\n<table>\n<thead>\n<tr>\n<th>overflow属性值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>visible</td>\n<td>不剪切内容不添加滚动条</td>\n</tr>\n<tr>\n<td>hidden</td>\n<td>隐藏超出对象尺寸的内容</td>\n</tr>\n<tr>\n<td>scroll</td>\n<td>总分是显示滚动条</td>\n</tr>\n<tr>\n<td>auto</td>\n<td>超出内容自动显示滚动条，不超出不显示</td>\n</tr>\n</tbody></table>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202205282002302.png\"></p>\n<h1 id=\"精灵图技术\"><a href=\"#精灵图技术\" class=\"headerlink\" title=\"精灵图技术\"></a>精灵图技术</h1><h2 id=\"「概述」\"><a href=\"#「概述」\" class=\"headerlink\" title=\"「概述」\"></a>「概述」</h2><ul>\n<li>图所示为网页的请求原理图，当用户访问一个网站时，需要向服务器发送请求，网页上的每张图像都要经过一次请求才能展现给用户。</li>\n<li>然而，一个网页中往往会应用很多小的背景图像作为修饰，当网页中的图像过多时，服务器就会频繁地接受和发送请求，这将大大降低页面的加载速度。</li>\n</ul>\n<p>为了有效地减少服务器接受和发送请求的次数，提高页面的加载速度。CSS 精灵其实是将网页中的一些背景图像整合到一张大图中（精灵图），然而，各个网页元素通常只需要精灵图中不同位置的某个小图，要想精确定位到精灵图中的某个小图。这样，当用户访问该页面时，只需向服务发送一次请求，网页中的背景图像即可全部展示出来。</p>\n<h2 id=\"「需要的属性」\"><a href=\"#「需要的属性」\" class=\"headerlink\" title=\"「需要的属性」\"></a>「需要的属性」</h2><ul>\n<li>background-image、</li>\n<li>background-repeat</li>\n<li>background-position属性进行背景定位，</li>\n<li>其中最关键的是使用<code>background-position</code> 属性精确地定位。</li>\n</ul>\n<h2 id=\"「核心总结」\"><a href=\"#「核心总结」\" class=\"headerlink\" title=\"「核心总结」\"></a>「核心总结」</h2><p>首先我们知道，css精灵技术主要针对于背景图片，插入的图片img 是不需要这个技术的。</p>\n<ol>\n<li>精确测量，每个小背景图片的大小和位置。</li>\n<li>给盒子指定小背景图片时，背景定位基本都是 负值。</li>\n</ol>\n<h1 id=\"字体图标\"><a href=\"#字体图标\" class=\"headerlink\" title=\"字体图标\"></a>字体图标</h1><p>网页中的一些小图标通常用字体图标iconfont来显示，字体图标本质上是字体，现实的是图标。</p>\n<p><strong>字体图标下载网站</strong></p>\n<ul>\n<li>icomoon字库 <a href=\"https://icomoon.io/\">https://icomoon.io</a> </li>\n<li>阿里iconfont字库 <a href=\"https://www.iconfont.cn/\">https://www.iconfont.cn</a></li>\n</ul>\n<ol>\n<li>在字体图标网站选中图标下载后，需要将其引入到，将下载包里的fonts文件夹放入页面根目录下</li>\n<li>在CSS样式中全局声明字体，把这些字体文件通过CSS引入到我们页面中，一定要注意字体文件路径问题</li>\n</ol>\n<p><strong>声明代码如下</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\"><span class=\"attribute\">font-family</span>: ‘icomoon’;</span><br><span class=\"line\"><span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(<span class=\"string\">‘fonts/icomoon.eot?7kkyc2’</span>);</span><br><span class=\"line\"><span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(<span class=\"string\">‘fonts/icomoon.eot?7kkyc2#iefix’</span>) <span class=\"built_in\">format</span>(‘embedded-opentype’),</span><br><span class=\"line\"><span class=\"built_in\">url</span>(<span class=\"string\">‘fonts/icomoon.ttf?7kkyc2’</span>) <span class=\"built_in\">format</span>(‘truetype’),</span><br><span class=\"line\"><span class=\"built_in\">url</span>(<span class=\"string\">‘fonts/icomoon.woff?7kkyc2’</span>) <span class=\"built_in\">format</span>(‘woff’),</span><br><span class=\"line\"><span class=\"built_in\">url</span>(<span class=\"string\">‘fonts/icomoon.svg?7kkyc2#icomoon’</span>) <span class=\"built_in\">format</span>(‘svg’);</span><br><span class=\"line\"><span class=\"attribute\">font-weight</span>: normal;</span><br><span class=\"line\"><span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">span</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;icomoon&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: pink;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">spam</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">spam</span>&gt;</span>  /复制图标网站上的源码</span><br></pre></td></tr></table></figure>\n\n<p>字体图标的追加：把压缩包中slection.json重新上传，然后选中自己想要更新的图标，重新下载压缩包，并途欢原来的文件即可。</p>\n<h1 id=\"CSS三角\"><a href=\"#CSS三角\" class=\"headerlink\" title=\"CSS三角\"></a>CSS三角</h1><ol>\n<li>我们用css 边框可以模拟三角效果</li>\n<li>宽度高度为0</li>\n<li>我们4个边框都要写， 只保留需要的边框颜色，其余的不能省略，都改为 transparent 透明就好了</li>\n<li>为了照顾兼容性 低版本的浏览器，加上 font-size: 0;  line-height: 0;</li>\n</ol>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">0</span>; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>:<span class=\"number\">0</span>；</span><br><span class=\"line\">    font-size: <span class=\"number\">0</span>;</span><br><span class=\"line\">   <span class=\"attribute\">border-top</span>: <span class=\"number\">10px</span> solid red;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"attribute\">border-right</span>: <span class=\"number\">10px</span> solid green;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"attribute\">border-bottom</span>: <span class=\"number\">10px</span> solid blue;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"attribute\">border-left</span>: <span class=\"number\">10px</span> solid <span class=\"number\">#000</span>; </span><br><span class=\"line\"></span><br><span class=\"line\">     &#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202205281959548.png\"></p>\n<h1 id=\"CSS用户页面样式\"><a href=\"#CSS用户页面样式\" class=\"headerlink\" title=\"CSS用户页面样式\"></a>CSS用户页面样式</h1><h2 id=\"「鼠标样式cursor」\"><a href=\"#「鼠标样式cursor」\" class=\"headerlink\" title=\"「鼠标样式cursor」\"></a>「鼠标样式cursor」</h2><p>设置或检索在对象上移动的鼠标指针采用何种系统预定义的光标形状。</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>属性值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>cursor</td>\n<td>default</td>\n<td>小白(默认)</td>\n</tr>\n<tr>\n<td></td>\n<td>pointer</td>\n<td>小手</td>\n</tr>\n<tr>\n<td></td>\n<td>move</td>\n<td>移动</td>\n</tr>\n<tr>\n<td></td>\n<td>text</td>\n<td>文本</td>\n</tr>\n<tr>\n<td></td>\n<td>not-allowed</td>\n<td>禁止</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"selector-tag\">ul</span>&gt;</span><br><span class=\"line\">  &lt;<span class=\"selector-tag\">li</span> style=&quot;<span class=\"attribute\">cursor</span><span class=\"selector-pseudo\">:default</span>&quot;&gt;我是小白&lt;/<span class=\"selector-tag\">li</span>&gt;</span><br><span class=\"line\">  &lt;<span class=\"selector-tag\">li</span> style=&quot;<span class=\"attribute\">cursor</span>:pointer<span class=\"string\">&quot;&gt;我是小手&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;li style=&quot;</span>cursor:move<span class=\"string\">&quot;&gt;我是移动&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;li style=&quot;</span>cursor:text<span class=\"string\">&quot;&gt;我是文本&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;li style=&quot;</span>cursor:not-allowed<span class=\"string\">&quot;&gt;我是文本&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/ul&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「轮廓线outline」\"><a href=\"#「轮廓线outline」\" class=\"headerlink\" title=\"「轮廓线outline」\"></a>「轮廓线outline」</h2><p>是绘制于元素周围的一条线，位于边框边缘的外围，可起到突出元素的作用。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">outline</span> : outline-color || outline-style || outline-width </span><br></pre></td></tr></table></figure>\n\n<p>但是我们都不关心可以设置多少，我们平时都是去掉的。<br>最直接的写法是 ： outline: 0;  或者  outline: none;</p>\n<h2 id=\"「防拖拽文本域resize」\"><a href=\"#「防拖拽文本域resize」\" class=\"headerlink\" title=\"「防拖拽文本域resize」\"></a>「防拖拽文本域resize」</h2><p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202205282012600.png\"></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*css行内式写法*/</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;resize: none;&quot;</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「vertical-align属性应用」\"><a href=\"#「vertical-align属性应用」\" class=\"headerlink\" title=\"「vertical-align属性应用」\"></a>「vertical-align属性应用」</h2><p>vertical-align 垂直对齐，它只针对于<strong>「行内元素」</strong>或者<strong>「行内块元素」</strong></p>\n<p>可以用来设置<strong>图片表单文字对齐</strong>和<strong>去除图片底侧空白空袭</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202205282016270.jpg\"></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">设置或检索对象内容的垂直对其方式。</span><br><span class=\"line\"><span class=\"attribute\">vertical-align</span> : baseline |top |middle |bottom </span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong></p>\n<ul>\n<li>vertical-align 不影响块级元素中的内容对齐，它只针对于<strong>「行内元素」</strong>或者<strong>「行内块元素」</strong></li>\n<li>特别是行内块元素， 通常用来控制图片/表单与文字的对齐。</li>\n<li>有宽度的块级元素居中对齐，是margin: 0 auto;</li>\n<li>让文字居中对齐，是 text-align: center;</li>\n</ul>\n<h2 id=\"「溢出文字省略号显示」\"><a href=\"#「溢出文字省略号显示」\" class=\"headerlink\" title=\"「溢出文字省略号显示」\"></a>「溢出文字省略号显示」</h2><p><strong>三个步骤</strong></p>\n<ol>\n<li>先强制一行内显示文本</li>\n<li>超出的部分隐藏</li>\n<li>文字用省略号替代超出的部分</li>\n</ol>\n<p>white-space属性设置或检索对象内文本显示方式。通常我们使用于强制一行显示内容</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">white-space</span>:normal ；默认处理方式</span><br><span class=\"line\"></span><br><span class=\"line\">white-space:nowrap ； 强制在同一行内显示所有文本，直到文本结束或者遭遇br标签对象才换行。</span><br></pre></td></tr></table></figure>\n\n<p>text-overflow属性设置或检索是否使用一个省略标记（…）标示对象内文本的溢出</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">text-overflow</span> : clip ；不显示省略标记（...），而是简单的裁切 </span><br><span class=\"line\"></span><br><span class=\"line\">text-overflow：ellipsis ； 当对象内文本溢出时显示省略标记（...）</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*1. 先强制一行内显示文本*/</span></span><br><span class=\"line\">    <span class=\"attribute\">white-space</span>: nowrap;</span><br><span class=\"line\"><span class=\"comment\">/*2. 超出的部分隐藏*/</span></span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\"><span class=\"comment\">/*3. 文字用省略号替代超出的部分*/</span></span><br><span class=\"line\">    <span class=\"attribute\">text-overflow</span>: ellipsis;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"常见布局技巧\"><a href=\"#常见布局技巧\" class=\"headerlink\" title=\"常见布局技巧\"></a>常见布局技巧</h1><ol>\n<li>margin负值的运用</li>\n<li>文字环绕浮动元素</li>\n<li>行内块元素巧妙运用</li>\n<li>CSS三角强化</li>\n</ol>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<h1 id=\"元素的显示与隐藏\"><a href=\"#元素的显示与隐藏\" class=\"headerlink\" title=\"元素的显示与隐藏\"></a>元素的显示与隐藏</h1><p>让一个元素在页面中隐藏或显示出来</p>\n<p>共有三个属性</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>属性值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>display</td>\n<td>none | display</td>\n</tr>\n<tr>\n<td>visibility</td>\n<td>hidden | visible</td>\n</tr>\n<tr>\n<td>overflow</td>\n<td>visible | hidden | scroll | auto</td>\n</tr>\n</tbody></table>\n<p>display属性隐藏后会脱标，不占有原来位置</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202205282000945.png\"></p>\n<p>visibility属性隐藏后不会脱标，继续占有原来位置</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202205282001733.png\"></p>\n<p>overflow属性针对溢出，visible | hidden | scroll | auto</p>\n<table>\n<thead>\n<tr>\n<th>overflow属性值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>visible</td>\n<td>不剪切内容不添加滚动条</td>\n</tr>\n<tr>\n<td>hidden</td>\n<td>隐藏超出对象尺寸的内容</td>\n</tr>\n<tr>\n<td>scroll</td>\n<td>总分是显示滚动条</td>\n</tr>\n<tr>\n<td>auto</td>\n<td>超出内容自动显示滚动条，不超出不显示</td>\n</tr>\n</tbody></table>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202205282002302.png\"></p>\n<h1 id=\"精灵图技术\"><a href=\"#精灵图技术\" class=\"headerlink\" title=\"精灵图技术\"></a>精灵图技术</h1><h2 id=\"「概述」\"><a href=\"#「概述」\" class=\"headerlink\" title=\"「概述」\"></a>「概述」</h2><ul>\n<li>图所示为网页的请求原理图，当用户访问一个网站时，需要向服务器发送请求，网页上的每张图像都要经过一次请求才能展现给用户。</li>\n<li>然而，一个网页中往往会应用很多小的背景图像作为修饰，当网页中的图像过多时，服务器就会频繁地接受和发送请求，这将大大降低页面的加载速度。</li>\n</ul>\n<p>为了有效地减少服务器接受和发送请求的次数，提高页面的加载速度。CSS 精灵其实是将网页中的一些背景图像整合到一张大图中（精灵图），然而，各个网页元素通常只需要精灵图中不同位置的某个小图，要想精确定位到精灵图中的某个小图。这样，当用户访问该页面时，只需向服务发送一次请求，网页中的背景图像即可全部展示出来。</p>\n<h2 id=\"「需要的属性」\"><a href=\"#「需要的属性」\" class=\"headerlink\" title=\"「需要的属性」\"></a>「需要的属性」</h2><ul>\n<li>background-image、</li>\n<li>background-repeat</li>\n<li>background-position属性进行背景定位，</li>\n<li>其中最关键的是使用<code>background-position</code> 属性精确地定位。</li>\n</ul>\n<h2 id=\"「核心总结」\"><a href=\"#「核心总结」\" class=\"headerlink\" title=\"「核心总结」\"></a>「核心总结」</h2><p>首先我们知道，css精灵技术主要针对于背景图片，插入的图片img 是不需要这个技术的。</p>\n<ol>\n<li>精确测量，每个小背景图片的大小和位置。</li>\n<li>给盒子指定小背景图片时，背景定位基本都是 负值。</li>\n</ol>\n<h1 id=\"字体图标\"><a href=\"#字体图标\" class=\"headerlink\" title=\"字体图标\"></a>字体图标</h1><p>网页中的一些小图标通常用字体图标iconfont来显示，字体图标本质上是字体，现实的是图标。</p>\n<p><strong>字体图标下载网站</strong></p>\n<ul>\n<li>icomoon字库 <a href=\"https://icomoon.io/\">https://icomoon.io</a> </li>\n<li>阿里iconfont字库 <a href=\"https://www.iconfont.cn/\">https://www.iconfont.cn</a></li>\n</ul>\n<ol>\n<li>在字体图标网站选中图标下载后，需要将其引入到，将下载包里的fonts文件夹放入页面根目录下</li>\n<li>在CSS样式中全局声明字体，把这些字体文件通过CSS引入到我们页面中，一定要注意字体文件路径问题</li>\n</ol>\n<p><strong>声明代码如下</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\"><span class=\"attribute\">font-family</span>: ‘icomoon’;</span><br><span class=\"line\"><span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(<span class=\"string\">‘fonts/icomoon.eot?7kkyc2’</span>);</span><br><span class=\"line\"><span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(<span class=\"string\">‘fonts/icomoon.eot?7kkyc2#iefix’</span>) <span class=\"built_in\">format</span>(‘embedded-opentype’),</span><br><span class=\"line\"><span class=\"built_in\">url</span>(<span class=\"string\">‘fonts/icomoon.ttf?7kkyc2’</span>) <span class=\"built_in\">format</span>(‘truetype’),</span><br><span class=\"line\"><span class=\"built_in\">url</span>(<span class=\"string\">‘fonts/icomoon.woff?7kkyc2’</span>) <span class=\"built_in\">format</span>(‘woff’),</span><br><span class=\"line\"><span class=\"built_in\">url</span>(<span class=\"string\">‘fonts/icomoon.svg?7kkyc2#icomoon’</span>) <span class=\"built_in\">format</span>(‘svg’);</span><br><span class=\"line\"><span class=\"attribute\">font-weight</span>: normal;</span><br><span class=\"line\"><span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">span</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;icomoon&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: pink;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">spam</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">spam</span>&gt;</span>  /复制图标网站上的源码</span><br></pre></td></tr></table></figure>\n\n<p>字体图标的追加：把压缩包中slection.json重新上传，然后选中自己想要更新的图标，重新下载压缩包，并途欢原来的文件即可。</p>\n<h1 id=\"CSS三角\"><a href=\"#CSS三角\" class=\"headerlink\" title=\"CSS三角\"></a>CSS三角</h1><ol>\n<li>我们用css 边框可以模拟三角效果</li>\n<li>宽度高度为0</li>\n<li>我们4个边框都要写， 只保留需要的边框颜色，其余的不能省略，都改为 transparent 透明就好了</li>\n<li>为了照顾兼容性 低版本的浏览器，加上 font-size: 0;  line-height: 0;</li>\n</ol>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">0</span>; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>:<span class=\"number\">0</span>；</span><br><span class=\"line\">    font-size: <span class=\"number\">0</span>;</span><br><span class=\"line\">   <span class=\"attribute\">border-top</span>: <span class=\"number\">10px</span> solid red;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"attribute\">border-right</span>: <span class=\"number\">10px</span> solid green;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"attribute\">border-bottom</span>: <span class=\"number\">10px</span> solid blue;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"attribute\">border-left</span>: <span class=\"number\">10px</span> solid <span class=\"number\">#000</span>; </span><br><span class=\"line\"></span><br><span class=\"line\">     &#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202205281959548.png\"></p>\n<h1 id=\"CSS用户页面样式\"><a href=\"#CSS用户页面样式\" class=\"headerlink\" title=\"CSS用户页面样式\"></a>CSS用户页面样式</h1><h2 id=\"「鼠标样式cursor」\"><a href=\"#「鼠标样式cursor」\" class=\"headerlink\" title=\"「鼠标样式cursor」\"></a>「鼠标样式cursor」</h2><p>设置或检索在对象上移动的鼠标指针采用何种系统预定义的光标形状。</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>属性值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>cursor</td>\n<td>default</td>\n<td>小白(默认)</td>\n</tr>\n<tr>\n<td></td>\n<td>pointer</td>\n<td>小手</td>\n</tr>\n<tr>\n<td></td>\n<td>move</td>\n<td>移动</td>\n</tr>\n<tr>\n<td></td>\n<td>text</td>\n<td>文本</td>\n</tr>\n<tr>\n<td></td>\n<td>not-allowed</td>\n<td>禁止</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"selector-tag\">ul</span>&gt;</span><br><span class=\"line\">  &lt;<span class=\"selector-tag\">li</span> style=&quot;<span class=\"attribute\">cursor</span><span class=\"selector-pseudo\">:default</span>&quot;&gt;我是小白&lt;/<span class=\"selector-tag\">li</span>&gt;</span><br><span class=\"line\">  &lt;<span class=\"selector-tag\">li</span> style=&quot;<span class=\"attribute\">cursor</span>:pointer<span class=\"string\">&quot;&gt;我是小手&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;li style=&quot;</span>cursor:move<span class=\"string\">&quot;&gt;我是移动&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;li style=&quot;</span>cursor:text<span class=\"string\">&quot;&gt;我是文本&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;li style=&quot;</span>cursor:not-allowed<span class=\"string\">&quot;&gt;我是文本&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/ul&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「轮廓线outline」\"><a href=\"#「轮廓线outline」\" class=\"headerlink\" title=\"「轮廓线outline」\"></a>「轮廓线outline」</h2><p>是绘制于元素周围的一条线，位于边框边缘的外围，可起到突出元素的作用。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">outline</span> : outline-color || outline-style || outline-width </span><br></pre></td></tr></table></figure>\n\n<p>但是我们都不关心可以设置多少，我们平时都是去掉的。<br>最直接的写法是 ： outline: 0;  或者  outline: none;</p>\n<h2 id=\"「防拖拽文本域resize」\"><a href=\"#「防拖拽文本域resize」\" class=\"headerlink\" title=\"「防拖拽文本域resize」\"></a>「防拖拽文本域resize」</h2><p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202205282012600.png\"></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*css行内式写法*/</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;resize: none;&quot;</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「vertical-align属性应用」\"><a href=\"#「vertical-align属性应用」\" class=\"headerlink\" title=\"「vertical-align属性应用」\"></a>「vertical-align属性应用」</h2><p>vertical-align 垂直对齐，它只针对于<strong>「行内元素」</strong>或者<strong>「行内块元素」</strong></p>\n<p>可以用来设置<strong>图片表单文字对齐</strong>和<strong>去除图片底侧空白空袭</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202205282016270.jpg\"></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">设置或检索对象内容的垂直对其方式。</span><br><span class=\"line\"><span class=\"attribute\">vertical-align</span> : baseline |top |middle |bottom </span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong></p>\n<ul>\n<li>vertical-align 不影响块级元素中的内容对齐，它只针对于<strong>「行内元素」</strong>或者<strong>「行内块元素」</strong></li>\n<li>特别是行内块元素， 通常用来控制图片/表单与文字的对齐。</li>\n<li>有宽度的块级元素居中对齐，是margin: 0 auto;</li>\n<li>让文字居中对齐，是 text-align: center;</li>\n</ul>\n<h2 id=\"「溢出文字省略号显示」\"><a href=\"#「溢出文字省略号显示」\" class=\"headerlink\" title=\"「溢出文字省略号显示」\"></a>「溢出文字省略号显示」</h2><p><strong>三个步骤</strong></p>\n<ol>\n<li>先强制一行内显示文本</li>\n<li>超出的部分隐藏</li>\n<li>文字用省略号替代超出的部分</li>\n</ol>\n<p>white-space属性设置或检索对象内文本显示方式。通常我们使用于强制一行显示内容</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">white-space</span>:normal ；默认处理方式</span><br><span class=\"line\"></span><br><span class=\"line\">white-space:nowrap ； 强制在同一行内显示所有文本，直到文本结束或者遭遇br标签对象才换行。</span><br></pre></td></tr></table></figure>\n\n<p>text-overflow属性设置或检索是否使用一个省略标记（…）标示对象内文本的溢出</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">text-overflow</span> : clip ；不显示省略标记（...），而是简单的裁切 </span><br><span class=\"line\"></span><br><span class=\"line\">text-overflow：ellipsis ； 当对象内文本溢出时显示省略标记（...）</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*1. 先强制一行内显示文本*/</span></span><br><span class=\"line\">    <span class=\"attribute\">white-space</span>: nowrap;</span><br><span class=\"line\"><span class=\"comment\">/*2. 超出的部分隐藏*/</span></span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\"><span class=\"comment\">/*3. 文字用省略号替代超出的部分*/</span></span><br><span class=\"line\">    <span class=\"attribute\">text-overflow</span>: ellipsis;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"常见布局技巧\"><a href=\"#常见布局技巧\" class=\"headerlink\" title=\"常见布局技巧\"></a>常见布局技巧</h1><ol>\n<li>margin负值的运用</li>\n<li>文字环绕浮动元素</li>\n<li>行内块元素巧妙运用</li>\n<li>CSS三角强化</li>\n</ol>\n"},{"title":"H5C3新增","date":"2022-05-29T16:00:00.000Z","updated":"2022-05-29T16:00:00.000Z","keywords":null,"description":null,"top_img":"./img/bg20.jpg","cover":"./img/bg5.jpg","_content":"\n\n# H5简介\n\n## **「1. 什么是HTML5」**\n\n- 定义：**HTML5**定义了**HTML**标准的最新版本，是对**HTML**的第五次重大修改，号称下一代的HTML。\n\n- 两个概念：\n\n  1. 是一个新版本的**HTML**语言，定义了新的标签、特性和属性\n  2. 拥有一个强大的技术集，这些技术集是指：**HTML5、CSS3、JavaScript**,这也是广义上的HTML5\n\n  \n\n## **「2. HTML5拓展了哪些内容」**\n\n- 语义化标签\n- 本地存储\n- 兼容特性\n- 2D、3D\n- 动画、过渡\n- CSS3特性\n- 性能与集成\n\n# HTML5新增\n\n## **「1. 什么是语义化」**\n\n语义化是指用HTML写出符合**内容的结构化**（内容语义化），选择**合适的标签**（代码语义化），能够便于开发者阅读和写出更优雅的代码的同时让浏览器的爬虫和机器很好地解析。\n\n## **「2. 新增了哪些语义化标签」**\n\n- `header`  ---  头部标签\n- `nav`     ---  导航标签\n- `article` ---  内容标签\n- `section` ---  块级标签\n- `aside`   ---  侧边栏标签\n- `footer`  ---  尾部标签\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202205291552900.png)\n\n\n\n## **「3. 新增多媒体音频标签」**\n\n多媒体标签有两个，分别是音频 **audio**和视频**video**。\n\n`audio 标签说明`\n\n- 可以在不使用标签的情况下，也能够原生的支持音频格式文件的播放，\n- 但是：播放的格式是**有限**的。\n\n**audio 参数**\n\n| 属性     | 值       | 描述                   |\n| -------- | -------- | ---------------------- |\n| autoplay | autoplay | 音频就绪后立刻播放     |\n| controls | controls | 向用户展示音频控件     |\n| loop     | loop     | 音频结束后重新循环播放 |\n| src      | src      | 播放音频的url地址      |\n\n```html\n<audio controls>\n    <!-- 注意：在 chrome 浏览器中已经禁用了 autoplay 属性 -->\n    <!-- <audio src=\"./media/snow.mp3\" controls autoplay></audio> -->\n    <!-- \n    因为不同浏览器支持不同的格式，所以我们采取的方案是这个音频准备多个文件 -->                             \n  <source src=\"myAudio.mp3\" type=\"audio/mpeg\">\n  <source src=\"myAudio.ogg\" type=\"audio/ogg\">\n  <p>Your browser doesn't support HTML5 audio. Here is\n     a <a href=\"myAudio.mp4\">link to the audio</a> instead.</p>\n</audio>\n```\n\n**video 参数**\n\n| 属性     | 值             | 描述                                     |\n| -------- | -------------- | ---------------------------------------- |\n| autoplay | autoplay       | 自动播放                                 |\n| aontrols | controls       | 播放控件                                 |\n| width    | px像素         | 宽度                                     |\n| height   | px像素         | 高度                                     |\n| loop     | loop           | 循环播放                                 |\n| preload  | auto \\|\\| none | 是否预加载视频（如又autoplay忽略该属性） |\n| src      | url            | 视频url地址                              |\n| poster   | imgurl         | 加载等待图片地址                         |\n| muted    | muted          | 静音播放                                 |\n\n```html\n<body>\n  <!-- <video src=\"./media/video.mp4\" controls=\"controls\"></video> -->\n\n  <!-- 谷歌浏览器禁用了自动播放功能，如果想自动播放，需要添加 muted 属性 -->\n  <video controls=\"controls\" autoplay muted loop poster=\"./media/pig.jpg\">\n    <source src=\"./media/video.mp4\" type=\"video/mp4\">\n    <source src=\"./media/video.ogg\" type=\"video/ogg\">\n  </video>\n</body>\n```\n\n**多媒体标签总结**\n\n- 音频标签和视频标签使用基本一致\n- 多媒体标签在不同浏览器下情况不同，存在兼容性问题\n- 谷歌浏览器把音频和视频标签的自动播放都**禁止**了\n- 谷歌浏览器中视频添加**muted**属性就可以自己播放了\n- 注意：重点记住使用方法及自动播放即可，其他属性在使用时查找对应的手册\n\n## **「4. 新增input标签」**\n\n| 属性值        | 说明                        |\n| ------------- | --------------------------- |\n| type=“email”  | 限制用户输入必须为Email类型 |\n| type=“url”    | 限制用户输入必须为url类型   |\n| type=“date”   | 限制用户输入必须为日期类型  |\n| type=“time”   | 限制用户输入必须为时间类型  |\n| type=“month”  | 限制用户输入必须为月类型    |\n| type=“week”   | 限制用户输入必须为周类型    |\n| type=“number” | 限制用户输入必须为数字类型  |\n| type=“tel”    | 手机号码                    |\n| type=“search” | 搜索框                      |\n| type=“color”  | 生成一个颜色选择表单        |\n\n## **「5. 新增表单属性」**\n\n| 属性         | 属性值    | 说明                                             |\n| ------------ | --------- | ------------------------------------------------ |\n| required     | required  | 表单为必填项                                     |\n| placeholder  | 提示文本  | 表单的提示信息                                   |\n| autofoucs    | autofoucs | 自动聚焦属性，页面加载完成时自动聚焦表单         |\n| autocomplete | off / on  | 显示之前提交过的值，须name属性和成功提交同时满足 |\n| multiple     | multiple  | 可以多选文件提交                                 |\n\n\n\n# CSS3新增\n\n## **「1. CSS3属性选择器」**\n\n| 选择符         | 简介                                  |\n| -------------- | ------------------------------------- |\n| E {att}        | 选择具有att属性的E元素                |\n| E {att=“val”}  | 选择具有att属性且属性值等于val的E元素 |\n| E {att^=“val”} | 匹配具有att属性，且值以val开头的E元素 |\n| E {att$=“val”} | 匹配具有att属性，且值以val结尾的E元素 |\n| E {att*=“val”} | 匹配具有att属性，且值中含有val的E元素 |\n\n```css\n   button {\n    cursor: pointer;\n  }\n  button[disabled] {\n    cursor: default;\n  }\n\ninput[type=search] {\n    color: skyblue;\n  }\n\n  span[class^=black] {\n    color: lightgreen;\n  }\n\n  span[class$=black] {\n    color: lightsalmon;\n  }\n\n  span[class*=black] {\n    color: lightseagreen;\n  }\n```\n\n## **「2. 结构伪类选择器」**\n\n| 选择符           | 简介                        |\n| ---------------- | --------------------------- |\n| E:first-child    | 匹配父元素中第一个子元素E   |\n| E:last-child     | 匹配父元素中最后一个子元素E |\n| E:nth-child(n)   | 匹配父元素中第n个子元素E    |\n| E:first-of-type  | 指定类型E的第一个           |\n| E:last-of-type   | 指定类型E的最后一个         |\n| E:nth-of-type(n) | 指定类型E的第n个            |\n\n```css\nul li:first-child {\n  background-color: lightseagreen;\n}\n\nul li:last-child {\n  background-color: lightcoral;\n}\n\nul li:nth-child(3) {\n  background-color: aqua;\n}\n```\n\n**nth-child(n)**参数n详解\n\n- 注意：本质上就是选中第几个子元素\n- n 可以是数字、关键字、公式\n- n 如果是数字，就是选中第几个\n- 常见的关键字有 `even` 偶数、`odd` 奇数\n- 常见的公式如下(如果 n 是公式，则从 0 开始计算)\n- 但是第 0 个元素或者超出了元素的个数会被忽略\n\n| 公式 | 取值                             |\n| ---- | -------------------------------- |\n| 2n   | 偶数                             |\n| 2n+1 | 奇数                             |\n| 5n   | 5 10 15…                         |\n| n+5  | 从第五个开始到最后（包含第五个） |\n| -n+5 | 前五个（包含第五）               |\n\n```css\n<style>\n  /* 偶数 */\n  ul li:nth-child(even) {\n    background-color: aquamarine;\n  }\n\n  /* 奇数 */\n  ul li:nth-child(odd) {\n    background-color: blueviolet;\n  }\n\n  /*n 是公式，从 0 开始计算 */\n  ul li:nth-child(n) {\n    background-color: lightcoral;\n  }\n\n  /* 偶数 */\n  ul li:nth-child(2n) {\n    background-color: lightskyblue;\n  }\n\n  /* 奇数 */\n  ul li:nth-child(2n + 1) {\n    background-color: lightsalmon;\n  }\n\n  /* 选择第 0 5 10 15, 应该怎么选 */\n  ul li:nth-child(5n) {\n    background-color: orangered;\n  }\n\n  /* n + 5 就是从第5个开始往后选择 */\n  ul li:nth-child(n + 5) {\n    background-color: peru;\n  }\n\n  /* -n + 5 前五个 */\n  ul li:nth-child(-n + 5) {\n    background-color: tan;\n  }\n</style>\n```\n\n**类选择器，属性选择器，伪类选择器，权重为10**\n\n**nth-child与nth-of-type区别**\n\n- `nth-child` 对父元素里面的所有孩子排列选择（序号是固定的）先找到第n个孩子，然后看看是否和E匹配\n- `nth-of-type` 对父元素里面指定的子元素进行排列选择。先匹配E，然后在根据E找第n个孩子\n\n```css\n  <style>\n    div :nth-child(1) {\n      background-color: lightblue;\n    }\n  \n    div :nth-child(2) {\n      background-color: lightpink;\n    }\n  \n    div span:nth-of-type(2) {\n      background-color: lightseagreen;\n    }\n  \n    div span:nth-of-type(3) {\n      background-color: #fff;\n    }\n  </style>\n```\n\n\n\n## **「3. 伪元素选择器」**\n\n| 选择符   | 简介                     |\n| -------- | ------------------------ |\n| ::before | 在元素内部的前面插入内容 |\n| ::after  | 在元素内部的后面插入内容 |\n\n### **伪元素选择器注意事项**\n\n- `before` 和 `after` 必须有 `content` 属性\n- `before` 在内容前面，after 在内容后面\n- `before` 和 `after` 创建的是一个元素，但是属于行内元素\n- 创建出来的元素在 `Dom` 中查找不到，所以称为伪元素\n- 伪元素和标签选择器一样，权重为 1\n\n```css\n  <style>\n      div {\n        width: 100px;\n        height: 100px;\n        border: 1px solid lightcoral;\n      }\n  \n      div::after,\n      div::before {\n        width: 20px;\n        height: 50px;\n        text-align: center;\n        display: inline-block;\n      }\n      div::after {\n        content: '德';\n        background-color: lightskyblue;\n      }\n  \n      div::before {\n        content: '道';\n        background-color: mediumaquamarine;\n      }\n    </style>\n```\n\n### 伪元素字体图标\n\n```css\n  @font-face {\n  font-family: ‘icomoon’;\n  src: url(‘fonts/icomoon.eot?7kkyc2’);\n  src: url(‘fonts/icomoon.eot?7kkyc2#iefix’) format(‘embedded-opentype’),\n  url(‘fonts/icomoon.ttf?7kkyc2’) format(‘truetype’),\n  url(‘fonts/icomoon.woff?7kkyc2’) format(‘woff’),\n  url(‘fonts/icomoon.svg?7kkyc2#icomoon’) format(‘svg’);\n  font-weight: normal;\n  font-style: normal;\n  }\n  p {\n     position: relative;\n     width: 220px;\n     height: 22px;\n     border: 1px solid lightseagreen;\n     margin: 60px;\n  \n  }\n  p::after {\n    content: '\\ea50';\n    font-family: 'icomoon';\n    position: absolute;\n    top: -1px;\n    right: 10px;\n  }\n```\n\n### 伪元素清除浮动\n\n1. 额外标签法也称隔墙法，是W3C推荐的做法\n2. 父元素添加overflow属性\n3. 父元素添加afte伪元素\n4. 父元素添加双伪元素\n\n额外标签法是基本做法，在浮动元素后面新增一个空标签，必须为块级盒子，属性为clear:both。\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202205301012442.png)\n\n后面两种伪元素清除浮动的方法是第一种额外标签法的升级和优化\n\n```css\n.clearfix::after {\n\t\tcontent:\"\";\t\t伪元素必填属性\n    \tdisplay: block;\t\t插入元素必须是块级\n    \theight: 0;\t\t不要看见这个元素\n    \tclear: both;\t\t核心代码清除浮动\n    \tvisibility: hidden;\t\t不要看见这个元素\n}\n```\n\n```css\n.clearfix::before .clear::after {\n    \tcontent:\"\";\n    \tdisplay:table;    \t转换为块级元素并且一行显示\n}\n.clearfix::after{\n    \tclear:both;\n}\n```\n\n## **「4. CSS3盒子模型」**\n\nbox-sizing属性可用来指定盒子模型，有两个属性值值，可指定为content-box，border-box。\n\n**区别：**\n\n1. box-sizing: content-box;盒子大小为width+padding+border（以前默认的）\n2. box-sizing: border-box; 盒子大小为width\n\n如果盒子模型改为第二种，则padding和border就不会撑大盒子（前提是padding和border不会超过width宽度）\n\n\n\n\n\n\n\n","source":"_posts/前端/H5C3新增属性.md","raw":"---\ntitle: H5C3新增\ndate: 2022-05-30\nupdated: 2022-05-30\ntags:\n  - 小白的前端之路\n  - CSS基础\ncategories: 前端开发\nkeywords: \ndescription: \ntop_img: ./img/bg20.jpg\ncover: ./img/bg5.jpg\n\n---\n\n\n# H5简介\n\n## **「1. 什么是HTML5」**\n\n- 定义：**HTML5**定义了**HTML**标准的最新版本，是对**HTML**的第五次重大修改，号称下一代的HTML。\n\n- 两个概念：\n\n  1. 是一个新版本的**HTML**语言，定义了新的标签、特性和属性\n  2. 拥有一个强大的技术集，这些技术集是指：**HTML5、CSS3、JavaScript**,这也是广义上的HTML5\n\n  \n\n## **「2. HTML5拓展了哪些内容」**\n\n- 语义化标签\n- 本地存储\n- 兼容特性\n- 2D、3D\n- 动画、过渡\n- CSS3特性\n- 性能与集成\n\n# HTML5新增\n\n## **「1. 什么是语义化」**\n\n语义化是指用HTML写出符合**内容的结构化**（内容语义化），选择**合适的标签**（代码语义化），能够便于开发者阅读和写出更优雅的代码的同时让浏览器的爬虫和机器很好地解析。\n\n## **「2. 新增了哪些语义化标签」**\n\n- `header`  ---  头部标签\n- `nav`     ---  导航标签\n- `article` ---  内容标签\n- `section` ---  块级标签\n- `aside`   ---  侧边栏标签\n- `footer`  ---  尾部标签\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202205291552900.png)\n\n\n\n## **「3. 新增多媒体音频标签」**\n\n多媒体标签有两个，分别是音频 **audio**和视频**video**。\n\n`audio 标签说明`\n\n- 可以在不使用标签的情况下，也能够原生的支持音频格式文件的播放，\n- 但是：播放的格式是**有限**的。\n\n**audio 参数**\n\n| 属性     | 值       | 描述                   |\n| -------- | -------- | ---------------------- |\n| autoplay | autoplay | 音频就绪后立刻播放     |\n| controls | controls | 向用户展示音频控件     |\n| loop     | loop     | 音频结束后重新循环播放 |\n| src      | src      | 播放音频的url地址      |\n\n```html\n<audio controls>\n    <!-- 注意：在 chrome 浏览器中已经禁用了 autoplay 属性 -->\n    <!-- <audio src=\"./media/snow.mp3\" controls autoplay></audio> -->\n    <!-- \n    因为不同浏览器支持不同的格式，所以我们采取的方案是这个音频准备多个文件 -->                             \n  <source src=\"myAudio.mp3\" type=\"audio/mpeg\">\n  <source src=\"myAudio.ogg\" type=\"audio/ogg\">\n  <p>Your browser doesn't support HTML5 audio. Here is\n     a <a href=\"myAudio.mp4\">link to the audio</a> instead.</p>\n</audio>\n```\n\n**video 参数**\n\n| 属性     | 值             | 描述                                     |\n| -------- | -------------- | ---------------------------------------- |\n| autoplay | autoplay       | 自动播放                                 |\n| aontrols | controls       | 播放控件                                 |\n| width    | px像素         | 宽度                                     |\n| height   | px像素         | 高度                                     |\n| loop     | loop           | 循环播放                                 |\n| preload  | auto \\|\\| none | 是否预加载视频（如又autoplay忽略该属性） |\n| src      | url            | 视频url地址                              |\n| poster   | imgurl         | 加载等待图片地址                         |\n| muted    | muted          | 静音播放                                 |\n\n```html\n<body>\n  <!-- <video src=\"./media/video.mp4\" controls=\"controls\"></video> -->\n\n  <!-- 谷歌浏览器禁用了自动播放功能，如果想自动播放，需要添加 muted 属性 -->\n  <video controls=\"controls\" autoplay muted loop poster=\"./media/pig.jpg\">\n    <source src=\"./media/video.mp4\" type=\"video/mp4\">\n    <source src=\"./media/video.ogg\" type=\"video/ogg\">\n  </video>\n</body>\n```\n\n**多媒体标签总结**\n\n- 音频标签和视频标签使用基本一致\n- 多媒体标签在不同浏览器下情况不同，存在兼容性问题\n- 谷歌浏览器把音频和视频标签的自动播放都**禁止**了\n- 谷歌浏览器中视频添加**muted**属性就可以自己播放了\n- 注意：重点记住使用方法及自动播放即可，其他属性在使用时查找对应的手册\n\n## **「4. 新增input标签」**\n\n| 属性值        | 说明                        |\n| ------------- | --------------------------- |\n| type=“email”  | 限制用户输入必须为Email类型 |\n| type=“url”    | 限制用户输入必须为url类型   |\n| type=“date”   | 限制用户输入必须为日期类型  |\n| type=“time”   | 限制用户输入必须为时间类型  |\n| type=“month”  | 限制用户输入必须为月类型    |\n| type=“week”   | 限制用户输入必须为周类型    |\n| type=“number” | 限制用户输入必须为数字类型  |\n| type=“tel”    | 手机号码                    |\n| type=“search” | 搜索框                      |\n| type=“color”  | 生成一个颜色选择表单        |\n\n## **「5. 新增表单属性」**\n\n| 属性         | 属性值    | 说明                                             |\n| ------------ | --------- | ------------------------------------------------ |\n| required     | required  | 表单为必填项                                     |\n| placeholder  | 提示文本  | 表单的提示信息                                   |\n| autofoucs    | autofoucs | 自动聚焦属性，页面加载完成时自动聚焦表单         |\n| autocomplete | off / on  | 显示之前提交过的值，须name属性和成功提交同时满足 |\n| multiple     | multiple  | 可以多选文件提交                                 |\n\n\n\n# CSS3新增\n\n## **「1. CSS3属性选择器」**\n\n| 选择符         | 简介                                  |\n| -------------- | ------------------------------------- |\n| E {att}        | 选择具有att属性的E元素                |\n| E {att=“val”}  | 选择具有att属性且属性值等于val的E元素 |\n| E {att^=“val”} | 匹配具有att属性，且值以val开头的E元素 |\n| E {att$=“val”} | 匹配具有att属性，且值以val结尾的E元素 |\n| E {att*=“val”} | 匹配具有att属性，且值中含有val的E元素 |\n\n```css\n   button {\n    cursor: pointer;\n  }\n  button[disabled] {\n    cursor: default;\n  }\n\ninput[type=search] {\n    color: skyblue;\n  }\n\n  span[class^=black] {\n    color: lightgreen;\n  }\n\n  span[class$=black] {\n    color: lightsalmon;\n  }\n\n  span[class*=black] {\n    color: lightseagreen;\n  }\n```\n\n## **「2. 结构伪类选择器」**\n\n| 选择符           | 简介                        |\n| ---------------- | --------------------------- |\n| E:first-child    | 匹配父元素中第一个子元素E   |\n| E:last-child     | 匹配父元素中最后一个子元素E |\n| E:nth-child(n)   | 匹配父元素中第n个子元素E    |\n| E:first-of-type  | 指定类型E的第一个           |\n| E:last-of-type   | 指定类型E的最后一个         |\n| E:nth-of-type(n) | 指定类型E的第n个            |\n\n```css\nul li:first-child {\n  background-color: lightseagreen;\n}\n\nul li:last-child {\n  background-color: lightcoral;\n}\n\nul li:nth-child(3) {\n  background-color: aqua;\n}\n```\n\n**nth-child(n)**参数n详解\n\n- 注意：本质上就是选中第几个子元素\n- n 可以是数字、关键字、公式\n- n 如果是数字，就是选中第几个\n- 常见的关键字有 `even` 偶数、`odd` 奇数\n- 常见的公式如下(如果 n 是公式，则从 0 开始计算)\n- 但是第 0 个元素或者超出了元素的个数会被忽略\n\n| 公式 | 取值                             |\n| ---- | -------------------------------- |\n| 2n   | 偶数                             |\n| 2n+1 | 奇数                             |\n| 5n   | 5 10 15…                         |\n| n+5  | 从第五个开始到最后（包含第五个） |\n| -n+5 | 前五个（包含第五）               |\n\n```css\n<style>\n  /* 偶数 */\n  ul li:nth-child(even) {\n    background-color: aquamarine;\n  }\n\n  /* 奇数 */\n  ul li:nth-child(odd) {\n    background-color: blueviolet;\n  }\n\n  /*n 是公式，从 0 开始计算 */\n  ul li:nth-child(n) {\n    background-color: lightcoral;\n  }\n\n  /* 偶数 */\n  ul li:nth-child(2n) {\n    background-color: lightskyblue;\n  }\n\n  /* 奇数 */\n  ul li:nth-child(2n + 1) {\n    background-color: lightsalmon;\n  }\n\n  /* 选择第 0 5 10 15, 应该怎么选 */\n  ul li:nth-child(5n) {\n    background-color: orangered;\n  }\n\n  /* n + 5 就是从第5个开始往后选择 */\n  ul li:nth-child(n + 5) {\n    background-color: peru;\n  }\n\n  /* -n + 5 前五个 */\n  ul li:nth-child(-n + 5) {\n    background-color: tan;\n  }\n</style>\n```\n\n**类选择器，属性选择器，伪类选择器，权重为10**\n\n**nth-child与nth-of-type区别**\n\n- `nth-child` 对父元素里面的所有孩子排列选择（序号是固定的）先找到第n个孩子，然后看看是否和E匹配\n- `nth-of-type` 对父元素里面指定的子元素进行排列选择。先匹配E，然后在根据E找第n个孩子\n\n```css\n  <style>\n    div :nth-child(1) {\n      background-color: lightblue;\n    }\n  \n    div :nth-child(2) {\n      background-color: lightpink;\n    }\n  \n    div span:nth-of-type(2) {\n      background-color: lightseagreen;\n    }\n  \n    div span:nth-of-type(3) {\n      background-color: #fff;\n    }\n  </style>\n```\n\n\n\n## **「3. 伪元素选择器」**\n\n| 选择符   | 简介                     |\n| -------- | ------------------------ |\n| ::before | 在元素内部的前面插入内容 |\n| ::after  | 在元素内部的后面插入内容 |\n\n### **伪元素选择器注意事项**\n\n- `before` 和 `after` 必须有 `content` 属性\n- `before` 在内容前面，after 在内容后面\n- `before` 和 `after` 创建的是一个元素，但是属于行内元素\n- 创建出来的元素在 `Dom` 中查找不到，所以称为伪元素\n- 伪元素和标签选择器一样，权重为 1\n\n```css\n  <style>\n      div {\n        width: 100px;\n        height: 100px;\n        border: 1px solid lightcoral;\n      }\n  \n      div::after,\n      div::before {\n        width: 20px;\n        height: 50px;\n        text-align: center;\n        display: inline-block;\n      }\n      div::after {\n        content: '德';\n        background-color: lightskyblue;\n      }\n  \n      div::before {\n        content: '道';\n        background-color: mediumaquamarine;\n      }\n    </style>\n```\n\n### 伪元素字体图标\n\n```css\n  @font-face {\n  font-family: ‘icomoon’;\n  src: url(‘fonts/icomoon.eot?7kkyc2’);\n  src: url(‘fonts/icomoon.eot?7kkyc2#iefix’) format(‘embedded-opentype’),\n  url(‘fonts/icomoon.ttf?7kkyc2’) format(‘truetype’),\n  url(‘fonts/icomoon.woff?7kkyc2’) format(‘woff’),\n  url(‘fonts/icomoon.svg?7kkyc2#icomoon’) format(‘svg’);\n  font-weight: normal;\n  font-style: normal;\n  }\n  p {\n     position: relative;\n     width: 220px;\n     height: 22px;\n     border: 1px solid lightseagreen;\n     margin: 60px;\n  \n  }\n  p::after {\n    content: '\\ea50';\n    font-family: 'icomoon';\n    position: absolute;\n    top: -1px;\n    right: 10px;\n  }\n```\n\n### 伪元素清除浮动\n\n1. 额外标签法也称隔墙法，是W3C推荐的做法\n2. 父元素添加overflow属性\n3. 父元素添加afte伪元素\n4. 父元素添加双伪元素\n\n额外标签法是基本做法，在浮动元素后面新增一个空标签，必须为块级盒子，属性为clear:both。\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202205301012442.png)\n\n后面两种伪元素清除浮动的方法是第一种额外标签法的升级和优化\n\n```css\n.clearfix::after {\n\t\tcontent:\"\";\t\t伪元素必填属性\n    \tdisplay: block;\t\t插入元素必须是块级\n    \theight: 0;\t\t不要看见这个元素\n    \tclear: both;\t\t核心代码清除浮动\n    \tvisibility: hidden;\t\t不要看见这个元素\n}\n```\n\n```css\n.clearfix::before .clear::after {\n    \tcontent:\"\";\n    \tdisplay:table;    \t转换为块级元素并且一行显示\n}\n.clearfix::after{\n    \tclear:both;\n}\n```\n\n## **「4. CSS3盒子模型」**\n\nbox-sizing属性可用来指定盒子模型，有两个属性值值，可指定为content-box，border-box。\n\n**区别：**\n\n1. box-sizing: content-box;盒子大小为width+padding+border（以前默认的）\n2. box-sizing: border-box; 盒子大小为width\n\n如果盒子模型改为第二种，则padding和border就不会撑大盒子（前提是padding和border不会超过width宽度）\n\n\n\n\n\n\n\n","slug":"前端/H5C3新增属性","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cl5db79k4000nywtu3j67dtpq","content":"<h1 id=\"H5简介\"><a href=\"#H5简介\" class=\"headerlink\" title=\"H5简介\"></a>H5简介</h1><h2 id=\"「1-什么是HTML5」\"><a href=\"#「1-什么是HTML5」\" class=\"headerlink\" title=\"「1. 什么是HTML5」\"></a><strong>「1. 什么是HTML5」</strong></h2><ul>\n<li><p>定义：<strong>HTML5</strong>定义了<strong>HTML</strong>标准的最新版本，是对<strong>HTML</strong>的第五次重大修改，号称下一代的HTML。</p>\n</li>\n<li><p>两个概念：</p>\n<ol>\n<li>是一个新版本的<strong>HTML</strong>语言，定义了新的标签、特性和属性</li>\n<li>拥有一个强大的技术集，这些技术集是指：<strong>HTML5、CSS3、JavaScript</strong>,这也是广义上的HTML5</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"「2-HTML5拓展了哪些内容」\"><a href=\"#「2-HTML5拓展了哪些内容」\" class=\"headerlink\" title=\"「2. HTML5拓展了哪些内容」\"></a><strong>「2. HTML5拓展了哪些内容」</strong></h2><ul>\n<li>语义化标签</li>\n<li>本地存储</li>\n<li>兼容特性</li>\n<li>2D、3D</li>\n<li>动画、过渡</li>\n<li>CSS3特性</li>\n<li>性能与集成</li>\n</ul>\n<h1 id=\"HTML5新增\"><a href=\"#HTML5新增\" class=\"headerlink\" title=\"HTML5新增\"></a>HTML5新增</h1><h2 id=\"「1-什么是语义化」\"><a href=\"#「1-什么是语义化」\" class=\"headerlink\" title=\"「1. 什么是语义化」\"></a><strong>「1. 什么是语义化」</strong></h2><p>语义化是指用HTML写出符合<strong>内容的结构化</strong>（内容语义化），选择<strong>合适的标签</strong>（代码语义化），能够便于开发者阅读和写出更优雅的代码的同时让浏览器的爬虫和机器很好地解析。</p>\n<h2 id=\"「2-新增了哪些语义化标签」\"><a href=\"#「2-新增了哪些语义化标签」\" class=\"headerlink\" title=\"「2. 新增了哪些语义化标签」\"></a><strong>「2. 新增了哪些语义化标签」</strong></h2><ul>\n<li><code>header</code>  —  头部标签</li>\n<li><code>nav</code>     —  导航标签</li>\n<li><code>article</code> —  内容标签</li>\n<li><code>section</code> —  块级标签</li>\n<li><code>aside</code>   —  侧边栏标签</li>\n<li><code>footer</code>  —  尾部标签</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202205291552900.png\"></p>\n<h2 id=\"「3-新增多媒体音频标签」\"><a href=\"#「3-新增多媒体音频标签」\" class=\"headerlink\" title=\"「3. 新增多媒体音频标签」\"></a><strong>「3. 新增多媒体音频标签」</strong></h2><p>多媒体标签有两个，分别是音频 <strong>audio</strong>和视频<strong>video</strong>。</p>\n<p><code>audio 标签说明</code></p>\n<ul>\n<li>可以在不使用标签的情况下，也能够原生的支持音频格式文件的播放，</li>\n<li>但是：播放的格式是<strong>有限</strong>的。</li>\n</ul>\n<p><strong>audio 参数</strong></p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>autoplay</td>\n<td>autoplay</td>\n<td>音频就绪后立刻播放</td>\n</tr>\n<tr>\n<td>controls</td>\n<td>controls</td>\n<td>向用户展示音频控件</td>\n</tr>\n<tr>\n<td>loop</td>\n<td>loop</td>\n<td>音频结束后重新循环播放</td>\n</tr>\n<tr>\n<td>src</td>\n<td>src</td>\n<td>播放音频的url地址</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">audio</span> <span class=\"attr\">controls</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 注意：在 chrome 浏览器中已经禁用了 autoplay 属性 --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- &lt;audio src=&quot;./media/snow.mp3&quot; controls autoplay&gt;&lt;/audio&gt; --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- </span></span><br><span class=\"line\"><span class=\"comment\">    因为不同浏览器支持不同的格式，所以我们采取的方案是这个音频准备多个文件 --&gt;</span>                             </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;myAudio.mp3&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;audio/mpeg&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;myAudio.ogg&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;audio/ogg&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Your browser doesn&#x27;t support HTML5 audio. Here is</span><br><span class=\"line\">     a <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;myAudio.mp4&quot;</span>&gt;</span>link to the audio<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span> instead.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">audio</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>video 参数</strong></p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>autoplay</td>\n<td>autoplay</td>\n<td>自动播放</td>\n</tr>\n<tr>\n<td>aontrols</td>\n<td>controls</td>\n<td>播放控件</td>\n</tr>\n<tr>\n<td>width</td>\n<td>px像素</td>\n<td>宽度</td>\n</tr>\n<tr>\n<td>height</td>\n<td>px像素</td>\n<td>高度</td>\n</tr>\n<tr>\n<td>loop</td>\n<td>loop</td>\n<td>循环播放</td>\n</tr>\n<tr>\n<td>preload</td>\n<td>auto || none</td>\n<td>是否预加载视频（如又autoplay忽略该属性）</td>\n</tr>\n<tr>\n<td>src</td>\n<td>url</td>\n<td>视频url地址</td>\n</tr>\n<tr>\n<td>poster</td>\n<td>imgurl</td>\n<td>加载等待图片地址</td>\n</tr>\n<tr>\n<td>muted</td>\n<td>muted</td>\n<td>静音播放</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- &lt;video src=&quot;./media/video.mp4&quot; controls=&quot;controls&quot;&gt;&lt;/video&gt; --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 谷歌浏览器禁用了自动播放功能，如果想自动播放，需要添加 muted 属性 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">video</span> <span class=\"attr\">controls</span>=<span class=\"string\">&quot;controls&quot;</span> <span class=\"attr\">autoplay</span> <span class=\"attr\">muted</span> <span class=\"attr\">loop</span> <span class=\"attr\">poster</span>=<span class=\"string\">&quot;./media/pig.jpg&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./media/video.mp4&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;video/mp4&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./media/video.ogg&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;video/ogg&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">video</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>多媒体标签总结</strong></p>\n<ul>\n<li>音频标签和视频标签使用基本一致</li>\n<li>多媒体标签在不同浏览器下情况不同，存在兼容性问题</li>\n<li>谷歌浏览器把音频和视频标签的自动播放都<strong>禁止</strong>了</li>\n<li>谷歌浏览器中视频添加<strong>muted</strong>属性就可以自己播放了</li>\n<li>注意：重点记住使用方法及自动播放即可，其他属性在使用时查找对应的手册</li>\n</ul>\n<h2 id=\"「4-新增input标签」\"><a href=\"#「4-新增input标签」\" class=\"headerlink\" title=\"「4. 新增input标签」\"></a><strong>「4. 新增input标签」</strong></h2><table>\n<thead>\n<tr>\n<th>属性值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>type=“email”</td>\n<td>限制用户输入必须为Email类型</td>\n</tr>\n<tr>\n<td>type=“url”</td>\n<td>限制用户输入必须为url类型</td>\n</tr>\n<tr>\n<td>type=“date”</td>\n<td>限制用户输入必须为日期类型</td>\n</tr>\n<tr>\n<td>type=“time”</td>\n<td>限制用户输入必须为时间类型</td>\n</tr>\n<tr>\n<td>type=“month”</td>\n<td>限制用户输入必须为月类型</td>\n</tr>\n<tr>\n<td>type=“week”</td>\n<td>限制用户输入必须为周类型</td>\n</tr>\n<tr>\n<td>type=“number”</td>\n<td>限制用户输入必须为数字类型</td>\n</tr>\n<tr>\n<td>type=“tel”</td>\n<td>手机号码</td>\n</tr>\n<tr>\n<td>type=“search”</td>\n<td>搜索框</td>\n</tr>\n<tr>\n<td>type=“color”</td>\n<td>生成一个颜色选择表单</td>\n</tr>\n</tbody></table>\n<h2 id=\"「5-新增表单属性」\"><a href=\"#「5-新增表单属性」\" class=\"headerlink\" title=\"「5. 新增表单属性」\"></a><strong>「5. 新增表单属性」</strong></h2><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>属性值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>required</td>\n<td>required</td>\n<td>表单为必填项</td>\n</tr>\n<tr>\n<td>placeholder</td>\n<td>提示文本</td>\n<td>表单的提示信息</td>\n</tr>\n<tr>\n<td>autofoucs</td>\n<td>autofoucs</td>\n<td>自动聚焦属性，页面加载完成时自动聚焦表单</td>\n</tr>\n<tr>\n<td>autocomplete</td>\n<td>off / on</td>\n<td>显示之前提交过的值，须name属性和成功提交同时满足</td>\n</tr>\n<tr>\n<td>multiple</td>\n<td>multiple</td>\n<td>可以多选文件提交</td>\n</tr>\n</tbody></table>\n<h1 id=\"CSS3新增\"><a href=\"#CSS3新增\" class=\"headerlink\" title=\"CSS3新增\"></a>CSS3新增</h1><h2 id=\"「1-CSS3属性选择器」\"><a href=\"#「1-CSS3属性选择器」\" class=\"headerlink\" title=\"「1. CSS3属性选择器」\"></a><strong>「1. CSS3属性选择器」</strong></h2><table>\n<thead>\n<tr>\n<th>选择符</th>\n<th>简介</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>E {att}</td>\n<td>选择具有att属性的E元素</td>\n</tr>\n<tr>\n<td>E {att=“val”}</td>\n<td>选择具有att属性且属性值等于val的E元素</td>\n</tr>\n<tr>\n<td>E {att^=“val”}</td>\n<td>匹配具有att属性，且值以val开头的E元素</td>\n</tr>\n<tr>\n<td>E {att$=“val”}</td>\n<td>匹配具有att属性，且值以val结尾的E元素</td>\n</tr>\n<tr>\n<td>E {att*=“val”}</td>\n<td>匹配具有att属性，且值中含有val的E元素</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"selector-tag\">button</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">cursor</span>: pointer;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"selector-tag\">button</span><span class=\"selector-attr\">[disabled]</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">cursor</span>: default;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type=search]</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: skyblue;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-tag\">span</span><span class=\"selector-attr\">[class^=black]</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: lightgreen;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-tag\">span</span><span class=\"selector-attr\">[class$=black]</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: lightsalmon;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-tag\">span</span><span class=\"selector-attr\">[class*=black]</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: lightseagreen;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「2-结构伪类选择器」\"><a href=\"#「2-结构伪类选择器」\" class=\"headerlink\" title=\"「2. 结构伪类选择器」\"></a><strong>「2. 结构伪类选择器」</strong></h2><table>\n<thead>\n<tr>\n<th>选择符</th>\n<th>简介</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>E:first-child</td>\n<td>匹配父元素中第一个子元素E</td>\n</tr>\n<tr>\n<td>E:last-child</td>\n<td>匹配父元素中最后一个子元素E</td>\n</tr>\n<tr>\n<td>E:nth-child(n)</td>\n<td>匹配父元素中第n个子元素E</td>\n</tr>\n<tr>\n<td>E:first-of-type</td>\n<td>指定类型E的第一个</td>\n</tr>\n<tr>\n<td>E:last-of-type</td>\n<td>指定类型E的最后一个</td>\n</tr>\n<tr>\n<td>E:nth-of-type(n)</td>\n<td>指定类型E的第n个</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:first</span>-child &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: lightseagreen;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:last-child</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: lightcoral;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:nth-child</span>(<span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: aqua;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>**nth-child(n)**参数n详解</p>\n<ul>\n<li>注意：本质上就是选中第几个子元素</li>\n<li>n 可以是数字、关键字、公式</li>\n<li>n 如果是数字，就是选中第几个</li>\n<li>常见的关键字有 <code>even</code> 偶数、<code>odd</code> 奇数</li>\n<li>常见的公式如下(如果 n 是公式，则从 0 开始计算)</li>\n<li>但是第 0 个元素或者超出了元素的个数会被忽略</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>公式</th>\n<th>取值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>2n</td>\n<td>偶数</td>\n</tr>\n<tr>\n<td>2n+1</td>\n<td>奇数</td>\n</tr>\n<tr>\n<td>5n</td>\n<td>5 10 15…</td>\n</tr>\n<tr>\n<td>n+5</td>\n<td>从第五个开始到最后（包含第五个）</td>\n</tr>\n<tr>\n<td>-n+5</td>\n<td>前五个（包含第五）</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">  <span class=\"comment\">/* 偶数 */</span></span><br><span class=\"line\">  <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:nth-child</span>(even) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: aquamarine;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 奇数 */</span></span><br><span class=\"line\">  <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:nth-child</span>(odd) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: blueviolet;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/*n 是公式，从 0 开始计算 */</span></span><br><span class=\"line\">  <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:nth-child</span>(n) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: lightcoral;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 偶数 */</span></span><br><span class=\"line\">  <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:nth-child</span>(<span class=\"number\">2</span>n) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: lightskyblue;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 奇数 */</span></span><br><span class=\"line\">  <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:nth-child</span>(<span class=\"number\">2</span>n + <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: lightsalmon;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 选择第 0 5 10 15, 应该怎么选 */</span></span><br><span class=\"line\">  <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:nth-child</span>(<span class=\"number\">5</span>n) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: orangered;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* n + 5 就是从第5个开始往后选择 */</span></span><br><span class=\"line\">  <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:nth-child</span>(n + <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: peru;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* -n + 5 前五个 */</span></span><br><span class=\"line\">  <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:nth-child</span>(-n + <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: tan;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>类选择器，属性选择器，伪类选择器，权重为10</strong></p>\n<p><strong>nth-child与nth-of-type区别</strong></p>\n<ul>\n<li><code>nth-child</code> 对父元素里面的所有孩子排列选择（序号是固定的）先找到第n个孩子，然后看看是否和E匹配</li>\n<li><code>nth-of-type</code> 对父元素里面指定的子元素进行排列选择。先匹配E，然后在根据E找第n个孩子</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">  <span class=\"selector-tag\">div</span> <span class=\"selector-pseudo\">:nth-child</span>(<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: lightblue;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-tag\">div</span> <span class=\"selector-pseudo\">:nth-child</span>(<span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: lightpink;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-tag\">div</span> <span class=\"selector-tag\">span</span><span class=\"selector-pseudo\">:nth-of-type</span>(<span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: lightseagreen;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-tag\">div</span> <span class=\"selector-tag\">span</span><span class=\"selector-pseudo\">:nth-of-type</span>(<span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"「3-伪元素选择器」\"><a href=\"#「3-伪元素选择器」\" class=\"headerlink\" title=\"「3. 伪元素选择器」\"></a><strong>「3. 伪元素选择器」</strong></h2><table>\n<thead>\n<tr>\n<th>选择符</th>\n<th>简介</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>::before</td>\n<td>在元素内部的前面插入内容</td>\n</tr>\n<tr>\n<td>::after</td>\n<td>在元素内部的后面插入内容</td>\n</tr>\n</tbody></table>\n<h3 id=\"伪元素选择器注意事项\"><a href=\"#伪元素选择器注意事项\" class=\"headerlink\" title=\"伪元素选择器注意事项\"></a><strong>伪元素选择器注意事项</strong></h3><ul>\n<li><code>before</code> 和 <code>after</code> 必须有 <code>content</code> 属性</li>\n<li><code>before</code> 在内容前面，after 在内容后面</li>\n<li><code>before</code> 和 <code>after</code> 创建的是一个元素，但是属于行内元素</li>\n<li>创建出来的元素在 <code>Dom</code> 中查找不到，所以称为伪元素</li>\n<li>伪元素和标签选择器一样，权重为 1</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">    <span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">      <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">      <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid lightcoral;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"selector-tag\">div</span><span class=\"selector-pseudo\">::after</span>,</span><br><span class=\"line\">    <span class=\"selector-tag\">div</span><span class=\"selector-pseudo\">::before</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">width</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">      <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">      <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">      <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"selector-tag\">div</span><span class=\"selector-pseudo\">::after</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">content</span>: <span class=\"string\">&#x27;德&#x27;</span>;</span><br><span class=\"line\">      <span class=\"attribute\">background-color</span>: lightskyblue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"selector-tag\">div</span><span class=\"selector-pseudo\">::before</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">content</span>: <span class=\"string\">&#x27;道&#x27;</span>;</span><br><span class=\"line\">      <span class=\"attribute\">background-color</span>: mediumaquamarine;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"伪元素字体图标\"><a href=\"#伪元素字体图标\" class=\"headerlink\" title=\"伪元素字体图标\"></a>伪元素字体图标</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\"><span class=\"attribute\">font-family</span>: ‘icomoon’;</span><br><span class=\"line\"><span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(<span class=\"string\">‘fonts/icomoon.eot?7kkyc2’</span>);</span><br><span class=\"line\"><span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(<span class=\"string\">‘fonts/icomoon.eot?7kkyc2#iefix’</span>) <span class=\"built_in\">format</span>(‘embedded-opentype’),</span><br><span class=\"line\"><span class=\"built_in\">url</span>(<span class=\"string\">‘fonts/icomoon.ttf?7kkyc2’</span>) <span class=\"built_in\">format</span>(‘truetype’),</span><br><span class=\"line\"><span class=\"built_in\">url</span>(<span class=\"string\">‘fonts/icomoon.woff?7kkyc2’</span>) <span class=\"built_in\">format</span>(‘woff’),</span><br><span class=\"line\"><span class=\"built_in\">url</span>(<span class=\"string\">‘fonts/icomoon.svg?7kkyc2#icomoon’</span>) <span class=\"built_in\">format</span>(‘svg’);</span><br><span class=\"line\"><span class=\"attribute\">font-weight</span>: normal;</span><br><span class=\"line\"><span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">   <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">   <span class=\"attribute\">width</span>: <span class=\"number\">220px</span>;</span><br><span class=\"line\">   <span class=\"attribute\">height</span>: <span class=\"number\">22px</span>;</span><br><span class=\"line\">   <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid lightseagreen;</span><br><span class=\"line\">   <span class=\"attribute\">margin</span>: <span class=\"number\">60px</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">::after</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">&#x27;\\ea50&#x27;</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;icomoon&#x27;</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: -<span class=\"number\">1px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">right</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"伪元素清除浮动\"><a href=\"#伪元素清除浮动\" class=\"headerlink\" title=\"伪元素清除浮动\"></a>伪元素清除浮动</h3><ol>\n<li>额外标签法也称隔墙法，是W3C推荐的做法</li>\n<li>父元素添加overflow属性</li>\n<li>父元素添加afte伪元素</li>\n<li>父元素添加双伪元素</li>\n</ol>\n<p>额外标签法是基本做法，在浮动元素后面新增一个空标签，必须为块级盒子，属性为clear:both。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202205301012442.png\"></p>\n<p>后面两种伪元素清除浮动的方法是第一种额外标签法的升级和优化</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.clearfix</span><span class=\"selector-pseudo\">::after</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"attribute\">content</span>:<span class=\"string\">&quot;&quot;</span>;\t\t伪元素必填属性</span><br><span class=\"line\">    \t<span class=\"attribute\">display</span>: block;\t\t插入元素必须是块级</span><br><span class=\"line\">    \t<span class=\"attribute\">height</span>: <span class=\"number\">0</span>;\t\t不要看见这个元素</span><br><span class=\"line\">    \t<span class=\"attribute\">clear</span>: both;\t\t核心代码清除浮动</span><br><span class=\"line\">    \t<span class=\"attribute\">visibility</span>: hidden;\t\t不要看见这个元素</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.clearfix</span><span class=\"selector-pseudo\">::before</span> <span class=\"selector-class\">.clear</span><span class=\"selector-pseudo\">::after</span> &#123;</span><br><span class=\"line\">    \t<span class=\"attribute\">content</span>:<span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    \t<span class=\"attribute\">display</span>:table;    \t转换为块级元素并且一行显示</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.clearfix</span><span class=\"selector-pseudo\">::after</span>&#123;</span><br><span class=\"line\">    \t<span class=\"attribute\">clear</span>:both;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「4-CSS3盒子模型」\"><a href=\"#「4-CSS3盒子模型」\" class=\"headerlink\" title=\"「4. CSS3盒子模型」\"></a><strong>「4. CSS3盒子模型」</strong></h2><p>box-sizing属性可用来指定盒子模型，有两个属性值值，可指定为content-box，border-box。</p>\n<p><strong>区别：</strong></p>\n<ol>\n<li>box-sizing: content-box;盒子大小为width+padding+border（以前默认的）</li>\n<li>box-sizing: border-box; 盒子大小为width</li>\n</ol>\n<p>如果盒子模型改为第二种，则padding和border就不会撑大盒子（前提是padding和border不会超过width宽度）</p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<h1 id=\"H5简介\"><a href=\"#H5简介\" class=\"headerlink\" title=\"H5简介\"></a>H5简介</h1><h2 id=\"「1-什么是HTML5」\"><a href=\"#「1-什么是HTML5」\" class=\"headerlink\" title=\"「1. 什么是HTML5」\"></a><strong>「1. 什么是HTML5」</strong></h2><ul>\n<li><p>定义：<strong>HTML5</strong>定义了<strong>HTML</strong>标准的最新版本，是对<strong>HTML</strong>的第五次重大修改，号称下一代的HTML。</p>\n</li>\n<li><p>两个概念：</p>\n<ol>\n<li>是一个新版本的<strong>HTML</strong>语言，定义了新的标签、特性和属性</li>\n<li>拥有一个强大的技术集，这些技术集是指：<strong>HTML5、CSS3、JavaScript</strong>,这也是广义上的HTML5</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"「2-HTML5拓展了哪些内容」\"><a href=\"#「2-HTML5拓展了哪些内容」\" class=\"headerlink\" title=\"「2. HTML5拓展了哪些内容」\"></a><strong>「2. HTML5拓展了哪些内容」</strong></h2><ul>\n<li>语义化标签</li>\n<li>本地存储</li>\n<li>兼容特性</li>\n<li>2D、3D</li>\n<li>动画、过渡</li>\n<li>CSS3特性</li>\n<li>性能与集成</li>\n</ul>\n<h1 id=\"HTML5新增\"><a href=\"#HTML5新增\" class=\"headerlink\" title=\"HTML5新增\"></a>HTML5新增</h1><h2 id=\"「1-什么是语义化」\"><a href=\"#「1-什么是语义化」\" class=\"headerlink\" title=\"「1. 什么是语义化」\"></a><strong>「1. 什么是语义化」</strong></h2><p>语义化是指用HTML写出符合<strong>内容的结构化</strong>（内容语义化），选择<strong>合适的标签</strong>（代码语义化），能够便于开发者阅读和写出更优雅的代码的同时让浏览器的爬虫和机器很好地解析。</p>\n<h2 id=\"「2-新增了哪些语义化标签」\"><a href=\"#「2-新增了哪些语义化标签」\" class=\"headerlink\" title=\"「2. 新增了哪些语义化标签」\"></a><strong>「2. 新增了哪些语义化标签」</strong></h2><ul>\n<li><code>header</code>  —  头部标签</li>\n<li><code>nav</code>     —  导航标签</li>\n<li><code>article</code> —  内容标签</li>\n<li><code>section</code> —  块级标签</li>\n<li><code>aside</code>   —  侧边栏标签</li>\n<li><code>footer</code>  —  尾部标签</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202205291552900.png\"></p>\n<h2 id=\"「3-新增多媒体音频标签」\"><a href=\"#「3-新增多媒体音频标签」\" class=\"headerlink\" title=\"「3. 新增多媒体音频标签」\"></a><strong>「3. 新增多媒体音频标签」</strong></h2><p>多媒体标签有两个，分别是音频 <strong>audio</strong>和视频<strong>video</strong>。</p>\n<p><code>audio 标签说明</code></p>\n<ul>\n<li>可以在不使用标签的情况下，也能够原生的支持音频格式文件的播放，</li>\n<li>但是：播放的格式是<strong>有限</strong>的。</li>\n</ul>\n<p><strong>audio 参数</strong></p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>autoplay</td>\n<td>autoplay</td>\n<td>音频就绪后立刻播放</td>\n</tr>\n<tr>\n<td>controls</td>\n<td>controls</td>\n<td>向用户展示音频控件</td>\n</tr>\n<tr>\n<td>loop</td>\n<td>loop</td>\n<td>音频结束后重新循环播放</td>\n</tr>\n<tr>\n<td>src</td>\n<td>src</td>\n<td>播放音频的url地址</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">audio</span> <span class=\"attr\">controls</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 注意：在 chrome 浏览器中已经禁用了 autoplay 属性 --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- &lt;audio src=&quot;./media/snow.mp3&quot; controls autoplay&gt;&lt;/audio&gt; --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- </span></span><br><span class=\"line\"><span class=\"comment\">    因为不同浏览器支持不同的格式，所以我们采取的方案是这个音频准备多个文件 --&gt;</span>                             </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;myAudio.mp3&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;audio/mpeg&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;myAudio.ogg&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;audio/ogg&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Your browser doesn&#x27;t support HTML5 audio. Here is</span><br><span class=\"line\">     a <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;myAudio.mp4&quot;</span>&gt;</span>link to the audio<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span> instead.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">audio</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>video 参数</strong></p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>autoplay</td>\n<td>autoplay</td>\n<td>自动播放</td>\n</tr>\n<tr>\n<td>aontrols</td>\n<td>controls</td>\n<td>播放控件</td>\n</tr>\n<tr>\n<td>width</td>\n<td>px像素</td>\n<td>宽度</td>\n</tr>\n<tr>\n<td>height</td>\n<td>px像素</td>\n<td>高度</td>\n</tr>\n<tr>\n<td>loop</td>\n<td>loop</td>\n<td>循环播放</td>\n</tr>\n<tr>\n<td>preload</td>\n<td>auto || none</td>\n<td>是否预加载视频（如又autoplay忽略该属性）</td>\n</tr>\n<tr>\n<td>src</td>\n<td>url</td>\n<td>视频url地址</td>\n</tr>\n<tr>\n<td>poster</td>\n<td>imgurl</td>\n<td>加载等待图片地址</td>\n</tr>\n<tr>\n<td>muted</td>\n<td>muted</td>\n<td>静音播放</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- &lt;video src=&quot;./media/video.mp4&quot; controls=&quot;controls&quot;&gt;&lt;/video&gt; --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 谷歌浏览器禁用了自动播放功能，如果想自动播放，需要添加 muted 属性 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">video</span> <span class=\"attr\">controls</span>=<span class=\"string\">&quot;controls&quot;</span> <span class=\"attr\">autoplay</span> <span class=\"attr\">muted</span> <span class=\"attr\">loop</span> <span class=\"attr\">poster</span>=<span class=\"string\">&quot;./media/pig.jpg&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./media/video.mp4&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;video/mp4&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./media/video.ogg&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;video/ogg&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">video</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>多媒体标签总结</strong></p>\n<ul>\n<li>音频标签和视频标签使用基本一致</li>\n<li>多媒体标签在不同浏览器下情况不同，存在兼容性问题</li>\n<li>谷歌浏览器把音频和视频标签的自动播放都<strong>禁止</strong>了</li>\n<li>谷歌浏览器中视频添加<strong>muted</strong>属性就可以自己播放了</li>\n<li>注意：重点记住使用方法及自动播放即可，其他属性在使用时查找对应的手册</li>\n</ul>\n<h2 id=\"「4-新增input标签」\"><a href=\"#「4-新增input标签」\" class=\"headerlink\" title=\"「4. 新增input标签」\"></a><strong>「4. 新增input标签」</strong></h2><table>\n<thead>\n<tr>\n<th>属性值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>type=“email”</td>\n<td>限制用户输入必须为Email类型</td>\n</tr>\n<tr>\n<td>type=“url”</td>\n<td>限制用户输入必须为url类型</td>\n</tr>\n<tr>\n<td>type=“date”</td>\n<td>限制用户输入必须为日期类型</td>\n</tr>\n<tr>\n<td>type=“time”</td>\n<td>限制用户输入必须为时间类型</td>\n</tr>\n<tr>\n<td>type=“month”</td>\n<td>限制用户输入必须为月类型</td>\n</tr>\n<tr>\n<td>type=“week”</td>\n<td>限制用户输入必须为周类型</td>\n</tr>\n<tr>\n<td>type=“number”</td>\n<td>限制用户输入必须为数字类型</td>\n</tr>\n<tr>\n<td>type=“tel”</td>\n<td>手机号码</td>\n</tr>\n<tr>\n<td>type=“search”</td>\n<td>搜索框</td>\n</tr>\n<tr>\n<td>type=“color”</td>\n<td>生成一个颜色选择表单</td>\n</tr>\n</tbody></table>\n<h2 id=\"「5-新增表单属性」\"><a href=\"#「5-新增表单属性」\" class=\"headerlink\" title=\"「5. 新增表单属性」\"></a><strong>「5. 新增表单属性」</strong></h2><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>属性值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>required</td>\n<td>required</td>\n<td>表单为必填项</td>\n</tr>\n<tr>\n<td>placeholder</td>\n<td>提示文本</td>\n<td>表单的提示信息</td>\n</tr>\n<tr>\n<td>autofoucs</td>\n<td>autofoucs</td>\n<td>自动聚焦属性，页面加载完成时自动聚焦表单</td>\n</tr>\n<tr>\n<td>autocomplete</td>\n<td>off / on</td>\n<td>显示之前提交过的值，须name属性和成功提交同时满足</td>\n</tr>\n<tr>\n<td>multiple</td>\n<td>multiple</td>\n<td>可以多选文件提交</td>\n</tr>\n</tbody></table>\n<h1 id=\"CSS3新增\"><a href=\"#CSS3新增\" class=\"headerlink\" title=\"CSS3新增\"></a>CSS3新增</h1><h2 id=\"「1-CSS3属性选择器」\"><a href=\"#「1-CSS3属性选择器」\" class=\"headerlink\" title=\"「1. CSS3属性选择器」\"></a><strong>「1. CSS3属性选择器」</strong></h2><table>\n<thead>\n<tr>\n<th>选择符</th>\n<th>简介</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>E {att}</td>\n<td>选择具有att属性的E元素</td>\n</tr>\n<tr>\n<td>E {att=“val”}</td>\n<td>选择具有att属性且属性值等于val的E元素</td>\n</tr>\n<tr>\n<td>E {att^=“val”}</td>\n<td>匹配具有att属性，且值以val开头的E元素</td>\n</tr>\n<tr>\n<td>E {att$=“val”}</td>\n<td>匹配具有att属性，且值以val结尾的E元素</td>\n</tr>\n<tr>\n<td>E {att*=“val”}</td>\n<td>匹配具有att属性，且值中含有val的E元素</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"selector-tag\">button</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">cursor</span>: pointer;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"selector-tag\">button</span><span class=\"selector-attr\">[disabled]</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">cursor</span>: default;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type=search]</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: skyblue;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-tag\">span</span><span class=\"selector-attr\">[class^=black]</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: lightgreen;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-tag\">span</span><span class=\"selector-attr\">[class$=black]</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: lightsalmon;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-tag\">span</span><span class=\"selector-attr\">[class*=black]</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: lightseagreen;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「2-结构伪类选择器」\"><a href=\"#「2-结构伪类选择器」\" class=\"headerlink\" title=\"「2. 结构伪类选择器」\"></a><strong>「2. 结构伪类选择器」</strong></h2><table>\n<thead>\n<tr>\n<th>选择符</th>\n<th>简介</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>E:first-child</td>\n<td>匹配父元素中第一个子元素E</td>\n</tr>\n<tr>\n<td>E:last-child</td>\n<td>匹配父元素中最后一个子元素E</td>\n</tr>\n<tr>\n<td>E:nth-child(n)</td>\n<td>匹配父元素中第n个子元素E</td>\n</tr>\n<tr>\n<td>E:first-of-type</td>\n<td>指定类型E的第一个</td>\n</tr>\n<tr>\n<td>E:last-of-type</td>\n<td>指定类型E的最后一个</td>\n</tr>\n<tr>\n<td>E:nth-of-type(n)</td>\n<td>指定类型E的第n个</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:first</span>-child &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: lightseagreen;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:last-child</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: lightcoral;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:nth-child</span>(<span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: aqua;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>**nth-child(n)**参数n详解</p>\n<ul>\n<li>注意：本质上就是选中第几个子元素</li>\n<li>n 可以是数字、关键字、公式</li>\n<li>n 如果是数字，就是选中第几个</li>\n<li>常见的关键字有 <code>even</code> 偶数、<code>odd</code> 奇数</li>\n<li>常见的公式如下(如果 n 是公式，则从 0 开始计算)</li>\n<li>但是第 0 个元素或者超出了元素的个数会被忽略</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>公式</th>\n<th>取值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>2n</td>\n<td>偶数</td>\n</tr>\n<tr>\n<td>2n+1</td>\n<td>奇数</td>\n</tr>\n<tr>\n<td>5n</td>\n<td>5 10 15…</td>\n</tr>\n<tr>\n<td>n+5</td>\n<td>从第五个开始到最后（包含第五个）</td>\n</tr>\n<tr>\n<td>-n+5</td>\n<td>前五个（包含第五）</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">  <span class=\"comment\">/* 偶数 */</span></span><br><span class=\"line\">  <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:nth-child</span>(even) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: aquamarine;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 奇数 */</span></span><br><span class=\"line\">  <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:nth-child</span>(odd) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: blueviolet;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/*n 是公式，从 0 开始计算 */</span></span><br><span class=\"line\">  <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:nth-child</span>(n) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: lightcoral;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 偶数 */</span></span><br><span class=\"line\">  <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:nth-child</span>(<span class=\"number\">2</span>n) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: lightskyblue;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 奇数 */</span></span><br><span class=\"line\">  <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:nth-child</span>(<span class=\"number\">2</span>n + <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: lightsalmon;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 选择第 0 5 10 15, 应该怎么选 */</span></span><br><span class=\"line\">  <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:nth-child</span>(<span class=\"number\">5</span>n) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: orangered;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* n + 5 就是从第5个开始往后选择 */</span></span><br><span class=\"line\">  <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:nth-child</span>(n + <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: peru;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* -n + 5 前五个 */</span></span><br><span class=\"line\">  <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:nth-child</span>(-n + <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: tan;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>类选择器，属性选择器，伪类选择器，权重为10</strong></p>\n<p><strong>nth-child与nth-of-type区别</strong></p>\n<ul>\n<li><code>nth-child</code> 对父元素里面的所有孩子排列选择（序号是固定的）先找到第n个孩子，然后看看是否和E匹配</li>\n<li><code>nth-of-type</code> 对父元素里面指定的子元素进行排列选择。先匹配E，然后在根据E找第n个孩子</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">  <span class=\"selector-tag\">div</span> <span class=\"selector-pseudo\">:nth-child</span>(<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: lightblue;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-tag\">div</span> <span class=\"selector-pseudo\">:nth-child</span>(<span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: lightpink;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-tag\">div</span> <span class=\"selector-tag\">span</span><span class=\"selector-pseudo\">:nth-of-type</span>(<span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: lightseagreen;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-tag\">div</span> <span class=\"selector-tag\">span</span><span class=\"selector-pseudo\">:nth-of-type</span>(<span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"「3-伪元素选择器」\"><a href=\"#「3-伪元素选择器」\" class=\"headerlink\" title=\"「3. 伪元素选择器」\"></a><strong>「3. 伪元素选择器」</strong></h2><table>\n<thead>\n<tr>\n<th>选择符</th>\n<th>简介</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>::before</td>\n<td>在元素内部的前面插入内容</td>\n</tr>\n<tr>\n<td>::after</td>\n<td>在元素内部的后面插入内容</td>\n</tr>\n</tbody></table>\n<h3 id=\"伪元素选择器注意事项\"><a href=\"#伪元素选择器注意事项\" class=\"headerlink\" title=\"伪元素选择器注意事项\"></a><strong>伪元素选择器注意事项</strong></h3><ul>\n<li><code>before</code> 和 <code>after</code> 必须有 <code>content</code> 属性</li>\n<li><code>before</code> 在内容前面，after 在内容后面</li>\n<li><code>before</code> 和 <code>after</code> 创建的是一个元素，但是属于行内元素</li>\n<li>创建出来的元素在 <code>Dom</code> 中查找不到，所以称为伪元素</li>\n<li>伪元素和标签选择器一样，权重为 1</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">    <span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">      <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">      <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid lightcoral;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"selector-tag\">div</span><span class=\"selector-pseudo\">::after</span>,</span><br><span class=\"line\">    <span class=\"selector-tag\">div</span><span class=\"selector-pseudo\">::before</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">width</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">      <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">      <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">      <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"selector-tag\">div</span><span class=\"selector-pseudo\">::after</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">content</span>: <span class=\"string\">&#x27;德&#x27;</span>;</span><br><span class=\"line\">      <span class=\"attribute\">background-color</span>: lightskyblue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"selector-tag\">div</span><span class=\"selector-pseudo\">::before</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">content</span>: <span class=\"string\">&#x27;道&#x27;</span>;</span><br><span class=\"line\">      <span class=\"attribute\">background-color</span>: mediumaquamarine;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"伪元素字体图标\"><a href=\"#伪元素字体图标\" class=\"headerlink\" title=\"伪元素字体图标\"></a>伪元素字体图标</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\"><span class=\"attribute\">font-family</span>: ‘icomoon’;</span><br><span class=\"line\"><span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(<span class=\"string\">‘fonts/icomoon.eot?7kkyc2’</span>);</span><br><span class=\"line\"><span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(<span class=\"string\">‘fonts/icomoon.eot?7kkyc2#iefix’</span>) <span class=\"built_in\">format</span>(‘embedded-opentype’),</span><br><span class=\"line\"><span class=\"built_in\">url</span>(<span class=\"string\">‘fonts/icomoon.ttf?7kkyc2’</span>) <span class=\"built_in\">format</span>(‘truetype’),</span><br><span class=\"line\"><span class=\"built_in\">url</span>(<span class=\"string\">‘fonts/icomoon.woff?7kkyc2’</span>) <span class=\"built_in\">format</span>(‘woff’),</span><br><span class=\"line\"><span class=\"built_in\">url</span>(<span class=\"string\">‘fonts/icomoon.svg?7kkyc2#icomoon’</span>) <span class=\"built_in\">format</span>(‘svg’);</span><br><span class=\"line\"><span class=\"attribute\">font-weight</span>: normal;</span><br><span class=\"line\"><span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">   <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">   <span class=\"attribute\">width</span>: <span class=\"number\">220px</span>;</span><br><span class=\"line\">   <span class=\"attribute\">height</span>: <span class=\"number\">22px</span>;</span><br><span class=\"line\">   <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid lightseagreen;</span><br><span class=\"line\">   <span class=\"attribute\">margin</span>: <span class=\"number\">60px</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">::after</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">&#x27;\\ea50&#x27;</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;icomoon&#x27;</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: -<span class=\"number\">1px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">right</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"伪元素清除浮动\"><a href=\"#伪元素清除浮动\" class=\"headerlink\" title=\"伪元素清除浮动\"></a>伪元素清除浮动</h3><ol>\n<li>额外标签法也称隔墙法，是W3C推荐的做法</li>\n<li>父元素添加overflow属性</li>\n<li>父元素添加afte伪元素</li>\n<li>父元素添加双伪元素</li>\n</ol>\n<p>额外标签法是基本做法，在浮动元素后面新增一个空标签，必须为块级盒子，属性为clear:both。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202205301012442.png\"></p>\n<p>后面两种伪元素清除浮动的方法是第一种额外标签法的升级和优化</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.clearfix</span><span class=\"selector-pseudo\">::after</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"attribute\">content</span>:<span class=\"string\">&quot;&quot;</span>;\t\t伪元素必填属性</span><br><span class=\"line\">    \t<span class=\"attribute\">display</span>: block;\t\t插入元素必须是块级</span><br><span class=\"line\">    \t<span class=\"attribute\">height</span>: <span class=\"number\">0</span>;\t\t不要看见这个元素</span><br><span class=\"line\">    \t<span class=\"attribute\">clear</span>: both;\t\t核心代码清除浮动</span><br><span class=\"line\">    \t<span class=\"attribute\">visibility</span>: hidden;\t\t不要看见这个元素</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.clearfix</span><span class=\"selector-pseudo\">::before</span> <span class=\"selector-class\">.clear</span><span class=\"selector-pseudo\">::after</span> &#123;</span><br><span class=\"line\">    \t<span class=\"attribute\">content</span>:<span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    \t<span class=\"attribute\">display</span>:table;    \t转换为块级元素并且一行显示</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.clearfix</span><span class=\"selector-pseudo\">::after</span>&#123;</span><br><span class=\"line\">    \t<span class=\"attribute\">clear</span>:both;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「4-CSS3盒子模型」\"><a href=\"#「4-CSS3盒子模型」\" class=\"headerlink\" title=\"「4. CSS3盒子模型」\"></a><strong>「4. CSS3盒子模型」</strong></h2><p>box-sizing属性可用来指定盒子模型，有两个属性值值，可指定为content-box，border-box。</p>\n<p><strong>区别：</strong></p>\n<ol>\n<li>box-sizing: content-box;盒子大小为width+padding+border（以前默认的）</li>\n<li>box-sizing: border-box; 盒子大小为width</li>\n</ol>\n<p>如果盒子模型改为第二种，则padding和border就不会撑大盒子（前提是padding和border不会超过width宽度）</p>\n"},{"title":"JavaScript事件高级","date":"2022-07-04T16:00:00.000Z","updated":"2022-07-09T16:00:00.000Z","type":null,"comments":1,"description":null,"keywords":null,"top_img":"./img/bg8.jpg","cover":"./img/bg10.jpg","mathjax":null,"katex":null,"aside":null,"aplayer":null,"highlight_shrink":null,"sticky":null,"_content":"\n\n","source":"_posts/前端/JavaScript事件高级.md","raw":"---\ntitle: JavaScript事件高级\ndate: 2022-07-05\nupdated: 2022-07-10\ntype:\ncomments:\ndescription:\nkeywords:\ntags:\n  - 小白的前端之路\n  - JavaScript基础\n  - JavaScript API\n  - DOM\ncategories: 前端开发\ntop_img: ./img/bg8.jpg\ncover: ./img/bg10.jpg\nmathjax:\nkatex:\naside:\naplayer:\nhighlight_shrink:\nsticky: \n---\n\n\n","slug":"前端/JavaScript事件高级","published":1,"layout":"post","photos":[],"link":"","_id":"cl5db79k5000sywtu8ta25pac","content":"","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":""},{"title":"JavaScript DOM","date":"2022-06-15T16:00:00.000Z","updated":"2022-06-29T16:00:00.000Z","keywords":null,"description":null,"top_img":"./img/bg20.jpg","cover":"./img/bg12.jpg","_content":"# DOM简介\n\n\n\n## **「1.1什么是DOM」**\n\n文档对象模型(Document Object Model ，简称DOM)，是W3C组织推荐的处理扩展标记语言(HTML或者XML)的编程接口。\n\nW3C已经定义了一系列的DOM接口，通过这些接口可以改变网页的内容，结构和样式。\n\n1. 对于JavaScript，为了能够使JavaScript操作HTML，JavaScript就有了一套自己的DOM编程接口\n2. 对于HTML，DOM使得HTML形成了一颗DOM树，包含文档，元素，节点。\n3. 我们获取过来的DOM元素是一个对象（Object），所以称为 文档对象模型\n\n## **「1.2DOM树」**\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206141517149.png)\n\n- 文档：一个页面就是一个文档，DOM中用document表示\n- 元素：页面中所有标签都是元素，DOM中用element表示\n- 节点：网页中所有内容都是节点(标签，属性，文本，注释)，DOM中使用node表示\n\nDOM把以上内容都看作是对象\n\n# 获取元素\n\n## **「2.1如何获取页面元素」**\n\nDOM在实际开发中主要用来操作元素\n\n有如下几种方式\n\n- 根据ID获取\n- 根据标签名获取\n- 通过HTML5新增方法获取\n- 特殊元素获取\n\n## **「2.2根据id」**\n\n```html\n// document.getElementById('id名');\n<div id=\"time\">2022</div>\n<script>\n    // 1.因为我们文档页面从上往下加载，所以先有标签，script标签写在下面\n    // 2.get 获得 Element 元素 By 通过 \"驼峰命名法\"\n    // 3.参数 id是一个大小写敏感的字符串\n    // 4.返回的是一个元素对象\n    var timer = document.getElementById('time');\n\tconsole.log(timer);\n\tconsole.log(typeof timer); // Object\n\t// 5.console.dir 打印我们返回的元素对象，更好的查看里面的属性和方法\n\tconsole.dir(timer);\n</script>\n\n```\n\n## **「2.3根据标签名」**\n\n返回的是带有指定标签名的对象的集合，\n\n- 因为是集合，所以使用时要遍历\n- 得到元素对象是动态的\n\n```js\n document.getElementsByTagName('标签名');\n```\n\n还可以获取某个元素（父元素）内部所有指定标签名的子元素，父元素必须是单个对象（必须指明是哪一个元素对象），获取时不包括父元素自己\n\n```js\n element.getElementByName('标签名');\n//element为父元素，标签名是子元素\n```\n\n\n\n```html\n// document.getElementsByTagName('标签名');\n// element.getElementsByTagName('标签名');\n<body>\n    <ul>\n        <li>知否知否应是等你好久1</li>\n        <li>知否知否应是等你好久2</li>\n        <li>知否知否应是等你好久3</li>\n        <li>知否知否应是等你好久4</li>\n        <li>知否知否应是等你好久5</li>\n    </ul>\n    <ol id = \"ol\">\n        <li>生僻字</li>\n        <li>生僻字</li>\n        <li>生僻字</li>\n        <li>生僻字</li>\n        <li>生僻字</li>\n    </ol>\n    <script>\n        // 1.返回的是 获取过来元素对象的集合 以伪数组的形式存储\n        var lis = document.getElementsByTagName('li');\n        console.log(lis);\n        console.log(lis[0]);\n        // 2.要依次打印里面的元素，可以采用遍历\n        for (var i = 0;i < lis.length; i++) {\n            console.log(lis[i]);\n        }\n        // 3.如果页面中只有一个li，返回的还是伪数组的形式 \n        // 4.如果页面中没有这个元素 返回的是空的伪数组形式\n// 5.element.getElementsByTagName('标签名');\n        var ol = document.getElementsByTagName('ol'); // [ol]\n        console.log(ol[0].getElementsByTagName('li')); //父元素必须指明具体元素，不能是数组\n        // 或者ol指定一个id\n        var ol = documnet.getElementsById('ol');\n        console.log(ol.getElementsByTagName('li'));\n    </script>\n</body>\n```\n\n## **「2.4通过H5获取」**\n\n```js\ndocument.getElementsByClassName('类名'); //根据类名返回元素对象集合\n```\n\n```js\ndocument.querySelector('选择器'); //根据指定选择器返回第一个元素对象\n```\n\n```js\ndocumnet.querySelectorAll('选择器'); //根据指定选择器返回所有元素对象\n```\n\n```html\n<body>\n    <div class=\"box\">盒子1</div>\n    <div class=\"box\">盒子2</div>\n    <div id=\"nav\">\n        <ul>\n            <li>首页</li>\n            <li>产品</li>\n        </ul>\n    </div>\n    <script>\n        // 1.documnet.getElementsByClassName('类名'); \n        var boxs = documnet.getElementsByClassName('box');\n        console.log(boxs);\n        // 2.document.querySelector('选择器'); 返回第一个，里面选择器要加相应符号\n        var firstbox = document.querySelector('.box');\n        console,log(firstbox);\n        var nav = documnet.querySelector('#nav');\n        console.log(nav);\n        var li = documnet.querySelector('li');\n        console.log(li);\n        // 3.documnet.querySelectorAll('选择器'); //返回所有元素对象集合\n        var allBox = document.querySelectorAll('.box');\n        console.log(allBox);\n    </script>\n</body>\n```\n\n## **「2.5获取特殊元素（body，html）」**\n\n- 获取body元素\n\n  ```js\n  document.body  // 返回body元素对象\n  ```\n\n  \n\n- 获取html元素\n\n  ```js\n  document.documentElement   // 返回html元素对象\n  ```\n\n  \n\n```html\n<body>\n    <script>\n        // 1.获取body元素\n        var bodyEle = document.body;\n        console.log(bodyEle);\n        console.dir(bodyEle);\n        // 2.获取html元素\n        var htmlEle = document.documentElement;\n        console.log(htmlEle);\n    </script>\n</body>\n```\n\n# 事件基础\n\n## **「3.1事件概述」**\n\nJavaScript使我们有能力创建静态页面，而事件是可以被JavaScript侦测搭配的行为\n\n简单理解：触发….响应机制\n\n网页中每个元素都可以产生某些可以触发JavaScript的事件，例如我们可以在用户点击某按钮时产生一个事件，然后去执行某些操作\n\n## **「3.2事件三要素」**\n\n```html\n<body>\n    <botton id=\"btn\">唐伯虎</botton>\n    <script>\n        //点击一个按钮\n        //1.事件是由三部分组成，事件源 事件类型 事件处理程序 我们称为事件三要素\n        //(1) 事件源 事件被触发的对象\n        var btn = document.getElementById('btn');\n        //(2) 事件类型 如何触发 比如鼠标点击（onclick）还是鼠标经过还是键盘按下\n        //(3) 事件处理程序 如何通过一个函数赋值的方式 完成\n        btn.onclick = function() {\n            alert('点秋香');\n        }\n    </script>\n</body>\n```\n\n## **「3.3执行事件的步骤」**\n\n1. 获取事件源\n2. 注册事件（绑定事件）\n3. 添加事件处理程序（采取函数赋值形式）\n\n常见鼠标事件\n\n| 鼠标事件    | 触发条件         |\n| ----------- | ---------------- |\n| onclick     | 鼠标点击左键触发 |\n| onmouseover | 鼠标经过触发     |\n| onmouseout  | 鼠标离开触发     |\n| onfocus     | 获得鼠标焦点触发 |\n| onblur      | 失去鼠标焦点触发 |\n| onmousemove | 鼠标移动触发     |\n| onmouseup   | 鼠标弹起触发     |\n| onmousedown | 鼠标按下触发     |\n\n```html\n<body>\n    <div>盒子</div>\n    <script>\n        // 获取事件源\n        var div = document.querySelector('div');\n        // 绑定事件 div:onmouseover\n        // 添加事件处理程序\n        div:onmouseover = function() {\n            alert ('我被选中了');\n        }\n    </script>\n</body>\n```\n\n# 操作元素\n\nJavaScript的DOM操作可以改变网页内容，结构和样式，我们可以利用DOM操作元素里面的内容属性等。注意一下都是属性。\n\n## **「4.1改变元素内容」**\n\n```js\nelememt.innerText  // 从起始位置到终止位置的内容，但它会去除html标签，同时空格和换行也会去掉\n```\n\n```js\nelemetn.innerHTML  // 起始位置到终点位置的全部内容，包括html标签同时保留空格和换行\n```\n\n### 案例：改变元素内容\n\n```html\n    <style>\n        div,p {\n            width: 300px;\n            height: 30px;\n            line-height: 30px;\n            color: #fff;\n            background-color: pink;\n        }\n    </style>\n\n<body>\n    <botton>显示系统当前时间</botton>\n    <div>某个时间</div>\n    <p>123</p>\n    <script>\n        // 当我们点击了按钮，div里面的文字会发生变化\n        // 1.获取元素\n        var btn = document.querySelector('button');\n        var div = document.querySelector('div');\n        // 2.注册事件\n        btn:onclick = function() {\n            div.innerHTML = getDate();\n        }\n        function getDate() {\n            var date = new Date();\n            var year = date.getFullYear();\n            var month = date.getMonth() + 1;\n            var dates = date.getDate();\n            var arr = ['星期日','星期一','星期二','星期三','星期四','星期五','星期六'];\n            var day = date.getDay();\n            return '今天是：' + year + '年' + month + '月' + dates + '日' + arr[day];\n        }\n        // 元素也可以不用添加事件修改内容\n        var p = document.querySelector('p');\n        p.innerHTML = getDate();\n    </script>\n</body>\n```\n\n## **「4.2常用元素的属性操作」**\n\n```\ninnerText innerHTML 改变元素内容\nsrc href\nid alt title\n加一个 . 符号\n```\n\n### 案例：分时显示图片，显示不同问候语\n\n```html\n<body>\n    // 根据系统不同时间判断\n    // 利用多分支语句设置不同的图片内容\n    // 需要一个图片，并根据时间修改图片，操作元素属性\n    // 需要div元素显示不同问候语\n    <img src=\"#\" alt=\"好\" title=\"上午好\">\n    <div>好好写代码</div>\n    <script>\n\n        // 1.获取元素\n        var img = document.querySelector('img');\n        var div = document.querySelector('div');\n        // 2.得到当前小时数\n        var date = new Date();\n        var h = date.getHours();\n        // 3.判断小时数改变图片文字信息\n        if(h < 12) {\n            img.src = '#';\n            img.title = '上午好';\n            div.innerHTML = '亲，上午好，好好写代码';\n        } else if(h < 18) {\n            img.src = '#';\n            img.title = '下午好';\n            div.innerHTML = '亲，下午好，好好写代码';\n        } else {\n            img.src = '#';\n            img.title = '晚上好';\n            div.innerHTML = '亲，晚上好，好好写代码';\n        }\n    </script>\n</body>\n```\n\n## **「4.3表单元素属性操作」**\n\n```\n利用DOM可以操作如下表单元素属性\ntype value checked selected disabled\n```\n\n```html\n<body>\n    <button>按钮</button>\n    <input type=\"text\" value=\"输入内容\">\n    <script>\n        //1.获取元素\n        var btn = document.querySelector('button');\n        var input = document.querySelector('input');\n        //2.注册事件\n        btn:onclick = function() {\n            //input.innerHTML = '被点击了' 这个是普通盒子\n            //表单里的值和文字是通过value来修改的\n            input.value = '被点击了';\n            //禁止点击\n            this.disabled = true;\n            //this 指向的是事件函数的调用者 btn\n        }\n    </script>\n</body>\n```\n\n### 案例：仿京东显示隐藏密码\n\n```\n\n```\n\n\n\n## **「4.4样式属性操作」**\n\n我们可以通过JS修改元素大小，颜色，位置等样式\n\n```js\nelement.style.属性  //行内样式操作\nelement.className  //类名样式操作\n```\n\n注意：\n\n1. 如果样式修改较多，可以采用操作类名方式更改元素样式\n2. class是一个保留字，因此使用className来操作类名属性\n3. className会直接更改元素类名，会覆盖原先的类名\n\n```html\n<body>\n    <div class=\"first\">文本</div>\n    <script>\n//1.使用 element.style 修改样式，样式比较少或者功能简单情况下使用\n        var test = document.querySelector('div');\n        test:onclick = function() {\n            this.style.backgroundColor = 'purple';\n            this.style.color = '#fff';\n            this.style.fontSize = '25px';\n            this.style.marginTop = '100px';\n\n// 2.使用element.className更改元素样式，适用于样式较多或者功能复杂的情况\n            // 修改类名为change\n            // 3.如果想要保留原来的类名，可以使用多类名选择器\n            this.className = 'change';\n            this.className = 'first change';\n        }\n    </script>\n</body>\n```\n\n\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206141824210.png)\n\n## **「4.5排他思想」**\n\n如果有同一组元素，我们想要某一个元素实现某种样式，需要用到循环的排他思想算法\n\n1. 给所有元素全部清除样式（干掉其他人）\n2. 给当前元素设置样式（留下我自己）\n3. 注意顺序不能颠倒，首先干掉其他人，在设置自己\n\n```html\n<body>\n    <button>按钮1</button>\n    <button>按钮2</button>\n    <button>按钮3</button>\n    <button>按钮4</button>\n    <button>按钮5</button>\n    <script>\n        //1.获取所有按钮元素\n        var btns = document.getElementsByTagName('button');\n        // btns得到的是伪数组，里面的每一个元素 btn[i]\n        for(var i = 0; i < btns.length; i++) {\n            btns[i].onclick = function() {\n                //(1)先把所有按钮颜色去掉\n                for(var i = 0; i < btns.length; i++) {\n                    btns[i].style.backgroundColor = '';\n                }\n                //(2)然后让当前元素背景颜色为pink\n                this.style.backgroundColor = 'pink';\n            }\n            \n        }\n        //2.排他算法\n    </script>\n</body>\n```\n\n### 案例：百度换肤效果\n\n- 这个案例是给一组元素注册事件\n- 给四个小图片利用循环注册点击事件\n- 当我们点击了这个图片，让我们背景颜色改为当前的图片\n- 核心算法：把当前图片的src 路径取过来，给body 作为背景即可\n\n```html\n\t<style>\n        *{\n            margin: 0;\n            padding: 0;\n        }\n        body{\n            background: url(img/1.jpg) no-repeat center top;\n        } \n        li {\n            list-style: none;\n        }\n        .baidu {\n            overflow: none;\n            margin: 100px auto;\n            background-color: #fff;\n            width: 400px;\n            padding-top: 3px;\n        }\n        .baidu li{\n            float:left;\n            margin: 0 1px;\n            cursor: pointer;\n        }\n        .baidu img {\n            width: 100px;\n        }\n    </style>\n<body>\n    <ul class=\"baidu\">\n        <li><img src=\"img/1.jpg\" alt=\"无图片1\"></li>\n        <li><img src=\"img/2.jpg\" alt=\"无图片2\"></li>\n        <li><img src=\"img/3.jpg\" alt=\"无图片3\"></li>\n        <li><img src=\"img/4.jpg\" alt=\"无图片4\"></li>\n    </ul>\n    <script>\n        //1.获取元素\n        var imgs = document.querySelector('.baidu').querySelectorAll('img');\n        //2.循环注册事件\n        for (var i = 0; i < imgs.length; i++) {\n            imgs[i].onclick = function() {\n                // this.src就是我们点击图片的路径\n                // console.log(this.src)\n                // 把这个路径 this.src给body\n                document.body.style.backgroundImage = 'url('+ this.src +')';\n            }\n        }\n\t</script>\n</body> \n```\n\n### 案例：表格隔行变色效果\n\n- 用到鼠标经过事件和鼠标离开事件\n- 核心思路：鼠标经过tr行，当前行变背景颜色，鼠标离开去掉当前背景颜色\n- 注意：第一行（thead里面的行）不需要变换颜色\n\n```html\n    <style>\n        table{\n            width: 800px;\n            margin: 100px auto;\n            text-align: center;\n            border-collapse: collapse;\n            font-size: 14px;\n        }\n        thead tr {\n            height: 30px;\n            background-color: skyblue;\n        }\n        tbody tr {\n            height: 30px;\n        }\n        tbody td{\n            border-bottom: 1px solid #d7d7d7;\n            font-size: 12px;\n            color: blue;\n        }\n        .bg {\n            background-color: pink;\n        }\n    </style>\n<body>\n    <table>\n        <thead>\n            <tr>\n                <td>代码</td>\n                <td>名称</td>\n                <td>最新公布净值</td>\n                <td>累计净值</td>\n                <td>前单位净值</td>\n                <td>净值增长率</td>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td>003526</td>\n                <td>农银金辉</td>\n                <td>1.075</td>\n                <td>1.254</td>\n                <td>1.548</td>\n                <td>1.5556</td>\n            </tr>\n            <tr>\n                <td>003526</td>\n                <td>农银金辉</td>\n                <td>1.075</td>\n                <td>1.254</td>\n                <td>1.548</td>\n                <td>1.5556</td>\n            </tr>\n        </tbody>\n    </table>\n<script>\n// 1.获取元素 获得tbody里面的tr\nvar trs = document.querySelector('tbody').querySelectorAll('tr');\n// 2.利用循环注册事件\nfor(var i = 0; i < trs.length; i++) {\n    // 3.鼠标经过事件 onmouseover\n    trs[i].onmouseover = function() {\n        this.className = 'bg';\n    }\n    trs[i].onmouseout = function() {\n    // 4.鼠标离开事件 onmouseout\n        this.className = '';\n    }\n}\n</script>\n</body>\n```\n\n### 案例：全选或反选\n\n- 全选或取消全选的做法：让下面的所有复选框的checked属性（选中状态）跟随全选按钮即可\n- 下面复选框需要全部选中，上面全选才能选中的做法：给下面所有复选框绑定点击事件，每次点击，都要循环查看下面所有复选框是否有未选中的，如果有一个未选中的，上面的全选就不选中\n- 可以设置一个变量，来控制全选是否选中\n\n```html\n   <style>\n            table{\n            width: 800px;\n            margin: 100px auto;\n            text-align: center;\n            font-size: 14px;\n        \t}\n    </style>\n<body>\n        <table>\n            <thead>\n                <tr>\n                    <td><input type=\"checkbox\" id=\"j_cbAll\"></td>\n                    <td>商品</td>\n                    <td>价格</td>\n                </tr>\n            </thead>\n            <tbody id=\"j_tb\">\n                <tr>\n                    <td><input type=\"checkbox\"></td>\n                    <td>iPhone6</td>\n                    <td>8000</td>\n                </tr>\n                <tr>\n                    <td><input type=\"checkbox\"></td>\n                    <td>ipad</td>\n                    <td>5000</td>\n                </tr>\n                <tr>\n                    <td><input type=\"checkbox\"></td>\n                    <td>watch</td>\n                    <td>2000</td>\n                </tr>\n            </tbody>\n        </table>\n<script>\n    // 1.全选和取消全选的方法，让下面所有复选框的checked属性跟随全选按钮即可\n    // 获取元素\n    var j_cbAll = document.getElementById('j_cbAll'); //全选按钮\n    var j_tb = document.getElementById('j_tb').getElementsByTagName('input'); //下面所有的复选框\n    // 注册事件\n    j_cbAll.onclick = function() {\n        //this.checked 可以得到复选框的选中状态，如果是true则是选中如果是false则未选中\n        console.log(this.checked);\n        for(var i = 0; i < j_tb.length; i++) {\n            j_tb[i].checked = this.checked;\n        }\n    }\n    // 2.下面复选框需要全部选中，上面全选才能选中的做法\n    for(var i = 0; i < j_tb.length; i++) {\n        j_tb[i].onclick = function() {\n            //flag控制全选按钮是否选中\n            var flag = true;\n            //每次点击复选框都要循环检查三个小按钮是否全被选中\n            for(var i = 0; i < j_tb.length; i++) {\n                if(!j_tb[i].checked) {\n                    flag = false;\n                    break;\n                }\n            }\n            j_cbAll.checked = flag;\n        }\n    }\n\n</script>    \t\n</body>\n```\n\n## **「4.6自定义属性操作」**\n\n### 1.获取元素属性\n\n- element.属性;  获取内置属性值（元素本身自带的属性）\n- element.getAttribute(‘属性’); 主要获取自定义属性\n\n### 2.设置属性值\n\n- element.属性 = ‘值’ ;  设置内置属性值\n- element.getAttribute(‘属性’, ‘值’);   主要设置自定义属性\n\n### 3.移除属性\n\n- element.removeAttribute(‘属性’); \n\n```html\n    <div id=\"demo\" index=\"1\" class=\"nav\"></div>\n    <script>\n        var div = document.querySelector('div');\n        // 1.获取元素属性值\n        // (1)element.属性\n        console.log(div.id);\n        // (2)element.getAttribute('属性')  \"get得到 Attribute属性 程序员自己添加的属性称为自定义属性 index\"\n        console.log(div.getAttribute('id'));\n        console.log(div.getAttribute('index'));\n        // 2.设置元素属性值\n        // (1) element.属性 = '值'\n        div.id = 'test';\n        div.className = 'navs';\n        // (2) element.setAttribute('属性','值')  主要针对自定义属性\n        div.setAttribute('index','2');\n        div.setAttribute('class','footer'); //class特殊 这里写的事class 而不是className\n        // 3.移除属性 removeAttribute('属性')\n        div.removeAttribute('index');\n    </script>\n```\n\n## **「4.7 H5自定义属性」**\n\n自定义属性目的：为了保存并使用数据，有些数据可以保存到页面中而不用保存在数据库中\n\n有些自定义属性容易引起歧义，不容易判断是否是元素的内置属性还是自定义属性，所以H5新增了自定义属性\n\n### 1.设置H5自定义属性\n\nH5规定自定义属性必须以**data-**开头作为属性名并赋值\n\n### 2.获取H5自定义属性\n\n1. 兼容性获取 element.getAttribute(‘data-index’)\n2. H5新增 element.dataset.index或者 element.dataset[‘index’]\n\n```html\n    <div getTime=\"20\" data-index=\"2\" data-list-name=\"andy\"></div>\n    <script>\n        // console.log(div.getTime);\n        console.log(div.getAttribute('getTime'));\n        div.setAttribute('data-time','20');\n        console.log(div.getAttribute('data-index'));\n        console.log(div.getAttribute('data-list-name'));\n        // H5新增的获取自定义属性的方法 \n        console.log(div.dataset);\n        console.log(div.dataset.index);\n        console.log(div.dataset['index']);\n        // 如果自定义属性里面有多个-连接的单词，我们获取的时候采用驼峰命名法\n        console.log(div.dataset.listName);\n        console.log(div.dataset['listName']);\n    </script>\n```\n\n### 案例：tab栏切换\n\n```\n\n```\n\n# 节点操作\n\n## **「5.1为什么学节点操作」**\n\n获取元素通常使用两种方式\n\n1. 利用DOM提供的方法获取元素\n2. 利用节点层级关系获取元素\n\n## **「5.2节点概述」**\n\n网页中所有内容都是节点（标签，属性，文本，注释等），在DOM中，节点使用node表示。\n\nHTML DOM树中所有节点均可通过JavaScript进行访问，所有HTML元素（节点）均可被修改，也可以创建或删除\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206211618584.png)\n\n一般的，节点至少拥有nodeType（节点类型），nodeName（节点名称），nodeValue（节点值）这三个基本属性\n\n- 元素节点 nodeType 为1\n- 属性节点 nodeType 为2\n- 文本节点 nodeType 为3\n\n实际开发中，节点操作主要操作元素节点\n\n## **「5.3节点层级」**\n\n利用DOM树可以把节点划分成不同的层级关系，常见的是父子兄层关系\n\n### 1.父级节点\n\n```js\nnode.parentNode\n```\n\n- parentName 属性可返回某节点的父节点件，注意是最近的一个父节点\n- 如果指定的节点没有父节点则返回null\n\n```html\n    <div class=\"demo\">\n        <div class=\"box\">\n            <span class=\"erweima\"></span>\n        </div>\n    </div>\n    <script>\n        var erweima = document.querySelector('.erweima');\n        //得到的是离元素最近的父级节点（亲爸爸） 找不到就返回null\n        console.log(erweima.parentNode);\n    </script>\n```\n\n### 2.子节点\n\n- 标准\n\n\n```js\n1.parentNode.childNodes // 标准\n```\n\n返回包含指定节点的子节点的集合，该集合为即时更新的集合。\n\n注意：\n\n返回值里包含所有的节点，包括元素节点，文本节点等\n\n如果只要获取元素节点，需要专门处理，所以一般不提倡使用childNodes\n\n```js\nvar ul = document.querySelector('ul');\nfor (var i = 0;i < ul.childNodes.length; i++) {\n    if(ul.childNodes[i].nodeType = 1) {\n        // ul.childNodes[i] 是元素节点\n        console.log(ul.childNodes[i]);\n    }\n}\n```\n\n- 非标准(重点)\n\n\n```js\n2.parentNode.children // 非标准\n```\n\nparentNode.chileren 是一个只读属性，返回所有子元素节点，它只返回子元素节点，其余节点不返回（这是我们重点掌握的）\n\n虽然children是一个非标准，但得到各个浏览器支持\n\n```js\n3.parentNode.firstChild\n4.parentNode.lastChild\n```\n\n返回第一个（最后一个）**子节点**，找不到返回null，同样返回的是所有节点\n\n```\n5.parentNode.firstElementChild\n6.parentNode.lastElementChild\n```\n\n返回的是第一个（最后一个）**子元素节点**，找不到返回null\n\n#### 案例：下拉菜单\n\n```\n\n```\n\n### 3.兄弟节点\n\n```js\nnode.nextSibling\nnode.previousSibling\n```\n\n返回的是当前元素的下一个（上一个）**兄弟节点**，找不到则返回null, 是包含所有节点\n\n```js\nnode.nextElementSibling\nnode.previousElementSibling\n```\n\n返回的是当前元素的上一个（下一个）**兄弟元素节点**，找不到返回null\n\n## **「5.4创建与添加节点」**\n\n### 创建节点\n\n```js\ndocument.createElement('tagName')\n```\n\ndocument.createElement(‘tagName’)方法创建由tagName指定的HTML元素，因为这些元素原先不存在，是根据我们的需求动态产生的，所以也称之为动态创建元素节点\n\n### 添加节点\n\n```js\nnode.appendChild(child)\n```\n\nnode.appendChild(child)方法将一个节点添加到指定父节点的子节点列表末尾。类似CSS的after伪元素\n\n```js\nnode.inserBefore(child,指定元素)\n```\n\nnode.inserBefore(child,指定元素)方法将一个节点添加到父节点的指定子节点的前面，类似CSS的before伪元素\n\n```html\n    <ul>\n        <li>123</li>\n    </ul>\n    <script>\n        //1.创建节点元素\n        var li = document.createElement('li');\n        //2.添加节点 node.appendChild(child)\n        var ul = document.querySelector('ul');\n        ul.appendChild(li);\n        //3.添加节点 node.inserBefore(child,指定元素)\n        var lili = documentquerySelector('li');\n        ul.inserBefore(lili,ul.children[0]);\n        // 我们想要在页面添加一个新的元素：1，创建元素 2，添加元素\n    </script>\n```\n\n### 案例：简单版发布留言\n\n```html\n\n```\n\n\n\n## **「5.5删除节点」**\n\n```js\nnode.removeChild(child)\n```\n\nnode.removeChild()方法从DOM中删除一个子节点，返回删除的节点\n\n```html\n<ul>\n    <li></li>\n    <li></li>\n    <li></li>\n</ul>\n<script>\n    \n\n</script>\n```\n\n### 案例：删除留言板\n\n```html\n\n```\n\n## **「5.6复制节点（克隆节点）」**\n\n```js\nnode.cloneNode()\n```\n\nnode.cloneNode() 方法返回调用该方法的节点的一个副本，也称为克隆节点或者复制节点\n\n注意：\n\n1. 如果括号内参数为空或者false，则是浅拷贝，只克隆复制节点本身，不克隆里面的字节点\n2. 如果括号内参数为true，则是深拷贝，会克隆复制节点本身以及里面所有的子节点\n\n### 案例：动态生成表格\n\n```html\n\n```\n\n\n\n## **「5.8三种动态创建元素的区别」**\n\n- document.write()\n- element.innerHTML()\n- document.createElement()\n\n区别：\n\n1. document.write() 是直接将内容写入页面的内容流，但是文档流执行完毕，它会导致页面全部重绘\n2. innerHTML() 是将内容写入某个DOM节点，不会导致页面全部重绘\n3. innerHTML() 创建多个元素效率更高（不要拼接字符串，采取数组的形式拼接），结构稍微复杂\n4. createElement() 创建多个元素效率稍微低一点，但是结构清晰\n5. 不同浏览器下，innerHTML比createELement效率高\n\n# DOM重点核心\n\n关于DOM操作，我们主要针对于元素的操作，主要有创建，增，删，改，查，属性操作，事件操作\n\n## **「6.1创建」**\n\n1. document.write\n2. innerHTML\n3. createELement\n\n## **「6.2增」**\n\n1. appendChild\n2. insertBefore\n\n## **「6.3删」**\n\n1. removeChild\n\n## **「6.4改」**\n\n主要修改DOM的元素属性，DOM元素的内容，属性，表单的值等\n\n1. 修改元素属性：src，href，title等\n2. 修改普通元素内容：innerHTMl，innerText\n3. 修改表单元素：value,type,disabled等\n4. 修改元素样式：style,className\n\n## **「6.5查」**\n\n主要获取查询DOM元素\n\n1. DOM提供的API方法：getElementById, getElementByTagName, 古老用法不太推荐\n2. H5提供的新方法：querySelector, querySelectorAll  提倡使用\n3. 利用节点操作获取元素：父（parentNode）, 子（children）, 兄（previousElementSibling, nextElementsibling） 推荐使用\n\n## **「6.6属性操作」**\n\n主要针对自定义属性\n\n1. setAttribute: 设置DOM的属性值\n2. getAttribute: 得到DOM的属性值\n3. removeAttribute: 移除属性\n\n## **「6.7事件操作」**\n\n给元素注册事件，采取 \n\n事件源. 事件类型 = 事件处理程序\n","source":"_posts/前端/Javascript DOM.md","raw":"---\ntitle: JavaScript DOM\ndate: 2022-06-16\nupdated: 2022-06-30\ntags:\n  - 小白的前端之路\n  - JavaScript基础\n  - JavaScript API\n  - DOM\ncategories: 前端开发\nkeywords: \ndescription: \ntop_img: ./img/bg20.jpg\ncover: ./img/bg12.jpg\n\n---\n# DOM简介\n\n\n\n## **「1.1什么是DOM」**\n\n文档对象模型(Document Object Model ，简称DOM)，是W3C组织推荐的处理扩展标记语言(HTML或者XML)的编程接口。\n\nW3C已经定义了一系列的DOM接口，通过这些接口可以改变网页的内容，结构和样式。\n\n1. 对于JavaScript，为了能够使JavaScript操作HTML，JavaScript就有了一套自己的DOM编程接口\n2. 对于HTML，DOM使得HTML形成了一颗DOM树，包含文档，元素，节点。\n3. 我们获取过来的DOM元素是一个对象（Object），所以称为 文档对象模型\n\n## **「1.2DOM树」**\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206141517149.png)\n\n- 文档：一个页面就是一个文档，DOM中用document表示\n- 元素：页面中所有标签都是元素，DOM中用element表示\n- 节点：网页中所有内容都是节点(标签，属性，文本，注释)，DOM中使用node表示\n\nDOM把以上内容都看作是对象\n\n# 获取元素\n\n## **「2.1如何获取页面元素」**\n\nDOM在实际开发中主要用来操作元素\n\n有如下几种方式\n\n- 根据ID获取\n- 根据标签名获取\n- 通过HTML5新增方法获取\n- 特殊元素获取\n\n## **「2.2根据id」**\n\n```html\n// document.getElementById('id名');\n<div id=\"time\">2022</div>\n<script>\n    // 1.因为我们文档页面从上往下加载，所以先有标签，script标签写在下面\n    // 2.get 获得 Element 元素 By 通过 \"驼峰命名法\"\n    // 3.参数 id是一个大小写敏感的字符串\n    // 4.返回的是一个元素对象\n    var timer = document.getElementById('time');\n\tconsole.log(timer);\n\tconsole.log(typeof timer); // Object\n\t// 5.console.dir 打印我们返回的元素对象，更好的查看里面的属性和方法\n\tconsole.dir(timer);\n</script>\n\n```\n\n## **「2.3根据标签名」**\n\n返回的是带有指定标签名的对象的集合，\n\n- 因为是集合，所以使用时要遍历\n- 得到元素对象是动态的\n\n```js\n document.getElementsByTagName('标签名');\n```\n\n还可以获取某个元素（父元素）内部所有指定标签名的子元素，父元素必须是单个对象（必须指明是哪一个元素对象），获取时不包括父元素自己\n\n```js\n element.getElementByName('标签名');\n//element为父元素，标签名是子元素\n```\n\n\n\n```html\n// document.getElementsByTagName('标签名');\n// element.getElementsByTagName('标签名');\n<body>\n    <ul>\n        <li>知否知否应是等你好久1</li>\n        <li>知否知否应是等你好久2</li>\n        <li>知否知否应是等你好久3</li>\n        <li>知否知否应是等你好久4</li>\n        <li>知否知否应是等你好久5</li>\n    </ul>\n    <ol id = \"ol\">\n        <li>生僻字</li>\n        <li>生僻字</li>\n        <li>生僻字</li>\n        <li>生僻字</li>\n        <li>生僻字</li>\n    </ol>\n    <script>\n        // 1.返回的是 获取过来元素对象的集合 以伪数组的形式存储\n        var lis = document.getElementsByTagName('li');\n        console.log(lis);\n        console.log(lis[0]);\n        // 2.要依次打印里面的元素，可以采用遍历\n        for (var i = 0;i < lis.length; i++) {\n            console.log(lis[i]);\n        }\n        // 3.如果页面中只有一个li，返回的还是伪数组的形式 \n        // 4.如果页面中没有这个元素 返回的是空的伪数组形式\n// 5.element.getElementsByTagName('标签名');\n        var ol = document.getElementsByTagName('ol'); // [ol]\n        console.log(ol[0].getElementsByTagName('li')); //父元素必须指明具体元素，不能是数组\n        // 或者ol指定一个id\n        var ol = documnet.getElementsById('ol');\n        console.log(ol.getElementsByTagName('li'));\n    </script>\n</body>\n```\n\n## **「2.4通过H5获取」**\n\n```js\ndocument.getElementsByClassName('类名'); //根据类名返回元素对象集合\n```\n\n```js\ndocument.querySelector('选择器'); //根据指定选择器返回第一个元素对象\n```\n\n```js\ndocumnet.querySelectorAll('选择器'); //根据指定选择器返回所有元素对象\n```\n\n```html\n<body>\n    <div class=\"box\">盒子1</div>\n    <div class=\"box\">盒子2</div>\n    <div id=\"nav\">\n        <ul>\n            <li>首页</li>\n            <li>产品</li>\n        </ul>\n    </div>\n    <script>\n        // 1.documnet.getElementsByClassName('类名'); \n        var boxs = documnet.getElementsByClassName('box');\n        console.log(boxs);\n        // 2.document.querySelector('选择器'); 返回第一个，里面选择器要加相应符号\n        var firstbox = document.querySelector('.box');\n        console,log(firstbox);\n        var nav = documnet.querySelector('#nav');\n        console.log(nav);\n        var li = documnet.querySelector('li');\n        console.log(li);\n        // 3.documnet.querySelectorAll('选择器'); //返回所有元素对象集合\n        var allBox = document.querySelectorAll('.box');\n        console.log(allBox);\n    </script>\n</body>\n```\n\n## **「2.5获取特殊元素（body，html）」**\n\n- 获取body元素\n\n  ```js\n  document.body  // 返回body元素对象\n  ```\n\n  \n\n- 获取html元素\n\n  ```js\n  document.documentElement   // 返回html元素对象\n  ```\n\n  \n\n```html\n<body>\n    <script>\n        // 1.获取body元素\n        var bodyEle = document.body;\n        console.log(bodyEle);\n        console.dir(bodyEle);\n        // 2.获取html元素\n        var htmlEle = document.documentElement;\n        console.log(htmlEle);\n    </script>\n</body>\n```\n\n# 事件基础\n\n## **「3.1事件概述」**\n\nJavaScript使我们有能力创建静态页面，而事件是可以被JavaScript侦测搭配的行为\n\n简单理解：触发….响应机制\n\n网页中每个元素都可以产生某些可以触发JavaScript的事件，例如我们可以在用户点击某按钮时产生一个事件，然后去执行某些操作\n\n## **「3.2事件三要素」**\n\n```html\n<body>\n    <botton id=\"btn\">唐伯虎</botton>\n    <script>\n        //点击一个按钮\n        //1.事件是由三部分组成，事件源 事件类型 事件处理程序 我们称为事件三要素\n        //(1) 事件源 事件被触发的对象\n        var btn = document.getElementById('btn');\n        //(2) 事件类型 如何触发 比如鼠标点击（onclick）还是鼠标经过还是键盘按下\n        //(3) 事件处理程序 如何通过一个函数赋值的方式 完成\n        btn.onclick = function() {\n            alert('点秋香');\n        }\n    </script>\n</body>\n```\n\n## **「3.3执行事件的步骤」**\n\n1. 获取事件源\n2. 注册事件（绑定事件）\n3. 添加事件处理程序（采取函数赋值形式）\n\n常见鼠标事件\n\n| 鼠标事件    | 触发条件         |\n| ----------- | ---------------- |\n| onclick     | 鼠标点击左键触发 |\n| onmouseover | 鼠标经过触发     |\n| onmouseout  | 鼠标离开触发     |\n| onfocus     | 获得鼠标焦点触发 |\n| onblur      | 失去鼠标焦点触发 |\n| onmousemove | 鼠标移动触发     |\n| onmouseup   | 鼠标弹起触发     |\n| onmousedown | 鼠标按下触发     |\n\n```html\n<body>\n    <div>盒子</div>\n    <script>\n        // 获取事件源\n        var div = document.querySelector('div');\n        // 绑定事件 div:onmouseover\n        // 添加事件处理程序\n        div:onmouseover = function() {\n            alert ('我被选中了');\n        }\n    </script>\n</body>\n```\n\n# 操作元素\n\nJavaScript的DOM操作可以改变网页内容，结构和样式，我们可以利用DOM操作元素里面的内容属性等。注意一下都是属性。\n\n## **「4.1改变元素内容」**\n\n```js\nelememt.innerText  // 从起始位置到终止位置的内容，但它会去除html标签，同时空格和换行也会去掉\n```\n\n```js\nelemetn.innerHTML  // 起始位置到终点位置的全部内容，包括html标签同时保留空格和换行\n```\n\n### 案例：改变元素内容\n\n```html\n    <style>\n        div,p {\n            width: 300px;\n            height: 30px;\n            line-height: 30px;\n            color: #fff;\n            background-color: pink;\n        }\n    </style>\n\n<body>\n    <botton>显示系统当前时间</botton>\n    <div>某个时间</div>\n    <p>123</p>\n    <script>\n        // 当我们点击了按钮，div里面的文字会发生变化\n        // 1.获取元素\n        var btn = document.querySelector('button');\n        var div = document.querySelector('div');\n        // 2.注册事件\n        btn:onclick = function() {\n            div.innerHTML = getDate();\n        }\n        function getDate() {\n            var date = new Date();\n            var year = date.getFullYear();\n            var month = date.getMonth() + 1;\n            var dates = date.getDate();\n            var arr = ['星期日','星期一','星期二','星期三','星期四','星期五','星期六'];\n            var day = date.getDay();\n            return '今天是：' + year + '年' + month + '月' + dates + '日' + arr[day];\n        }\n        // 元素也可以不用添加事件修改内容\n        var p = document.querySelector('p');\n        p.innerHTML = getDate();\n    </script>\n</body>\n```\n\n## **「4.2常用元素的属性操作」**\n\n```\ninnerText innerHTML 改变元素内容\nsrc href\nid alt title\n加一个 . 符号\n```\n\n### 案例：分时显示图片，显示不同问候语\n\n```html\n<body>\n    // 根据系统不同时间判断\n    // 利用多分支语句设置不同的图片内容\n    // 需要一个图片，并根据时间修改图片，操作元素属性\n    // 需要div元素显示不同问候语\n    <img src=\"#\" alt=\"好\" title=\"上午好\">\n    <div>好好写代码</div>\n    <script>\n\n        // 1.获取元素\n        var img = document.querySelector('img');\n        var div = document.querySelector('div');\n        // 2.得到当前小时数\n        var date = new Date();\n        var h = date.getHours();\n        // 3.判断小时数改变图片文字信息\n        if(h < 12) {\n            img.src = '#';\n            img.title = '上午好';\n            div.innerHTML = '亲，上午好，好好写代码';\n        } else if(h < 18) {\n            img.src = '#';\n            img.title = '下午好';\n            div.innerHTML = '亲，下午好，好好写代码';\n        } else {\n            img.src = '#';\n            img.title = '晚上好';\n            div.innerHTML = '亲，晚上好，好好写代码';\n        }\n    </script>\n</body>\n```\n\n## **「4.3表单元素属性操作」**\n\n```\n利用DOM可以操作如下表单元素属性\ntype value checked selected disabled\n```\n\n```html\n<body>\n    <button>按钮</button>\n    <input type=\"text\" value=\"输入内容\">\n    <script>\n        //1.获取元素\n        var btn = document.querySelector('button');\n        var input = document.querySelector('input');\n        //2.注册事件\n        btn:onclick = function() {\n            //input.innerHTML = '被点击了' 这个是普通盒子\n            //表单里的值和文字是通过value来修改的\n            input.value = '被点击了';\n            //禁止点击\n            this.disabled = true;\n            //this 指向的是事件函数的调用者 btn\n        }\n    </script>\n</body>\n```\n\n### 案例：仿京东显示隐藏密码\n\n```\n\n```\n\n\n\n## **「4.4样式属性操作」**\n\n我们可以通过JS修改元素大小，颜色，位置等样式\n\n```js\nelement.style.属性  //行内样式操作\nelement.className  //类名样式操作\n```\n\n注意：\n\n1. 如果样式修改较多，可以采用操作类名方式更改元素样式\n2. class是一个保留字，因此使用className来操作类名属性\n3. className会直接更改元素类名，会覆盖原先的类名\n\n```html\n<body>\n    <div class=\"first\">文本</div>\n    <script>\n//1.使用 element.style 修改样式，样式比较少或者功能简单情况下使用\n        var test = document.querySelector('div');\n        test:onclick = function() {\n            this.style.backgroundColor = 'purple';\n            this.style.color = '#fff';\n            this.style.fontSize = '25px';\n            this.style.marginTop = '100px';\n\n// 2.使用element.className更改元素样式，适用于样式较多或者功能复杂的情况\n            // 修改类名为change\n            // 3.如果想要保留原来的类名，可以使用多类名选择器\n            this.className = 'change';\n            this.className = 'first change';\n        }\n    </script>\n</body>\n```\n\n\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206141824210.png)\n\n## **「4.5排他思想」**\n\n如果有同一组元素，我们想要某一个元素实现某种样式，需要用到循环的排他思想算法\n\n1. 给所有元素全部清除样式（干掉其他人）\n2. 给当前元素设置样式（留下我自己）\n3. 注意顺序不能颠倒，首先干掉其他人，在设置自己\n\n```html\n<body>\n    <button>按钮1</button>\n    <button>按钮2</button>\n    <button>按钮3</button>\n    <button>按钮4</button>\n    <button>按钮5</button>\n    <script>\n        //1.获取所有按钮元素\n        var btns = document.getElementsByTagName('button');\n        // btns得到的是伪数组，里面的每一个元素 btn[i]\n        for(var i = 0; i < btns.length; i++) {\n            btns[i].onclick = function() {\n                //(1)先把所有按钮颜色去掉\n                for(var i = 0; i < btns.length; i++) {\n                    btns[i].style.backgroundColor = '';\n                }\n                //(2)然后让当前元素背景颜色为pink\n                this.style.backgroundColor = 'pink';\n            }\n            \n        }\n        //2.排他算法\n    </script>\n</body>\n```\n\n### 案例：百度换肤效果\n\n- 这个案例是给一组元素注册事件\n- 给四个小图片利用循环注册点击事件\n- 当我们点击了这个图片，让我们背景颜色改为当前的图片\n- 核心算法：把当前图片的src 路径取过来，给body 作为背景即可\n\n```html\n\t<style>\n        *{\n            margin: 0;\n            padding: 0;\n        }\n        body{\n            background: url(img/1.jpg) no-repeat center top;\n        } \n        li {\n            list-style: none;\n        }\n        .baidu {\n            overflow: none;\n            margin: 100px auto;\n            background-color: #fff;\n            width: 400px;\n            padding-top: 3px;\n        }\n        .baidu li{\n            float:left;\n            margin: 0 1px;\n            cursor: pointer;\n        }\n        .baidu img {\n            width: 100px;\n        }\n    </style>\n<body>\n    <ul class=\"baidu\">\n        <li><img src=\"img/1.jpg\" alt=\"无图片1\"></li>\n        <li><img src=\"img/2.jpg\" alt=\"无图片2\"></li>\n        <li><img src=\"img/3.jpg\" alt=\"无图片3\"></li>\n        <li><img src=\"img/4.jpg\" alt=\"无图片4\"></li>\n    </ul>\n    <script>\n        //1.获取元素\n        var imgs = document.querySelector('.baidu').querySelectorAll('img');\n        //2.循环注册事件\n        for (var i = 0; i < imgs.length; i++) {\n            imgs[i].onclick = function() {\n                // this.src就是我们点击图片的路径\n                // console.log(this.src)\n                // 把这个路径 this.src给body\n                document.body.style.backgroundImage = 'url('+ this.src +')';\n            }\n        }\n\t</script>\n</body> \n```\n\n### 案例：表格隔行变色效果\n\n- 用到鼠标经过事件和鼠标离开事件\n- 核心思路：鼠标经过tr行，当前行变背景颜色，鼠标离开去掉当前背景颜色\n- 注意：第一行（thead里面的行）不需要变换颜色\n\n```html\n    <style>\n        table{\n            width: 800px;\n            margin: 100px auto;\n            text-align: center;\n            border-collapse: collapse;\n            font-size: 14px;\n        }\n        thead tr {\n            height: 30px;\n            background-color: skyblue;\n        }\n        tbody tr {\n            height: 30px;\n        }\n        tbody td{\n            border-bottom: 1px solid #d7d7d7;\n            font-size: 12px;\n            color: blue;\n        }\n        .bg {\n            background-color: pink;\n        }\n    </style>\n<body>\n    <table>\n        <thead>\n            <tr>\n                <td>代码</td>\n                <td>名称</td>\n                <td>最新公布净值</td>\n                <td>累计净值</td>\n                <td>前单位净值</td>\n                <td>净值增长率</td>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td>003526</td>\n                <td>农银金辉</td>\n                <td>1.075</td>\n                <td>1.254</td>\n                <td>1.548</td>\n                <td>1.5556</td>\n            </tr>\n            <tr>\n                <td>003526</td>\n                <td>农银金辉</td>\n                <td>1.075</td>\n                <td>1.254</td>\n                <td>1.548</td>\n                <td>1.5556</td>\n            </tr>\n        </tbody>\n    </table>\n<script>\n// 1.获取元素 获得tbody里面的tr\nvar trs = document.querySelector('tbody').querySelectorAll('tr');\n// 2.利用循环注册事件\nfor(var i = 0; i < trs.length; i++) {\n    // 3.鼠标经过事件 onmouseover\n    trs[i].onmouseover = function() {\n        this.className = 'bg';\n    }\n    trs[i].onmouseout = function() {\n    // 4.鼠标离开事件 onmouseout\n        this.className = '';\n    }\n}\n</script>\n</body>\n```\n\n### 案例：全选或反选\n\n- 全选或取消全选的做法：让下面的所有复选框的checked属性（选中状态）跟随全选按钮即可\n- 下面复选框需要全部选中，上面全选才能选中的做法：给下面所有复选框绑定点击事件，每次点击，都要循环查看下面所有复选框是否有未选中的，如果有一个未选中的，上面的全选就不选中\n- 可以设置一个变量，来控制全选是否选中\n\n```html\n   <style>\n            table{\n            width: 800px;\n            margin: 100px auto;\n            text-align: center;\n            font-size: 14px;\n        \t}\n    </style>\n<body>\n        <table>\n            <thead>\n                <tr>\n                    <td><input type=\"checkbox\" id=\"j_cbAll\"></td>\n                    <td>商品</td>\n                    <td>价格</td>\n                </tr>\n            </thead>\n            <tbody id=\"j_tb\">\n                <tr>\n                    <td><input type=\"checkbox\"></td>\n                    <td>iPhone6</td>\n                    <td>8000</td>\n                </tr>\n                <tr>\n                    <td><input type=\"checkbox\"></td>\n                    <td>ipad</td>\n                    <td>5000</td>\n                </tr>\n                <tr>\n                    <td><input type=\"checkbox\"></td>\n                    <td>watch</td>\n                    <td>2000</td>\n                </tr>\n            </tbody>\n        </table>\n<script>\n    // 1.全选和取消全选的方法，让下面所有复选框的checked属性跟随全选按钮即可\n    // 获取元素\n    var j_cbAll = document.getElementById('j_cbAll'); //全选按钮\n    var j_tb = document.getElementById('j_tb').getElementsByTagName('input'); //下面所有的复选框\n    // 注册事件\n    j_cbAll.onclick = function() {\n        //this.checked 可以得到复选框的选中状态，如果是true则是选中如果是false则未选中\n        console.log(this.checked);\n        for(var i = 0; i < j_tb.length; i++) {\n            j_tb[i].checked = this.checked;\n        }\n    }\n    // 2.下面复选框需要全部选中，上面全选才能选中的做法\n    for(var i = 0; i < j_tb.length; i++) {\n        j_tb[i].onclick = function() {\n            //flag控制全选按钮是否选中\n            var flag = true;\n            //每次点击复选框都要循环检查三个小按钮是否全被选中\n            for(var i = 0; i < j_tb.length; i++) {\n                if(!j_tb[i].checked) {\n                    flag = false;\n                    break;\n                }\n            }\n            j_cbAll.checked = flag;\n        }\n    }\n\n</script>    \t\n</body>\n```\n\n## **「4.6自定义属性操作」**\n\n### 1.获取元素属性\n\n- element.属性;  获取内置属性值（元素本身自带的属性）\n- element.getAttribute(‘属性’); 主要获取自定义属性\n\n### 2.设置属性值\n\n- element.属性 = ‘值’ ;  设置内置属性值\n- element.getAttribute(‘属性’, ‘值’);   主要设置自定义属性\n\n### 3.移除属性\n\n- element.removeAttribute(‘属性’); \n\n```html\n    <div id=\"demo\" index=\"1\" class=\"nav\"></div>\n    <script>\n        var div = document.querySelector('div');\n        // 1.获取元素属性值\n        // (1)element.属性\n        console.log(div.id);\n        // (2)element.getAttribute('属性')  \"get得到 Attribute属性 程序员自己添加的属性称为自定义属性 index\"\n        console.log(div.getAttribute('id'));\n        console.log(div.getAttribute('index'));\n        // 2.设置元素属性值\n        // (1) element.属性 = '值'\n        div.id = 'test';\n        div.className = 'navs';\n        // (2) element.setAttribute('属性','值')  主要针对自定义属性\n        div.setAttribute('index','2');\n        div.setAttribute('class','footer'); //class特殊 这里写的事class 而不是className\n        // 3.移除属性 removeAttribute('属性')\n        div.removeAttribute('index');\n    </script>\n```\n\n## **「4.7 H5自定义属性」**\n\n自定义属性目的：为了保存并使用数据，有些数据可以保存到页面中而不用保存在数据库中\n\n有些自定义属性容易引起歧义，不容易判断是否是元素的内置属性还是自定义属性，所以H5新增了自定义属性\n\n### 1.设置H5自定义属性\n\nH5规定自定义属性必须以**data-**开头作为属性名并赋值\n\n### 2.获取H5自定义属性\n\n1. 兼容性获取 element.getAttribute(‘data-index’)\n2. H5新增 element.dataset.index或者 element.dataset[‘index’]\n\n```html\n    <div getTime=\"20\" data-index=\"2\" data-list-name=\"andy\"></div>\n    <script>\n        // console.log(div.getTime);\n        console.log(div.getAttribute('getTime'));\n        div.setAttribute('data-time','20');\n        console.log(div.getAttribute('data-index'));\n        console.log(div.getAttribute('data-list-name'));\n        // H5新增的获取自定义属性的方法 \n        console.log(div.dataset);\n        console.log(div.dataset.index);\n        console.log(div.dataset['index']);\n        // 如果自定义属性里面有多个-连接的单词，我们获取的时候采用驼峰命名法\n        console.log(div.dataset.listName);\n        console.log(div.dataset['listName']);\n    </script>\n```\n\n### 案例：tab栏切换\n\n```\n\n```\n\n# 节点操作\n\n## **「5.1为什么学节点操作」**\n\n获取元素通常使用两种方式\n\n1. 利用DOM提供的方法获取元素\n2. 利用节点层级关系获取元素\n\n## **「5.2节点概述」**\n\n网页中所有内容都是节点（标签，属性，文本，注释等），在DOM中，节点使用node表示。\n\nHTML DOM树中所有节点均可通过JavaScript进行访问，所有HTML元素（节点）均可被修改，也可以创建或删除\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206211618584.png)\n\n一般的，节点至少拥有nodeType（节点类型），nodeName（节点名称），nodeValue（节点值）这三个基本属性\n\n- 元素节点 nodeType 为1\n- 属性节点 nodeType 为2\n- 文本节点 nodeType 为3\n\n实际开发中，节点操作主要操作元素节点\n\n## **「5.3节点层级」**\n\n利用DOM树可以把节点划分成不同的层级关系，常见的是父子兄层关系\n\n### 1.父级节点\n\n```js\nnode.parentNode\n```\n\n- parentName 属性可返回某节点的父节点件，注意是最近的一个父节点\n- 如果指定的节点没有父节点则返回null\n\n```html\n    <div class=\"demo\">\n        <div class=\"box\">\n            <span class=\"erweima\"></span>\n        </div>\n    </div>\n    <script>\n        var erweima = document.querySelector('.erweima');\n        //得到的是离元素最近的父级节点（亲爸爸） 找不到就返回null\n        console.log(erweima.parentNode);\n    </script>\n```\n\n### 2.子节点\n\n- 标准\n\n\n```js\n1.parentNode.childNodes // 标准\n```\n\n返回包含指定节点的子节点的集合，该集合为即时更新的集合。\n\n注意：\n\n返回值里包含所有的节点，包括元素节点，文本节点等\n\n如果只要获取元素节点，需要专门处理，所以一般不提倡使用childNodes\n\n```js\nvar ul = document.querySelector('ul');\nfor (var i = 0;i < ul.childNodes.length; i++) {\n    if(ul.childNodes[i].nodeType = 1) {\n        // ul.childNodes[i] 是元素节点\n        console.log(ul.childNodes[i]);\n    }\n}\n```\n\n- 非标准(重点)\n\n\n```js\n2.parentNode.children // 非标准\n```\n\nparentNode.chileren 是一个只读属性，返回所有子元素节点，它只返回子元素节点，其余节点不返回（这是我们重点掌握的）\n\n虽然children是一个非标准，但得到各个浏览器支持\n\n```js\n3.parentNode.firstChild\n4.parentNode.lastChild\n```\n\n返回第一个（最后一个）**子节点**，找不到返回null，同样返回的是所有节点\n\n```\n5.parentNode.firstElementChild\n6.parentNode.lastElementChild\n```\n\n返回的是第一个（最后一个）**子元素节点**，找不到返回null\n\n#### 案例：下拉菜单\n\n```\n\n```\n\n### 3.兄弟节点\n\n```js\nnode.nextSibling\nnode.previousSibling\n```\n\n返回的是当前元素的下一个（上一个）**兄弟节点**，找不到则返回null, 是包含所有节点\n\n```js\nnode.nextElementSibling\nnode.previousElementSibling\n```\n\n返回的是当前元素的上一个（下一个）**兄弟元素节点**，找不到返回null\n\n## **「5.4创建与添加节点」**\n\n### 创建节点\n\n```js\ndocument.createElement('tagName')\n```\n\ndocument.createElement(‘tagName’)方法创建由tagName指定的HTML元素，因为这些元素原先不存在，是根据我们的需求动态产生的，所以也称之为动态创建元素节点\n\n### 添加节点\n\n```js\nnode.appendChild(child)\n```\n\nnode.appendChild(child)方法将一个节点添加到指定父节点的子节点列表末尾。类似CSS的after伪元素\n\n```js\nnode.inserBefore(child,指定元素)\n```\n\nnode.inserBefore(child,指定元素)方法将一个节点添加到父节点的指定子节点的前面，类似CSS的before伪元素\n\n```html\n    <ul>\n        <li>123</li>\n    </ul>\n    <script>\n        //1.创建节点元素\n        var li = document.createElement('li');\n        //2.添加节点 node.appendChild(child)\n        var ul = document.querySelector('ul');\n        ul.appendChild(li);\n        //3.添加节点 node.inserBefore(child,指定元素)\n        var lili = documentquerySelector('li');\n        ul.inserBefore(lili,ul.children[0]);\n        // 我们想要在页面添加一个新的元素：1，创建元素 2，添加元素\n    </script>\n```\n\n### 案例：简单版发布留言\n\n```html\n\n```\n\n\n\n## **「5.5删除节点」**\n\n```js\nnode.removeChild(child)\n```\n\nnode.removeChild()方法从DOM中删除一个子节点，返回删除的节点\n\n```html\n<ul>\n    <li></li>\n    <li></li>\n    <li></li>\n</ul>\n<script>\n    \n\n</script>\n```\n\n### 案例：删除留言板\n\n```html\n\n```\n\n## **「5.6复制节点（克隆节点）」**\n\n```js\nnode.cloneNode()\n```\n\nnode.cloneNode() 方法返回调用该方法的节点的一个副本，也称为克隆节点或者复制节点\n\n注意：\n\n1. 如果括号内参数为空或者false，则是浅拷贝，只克隆复制节点本身，不克隆里面的字节点\n2. 如果括号内参数为true，则是深拷贝，会克隆复制节点本身以及里面所有的子节点\n\n### 案例：动态生成表格\n\n```html\n\n```\n\n\n\n## **「5.8三种动态创建元素的区别」**\n\n- document.write()\n- element.innerHTML()\n- document.createElement()\n\n区别：\n\n1. document.write() 是直接将内容写入页面的内容流，但是文档流执行完毕，它会导致页面全部重绘\n2. innerHTML() 是将内容写入某个DOM节点，不会导致页面全部重绘\n3. innerHTML() 创建多个元素效率更高（不要拼接字符串，采取数组的形式拼接），结构稍微复杂\n4. createElement() 创建多个元素效率稍微低一点，但是结构清晰\n5. 不同浏览器下，innerHTML比createELement效率高\n\n# DOM重点核心\n\n关于DOM操作，我们主要针对于元素的操作，主要有创建，增，删，改，查，属性操作，事件操作\n\n## **「6.1创建」**\n\n1. document.write\n2. innerHTML\n3. createELement\n\n## **「6.2增」**\n\n1. appendChild\n2. insertBefore\n\n## **「6.3删」**\n\n1. removeChild\n\n## **「6.4改」**\n\n主要修改DOM的元素属性，DOM元素的内容，属性，表单的值等\n\n1. 修改元素属性：src，href，title等\n2. 修改普通元素内容：innerHTMl，innerText\n3. 修改表单元素：value,type,disabled等\n4. 修改元素样式：style,className\n\n## **「6.5查」**\n\n主要获取查询DOM元素\n\n1. DOM提供的API方法：getElementById, getElementByTagName, 古老用法不太推荐\n2. H5提供的新方法：querySelector, querySelectorAll  提倡使用\n3. 利用节点操作获取元素：父（parentNode）, 子（children）, 兄（previousElementSibling, nextElementsibling） 推荐使用\n\n## **「6.6属性操作」**\n\n主要针对自定义属性\n\n1. setAttribute: 设置DOM的属性值\n2. getAttribute: 得到DOM的属性值\n3. removeAttribute: 移除属性\n\n## **「6.7事件操作」**\n\n给元素注册事件，采取 \n\n事件源. 事件类型 = 事件处理程序\n","slug":"前端/Javascript DOM","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cl5db79k5000vywtucqsv90sy","content":"<h1 id=\"DOM简介\"><a href=\"#DOM简介\" class=\"headerlink\" title=\"DOM简介\"></a>DOM简介</h1><h2 id=\"「1-1什么是DOM」\"><a href=\"#「1-1什么是DOM」\" class=\"headerlink\" title=\"「1.1什么是DOM」\"></a><strong>「1.1什么是DOM」</strong></h2><p>文档对象模型(Document Object Model ，简称DOM)，是W3C组织推荐的处理扩展标记语言(HTML或者XML)的编程接口。</p>\n<p>W3C已经定义了一系列的DOM接口，通过这些接口可以改变网页的内容，结构和样式。</p>\n<ol>\n<li>对于JavaScript，为了能够使JavaScript操作HTML，JavaScript就有了一套自己的DOM编程接口</li>\n<li>对于HTML，DOM使得HTML形成了一颗DOM树，包含文档，元素，节点。</li>\n<li>我们获取过来的DOM元素是一个对象（Object），所以称为 文档对象模型</li>\n</ol>\n<h2 id=\"「1-2DOM树」\"><a href=\"#「1-2DOM树」\" class=\"headerlink\" title=\"「1.2DOM树」\"></a><strong>「1.2DOM树」</strong></h2><p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206141517149.png\"></p>\n<ul>\n<li>文档：一个页面就是一个文档，DOM中用document表示</li>\n<li>元素：页面中所有标签都是元素，DOM中用element表示</li>\n<li>节点：网页中所有内容都是节点(标签，属性，文本，注释)，DOM中使用node表示</li>\n</ul>\n<p>DOM把以上内容都看作是对象</p>\n<h1 id=\"获取元素\"><a href=\"#获取元素\" class=\"headerlink\" title=\"获取元素\"></a>获取元素</h1><h2 id=\"「2-1如何获取页面元素」\"><a href=\"#「2-1如何获取页面元素」\" class=\"headerlink\" title=\"「2.1如何获取页面元素」\"></a><strong>「2.1如何获取页面元素」</strong></h2><p>DOM在实际开发中主要用来操作元素</p>\n<p>有如下几种方式</p>\n<ul>\n<li>根据ID获取</li>\n<li>根据标签名获取</li>\n<li>通过HTML5新增方法获取</li>\n<li>特殊元素获取</li>\n</ul>\n<h2 id=\"「2-2根据id」\"><a href=\"#「2-2根据id」\" class=\"headerlink\" title=\"「2.2根据id」\"></a><strong>「2.2根据id」</strong></h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// document.getElementById(&#x27;id名&#x27;);</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;time&quot;</span>&gt;</span>2022<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 1.因为我们文档页面从上往下加载，所以先有标签，script标签写在下面</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 2.get 获得 Element 元素 By 通过 &quot;驼峰命名法&quot;</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 3.参数 id是一个大小写敏感的字符串</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 4.返回的是一个元素对象</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> timer = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;time&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"built_in\">console</span>.log(timer);</span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> timer); <span class=\"comment\">// Object</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"comment\">// 5.console.dir 打印我们返回的元素对象，更好的查看里面的属性和方法</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"built_in\">console</span>.dir(timer);</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「2-3根据标签名」\"><a href=\"#「2-3根据标签名」\" class=\"headerlink\" title=\"「2.3根据标签名」\"></a><strong>「2.3根据标签名」</strong></h2><p>返回的是带有指定标签名的对象的集合，</p>\n<ul>\n<li>因为是集合，所以使用时要遍历</li>\n<li>得到元素对象是动态的</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;标签名&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>还可以获取某个元素（父元素）内部所有指定标签名的子元素，父元素必须是单个对象（必须指明是哪一个元素对象），获取时不包括父元素自己</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> element.getElementByName(<span class=\"string\">&#x27;标签名&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">//element为父元素，标签名是子元素</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// document.getElementsByTagName(&#x27;标签名&#x27;);</span><br><span class=\"line\">// element.getElementsByTagName(&#x27;标签名&#x27;);</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>知否知否应是等你好久1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>知否知否应是等你好久2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>知否知否应是等你好久3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>知否知否应是等你好久4<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>知否知否应是等你好久5<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ol</span> <span class=\"attr\">id</span> = <span class=\"string\">&quot;ol&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>生僻字<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>生僻字<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>生僻字<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>生僻字<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>生僻字<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ol</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 1.返回的是 获取过来元素对象的集合 以伪数组的形式存储</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> lis = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;li&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(lis);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(lis[<span class=\"number\">0</span>]);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 2.要依次打印里面的元素，可以采用遍历</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; lis.length; i++) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(lis[i]);</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 3.如果页面中只有一个li，返回的还是伪数组的形式 </span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 4.如果页面中没有这个元素 返回的是空的伪数组形式</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">// 5.element.getElementsByTagName(&#x27;标签名&#x27;);</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> ol = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;ol&#x27;</span>); <span class=\"comment\">// [ol]</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(ol[<span class=\"number\">0</span>].getElementsByTagName(<span class=\"string\">&#x27;li&#x27;</span>)); <span class=\"comment\">//父元素必须指明具体元素，不能是数组</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 或者ol指定一个id</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> ol = documnet.getElementsById(<span class=\"string\">&#x27;ol&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(ol.getElementsByTagName(<span class=\"string\">&#x27;li&#x27;</span>));</span></span><br><span class=\"line\"><span class=\"javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「2-4通过H5获取」\"><a href=\"#「2-4通过H5获取」\" class=\"headerlink\" title=\"「2.4通过H5获取」\"></a><strong>「2.4通过H5获取」</strong></h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">&#x27;类名&#x27;</span>); <span class=\"comment\">//根据类名返回元素对象集合</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;选择器&#x27;</span>); <span class=\"comment\">//根据指定选择器返回第一个元素对象</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">documnet.querySelectorAll(<span class=\"string\">&#x27;选择器&#x27;</span>); <span class=\"comment\">//根据指定选择器返回所有元素对象</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span>盒子1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span>盒子2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;nav&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>首页<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>产品<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 1.documnet.getElementsByClassName(&#x27;类名&#x27;); </span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> boxs = documnet.getElementsByClassName(<span class=\"string\">&#x27;box&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(boxs);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 2.document.querySelector(&#x27;选择器&#x27;); 返回第一个，里面选择器要加相应符号</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> firstbox = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;.box&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>,log(firstbox);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> nav = documnet.querySelector(<span class=\"string\">&#x27;#nav&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(nav);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> li = documnet.querySelector(<span class=\"string\">&#x27;li&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(li);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 3.documnet.querySelectorAll(&#x27;选择器&#x27;); //返回所有元素对象集合</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> allBox = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">&#x27;.box&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(allBox);</span></span><br><span class=\"line\"><span class=\"javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「2-5获取特殊元素（body，html）」\"><a href=\"#「2-5获取特殊元素（body，html）」\" class=\"headerlink\" title=\"「2.5获取特殊元素（body，html）」\"></a><strong>「2.5获取特殊元素（body，html）」</strong></h2><ul>\n<li><p>获取body元素</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.body  <span class=\"comment\">// 返回body元素对象</span></span><br></pre></td></tr></table></figure></li>\n<li><p>获取html元素</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.documentElement   <span class=\"comment\">// 返回html元素对象</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 1.获取body元素</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> bodyEle = <span class=\"built_in\">document</span>.body;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(bodyEle);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.dir(bodyEle);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 2.获取html元素</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> htmlEle = <span class=\"built_in\">document</span>.documentElement;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(htmlEle);</span></span><br><span class=\"line\"><span class=\"javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"事件基础\"><a href=\"#事件基础\" class=\"headerlink\" title=\"事件基础\"></a>事件基础</h1><h2 id=\"「3-1事件概述」\"><a href=\"#「3-1事件概述」\" class=\"headerlink\" title=\"「3.1事件概述」\"></a><strong>「3.1事件概述」</strong></h2><p>JavaScript使我们有能力创建静态页面，而事件是可以被JavaScript侦测搭配的行为</p>\n<p>简单理解：触发….响应机制</p>\n<p>网页中每个元素都可以产生某些可以触发JavaScript的事件，例如我们可以在用户点击某按钮时产生一个事件，然后去执行某些操作</p>\n<h2 id=\"「3-2事件三要素」\"><a href=\"#「3-2事件三要素」\" class=\"headerlink\" title=\"「3.2事件三要素」\"></a><strong>「3.2事件三要素」</strong></h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">botton</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;btn&quot;</span>&gt;</span>唐伯虎<span class=\"tag\">&lt;/<span class=\"name\">botton</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">//点击一个按钮</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">//1.事件是由三部分组成，事件源 事件类型 事件处理程序 我们称为事件三要素</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">//(1) 事件源 事件被触发的对象</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;btn&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">//(2) 事件类型 如何触发 比如鼠标点击（onclick）还是鼠标经过还是键盘按下</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">//(3) 事件处理程序 如何通过一个函数赋值的方式 完成</span></span></span><br><span class=\"line\"><span class=\"javascript\">        btn.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            alert(<span class=\"string\">&#x27;点秋香&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「3-3执行事件的步骤」\"><a href=\"#「3-3执行事件的步骤」\" class=\"headerlink\" title=\"「3.3执行事件的步骤」\"></a><strong>「3.3执行事件的步骤」</strong></h2><ol>\n<li>获取事件源</li>\n<li>注册事件（绑定事件）</li>\n<li>添加事件处理程序（采取函数赋值形式）</li>\n</ol>\n<p>常见鼠标事件</p>\n<table>\n<thead>\n<tr>\n<th>鼠标事件</th>\n<th>触发条件</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>onclick</td>\n<td>鼠标点击左键触发</td>\n</tr>\n<tr>\n<td>onmouseover</td>\n<td>鼠标经过触发</td>\n</tr>\n<tr>\n<td>onmouseout</td>\n<td>鼠标离开触发</td>\n</tr>\n<tr>\n<td>onfocus</td>\n<td>获得鼠标焦点触发</td>\n</tr>\n<tr>\n<td>onblur</td>\n<td>失去鼠标焦点触发</td>\n</tr>\n<tr>\n<td>onmousemove</td>\n<td>鼠标移动触发</td>\n</tr>\n<tr>\n<td>onmouseup</td>\n<td>鼠标弹起触发</td>\n</tr>\n<tr>\n<td>onmousedown</td>\n<td>鼠标按下触发</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>盒子<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 获取事件源</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;div&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 绑定事件 div:onmouseover</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 添加事件处理程序</span></span></span><br><span class=\"line\"><span class=\"javascript\">        div:onmouseover = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            alert (<span class=\"string\">&#x27;我被选中了&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"操作元素\"><a href=\"#操作元素\" class=\"headerlink\" title=\"操作元素\"></a>操作元素</h1><p>JavaScript的DOM操作可以改变网页内容，结构和样式，我们可以利用DOM操作元素里面的内容属性等。注意一下都是属性。</p>\n<h2 id=\"「4-1改变元素内容」\"><a href=\"#「4-1改变元素内容」\" class=\"headerlink\" title=\"「4.1改变元素内容」\"></a><strong>「4.1改变元素内容」</strong></h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">elememt.innerText  <span class=\"comment\">// 从起始位置到终止位置的内容，但它会去除html标签，同时空格和换行也会去掉</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">elemetn.innerHTML  <span class=\"comment\">// 起始位置到终点位置的全部内容，包括html标签同时保留空格和换行</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例：改变元素内容\"><a href=\"#案例：改变元素内容\" class=\"headerlink\" title=\"案例：改变元素内容\"></a>案例：改变元素内容</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"></span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">div</span>,<span class=\"selector-tag\">p</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"attribute\">height</span>: <span class=\"number\">30px</span>;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"attribute\">line-height</span>: <span class=\"number\">30px</span>;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"attribute\">background-color</span>: pink;</span></span><br><span class=\"line\"><span class=\"css\">        &#125;</span></span><br><span class=\"line\"><span class=\"css\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">botton</span>&gt;</span>显示系统当前时间<span class=\"tag\">&lt;/<span class=\"name\">botton</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>某个时间<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>123<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 当我们点击了按钮，div里面的文字会发生变化</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 1.获取元素</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;button&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;div&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 2.注册事件</span></span></span><br><span class=\"line\"><span class=\"javascript\">        btn:onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            div.innerHTML = getDate();</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getDate</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">var</span> year = date.getFullYear();</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">var</span> month = date.getMonth() + <span class=\"number\">1</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">var</span> dates = date.getDate();</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">var</span> arr = [<span class=\"string\">&#x27;星期日&#x27;</span>,<span class=\"string\">&#x27;星期一&#x27;</span>,<span class=\"string\">&#x27;星期二&#x27;</span>,<span class=\"string\">&#x27;星期三&#x27;</span>,<span class=\"string\">&#x27;星期四&#x27;</span>,<span class=\"string\">&#x27;星期五&#x27;</span>,<span class=\"string\">&#x27;星期六&#x27;</span>];</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">var</span> day = date.getDay();</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">return</span> <span class=\"string\">&#x27;今天是：&#x27;</span> + year + <span class=\"string\">&#x27;年&#x27;</span> + month + <span class=\"string\">&#x27;月&#x27;</span> + dates + <span class=\"string\">&#x27;日&#x27;</span> + arr[day];</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 元素也可以不用添加事件修改内容</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> p = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;p&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        p.innerHTML = getDate();</span></span><br><span class=\"line\"><span class=\"javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「4-2常用元素的属性操作」\"><a href=\"#「4-2常用元素的属性操作」\" class=\"headerlink\" title=\"「4.2常用元素的属性操作」\"></a><strong>「4.2常用元素的属性操作」</strong></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">innerText innerHTML 改变元素内容</span><br><span class=\"line\">src href</span><br><span class=\"line\">id alt title</span><br><span class=\"line\">加一个 . 符号</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例：分时显示图片，显示不同问候语\"><a href=\"#案例：分时显示图片，显示不同问候语\" class=\"headerlink\" title=\"案例：分时显示图片，显示不同问候语\"></a>案例：分时显示图片，显示不同问候语</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    // 根据系统不同时间判断</span><br><span class=\"line\">    // 利用多分支语句设置不同的图片内容</span><br><span class=\"line\">    // 需要一个图片，并根据时间修改图片，操作元素属性</span><br><span class=\"line\">    // 需要div元素显示不同问候语</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;#&quot;</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;好&quot;</span> <span class=\"attr\">title</span>=<span class=\"string\">&quot;上午好&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>好好写代码<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 1.获取元素</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> img = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;img&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;div&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 2.得到当前小时数</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> h = date.getHours();</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 3.判断小时数改变图片文字信息</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">if</span>(h &lt; <span class=\"number\">12</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            img.src = <span class=\"string\">&#x27;#&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">            img.title = <span class=\"string\">&#x27;上午好&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">            div.innerHTML = <span class=\"string\">&#x27;亲，上午好，好好写代码&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(h &lt; <span class=\"number\">18</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            img.src = <span class=\"string\">&#x27;#&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">            img.title = <span class=\"string\">&#x27;下午好&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">            div.innerHTML = <span class=\"string\">&#x27;亲，下午好，好好写代码&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125; <span class=\"keyword\">else</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            img.src = <span class=\"string\">&#x27;#&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">            img.title = <span class=\"string\">&#x27;晚上好&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">            div.innerHTML = <span class=\"string\">&#x27;亲，晚上好，好好写代码&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「4-3表单元素属性操作」\"><a href=\"#「4-3表单元素属性操作」\" class=\"headerlink\" title=\"「4.3表单元素属性操作」\"></a><strong>「4.3表单元素属性操作」</strong></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">利用DOM可以操作如下表单元素属性</span><br><span class=\"line\">type value checked selected disabled</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>按钮<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;输入内容&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">//1.获取元素</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;button&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> input = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;input&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">//2.注册事件</span></span></span><br><span class=\"line\"><span class=\"javascript\">        btn:onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">//input.innerHTML = &#x27;被点击了&#x27; 这个是普通盒子</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">//表单里的值和文字是通过value来修改的</span></span></span><br><span class=\"line\"><span class=\"javascript\">            input.value = <span class=\"string\">&#x27;被点击了&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">//禁止点击</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">this</span>.disabled = <span class=\"literal\">true</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">//this 指向的是事件函数的调用者 btn</span></span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例：仿京东显示隐藏密码\"><a href=\"#案例：仿京东显示隐藏密码\" class=\"headerlink\" title=\"案例：仿京东显示隐藏密码\"></a>案例：仿京东显示隐藏密码</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"「4-4样式属性操作」\"><a href=\"#「4-4样式属性操作」\" class=\"headerlink\" title=\"「4.4样式属性操作」\"></a><strong>「4.4样式属性操作」</strong></h2><p>我们可以通过JS修改元素大小，颜色，位置等样式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">element.style.属性  <span class=\"comment\">//行内样式操作</span></span><br><span class=\"line\">element.className  <span class=\"comment\">//类名样式操作</span></span><br></pre></td></tr></table></figure>\n\n<p>注意：</p>\n<ol>\n<li>如果样式修改较多，可以采用操作类名方式更改元素样式</li>\n<li>class是一个保留字，因此使用className来操作类名属性</li>\n<li>className会直接更改元素类名，会覆盖原先的类名</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;first&quot;</span>&gt;</span>文本<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">//1.使用 element.style 修改样式，样式比较少或者功能简单情况下使用</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> test = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;div&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        test:onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">this</span>.style.backgroundColor = <span class=\"string\">&#x27;purple&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">this</span>.style.color = <span class=\"string\">&#x27;#fff&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">this</span>.style.fontSize = <span class=\"string\">&#x27;25px&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">this</span>.style.marginTop = <span class=\"string\">&#x27;100px&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">// 2.使用element.className更改元素样式，适用于样式较多或者功能复杂的情况</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">// 修改类名为change</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">// 3.如果想要保留原来的类名，可以使用多类名选择器</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">this</span>.className = <span class=\"string\">&#x27;change&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">this</span>.className = <span class=\"string\">&#x27;first change&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206141824210.png\"></p>\n<h2 id=\"「4-5排他思想」\"><a href=\"#「4-5排他思想」\" class=\"headerlink\" title=\"「4.5排他思想」\"></a><strong>「4.5排他思想」</strong></h2><p>如果有同一组元素，我们想要某一个元素实现某种样式，需要用到循环的排他思想算法</p>\n<ol>\n<li>给所有元素全部清除样式（干掉其他人）</li>\n<li>给当前元素设置样式（留下我自己）</li>\n<li>注意顺序不能颠倒，首先干掉其他人，在设置自己</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>按钮1<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>按钮2<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>按钮3<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>按钮4<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>按钮5<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">//1.获取所有按钮元素</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> btns = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;button&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// btns得到的是伪数组，里面的每一个元素 btn[i]</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; btns.length; i++) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            btns[i].onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"comment\">//(1)先把所有按钮颜色去掉</span></span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; btns.length; i++) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                    btns[i].style.backgroundColor = <span class=\"string\">&#x27;&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"comment\">//(2)然后让当前元素背景颜色为pink</span></span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"built_in\">this</span>.style.backgroundColor = <span class=\"string\">&#x27;pink&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">            </span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">//2.排他算法</span></span></span><br><span class=\"line\"><span class=\"javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例：百度换肤效果\"><a href=\"#案例：百度换肤效果\" class=\"headerlink\" title=\"案例：百度换肤效果\"></a>案例：百度换肤效果</h3><ul>\n<li>这个案例是给一组元素注册事件</li>\n<li>给四个小图片利用循环注册点击事件</li>\n<li>当我们点击了这个图片，让我们背景颜色改为当前的图片</li>\n<li>核心算法：把当前图片的src 路径取过来，给body 作为背景即可</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"></span></span><br><span class=\"line\"><span class=\"css\">        *&#123;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"css\">        &#125;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">body</span>&#123;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(<span class=\"string\">img/1.jpg</span>) no-repeat center top;</span></span><br><span class=\"line\"><span class=\"css\">        &#125; </span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">li</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"attribute\">list-style</span>: none;</span></span><br><span class=\"line\"><span class=\"css\">        &#125;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.baidu</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"attribute\">overflow</span>: none;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"attribute\">margin</span>: <span class=\"number\">100px</span> auto;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"attribute\">background-color</span>: <span class=\"number\">#fff</span>;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"attribute\">width</span>: <span class=\"number\">400px</span>;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"attribute\">padding-top</span>: <span class=\"number\">3px</span>;</span></span><br><span class=\"line\"><span class=\"css\">        &#125;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.baidu</span> <span class=\"selector-tag\">li</span>&#123;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"attribute\">float</span><span class=\"selector-pseudo\">:left</span>;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> <span class=\"number\">1px</span>;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"attribute\">cursor</span>: pointer;</span></span><br><span class=\"line\"><span class=\"css\">        &#125;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.baidu</span> <span class=\"selector-tag\">img</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span></span><br><span class=\"line\"><span class=\"css\">        &#125;</span></span><br><span class=\"line\"><span class=\"css\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;baidu&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;img/1.jpg&quot;</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;无图片1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;img/2.jpg&quot;</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;无图片2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;img/3.jpg&quot;</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;无图片3&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;img/4.jpg&quot;</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;无图片4&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">//1.获取元素</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> imgs = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;.baidu&#x27;</span>).querySelectorAll(<span class=\"string\">&#x27;img&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">//2.循环注册事件</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; imgs.length; i++) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            imgs[i].onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"comment\">// this.src就是我们点击图片的路径</span></span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"comment\">// console.log(this.src)</span></span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"comment\">// 把这个路径 this.src给body</span></span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"built_in\">document</span>.body.style.backgroundImage = <span class=\"string\">&#x27;url(&#x27;</span>+ <span class=\"built_in\">this</span>.src +<span class=\"string\">&#x27;)&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">\t</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span> </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例：表格隔行变色效果\"><a href=\"#案例：表格隔行变色效果\" class=\"headerlink\" title=\"案例：表格隔行变色效果\"></a>案例：表格隔行变色效果</h3><ul>\n<li>用到鼠标经过事件和鼠标离开事件</li>\n<li>核心思路：鼠标经过tr行，当前行变背景颜色，鼠标离开去掉当前背景颜色</li>\n<li>注意：第一行（thead里面的行）不需要变换颜色</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"></span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">table</span>&#123;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"attribute\">width</span>: <span class=\"number\">800px</span>;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"attribute\">margin</span>: <span class=\"number\">100px</span> auto;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"attribute\">text-align</span>: center;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"attribute\">border-collapse</span>: collapse;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"attribute\">font-size</span>: <span class=\"number\">14px</span>;</span></span><br><span class=\"line\"><span class=\"css\">        &#125;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">thead</span> <span class=\"selector-tag\">tr</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"attribute\">height</span>: <span class=\"number\">30px</span>;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"attribute\">background-color</span>: skyblue;</span></span><br><span class=\"line\"><span class=\"css\">        &#125;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">tbody</span> <span class=\"selector-tag\">tr</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"attribute\">height</span>: <span class=\"number\">30px</span>;</span></span><br><span class=\"line\"><span class=\"css\">        &#125;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">tbody</span> <span class=\"selector-tag\">td</span>&#123;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"attribute\">border-bottom</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#d7d7d7</span>;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"attribute\">font-size</span>: <span class=\"number\">12px</span>;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"attribute\">color</span>: blue;</span></span><br><span class=\"line\"><span class=\"css\">        &#125;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.bg</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"attribute\">background-color</span>: pink;</span></span><br><span class=\"line\"><span class=\"css\">        &#125;</span></span><br><span class=\"line\"><span class=\"css\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>代码<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>名称<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>最新公布净值<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>累计净值<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>前单位净值<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>净值增长率<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>003526<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>农银金辉<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>1.075<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>1.254<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>1.548<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>1.5556<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>003526<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>农银金辉<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>1.075<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>1.254<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>1.548<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>1.5556<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">// 1.获取元素 获得tbody里面的tr</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> trs = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;tbody&#x27;</span>).querySelectorAll(<span class=\"string\">&#x27;tr&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">// 2.利用循环注册事件</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; trs.length; i++) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 3.鼠标经过事件 onmouseover</span></span></span><br><span class=\"line\"><span class=\"javascript\">    trs[i].onmouseover = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">this</span>.className = <span class=\"string\">&#x27;bg&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">    trs[i].onmouseout = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 4.鼠标离开事件 onmouseout</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">this</span>.className = <span class=\"string\">&#x27;&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例：全选或反选\"><a href=\"#案例：全选或反选\" class=\"headerlink\" title=\"案例：全选或反选\"></a>案例：全选或反选</h3><ul>\n<li>全选或取消全选的做法：让下面的所有复选框的checked属性（选中状态）跟随全选按钮即可</li>\n<li>下面复选框需要全部选中，上面全选才能选中的做法：给下面所有复选框绑定点击事件，每次点击，都要循环查看下面所有复选框是否有未选中的，如果有一个未选中的，上面的全选就不选中</li>\n<li>可以设置一个变量，来控制全选是否选中</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"></span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">table</span>&#123;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"attribute\">width</span>: <span class=\"number\">800px</span>;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"attribute\">margin</span>: <span class=\"number\">100px</span> auto;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"attribute\">text-align</span>: center;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"attribute\">font-size</span>: <span class=\"number\">14px</span>;</span></span><br><span class=\"line\"><span class=\"css\">        \t&#125;</span></span><br><span class=\"line\"><span class=\"css\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;j_cbAll&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>商品<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>价格<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tbody</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;j_tb&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>iPhone6<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>8000<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>ipad<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>5000<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>watch<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>2000<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 1.全选和取消全选的方法，让下面所有复选框的checked属性跟随全选按钮即可</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 获取元素</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> j_cbAll = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;j_cbAll&#x27;</span>); <span class=\"comment\">//全选按钮</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> j_tb = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;j_tb&#x27;</span>).getElementsByTagName(<span class=\"string\">&#x27;input&#x27;</span>); <span class=\"comment\">//下面所有的复选框</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 注册事件</span></span></span><br><span class=\"line\"><span class=\"javascript\">    j_cbAll.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">//this.checked 可以得到复选框的选中状态，如果是true则是选中如果是false则未选中</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.checked);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; j_tb.length; i++) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            j_tb[i].checked = <span class=\"built_in\">this</span>.checked;</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 2.下面复选框需要全部选中，上面全选才能选中的做法</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; j_tb.length; i++) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        j_tb[i].onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">//flag控制全选按钮是否选中</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">var</span> flag = <span class=\"literal\">true</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">//每次点击复选框都要循环检查三个小按钮是否全被选中</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; j_tb.length; i++) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"keyword\">if</span>(!j_tb[i].checked) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                    flag = <span class=\"literal\">false</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">                    <span class=\"keyword\">break</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">            j_cbAll.checked = flag;</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span>    \t</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「4-6自定义属性操作」\"><a href=\"#「4-6自定义属性操作」\" class=\"headerlink\" title=\"「4.6自定义属性操作」\"></a><strong>「4.6自定义属性操作」</strong></h2><h3 id=\"1-获取元素属性\"><a href=\"#1-获取元素属性\" class=\"headerlink\" title=\"1.获取元素属性\"></a>1.获取元素属性</h3><ul>\n<li>element.属性;  获取内置属性值（元素本身自带的属性）</li>\n<li>element.getAttribute(‘属性’); 主要获取自定义属性</li>\n</ul>\n<h3 id=\"2-设置属性值\"><a href=\"#2-设置属性值\" class=\"headerlink\" title=\"2.设置属性值\"></a>2.设置属性值</h3><ul>\n<li>element.属性 = ‘值’ ;  设置内置属性值</li>\n<li>element.getAttribute(‘属性’, ‘值’);   主要设置自定义属性</li>\n</ul>\n<h3 id=\"3-移除属性\"><a href=\"#3-移除属性\" class=\"headerlink\" title=\"3.移除属性\"></a>3.移除属性</h3><ul>\n<li>element.removeAttribute(‘属性’); </li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;demo&quot;</span> <span class=\"attr\">index</span>=<span class=\"string\">&quot;1&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;nav&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;div&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 1.获取元素属性值</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// (1)element.属性</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(div.id);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// (2)element.getAttribute(&#x27;属性&#x27;)  &quot;get得到 Attribute属性 程序员自己添加的属性称为自定义属性 index&quot;</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(div.getAttribute(<span class=\"string\">&#x27;id&#x27;</span>));</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(div.getAttribute(<span class=\"string\">&#x27;index&#x27;</span>));</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 2.设置元素属性值</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// (1) element.属性 = &#x27;值&#x27;</span></span></span><br><span class=\"line\"><span class=\"javascript\">    div.id = <span class=\"string\">&#x27;test&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">    div.className = <span class=\"string\">&#x27;navs&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// (2) element.setAttribute(&#x27;属性&#x27;,&#x27;值&#x27;)  主要针对自定义属性</span></span></span><br><span class=\"line\"><span class=\"javascript\">    div.setAttribute(<span class=\"string\">&#x27;index&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    div.setAttribute(<span class=\"string\">&#x27;class&#x27;</span>,<span class=\"string\">&#x27;footer&#x27;</span>); <span class=\"comment\">//class特殊 这里写的事class 而不是className</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 3.移除属性 removeAttribute(&#x27;属性&#x27;)</span></span></span><br><span class=\"line\"><span class=\"javascript\">    div.removeAttribute(<span class=\"string\">&#x27;index&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「4-7-H5自定义属性」\"><a href=\"#「4-7-H5自定义属性」\" class=\"headerlink\" title=\"「4.7 H5自定义属性」\"></a><strong>「4.7 H5自定义属性」</strong></h2><p>自定义属性目的：为了保存并使用数据，有些数据可以保存到页面中而不用保存在数据库中</p>\n<p>有些自定义属性容易引起歧义，不容易判断是否是元素的内置属性还是自定义属性，所以H5新增了自定义属性</p>\n<h3 id=\"1-设置H5自定义属性\"><a href=\"#1-设置H5自定义属性\" class=\"headerlink\" title=\"1.设置H5自定义属性\"></a>1.设置H5自定义属性</h3><p>H5规定自定义属性必须以**data-**开头作为属性名并赋值</p>\n<h3 id=\"2-获取H5自定义属性\"><a href=\"#2-获取H5自定义属性\" class=\"headerlink\" title=\"2.获取H5自定义属性\"></a>2.获取H5自定义属性</h3><ol>\n<li>兼容性获取 element.getAttribute(‘data-index’)</li>\n<li>H5新增 element.dataset.index或者 element.dataset[‘index’]</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">getTime</span>=<span class=\"string\">&quot;20&quot;</span> <span class=\"attr\">data-index</span>=<span class=\"string\">&quot;2&quot;</span> <span class=\"attr\">data-list-name</span>=<span class=\"string\">&quot;andy&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// console.log(div.getTime);</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(div.getAttribute(<span class=\"string\">&#x27;getTime&#x27;</span>));</span></span><br><span class=\"line\"><span class=\"javascript\">    div.setAttribute(<span class=\"string\">&#x27;data-time&#x27;</span>,<span class=\"string\">&#x27;20&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(div.getAttribute(<span class=\"string\">&#x27;data-index&#x27;</span>));</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(div.getAttribute(<span class=\"string\">&#x27;data-list-name&#x27;</span>));</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// H5新增的获取自定义属性的方法 </span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(div.dataset);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(div.dataset.index);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(div.dataset[<span class=\"string\">&#x27;index&#x27;</span>]);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 如果自定义属性里面有多个-连接的单词，我们获取的时候采用驼峰命名法</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(div.dataset.listName);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(div.dataset[<span class=\"string\">&#x27;listName&#x27;</span>]);</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例：tab栏切换\"><a href=\"#案例：tab栏切换\" class=\"headerlink\" title=\"案例：tab栏切换\"></a>案例：tab栏切换</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"节点操作\"><a href=\"#节点操作\" class=\"headerlink\" title=\"节点操作\"></a>节点操作</h1><h2 id=\"「5-1为什么学节点操作」\"><a href=\"#「5-1为什么学节点操作」\" class=\"headerlink\" title=\"「5.1为什么学节点操作」\"></a><strong>「5.1为什么学节点操作」</strong></h2><p>获取元素通常使用两种方式</p>\n<ol>\n<li>利用DOM提供的方法获取元素</li>\n<li>利用节点层级关系获取元素</li>\n</ol>\n<h2 id=\"「5-2节点概述」\"><a href=\"#「5-2节点概述」\" class=\"headerlink\" title=\"「5.2节点概述」\"></a><strong>「5.2节点概述」</strong></h2><p>网页中所有内容都是节点（标签，属性，文本，注释等），在DOM中，节点使用node表示。</p>\n<p>HTML DOM树中所有节点均可通过JavaScript进行访问，所有HTML元素（节点）均可被修改，也可以创建或删除</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206211618584.png\"></p>\n<p>一般的，节点至少拥有nodeType（节点类型），nodeName（节点名称），nodeValue（节点值）这三个基本属性</p>\n<ul>\n<li>元素节点 nodeType 为1</li>\n<li>属性节点 nodeType 为2</li>\n<li>文本节点 nodeType 为3</li>\n</ul>\n<p>实际开发中，节点操作主要操作元素节点</p>\n<h2 id=\"「5-3节点层级」\"><a href=\"#「5-3节点层级」\" class=\"headerlink\" title=\"「5.3节点层级」\"></a><strong>「5.3节点层级」</strong></h2><p>利用DOM树可以把节点划分成不同的层级关系，常见的是父子兄层关系</p>\n<h3 id=\"1-父级节点\"><a href=\"#1-父级节点\" class=\"headerlink\" title=\"1.父级节点\"></a>1.父级节点</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node.parentNode</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>parentName 属性可返回某节点的父节点件，注意是最近的一个父节点</li>\n<li>如果指定的节点没有父节点则返回null</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;demo&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;erweima&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> erweima = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;.erweima&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//得到的是离元素最近的父级节点（亲爸爸） 找不到就返回null</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(erweima.parentNode);</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-子节点\"><a href=\"#2-子节点\" class=\"headerlink\" title=\"2.子节点\"></a>2.子节点</h3><ul>\n<li>标准</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span>parentNode.childNodes <span class=\"comment\">// 标准</span></span><br></pre></td></tr></table></figure>\n\n<p>返回包含指定节点的子节点的集合，该集合为即时更新的集合。</p>\n<p>注意：</p>\n<p>返回值里包含所有的节点，包括元素节点，文本节点等</p>\n<p>如果只要获取元素节点，需要专门处理，所以一般不提倡使用childNodes</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ul = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;ul&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; ul.childNodes.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ul.childNodes[i].nodeType = <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ul.childNodes[i] 是元素节点</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(ul.childNodes[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>非标准(重点)</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2.</span>parentNode.children <span class=\"comment\">// 非标准</span></span><br></pre></td></tr></table></figure>\n\n<p>parentNode.chileren 是一个只读属性，返回所有子元素节点，它只返回子元素节点，其余节点不返回（这是我们重点掌握的）</p>\n<p>虽然children是一个非标准，但得到各个浏览器支持</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">3.</span>parentNode.firstChild</span><br><span class=\"line\"><span class=\"number\">4.</span>parentNode.lastChild</span><br></pre></td></tr></table></figure>\n\n<p>返回第一个（最后一个）<strong>子节点</strong>，找不到返回null，同样返回的是所有节点</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5.parentNode.firstElementChild</span><br><span class=\"line\">6.parentNode.lastElementChild</span><br></pre></td></tr></table></figure>\n\n<p>返回的是第一个（最后一个）<strong>子元素节点</strong>，找不到返回null</p>\n<h4 id=\"案例：下拉菜单\"><a href=\"#案例：下拉菜单\" class=\"headerlink\" title=\"案例：下拉菜单\"></a>案例：下拉菜单</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-兄弟节点\"><a href=\"#3-兄弟节点\" class=\"headerlink\" title=\"3.兄弟节点\"></a>3.兄弟节点</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node.nextSibling</span><br><span class=\"line\">node.previousSibling</span><br></pre></td></tr></table></figure>\n\n<p>返回的是当前元素的下一个（上一个）<strong>兄弟节点</strong>，找不到则返回null, 是包含所有节点</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node.nextElementSibling</span><br><span class=\"line\">node.previousElementSibling</span><br></pre></td></tr></table></figure>\n\n<p>返回的是当前元素的上一个（下一个）<strong>兄弟元素节点</strong>，找不到返回null</p>\n<h2 id=\"「5-4创建与添加节点」\"><a href=\"#「5-4创建与添加节点」\" class=\"headerlink\" title=\"「5.4创建与添加节点」\"></a><strong>「5.4创建与添加节点」</strong></h2><h3 id=\"创建节点\"><a href=\"#创建节点\" class=\"headerlink\" title=\"创建节点\"></a>创建节点</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;tagName&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>document.createElement(‘tagName’)方法创建由tagName指定的HTML元素，因为这些元素原先不存在，是根据我们的需求动态产生的，所以也称之为动态创建元素节点</p>\n<h3 id=\"添加节点\"><a href=\"#添加节点\" class=\"headerlink\" title=\"添加节点\"></a>添加节点</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node.appendChild(child)</span><br></pre></td></tr></table></figure>\n\n<p>node.appendChild(child)方法将一个节点添加到指定父节点的子节点列表末尾。类似CSS的after伪元素</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node.inserBefore(child,指定元素)</span><br></pre></td></tr></table></figure>\n\n<p>node.inserBefore(child,指定元素)方法将一个节点添加到父节点的指定子节点的前面，类似CSS的before伪元素</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>123<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//1.创建节点元素</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> li = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;li&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//2.添加节点 node.appendChild(child)</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> ul = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;ul&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    ul.appendChild(li);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//3.添加节点 node.inserBefore(child,指定元素)</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> lili = documentquerySelector(<span class=\"string\">&#x27;li&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    ul.inserBefore(lili,ul.children[<span class=\"number\">0</span>]);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 我们想要在页面添加一个新的元素：1，创建元素 2，添加元素</span></span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例：简单版发布留言\"><a href=\"#案例：简单版发布留言\" class=\"headerlink\" title=\"案例：简单版发布留言\"></a>案例：简单版发布留言</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"「5-5删除节点」\"><a href=\"#「5-5删除节点」\" class=\"headerlink\" title=\"「5.5删除节点」\"></a><strong>「5.5删除节点」</strong></h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node.removeChild(child)</span><br></pre></td></tr></table></figure>\n\n<p>node.removeChild()方法从DOM中删除一个子节点，返回删除的节点</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例：删除留言板\"><a href=\"#案例：删除留言板\" class=\"headerlink\" title=\"案例：删除留言板\"></a>案例：删除留言板</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「5-6复制节点（克隆节点）」\"><a href=\"#「5-6复制节点（克隆节点）」\" class=\"headerlink\" title=\"「5.6复制节点（克隆节点）」\"></a><strong>「5.6复制节点（克隆节点）」</strong></h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node.cloneNode()</span><br></pre></td></tr></table></figure>\n\n<p>node.cloneNode() 方法返回调用该方法的节点的一个副本，也称为克隆节点或者复制节点</p>\n<p>注意：</p>\n<ol>\n<li>如果括号内参数为空或者false，则是浅拷贝，只克隆复制节点本身，不克隆里面的字节点</li>\n<li>如果括号内参数为true，则是深拷贝，会克隆复制节点本身以及里面所有的子节点</li>\n</ol>\n<h3 id=\"案例：动态生成表格\"><a href=\"#案例：动态生成表格\" class=\"headerlink\" title=\"案例：动态生成表格\"></a>案例：动态生成表格</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"「5-8三种动态创建元素的区别」\"><a href=\"#「5-8三种动态创建元素的区别」\" class=\"headerlink\" title=\"「5.8三种动态创建元素的区别」\"></a><strong>「5.8三种动态创建元素的区别」</strong></h2><ul>\n<li>document.write()</li>\n<li>element.innerHTML()</li>\n<li>document.createElement()</li>\n</ul>\n<p>区别：</p>\n<ol>\n<li>document.write() 是直接将内容写入页面的内容流，但是文档流执行完毕，它会导致页面全部重绘</li>\n<li>innerHTML() 是将内容写入某个DOM节点，不会导致页面全部重绘</li>\n<li>innerHTML() 创建多个元素效率更高（不要拼接字符串，采取数组的形式拼接），结构稍微复杂</li>\n<li>createElement() 创建多个元素效率稍微低一点，但是结构清晰</li>\n<li>不同浏览器下，innerHTML比createELement效率高</li>\n</ol>\n<h1 id=\"DOM重点核心\"><a href=\"#DOM重点核心\" class=\"headerlink\" title=\"DOM重点核心\"></a>DOM重点核心</h1><p>关于DOM操作，我们主要针对于元素的操作，主要有创建，增，删，改，查，属性操作，事件操作</p>\n<h2 id=\"「6-1创建」\"><a href=\"#「6-1创建」\" class=\"headerlink\" title=\"「6.1创建」\"></a><strong>「6.1创建」</strong></h2><ol>\n<li>document.write</li>\n<li>innerHTML</li>\n<li>createELement</li>\n</ol>\n<h2 id=\"「6-2增」\"><a href=\"#「6-2增」\" class=\"headerlink\" title=\"「6.2增」\"></a><strong>「6.2增」</strong></h2><ol>\n<li>appendChild</li>\n<li>insertBefore</li>\n</ol>\n<h2 id=\"「6-3删」\"><a href=\"#「6-3删」\" class=\"headerlink\" title=\"「6.3删」\"></a><strong>「6.3删」</strong></h2><ol>\n<li>removeChild</li>\n</ol>\n<h2 id=\"「6-4改」\"><a href=\"#「6-4改」\" class=\"headerlink\" title=\"「6.4改」\"></a><strong>「6.4改」</strong></h2><p>主要修改DOM的元素属性，DOM元素的内容，属性，表单的值等</p>\n<ol>\n<li>修改元素属性：src，href，title等</li>\n<li>修改普通元素内容：innerHTMl，innerText</li>\n<li>修改表单元素：value,type,disabled等</li>\n<li>修改元素样式：style,className</li>\n</ol>\n<h2 id=\"「6-5查」\"><a href=\"#「6-5查」\" class=\"headerlink\" title=\"「6.5查」\"></a><strong>「6.5查」</strong></h2><p>主要获取查询DOM元素</p>\n<ol>\n<li>DOM提供的API方法：getElementById, getElementByTagName, 古老用法不太推荐</li>\n<li>H5提供的新方法：querySelector, querySelectorAll  提倡使用</li>\n<li>利用节点操作获取元素：父（parentNode）, 子（children）, 兄（previousElementSibling, nextElementsibling） 推荐使用</li>\n</ol>\n<h2 id=\"「6-6属性操作」\"><a href=\"#「6-6属性操作」\" class=\"headerlink\" title=\"「6.6属性操作」\"></a><strong>「6.6属性操作」</strong></h2><p>主要针对自定义属性</p>\n<ol>\n<li>setAttribute: 设置DOM的属性值</li>\n<li>getAttribute: 得到DOM的属性值</li>\n<li>removeAttribute: 移除属性</li>\n</ol>\n<h2 id=\"「6-7事件操作」\"><a href=\"#「6-7事件操作」\" class=\"headerlink\" title=\"「6.7事件操作」\"></a><strong>「6.7事件操作」</strong></h2><p>给元素注册事件，采取 </p>\n<p>事件源. 事件类型 = 事件处理程序</p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<h1 id=\"DOM简介\"><a href=\"#DOM简介\" class=\"headerlink\" title=\"DOM简介\"></a>DOM简介</h1><h2 id=\"「1-1什么是DOM」\"><a href=\"#「1-1什么是DOM」\" class=\"headerlink\" title=\"「1.1什么是DOM」\"></a><strong>「1.1什么是DOM」</strong></h2><p>文档对象模型(Document Object Model ，简称DOM)，是W3C组织推荐的处理扩展标记语言(HTML或者XML)的编程接口。</p>\n<p>W3C已经定义了一系列的DOM接口，通过这些接口可以改变网页的内容，结构和样式。</p>\n<ol>\n<li>对于JavaScript，为了能够使JavaScript操作HTML，JavaScript就有了一套自己的DOM编程接口</li>\n<li>对于HTML，DOM使得HTML形成了一颗DOM树，包含文档，元素，节点。</li>\n<li>我们获取过来的DOM元素是一个对象（Object），所以称为 文档对象模型</li>\n</ol>\n<h2 id=\"「1-2DOM树」\"><a href=\"#「1-2DOM树」\" class=\"headerlink\" title=\"「1.2DOM树」\"></a><strong>「1.2DOM树」</strong></h2><p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206141517149.png\"></p>\n<ul>\n<li>文档：一个页面就是一个文档，DOM中用document表示</li>\n<li>元素：页面中所有标签都是元素，DOM中用element表示</li>\n<li>节点：网页中所有内容都是节点(标签，属性，文本，注释)，DOM中使用node表示</li>\n</ul>\n<p>DOM把以上内容都看作是对象</p>\n<h1 id=\"获取元素\"><a href=\"#获取元素\" class=\"headerlink\" title=\"获取元素\"></a>获取元素</h1><h2 id=\"「2-1如何获取页面元素」\"><a href=\"#「2-1如何获取页面元素」\" class=\"headerlink\" title=\"「2.1如何获取页面元素」\"></a><strong>「2.1如何获取页面元素」</strong></h2><p>DOM在实际开发中主要用来操作元素</p>\n<p>有如下几种方式</p>\n<ul>\n<li>根据ID获取</li>\n<li>根据标签名获取</li>\n<li>通过HTML5新增方法获取</li>\n<li>特殊元素获取</li>\n</ul>\n<h2 id=\"「2-2根据id」\"><a href=\"#「2-2根据id」\" class=\"headerlink\" title=\"「2.2根据id」\"></a><strong>「2.2根据id」</strong></h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// document.getElementById(&#x27;id名&#x27;);</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;time&quot;</span>&gt;</span>2022<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 1.因为我们文档页面从上往下加载，所以先有标签，script标签写在下面</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 2.get 获得 Element 元素 By 通过 &quot;驼峰命名法&quot;</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 3.参数 id是一个大小写敏感的字符串</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 4.返回的是一个元素对象</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> timer = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;time&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"built_in\">console</span>.log(timer);</span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> timer); <span class=\"comment\">// Object</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"comment\">// 5.console.dir 打印我们返回的元素对象，更好的查看里面的属性和方法</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"built_in\">console</span>.dir(timer);</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「2-3根据标签名」\"><a href=\"#「2-3根据标签名」\" class=\"headerlink\" title=\"「2.3根据标签名」\"></a><strong>「2.3根据标签名」</strong></h2><p>返回的是带有指定标签名的对象的集合，</p>\n<ul>\n<li>因为是集合，所以使用时要遍历</li>\n<li>得到元素对象是动态的</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;标签名&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>还可以获取某个元素（父元素）内部所有指定标签名的子元素，父元素必须是单个对象（必须指明是哪一个元素对象），获取时不包括父元素自己</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> element.getElementByName(<span class=\"string\">&#x27;标签名&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">//element为父元素，标签名是子元素</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// document.getElementsByTagName(&#x27;标签名&#x27;);</span><br><span class=\"line\">// element.getElementsByTagName(&#x27;标签名&#x27;);</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>知否知否应是等你好久1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>知否知否应是等你好久2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>知否知否应是等你好久3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>知否知否应是等你好久4<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>知否知否应是等你好久5<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ol</span> <span class=\"attr\">id</span> = <span class=\"string\">&quot;ol&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>生僻字<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>生僻字<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>生僻字<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>生僻字<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>生僻字<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ol</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 1.返回的是 获取过来元素对象的集合 以伪数组的形式存储</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> lis = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;li&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(lis);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(lis[<span class=\"number\">0</span>]);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 2.要依次打印里面的元素，可以采用遍历</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; lis.length; i++) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(lis[i]);</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 3.如果页面中只有一个li，返回的还是伪数组的形式 </span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 4.如果页面中没有这个元素 返回的是空的伪数组形式</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">// 5.element.getElementsByTagName(&#x27;标签名&#x27;);</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> ol = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;ol&#x27;</span>); <span class=\"comment\">// [ol]</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(ol[<span class=\"number\">0</span>].getElementsByTagName(<span class=\"string\">&#x27;li&#x27;</span>)); <span class=\"comment\">//父元素必须指明具体元素，不能是数组</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 或者ol指定一个id</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> ol = documnet.getElementsById(<span class=\"string\">&#x27;ol&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(ol.getElementsByTagName(<span class=\"string\">&#x27;li&#x27;</span>));</span></span><br><span class=\"line\"><span class=\"javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「2-4通过H5获取」\"><a href=\"#「2-4通过H5获取」\" class=\"headerlink\" title=\"「2.4通过H5获取」\"></a><strong>「2.4通过H5获取」</strong></h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">&#x27;类名&#x27;</span>); <span class=\"comment\">//根据类名返回元素对象集合</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;选择器&#x27;</span>); <span class=\"comment\">//根据指定选择器返回第一个元素对象</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">documnet.querySelectorAll(<span class=\"string\">&#x27;选择器&#x27;</span>); <span class=\"comment\">//根据指定选择器返回所有元素对象</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span>盒子1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span>盒子2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;nav&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>首页<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>产品<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 1.documnet.getElementsByClassName(&#x27;类名&#x27;); </span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> boxs = documnet.getElementsByClassName(<span class=\"string\">&#x27;box&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(boxs);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 2.document.querySelector(&#x27;选择器&#x27;); 返回第一个，里面选择器要加相应符号</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> firstbox = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;.box&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>,log(firstbox);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> nav = documnet.querySelector(<span class=\"string\">&#x27;#nav&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(nav);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> li = documnet.querySelector(<span class=\"string\">&#x27;li&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(li);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 3.documnet.querySelectorAll(&#x27;选择器&#x27;); //返回所有元素对象集合</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> allBox = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">&#x27;.box&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(allBox);</span></span><br><span class=\"line\"><span class=\"javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「2-5获取特殊元素（body，html）」\"><a href=\"#「2-5获取特殊元素（body，html）」\" class=\"headerlink\" title=\"「2.5获取特殊元素（body，html）」\"></a><strong>「2.5获取特殊元素（body，html）」</strong></h2><ul>\n<li><p>获取body元素</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.body  <span class=\"comment\">// 返回body元素对象</span></span><br></pre></td></tr></table></figure></li>\n<li><p>获取html元素</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.documentElement   <span class=\"comment\">// 返回html元素对象</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 1.获取body元素</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> bodyEle = <span class=\"built_in\">document</span>.body;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(bodyEle);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.dir(bodyEle);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 2.获取html元素</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> htmlEle = <span class=\"built_in\">document</span>.documentElement;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(htmlEle);</span></span><br><span class=\"line\"><span class=\"javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"事件基础\"><a href=\"#事件基础\" class=\"headerlink\" title=\"事件基础\"></a>事件基础</h1><h2 id=\"「3-1事件概述」\"><a href=\"#「3-1事件概述」\" class=\"headerlink\" title=\"「3.1事件概述」\"></a><strong>「3.1事件概述」</strong></h2><p>JavaScript使我们有能力创建静态页面，而事件是可以被JavaScript侦测搭配的行为</p>\n<p>简单理解：触发….响应机制</p>\n<p>网页中每个元素都可以产生某些可以触发JavaScript的事件，例如我们可以在用户点击某按钮时产生一个事件，然后去执行某些操作</p>\n<h2 id=\"「3-2事件三要素」\"><a href=\"#「3-2事件三要素」\" class=\"headerlink\" title=\"「3.2事件三要素」\"></a><strong>「3.2事件三要素」</strong></h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">botton</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;btn&quot;</span>&gt;</span>唐伯虎<span class=\"tag\">&lt;/<span class=\"name\">botton</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">//点击一个按钮</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">//1.事件是由三部分组成，事件源 事件类型 事件处理程序 我们称为事件三要素</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">//(1) 事件源 事件被触发的对象</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;btn&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">//(2) 事件类型 如何触发 比如鼠标点击（onclick）还是鼠标经过还是键盘按下</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">//(3) 事件处理程序 如何通过一个函数赋值的方式 完成</span></span></span><br><span class=\"line\"><span class=\"javascript\">        btn.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            alert(<span class=\"string\">&#x27;点秋香&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「3-3执行事件的步骤」\"><a href=\"#「3-3执行事件的步骤」\" class=\"headerlink\" title=\"「3.3执行事件的步骤」\"></a><strong>「3.3执行事件的步骤」</strong></h2><ol>\n<li>获取事件源</li>\n<li>注册事件（绑定事件）</li>\n<li>添加事件处理程序（采取函数赋值形式）</li>\n</ol>\n<p>常见鼠标事件</p>\n<table>\n<thead>\n<tr>\n<th>鼠标事件</th>\n<th>触发条件</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>onclick</td>\n<td>鼠标点击左键触发</td>\n</tr>\n<tr>\n<td>onmouseover</td>\n<td>鼠标经过触发</td>\n</tr>\n<tr>\n<td>onmouseout</td>\n<td>鼠标离开触发</td>\n</tr>\n<tr>\n<td>onfocus</td>\n<td>获得鼠标焦点触发</td>\n</tr>\n<tr>\n<td>onblur</td>\n<td>失去鼠标焦点触发</td>\n</tr>\n<tr>\n<td>onmousemove</td>\n<td>鼠标移动触发</td>\n</tr>\n<tr>\n<td>onmouseup</td>\n<td>鼠标弹起触发</td>\n</tr>\n<tr>\n<td>onmousedown</td>\n<td>鼠标按下触发</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>盒子<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 获取事件源</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;div&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 绑定事件 div:onmouseover</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 添加事件处理程序</span></span></span><br><span class=\"line\"><span class=\"javascript\">        div:onmouseover = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            alert (<span class=\"string\">&#x27;我被选中了&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"操作元素\"><a href=\"#操作元素\" class=\"headerlink\" title=\"操作元素\"></a>操作元素</h1><p>JavaScript的DOM操作可以改变网页内容，结构和样式，我们可以利用DOM操作元素里面的内容属性等。注意一下都是属性。</p>\n<h2 id=\"「4-1改变元素内容」\"><a href=\"#「4-1改变元素内容」\" class=\"headerlink\" title=\"「4.1改变元素内容」\"></a><strong>「4.1改变元素内容」</strong></h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">elememt.innerText  <span class=\"comment\">// 从起始位置到终止位置的内容，但它会去除html标签，同时空格和换行也会去掉</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">elemetn.innerHTML  <span class=\"comment\">// 起始位置到终点位置的全部内容，包括html标签同时保留空格和换行</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例：改变元素内容\"><a href=\"#案例：改变元素内容\" class=\"headerlink\" title=\"案例：改变元素内容\"></a>案例：改变元素内容</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"></span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">div</span>,<span class=\"selector-tag\">p</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"attribute\">height</span>: <span class=\"number\">30px</span>;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"attribute\">line-height</span>: <span class=\"number\">30px</span>;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"attribute\">background-color</span>: pink;</span></span><br><span class=\"line\"><span class=\"css\">        &#125;</span></span><br><span class=\"line\"><span class=\"css\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">botton</span>&gt;</span>显示系统当前时间<span class=\"tag\">&lt;/<span class=\"name\">botton</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>某个时间<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>123<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 当我们点击了按钮，div里面的文字会发生变化</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 1.获取元素</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;button&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;div&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 2.注册事件</span></span></span><br><span class=\"line\"><span class=\"javascript\">        btn:onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            div.innerHTML = getDate();</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getDate</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">var</span> year = date.getFullYear();</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">var</span> month = date.getMonth() + <span class=\"number\">1</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">var</span> dates = date.getDate();</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">var</span> arr = [<span class=\"string\">&#x27;星期日&#x27;</span>,<span class=\"string\">&#x27;星期一&#x27;</span>,<span class=\"string\">&#x27;星期二&#x27;</span>,<span class=\"string\">&#x27;星期三&#x27;</span>,<span class=\"string\">&#x27;星期四&#x27;</span>,<span class=\"string\">&#x27;星期五&#x27;</span>,<span class=\"string\">&#x27;星期六&#x27;</span>];</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">var</span> day = date.getDay();</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">return</span> <span class=\"string\">&#x27;今天是：&#x27;</span> + year + <span class=\"string\">&#x27;年&#x27;</span> + month + <span class=\"string\">&#x27;月&#x27;</span> + dates + <span class=\"string\">&#x27;日&#x27;</span> + arr[day];</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 元素也可以不用添加事件修改内容</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> p = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;p&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        p.innerHTML = getDate();</span></span><br><span class=\"line\"><span class=\"javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「4-2常用元素的属性操作」\"><a href=\"#「4-2常用元素的属性操作」\" class=\"headerlink\" title=\"「4.2常用元素的属性操作」\"></a><strong>「4.2常用元素的属性操作」</strong></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">innerText innerHTML 改变元素内容</span><br><span class=\"line\">src href</span><br><span class=\"line\">id alt title</span><br><span class=\"line\">加一个 . 符号</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例：分时显示图片，显示不同问候语\"><a href=\"#案例：分时显示图片，显示不同问候语\" class=\"headerlink\" title=\"案例：分时显示图片，显示不同问候语\"></a>案例：分时显示图片，显示不同问候语</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    // 根据系统不同时间判断</span><br><span class=\"line\">    // 利用多分支语句设置不同的图片内容</span><br><span class=\"line\">    // 需要一个图片，并根据时间修改图片，操作元素属性</span><br><span class=\"line\">    // 需要div元素显示不同问候语</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;#&quot;</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;好&quot;</span> <span class=\"attr\">title</span>=<span class=\"string\">&quot;上午好&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>好好写代码<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 1.获取元素</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> img = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;img&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;div&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 2.得到当前小时数</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> h = date.getHours();</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 3.判断小时数改变图片文字信息</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">if</span>(h &lt; <span class=\"number\">12</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            img.src = <span class=\"string\">&#x27;#&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">            img.title = <span class=\"string\">&#x27;上午好&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">            div.innerHTML = <span class=\"string\">&#x27;亲，上午好，好好写代码&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(h &lt; <span class=\"number\">18</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            img.src = <span class=\"string\">&#x27;#&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">            img.title = <span class=\"string\">&#x27;下午好&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">            div.innerHTML = <span class=\"string\">&#x27;亲，下午好，好好写代码&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125; <span class=\"keyword\">else</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            img.src = <span class=\"string\">&#x27;#&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">            img.title = <span class=\"string\">&#x27;晚上好&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">            div.innerHTML = <span class=\"string\">&#x27;亲，晚上好，好好写代码&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「4-3表单元素属性操作」\"><a href=\"#「4-3表单元素属性操作」\" class=\"headerlink\" title=\"「4.3表单元素属性操作」\"></a><strong>「4.3表单元素属性操作」</strong></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">利用DOM可以操作如下表单元素属性</span><br><span class=\"line\">type value checked selected disabled</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>按钮<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;输入内容&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">//1.获取元素</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;button&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> input = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;input&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">//2.注册事件</span></span></span><br><span class=\"line\"><span class=\"javascript\">        btn:onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">//input.innerHTML = &#x27;被点击了&#x27; 这个是普通盒子</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">//表单里的值和文字是通过value来修改的</span></span></span><br><span class=\"line\"><span class=\"javascript\">            input.value = <span class=\"string\">&#x27;被点击了&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">//禁止点击</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">this</span>.disabled = <span class=\"literal\">true</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">//this 指向的是事件函数的调用者 btn</span></span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例：仿京东显示隐藏密码\"><a href=\"#案例：仿京东显示隐藏密码\" class=\"headerlink\" title=\"案例：仿京东显示隐藏密码\"></a>案例：仿京东显示隐藏密码</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"「4-4样式属性操作」\"><a href=\"#「4-4样式属性操作」\" class=\"headerlink\" title=\"「4.4样式属性操作」\"></a><strong>「4.4样式属性操作」</strong></h2><p>我们可以通过JS修改元素大小，颜色，位置等样式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">element.style.属性  <span class=\"comment\">//行内样式操作</span></span><br><span class=\"line\">element.className  <span class=\"comment\">//类名样式操作</span></span><br></pre></td></tr></table></figure>\n\n<p>注意：</p>\n<ol>\n<li>如果样式修改较多，可以采用操作类名方式更改元素样式</li>\n<li>class是一个保留字，因此使用className来操作类名属性</li>\n<li>className会直接更改元素类名，会覆盖原先的类名</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;first&quot;</span>&gt;</span>文本<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">//1.使用 element.style 修改样式，样式比较少或者功能简单情况下使用</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> test = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;div&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        test:onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">this</span>.style.backgroundColor = <span class=\"string\">&#x27;purple&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">this</span>.style.color = <span class=\"string\">&#x27;#fff&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">this</span>.style.fontSize = <span class=\"string\">&#x27;25px&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">this</span>.style.marginTop = <span class=\"string\">&#x27;100px&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">// 2.使用element.className更改元素样式，适用于样式较多或者功能复杂的情况</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">// 修改类名为change</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">// 3.如果想要保留原来的类名，可以使用多类名选择器</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">this</span>.className = <span class=\"string\">&#x27;change&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">this</span>.className = <span class=\"string\">&#x27;first change&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206141824210.png\"></p>\n<h2 id=\"「4-5排他思想」\"><a href=\"#「4-5排他思想」\" class=\"headerlink\" title=\"「4.5排他思想」\"></a><strong>「4.5排他思想」</strong></h2><p>如果有同一组元素，我们想要某一个元素实现某种样式，需要用到循环的排他思想算法</p>\n<ol>\n<li>给所有元素全部清除样式（干掉其他人）</li>\n<li>给当前元素设置样式（留下我自己）</li>\n<li>注意顺序不能颠倒，首先干掉其他人，在设置自己</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>按钮1<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>按钮2<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>按钮3<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>按钮4<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>按钮5<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">//1.获取所有按钮元素</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> btns = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;button&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// btns得到的是伪数组，里面的每一个元素 btn[i]</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; btns.length; i++) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            btns[i].onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"comment\">//(1)先把所有按钮颜色去掉</span></span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; btns.length; i++) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                    btns[i].style.backgroundColor = <span class=\"string\">&#x27;&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"comment\">//(2)然后让当前元素背景颜色为pink</span></span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"built_in\">this</span>.style.backgroundColor = <span class=\"string\">&#x27;pink&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">            </span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">//2.排他算法</span></span></span><br><span class=\"line\"><span class=\"javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例：百度换肤效果\"><a href=\"#案例：百度换肤效果\" class=\"headerlink\" title=\"案例：百度换肤效果\"></a>案例：百度换肤效果</h3><ul>\n<li>这个案例是给一组元素注册事件</li>\n<li>给四个小图片利用循环注册点击事件</li>\n<li>当我们点击了这个图片，让我们背景颜色改为当前的图片</li>\n<li>核心算法：把当前图片的src 路径取过来，给body 作为背景即可</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"></span></span><br><span class=\"line\"><span class=\"css\">        *&#123;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"css\">        &#125;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">body</span>&#123;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(<span class=\"string\">img/1.jpg</span>) no-repeat center top;</span></span><br><span class=\"line\"><span class=\"css\">        &#125; </span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">li</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"attribute\">list-style</span>: none;</span></span><br><span class=\"line\"><span class=\"css\">        &#125;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.baidu</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"attribute\">overflow</span>: none;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"attribute\">margin</span>: <span class=\"number\">100px</span> auto;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"attribute\">background-color</span>: <span class=\"number\">#fff</span>;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"attribute\">width</span>: <span class=\"number\">400px</span>;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"attribute\">padding-top</span>: <span class=\"number\">3px</span>;</span></span><br><span class=\"line\"><span class=\"css\">        &#125;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.baidu</span> <span class=\"selector-tag\">li</span>&#123;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"attribute\">float</span><span class=\"selector-pseudo\">:left</span>;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> <span class=\"number\">1px</span>;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"attribute\">cursor</span>: pointer;</span></span><br><span class=\"line\"><span class=\"css\">        &#125;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.baidu</span> <span class=\"selector-tag\">img</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span></span><br><span class=\"line\"><span class=\"css\">        &#125;</span></span><br><span class=\"line\"><span class=\"css\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;baidu&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;img/1.jpg&quot;</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;无图片1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;img/2.jpg&quot;</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;无图片2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;img/3.jpg&quot;</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;无图片3&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;img/4.jpg&quot;</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;无图片4&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">//1.获取元素</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> imgs = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;.baidu&#x27;</span>).querySelectorAll(<span class=\"string\">&#x27;img&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">//2.循环注册事件</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; imgs.length; i++) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            imgs[i].onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"comment\">// this.src就是我们点击图片的路径</span></span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"comment\">// console.log(this.src)</span></span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"comment\">// 把这个路径 this.src给body</span></span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"built_in\">document</span>.body.style.backgroundImage = <span class=\"string\">&#x27;url(&#x27;</span>+ <span class=\"built_in\">this</span>.src +<span class=\"string\">&#x27;)&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">\t</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span> </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例：表格隔行变色效果\"><a href=\"#案例：表格隔行变色效果\" class=\"headerlink\" title=\"案例：表格隔行变色效果\"></a>案例：表格隔行变色效果</h3><ul>\n<li>用到鼠标经过事件和鼠标离开事件</li>\n<li>核心思路：鼠标经过tr行，当前行变背景颜色，鼠标离开去掉当前背景颜色</li>\n<li>注意：第一行（thead里面的行）不需要变换颜色</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"></span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">table</span>&#123;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"attribute\">width</span>: <span class=\"number\">800px</span>;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"attribute\">margin</span>: <span class=\"number\">100px</span> auto;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"attribute\">text-align</span>: center;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"attribute\">border-collapse</span>: collapse;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"attribute\">font-size</span>: <span class=\"number\">14px</span>;</span></span><br><span class=\"line\"><span class=\"css\">        &#125;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">thead</span> <span class=\"selector-tag\">tr</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"attribute\">height</span>: <span class=\"number\">30px</span>;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"attribute\">background-color</span>: skyblue;</span></span><br><span class=\"line\"><span class=\"css\">        &#125;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">tbody</span> <span class=\"selector-tag\">tr</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"attribute\">height</span>: <span class=\"number\">30px</span>;</span></span><br><span class=\"line\"><span class=\"css\">        &#125;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">tbody</span> <span class=\"selector-tag\">td</span>&#123;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"attribute\">border-bottom</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#d7d7d7</span>;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"attribute\">font-size</span>: <span class=\"number\">12px</span>;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"attribute\">color</span>: blue;</span></span><br><span class=\"line\"><span class=\"css\">        &#125;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.bg</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"attribute\">background-color</span>: pink;</span></span><br><span class=\"line\"><span class=\"css\">        &#125;</span></span><br><span class=\"line\"><span class=\"css\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>代码<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>名称<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>最新公布净值<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>累计净值<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>前单位净值<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>净值增长率<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>003526<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>农银金辉<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>1.075<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>1.254<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>1.548<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>1.5556<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>003526<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>农银金辉<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>1.075<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>1.254<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>1.548<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>1.5556<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">// 1.获取元素 获得tbody里面的tr</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> trs = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;tbody&#x27;</span>).querySelectorAll(<span class=\"string\">&#x27;tr&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">// 2.利用循环注册事件</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; trs.length; i++) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 3.鼠标经过事件 onmouseover</span></span></span><br><span class=\"line\"><span class=\"javascript\">    trs[i].onmouseover = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">this</span>.className = <span class=\"string\">&#x27;bg&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">    trs[i].onmouseout = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 4.鼠标离开事件 onmouseout</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">this</span>.className = <span class=\"string\">&#x27;&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例：全选或反选\"><a href=\"#案例：全选或反选\" class=\"headerlink\" title=\"案例：全选或反选\"></a>案例：全选或反选</h3><ul>\n<li>全选或取消全选的做法：让下面的所有复选框的checked属性（选中状态）跟随全选按钮即可</li>\n<li>下面复选框需要全部选中，上面全选才能选中的做法：给下面所有复选框绑定点击事件，每次点击，都要循环查看下面所有复选框是否有未选中的，如果有一个未选中的，上面的全选就不选中</li>\n<li>可以设置一个变量，来控制全选是否选中</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"></span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">table</span>&#123;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"attribute\">width</span>: <span class=\"number\">800px</span>;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"attribute\">margin</span>: <span class=\"number\">100px</span> auto;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"attribute\">text-align</span>: center;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"attribute\">font-size</span>: <span class=\"number\">14px</span>;</span></span><br><span class=\"line\"><span class=\"css\">        \t&#125;</span></span><br><span class=\"line\"><span class=\"css\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;j_cbAll&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>商品<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>价格<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tbody</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;j_tb&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>iPhone6<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>8000<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>ipad<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>5000<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>watch<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>2000<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 1.全选和取消全选的方法，让下面所有复选框的checked属性跟随全选按钮即可</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 获取元素</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> j_cbAll = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;j_cbAll&#x27;</span>); <span class=\"comment\">//全选按钮</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> j_tb = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;j_tb&#x27;</span>).getElementsByTagName(<span class=\"string\">&#x27;input&#x27;</span>); <span class=\"comment\">//下面所有的复选框</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 注册事件</span></span></span><br><span class=\"line\"><span class=\"javascript\">    j_cbAll.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">//this.checked 可以得到复选框的选中状态，如果是true则是选中如果是false则未选中</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.checked);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; j_tb.length; i++) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            j_tb[i].checked = <span class=\"built_in\">this</span>.checked;</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 2.下面复选框需要全部选中，上面全选才能选中的做法</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; j_tb.length; i++) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        j_tb[i].onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">//flag控制全选按钮是否选中</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">var</span> flag = <span class=\"literal\">true</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">//每次点击复选框都要循环检查三个小按钮是否全被选中</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; j_tb.length; i++) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"keyword\">if</span>(!j_tb[i].checked) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                    flag = <span class=\"literal\">false</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">                    <span class=\"keyword\">break</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">            j_cbAll.checked = flag;</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span>    \t</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「4-6自定义属性操作」\"><a href=\"#「4-6自定义属性操作」\" class=\"headerlink\" title=\"「4.6自定义属性操作」\"></a><strong>「4.6自定义属性操作」</strong></h2><h3 id=\"1-获取元素属性\"><a href=\"#1-获取元素属性\" class=\"headerlink\" title=\"1.获取元素属性\"></a>1.获取元素属性</h3><ul>\n<li>element.属性;  获取内置属性值（元素本身自带的属性）</li>\n<li>element.getAttribute(‘属性’); 主要获取自定义属性</li>\n</ul>\n<h3 id=\"2-设置属性值\"><a href=\"#2-设置属性值\" class=\"headerlink\" title=\"2.设置属性值\"></a>2.设置属性值</h3><ul>\n<li>element.属性 = ‘值’ ;  设置内置属性值</li>\n<li>element.getAttribute(‘属性’, ‘值’);   主要设置自定义属性</li>\n</ul>\n<h3 id=\"3-移除属性\"><a href=\"#3-移除属性\" class=\"headerlink\" title=\"3.移除属性\"></a>3.移除属性</h3><ul>\n<li>element.removeAttribute(‘属性’); </li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;demo&quot;</span> <span class=\"attr\">index</span>=<span class=\"string\">&quot;1&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;nav&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;div&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 1.获取元素属性值</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// (1)element.属性</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(div.id);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// (2)element.getAttribute(&#x27;属性&#x27;)  &quot;get得到 Attribute属性 程序员自己添加的属性称为自定义属性 index&quot;</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(div.getAttribute(<span class=\"string\">&#x27;id&#x27;</span>));</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(div.getAttribute(<span class=\"string\">&#x27;index&#x27;</span>));</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 2.设置元素属性值</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// (1) element.属性 = &#x27;值&#x27;</span></span></span><br><span class=\"line\"><span class=\"javascript\">    div.id = <span class=\"string\">&#x27;test&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">    div.className = <span class=\"string\">&#x27;navs&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// (2) element.setAttribute(&#x27;属性&#x27;,&#x27;值&#x27;)  主要针对自定义属性</span></span></span><br><span class=\"line\"><span class=\"javascript\">    div.setAttribute(<span class=\"string\">&#x27;index&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    div.setAttribute(<span class=\"string\">&#x27;class&#x27;</span>,<span class=\"string\">&#x27;footer&#x27;</span>); <span class=\"comment\">//class特殊 这里写的事class 而不是className</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 3.移除属性 removeAttribute(&#x27;属性&#x27;)</span></span></span><br><span class=\"line\"><span class=\"javascript\">    div.removeAttribute(<span class=\"string\">&#x27;index&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「4-7-H5自定义属性」\"><a href=\"#「4-7-H5自定义属性」\" class=\"headerlink\" title=\"「4.7 H5自定义属性」\"></a><strong>「4.7 H5自定义属性」</strong></h2><p>自定义属性目的：为了保存并使用数据，有些数据可以保存到页面中而不用保存在数据库中</p>\n<p>有些自定义属性容易引起歧义，不容易判断是否是元素的内置属性还是自定义属性，所以H5新增了自定义属性</p>\n<h3 id=\"1-设置H5自定义属性\"><a href=\"#1-设置H5自定义属性\" class=\"headerlink\" title=\"1.设置H5自定义属性\"></a>1.设置H5自定义属性</h3><p>H5规定自定义属性必须以**data-**开头作为属性名并赋值</p>\n<h3 id=\"2-获取H5自定义属性\"><a href=\"#2-获取H5自定义属性\" class=\"headerlink\" title=\"2.获取H5自定义属性\"></a>2.获取H5自定义属性</h3><ol>\n<li>兼容性获取 element.getAttribute(‘data-index’)</li>\n<li>H5新增 element.dataset.index或者 element.dataset[‘index’]</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">getTime</span>=<span class=\"string\">&quot;20&quot;</span> <span class=\"attr\">data-index</span>=<span class=\"string\">&quot;2&quot;</span> <span class=\"attr\">data-list-name</span>=<span class=\"string\">&quot;andy&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// console.log(div.getTime);</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(div.getAttribute(<span class=\"string\">&#x27;getTime&#x27;</span>));</span></span><br><span class=\"line\"><span class=\"javascript\">    div.setAttribute(<span class=\"string\">&#x27;data-time&#x27;</span>,<span class=\"string\">&#x27;20&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(div.getAttribute(<span class=\"string\">&#x27;data-index&#x27;</span>));</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(div.getAttribute(<span class=\"string\">&#x27;data-list-name&#x27;</span>));</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// H5新增的获取自定义属性的方法 </span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(div.dataset);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(div.dataset.index);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(div.dataset[<span class=\"string\">&#x27;index&#x27;</span>]);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 如果自定义属性里面有多个-连接的单词，我们获取的时候采用驼峰命名法</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(div.dataset.listName);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(div.dataset[<span class=\"string\">&#x27;listName&#x27;</span>]);</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例：tab栏切换\"><a href=\"#案例：tab栏切换\" class=\"headerlink\" title=\"案例：tab栏切换\"></a>案例：tab栏切换</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"节点操作\"><a href=\"#节点操作\" class=\"headerlink\" title=\"节点操作\"></a>节点操作</h1><h2 id=\"「5-1为什么学节点操作」\"><a href=\"#「5-1为什么学节点操作」\" class=\"headerlink\" title=\"「5.1为什么学节点操作」\"></a><strong>「5.1为什么学节点操作」</strong></h2><p>获取元素通常使用两种方式</p>\n<ol>\n<li>利用DOM提供的方法获取元素</li>\n<li>利用节点层级关系获取元素</li>\n</ol>\n<h2 id=\"「5-2节点概述」\"><a href=\"#「5-2节点概述」\" class=\"headerlink\" title=\"「5.2节点概述」\"></a><strong>「5.2节点概述」</strong></h2><p>网页中所有内容都是节点（标签，属性，文本，注释等），在DOM中，节点使用node表示。</p>\n<p>HTML DOM树中所有节点均可通过JavaScript进行访问，所有HTML元素（节点）均可被修改，也可以创建或删除</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206211618584.png\"></p>\n<p>一般的，节点至少拥有nodeType（节点类型），nodeName（节点名称），nodeValue（节点值）这三个基本属性</p>\n<ul>\n<li>元素节点 nodeType 为1</li>\n<li>属性节点 nodeType 为2</li>\n<li>文本节点 nodeType 为3</li>\n</ul>\n<p>实际开发中，节点操作主要操作元素节点</p>\n<h2 id=\"「5-3节点层级」\"><a href=\"#「5-3节点层级」\" class=\"headerlink\" title=\"「5.3节点层级」\"></a><strong>「5.3节点层级」</strong></h2><p>利用DOM树可以把节点划分成不同的层级关系，常见的是父子兄层关系</p>\n<h3 id=\"1-父级节点\"><a href=\"#1-父级节点\" class=\"headerlink\" title=\"1.父级节点\"></a>1.父级节点</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node.parentNode</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>parentName 属性可返回某节点的父节点件，注意是最近的一个父节点</li>\n<li>如果指定的节点没有父节点则返回null</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;demo&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;erweima&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> erweima = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;.erweima&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//得到的是离元素最近的父级节点（亲爸爸） 找不到就返回null</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(erweima.parentNode);</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-子节点\"><a href=\"#2-子节点\" class=\"headerlink\" title=\"2.子节点\"></a>2.子节点</h3><ul>\n<li>标准</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span>parentNode.childNodes <span class=\"comment\">// 标准</span></span><br></pre></td></tr></table></figure>\n\n<p>返回包含指定节点的子节点的集合，该集合为即时更新的集合。</p>\n<p>注意：</p>\n<p>返回值里包含所有的节点，包括元素节点，文本节点等</p>\n<p>如果只要获取元素节点，需要专门处理，所以一般不提倡使用childNodes</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ul = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;ul&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; ul.childNodes.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ul.childNodes[i].nodeType = <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ul.childNodes[i] 是元素节点</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(ul.childNodes[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>非标准(重点)</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2.</span>parentNode.children <span class=\"comment\">// 非标准</span></span><br></pre></td></tr></table></figure>\n\n<p>parentNode.chileren 是一个只读属性，返回所有子元素节点，它只返回子元素节点，其余节点不返回（这是我们重点掌握的）</p>\n<p>虽然children是一个非标准，但得到各个浏览器支持</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">3.</span>parentNode.firstChild</span><br><span class=\"line\"><span class=\"number\">4.</span>parentNode.lastChild</span><br></pre></td></tr></table></figure>\n\n<p>返回第一个（最后一个）<strong>子节点</strong>，找不到返回null，同样返回的是所有节点</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5.parentNode.firstElementChild</span><br><span class=\"line\">6.parentNode.lastElementChild</span><br></pre></td></tr></table></figure>\n\n<p>返回的是第一个（最后一个）<strong>子元素节点</strong>，找不到返回null</p>\n<h4 id=\"案例：下拉菜单\"><a href=\"#案例：下拉菜单\" class=\"headerlink\" title=\"案例：下拉菜单\"></a>案例：下拉菜单</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-兄弟节点\"><a href=\"#3-兄弟节点\" class=\"headerlink\" title=\"3.兄弟节点\"></a>3.兄弟节点</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node.nextSibling</span><br><span class=\"line\">node.previousSibling</span><br></pre></td></tr></table></figure>\n\n<p>返回的是当前元素的下一个（上一个）<strong>兄弟节点</strong>，找不到则返回null, 是包含所有节点</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node.nextElementSibling</span><br><span class=\"line\">node.previousElementSibling</span><br></pre></td></tr></table></figure>\n\n<p>返回的是当前元素的上一个（下一个）<strong>兄弟元素节点</strong>，找不到返回null</p>\n<h2 id=\"「5-4创建与添加节点」\"><a href=\"#「5-4创建与添加节点」\" class=\"headerlink\" title=\"「5.4创建与添加节点」\"></a><strong>「5.4创建与添加节点」</strong></h2><h3 id=\"创建节点\"><a href=\"#创建节点\" class=\"headerlink\" title=\"创建节点\"></a>创建节点</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;tagName&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>document.createElement(‘tagName’)方法创建由tagName指定的HTML元素，因为这些元素原先不存在，是根据我们的需求动态产生的，所以也称之为动态创建元素节点</p>\n<h3 id=\"添加节点\"><a href=\"#添加节点\" class=\"headerlink\" title=\"添加节点\"></a>添加节点</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node.appendChild(child)</span><br></pre></td></tr></table></figure>\n\n<p>node.appendChild(child)方法将一个节点添加到指定父节点的子节点列表末尾。类似CSS的after伪元素</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node.inserBefore(child,指定元素)</span><br></pre></td></tr></table></figure>\n\n<p>node.inserBefore(child,指定元素)方法将一个节点添加到父节点的指定子节点的前面，类似CSS的before伪元素</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>123<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//1.创建节点元素</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> li = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;li&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//2.添加节点 node.appendChild(child)</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> ul = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;ul&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    ul.appendChild(li);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//3.添加节点 node.inserBefore(child,指定元素)</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> lili = documentquerySelector(<span class=\"string\">&#x27;li&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    ul.inserBefore(lili,ul.children[<span class=\"number\">0</span>]);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 我们想要在页面添加一个新的元素：1，创建元素 2，添加元素</span></span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例：简单版发布留言\"><a href=\"#案例：简单版发布留言\" class=\"headerlink\" title=\"案例：简单版发布留言\"></a>案例：简单版发布留言</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"「5-5删除节点」\"><a href=\"#「5-5删除节点」\" class=\"headerlink\" title=\"「5.5删除节点」\"></a><strong>「5.5删除节点」</strong></h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node.removeChild(child)</span><br></pre></td></tr></table></figure>\n\n<p>node.removeChild()方法从DOM中删除一个子节点，返回删除的节点</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例：删除留言板\"><a href=\"#案例：删除留言板\" class=\"headerlink\" title=\"案例：删除留言板\"></a>案例：删除留言板</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「5-6复制节点（克隆节点）」\"><a href=\"#「5-6复制节点（克隆节点）」\" class=\"headerlink\" title=\"「5.6复制节点（克隆节点）」\"></a><strong>「5.6复制节点（克隆节点）」</strong></h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node.cloneNode()</span><br></pre></td></tr></table></figure>\n\n<p>node.cloneNode() 方法返回调用该方法的节点的一个副本，也称为克隆节点或者复制节点</p>\n<p>注意：</p>\n<ol>\n<li>如果括号内参数为空或者false，则是浅拷贝，只克隆复制节点本身，不克隆里面的字节点</li>\n<li>如果括号内参数为true，则是深拷贝，会克隆复制节点本身以及里面所有的子节点</li>\n</ol>\n<h3 id=\"案例：动态生成表格\"><a href=\"#案例：动态生成表格\" class=\"headerlink\" title=\"案例：动态生成表格\"></a>案例：动态生成表格</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"「5-8三种动态创建元素的区别」\"><a href=\"#「5-8三种动态创建元素的区别」\" class=\"headerlink\" title=\"「5.8三种动态创建元素的区别」\"></a><strong>「5.8三种动态创建元素的区别」</strong></h2><ul>\n<li>document.write()</li>\n<li>element.innerHTML()</li>\n<li>document.createElement()</li>\n</ul>\n<p>区别：</p>\n<ol>\n<li>document.write() 是直接将内容写入页面的内容流，但是文档流执行完毕，它会导致页面全部重绘</li>\n<li>innerHTML() 是将内容写入某个DOM节点，不会导致页面全部重绘</li>\n<li>innerHTML() 创建多个元素效率更高（不要拼接字符串，采取数组的形式拼接），结构稍微复杂</li>\n<li>createElement() 创建多个元素效率稍微低一点，但是结构清晰</li>\n<li>不同浏览器下，innerHTML比createELement效率高</li>\n</ol>\n<h1 id=\"DOM重点核心\"><a href=\"#DOM重点核心\" class=\"headerlink\" title=\"DOM重点核心\"></a>DOM重点核心</h1><p>关于DOM操作，我们主要针对于元素的操作，主要有创建，增，删，改，查，属性操作，事件操作</p>\n<h2 id=\"「6-1创建」\"><a href=\"#「6-1创建」\" class=\"headerlink\" title=\"「6.1创建」\"></a><strong>「6.1创建」</strong></h2><ol>\n<li>document.write</li>\n<li>innerHTML</li>\n<li>createELement</li>\n</ol>\n<h2 id=\"「6-2增」\"><a href=\"#「6-2增」\" class=\"headerlink\" title=\"「6.2增」\"></a><strong>「6.2增」</strong></h2><ol>\n<li>appendChild</li>\n<li>insertBefore</li>\n</ol>\n<h2 id=\"「6-3删」\"><a href=\"#「6-3删」\" class=\"headerlink\" title=\"「6.3删」\"></a><strong>「6.3删」</strong></h2><ol>\n<li>removeChild</li>\n</ol>\n<h2 id=\"「6-4改」\"><a href=\"#「6-4改」\" class=\"headerlink\" title=\"「6.4改」\"></a><strong>「6.4改」</strong></h2><p>主要修改DOM的元素属性，DOM元素的内容，属性，表单的值等</p>\n<ol>\n<li>修改元素属性：src，href，title等</li>\n<li>修改普通元素内容：innerHTMl，innerText</li>\n<li>修改表单元素：value,type,disabled等</li>\n<li>修改元素样式：style,className</li>\n</ol>\n<h2 id=\"「6-5查」\"><a href=\"#「6-5查」\" class=\"headerlink\" title=\"「6.5查」\"></a><strong>「6.5查」</strong></h2><p>主要获取查询DOM元素</p>\n<ol>\n<li>DOM提供的API方法：getElementById, getElementByTagName, 古老用法不太推荐</li>\n<li>H5提供的新方法：querySelector, querySelectorAll  提倡使用</li>\n<li>利用节点操作获取元素：父（parentNode）, 子（children）, 兄（previousElementSibling, nextElementsibling） 推荐使用</li>\n</ol>\n<h2 id=\"「6-6属性操作」\"><a href=\"#「6-6属性操作」\" class=\"headerlink\" title=\"「6.6属性操作」\"></a><strong>「6.6属性操作」</strong></h2><p>主要针对自定义属性</p>\n<ol>\n<li>setAttribute: 设置DOM的属性值</li>\n<li>getAttribute: 得到DOM的属性值</li>\n<li>removeAttribute: 移除属性</li>\n</ol>\n<h2 id=\"「6-7事件操作」\"><a href=\"#「6-7事件操作」\" class=\"headerlink\" title=\"「6.7事件操作」\"></a><strong>「6.7事件操作」</strong></h2><p>给元素注册事件，采取 </p>\n<p>事件源. 事件类型 = 事件处理程序</p>\n"},{"title":"JavaScript内置对象","date":"2022-06-12T16:00:00.000Z","updated":"2022-06-13T16:00:00.000Z","keywords":null,"description":null,"top_img":"./img/bg20.jpg","cover":"./img/bg2.jpg","_content":"# 内置对象概述\n\nJavaScript 中的对象分为3种：**自定义对象** 、**内置对象**、 **浏览器对象**\n前面两种对象是JS基础内容，属于ECMAScript;第三个浏览器对象属于JS独有的，JS API讲解内置对象就是指 js语言自带的一些对象，这些对象供开发者使用，并提供了一些常用的或是最基本而非必要的功能(属性和方法),内置对象最大的优点就是帮助我们快速开发。\n\n- JavaScript提供了多个内置对象：Math，Data，Array，String等\n\n## **「查文档」**\n\n学习一个内置对象的使用，只要学会其常用成员的使用即可，我们可以通过查文档学习。\n`MDN:`https://developer.mozilla.org/zh-CN/\n\n# **Math对象**\n\n**「Math对象」**不是构造函数，它具有数学常数和函数的属性和方法，跟数学相关。\n\n| 属性. 方法名          | 功能                                   |\n| --------------------- | -------------------------------------- |\n| Math.PI               | 圆周率                                 |\n| Math.floor()          | 向下取整                               |\n| Math.ceil()           | 向上取整                               |\n| Math.round()          | 四舍五入，就近取整，注意-3.5 结果是 -3 |\n| Math.abs()            | 绝对值                                 |\n| Math.max()/Math.min() | 求最大值和最小值                       |\n| Math.random()         | 获取范围在【0，1） 内的随机数          |\n\n```js\n// Math数学对象不是一个构造函数，所以我们不需要new 来调用，而是直接使用里面的属性和方法即可\n//Math对象最大值\nconsole.log(Math.PI); // 一个属性 圆周率\nconsole.log(Math.max(1,99,3)); // 99\nconsole.log(Math.max(-1,-10)); // -1\nconsole.log(Math.max(1,99,'pink老师')); //NaN\nconsole.log(Math.max()); // -Infinity\n```\n\n## 案例：封装自己的数学对象\n\n```js\n// 利用对象封装自己的数学对象 里面有PI最大值和最小值\nvar myMath = {\n    PI: 3.1415926535,\n    max: function() {\n        max = arguments[0];\n        for (var i = 1; i < arguments.length; i++){\n            if (arguments[i] > max) {\n                max = arguments[i];\n            }\n        }\n        return max;\n    },\n    min: function() {\n        min = arguments[0];\n        for (var i = 1; i <= arguments - 1; i++) {\n            if (arguments[i] < min) {\n                min = arguments[i];\n            }\n        }\n        return min;\n    }\n}\nconsole.log(myMath.PI);\nconsole.log(myMath.max(1,3,6));\nconsole.log(myMath.min(3,5,1,5));\n```\n\n\n\n```js\n// Math绝对值和三个取整方法\n//1.绝对值方法\nconsole.log(Math.abs(1)); // 1\nconsole.log(Math.abs(-1)); // 1\nconsole.log(Math.abs('-1')); // 1 隐式转换，会把字符型转换为数字型\nconsole.log(Math.abs('pink')); // NaN\n//2.三个取整方法\n//(1)Math.floor() '地板' 向下取整，往最小了取值\nconsole.log(Math.floor(1.2)); //1\nconsole.log(Math.floor(1.8)); //1\n//(2)Math.ceil() '天花板' 向上取整，往最大了取值\nconsole.log(Math.ceil(1.2)); // 2\nconsole.log(Math.ceil(1.8)); // 2\n//(3)Math.round() 四舍五入 其他数字都是四舍五入，但是.5特殊，它往大了取\nconsole.log(Math.round(1.1)); // 1\nconsole.log(Math.round(1.5)); // 2\nconsole.log(Math.round(1.9)); // 2\nconsole.log(Math.round(-1.1)); // -1\nconsole.log(Math.round(-1.5)); // 这个结果是 -1\n```\n\n\n\n```js\n// 1.Math对象随机数方法， random() 返回一个随机小数 0 <= i <1\n// 2.这个方法里面不跟参数\n// 3.代码验证\nconsole.log(Math.random());\n// 4.两数之间随机数，包含两数\n// Math.floor(Math.random() * (max - min + 1)) + min;\nfunction getRandom(min,max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\nconsole.log(getRandom(1,10));\n// 5.随机点名\nvar arr = ['甲','乙','丙','丁','戊','己','庚'];\nconsole.log(arr[getRandom(0,arr.length - 1)]);\n```\n\n## 案例：猜数字游戏\n\n```js\n//猜数字游戏\n//1.随机生成一个1-10的整数，我们需要用到Math.random()方法\n//2.需要一直菜刀正确为止，所以要一直循环\n//3.while循环更简单\n//4.核心算法：使用if else if 多分支语句来判断大于雄安与等于\nfunction getRandom(min,max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\nvar random = getRandom(1,10);\nwhile (true) { //死循环\n    var num = prompt('你来猜？请输入1-10之间的一个数字');\n    if(num > random) {\n        alert('你猜大了');\n    } else if(num < random) {\n        alert('你猜小了')；\n    } else {\n        alert('猜对了');\n        break; // 退出整个循环结束程序\n    }\n}\n```\n\n# **Data对象**\n\n  Date 对象和 Math 对象不一样，Date是一个**构造函数**，所以使用时需要实例化后才能使用其中具体方法和属性。Date 实例用来处理日期和时间\n\n## **使用Date实例化日期对象**\n\n- 获取当前时间必须实例化\n- 获取指定时间的日期对象\n\n```js\n// Data() 日期对象，是一个构造函数，必须使用new来调用创建我们的日期对象\nvar arr = new Array(); // 创建一个数组对象\nvar obj = new Object(); // 创建一个对象实例\n\n// 1.使用Data 如果没有参数，返回系统当前时间\nvar data = new Data();\nconsole.log(data);\n\n// 2.参数常用的写法，数字型 2022,06,11 或者是字符串型 '2022-06-11 00:00:00'\nvar data1 = new Data(2022,06,11);\nconsole.log(data1); //返回的是7月，不是6月\nvar data2 = new Data('2022-06-11 00:00:00');\nconsole.log(data2);\n```\n\n## **日期格式化**\n\n获取日期的指定部分，通过日期对象里面的属性和方法手动得到这种格式\n\n- 使用Date实例的方法和属性\n- getMonth()方法获取到的月份 + 1 = 当月\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206111942811.png)\n\n格式化日期\n\n```js\n//日期格式化\n// 格式化日期 年 月 日\n      var date = new Date();\n      console.log(date.getFullYear()); //返回当前日期的年 2022\n      console.log(date.getMonth() + 1); //月份 返回的月份小1个月，记得月份加1呦\n      console.log(date.getDate()); //返回的是 几号\n      console.log(date.getDay); //周一返回的是1 周六返回的是6 周日返回的是0\n//我们写一个 2022年 6月 11日 星期六（当前日期）\n      var year = date.getFullYear();\n      var month = date.getMonth() + 1;\n      var dates = date.getDate();\n      var arr = ['星期日','星期一','星期二','星期三','星期四','星期五','星期六']；\n      var day = date.getDay();\n      console.log(\"今天是\" + year + \"年\" + month + \"月\" + dates + \"日\" + arr[day]);\n```\n\n\n\n```js\n//格式化日期 时分秒\n      var date = new Date();\n      console.log(date.getHours()); //时\n      console.log(date.getMinutes()); //分\n      console.log(date.getSeconds()); // 秒\n\n//封装一个函数返回当前的 时 分 秒 格式 08:08:08\n      function getTimer() {\n        var time = new Date();\n        var h = time.getHours();\n        var h = h < 10 ? \"0\" + h : h;\n\n        var m = time.getMinutes();\n        var m = m < 10 ? \"0\" + m : m;\n\n        var s = time.getSeconds();\n        var s = s < 10 ? \"0\" + s : s;\n        return h + \":\" + h + \":\" + s;\n      }\n      console.log(getTimer());\n```\n\n## 时间戳\n\n**获取Date日期总的毫秒数(时间戳)**\n基于1970年1月1日(世界标准世界)起的毫秒数\n\n```js\n  // 实例化Date对象\n  var now = new Date();\n  // 1. 通过 value() getTime()\n  console.log(now.valueOf());\n  console.log(now.getTime());\n  // 2. 简单写可以这么做 (最常用的)\n  var now = + new Date();   \n  // 3. HTML5中提供的方法，有兼容性问题\n  var now = Date.now();\n```\n\n### 案例：倒计时效果\n\n```js\n//  倒计时案例\n//  1. 核心算法：输入的时间减去现在的时间就是剩余的时间，即倒计时，但不能拿时分秒相减。\n//  2.用时间戳来做，用户输入时间总的毫秒数减去现在时间的总的毫秒数，\n//   得到的就是剩余时间的毫秒数\n//  3.把剩余时间总的毫秒数转换为天、时、分、秒  (时间戳转换时分秒)\n//    转换公式如下：\n//    d = parseInt(总秒数/60/60/24) // 计算天数\n//    h = parseInt(总秒数/60/60%24) // 计算小时\n//    m = parseInt(总秒数/60%60);   // 计算分钟  \n//    s = parseInt(总秒数%60);      // 计算当前秒数 \n\n      // 倒计时案例 封装函数实现\n      function countDown(time) {\n        var nowTime = +new Date(); // 返回的是当前时间总的毫秒数\n        var inputTime = +new Date(time); // 返回的是用户输入时间总的毫秒数\n        var times = (inputTime - nowTime) / 1000; // times是剩余时间总的秒数\n        var d = parseInt(times / 60 / 60 / 24); // 天\n        d = d < 10 ? \"0\" + d : d;\n        var h = parseInt((times / 60 / 60) % 24); //时\n        h = h < 10 ? \"0\" + h : h;\n        var m = parseInt((times / 60) % 60); // 分\n        m = m < 10 ? \"0\" + m : m;\n        var s = parseInt(times % 60); // 当前的秒\n        s = s < 10 ? \"0\" + s : s;\n        return d + \"天\" + h + \"时\" + m + \"分\" + s + \"秒\";\n      }\n      console.log(countDown(\"2022-10-1 18:00:00\"));\n      var date = new Date();\n      console.log(date);\n\n```\n\n# **数组对象**\n\n## **「创建数组的两种方式」**\n\n- **1. 字面量方式**`var arr = [1,\"test\",true];`\n- **2. 实例化数组对象 new Array()**`var arr = new Array();`\n\n**注意：**\n\n1. 上面代码中 arr 创建出的是一个空数组，如果需要使用构造函数Array创建非空数组，可以在创建数组时传入参数\n2. 如果只传入一个参数(数字)，则参数规定了数组的长度。\n3. 如果传入了多个参数，则参数称为数组的元素。\n\n```js\n// 1.利用数组字面量\nvar arr = [1,2,3];\nconsole.log(arr[0]);\n\n// 2.利用new Array()\nvar arr1 = new Array(); // 创建了一个空数组\nvar arr1 = new Array(2); // 这个2表示数组长度为2 里面有两个空的数组元素\nvar arr1 = new Array(2,3); // 等价于[2,3] 这样写表示 里面有两个数组元素 是2和1 \nconsole.log(arr1);\n```\n\n## **「检测是否为数组」**\n\n- **1. instanceof 运算符**\n\ninstanceof 可以判断一个对象是否是某个构造函数的实例\n\n```js\n  var arr = [1, 23];\n  var obj = {};\n  console.log(arr instanceof Array); // true\n  console.log(obj instanceof Array); // false\n```\n\n- **2. Array.isArray()**\n\nArray.isArray()用于判断一个对象是否为数组，isArray() 是 HTML5 中提供的方法\n\n```js\n  var arr = [1, 23];\n  var obj = {};\n  console.log(Array.isArray(arr));   // true\n  console.log(Array.isArray(obj));   // false\n```\n\n- **3. 注意 typeof用法**\n\ntypeof 用于判断变量的类型\n\n```js\n var arr = [1, 23];\n  console.log(typeof arr) // object 对象arr是构造函数的实例因此是对象数据类型\n```\n\n## **「添加删除数组元素的方法」**\n\n- 数组中有进行增加、删除元素的方法，部分方法如下表\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206121009271.png)\n\n```js\n// 添加删除素组元素的方法\n// 1.push() 在数组的末尾添加一个或者多个数组元素，\nvar arr = [1,2,3];\narr.push(4,'pink');\nconsole.log(arr.push(4,'pink'));\nconsole.log(arr);\n// (1)push可以给数组追加新的元素\n// (2)push() 参数直接写数组元素就可以\n// (3)push完毕后，返回的结果是 新数组的长度\n// (4)原数组也会发生变化\n\n// 2.unshiift是可以给数组前面追加新元素\nconsole.log(arr.unshift('red','blue'));\nconsole.log(arr);\n// 和push同理\n\n// 3.pop() 可以删除数组里最后一个元素\nconsole.log(arr.pop());\nconsole.log(arr);\n// (1)pop是可以删除数组最后一个元素，但一次只能删除一个元素\n// (2)pop() 没有参数\n// (3)pop完毕之后，返回的结果是删除的那个元素\n// (4)原数组也会发生变化\n\n// 4.shift() 可以删除数组的第一个元素\nconsole.log(arr.shift());\nconsole.log(arr);\n// 和pop同理\n```\n\n### 案例：筛选数组\n\n```js\n// 有一个包含工资的数组[1500,1200,2000,2100,1800]，要求把超过2000的删除，剩余的放到新数组里\nvar arr = [1500,1200,2000,2100,1800];\nvar newArr = [];\nfor (var i = 1; i < arr.length; i++) {\n    if (arr[i] < 2000) {\n        // newArr[newArr.length] = arr[i];\n        newArr.push(arr[i]);\n    }\n}\nconsole.log(newArr);\n```\n\n## **「数组排序」**\n\n数组中有对数组本身排序的方法，部分方法如下表\n\n| 方法名    | 说明                       | 是否修改原数组              |\n| --------- | -------------------------- | --------------------------- |\n| reverse() | 颠倒数组中元素顺序，无参数 | 会改变原来数组，返回新数组  |\n| sort()    | 对数组元素进行排序         | 会改变原来数组， 返回新数组 |\n\n```js\n// 数组排序\n// 1.翻转数组\nvar arr = ['pink','red','blue'];\narr.reverse();\nconsole.log(arr);\n\n// 2.数组排序(冒泡排序)\nvar arr1 = [13,4,77,1,77];\narr1.sort(function(a,b){\n    // return a - b; // 升序的顺序排列\n    return b - a; // 降序的顺序排列\n});\nconsole.log(arr1);\n```\n\n**注意：**\n\n- **sort方法需要传入参数(函数)来设置升序、降序排序**\n- 如果传入“function(a,b){ return a-b;}”，则为升序\n- 如果传入“function(a,b){ return b-a;}”，则为降序\n\n## **「数组索引方法」**\n\n- 数组中有获取数组指定元素索引值的方法，部分方法如下表\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206121049869.png)\n\n```js\n// 返回数组元素索引号的方法 indexOf(数组元素)  作用就是返回该数组元素的索引号 从前面开始查找\n// 它只返回第一个满足条件的索引号\n// 如果在数组里面找不到元素，则返回的结果是-1\n//var arr = ['red','green','blue','pink','blue'];\nvar arr = ['red','green','pink'];\nconsole.log(arr.indexOf('blue')); //-1\n// 返回数组元素索引号的方法 lastindexOf(数组元素)  作用就是返回该数组元素的索引号 从后面开始查找\nvar arr = ['red','green','blue','pink','blue'];\nconsole.log(arr.lastindexOf('blue')); // 4\n```\n\n### 案例：数组去重\n\n```js\n// 数组去重 ['c','a','z','a','x','a','x','c','b'] 要求去除重复元素\n// 1.目标：把旧数组里面不重复的元素取出来放进新数组，重复的元素只保留一个，放到新数组里去重\n// 2.核心算法：遍历旧数组，然后拿旧数组元素查询新数组，如果该元素在新数组里没有出现过，我们就添加，否则不添加\n// 3.如何知道该元素有没有存在？利用 新数组.indexOf(数组元素) 如果返回-1 ，说明数组里没有该元素\n// 封装一个去重函数 unique '独一无二的'\nfunction unique(arr) {\n    var newArr = [];\n    for (var i = 0; i < arr.length; i++) {\n        if (newArr.indexOf(arr[i]) === -1) {\n            newArr.push(arr[i]);     \n        }\n    }\n    return newArr;\n}\nvar demo = unique(['c','a','z','a','x','a','x','c','b']);\nconsole.log(demo);\n```\n\n## **「数组转换为字符串」**\n\n- 数组中有把数组转化为字符串的方法，部分方法如下表\n- 注意：join方法如果不传入参数，则按照 “ , ”拼接元素\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206121108168.png)\n\n```js\n// 1.toString(\n)    \nvar arr = [1, 2, 3, 4];\nvar str = arr.toString(); // 将数组转换为字符串   \nconsole.log(str); // 1,2,3,4\n\n// 2.join(分隔符)\nvar arr2 = [1, 2, 3, 4];\nvar str2 = arr2.join(\"|\");//按照键入字符将数组转换为字符串    \nconsole.log(str2); // 1|2|3|4\n```\n\n## **「其他方法」**\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206121111243.png)\n\n```js\n\n    var arr = [1, 2, 3, 4];\n    var arr2 = [5, 6, 7, 8];\n    var arr3 = arr.concat(arr2);\n    console.log(arr3); // [1,2,3,4,5,6,7,8]\n\n    // slice(begin,end) 是一种左闭右开区间 [1,3)\n    // 从索引1出开始截取，到索引3之前\n    var arr4 = arr.slice(1, 3);\n    console.log(arr4); // [2,3]\n\n    var arr5 = arr2.splice(0, 3);\n    console.log(arr5); // [5,6,7]\n    console.log(arr2); // [8]   splice()会影响原数组\n```\n\n\n\n# **字符串对象**\n\n## **「基本包装类型」**\n\n为了方便操作基本数据类型，JavaScript 还提供了三个特殊的引用类型：String、Number和 Boolean。\n  `基本包装类型就是把简单数据类型包装成为复杂数据类型`，这样基本数据类型就有了属性和方法。\n\n```js\n  // 下面代码有什么问题？\n  var str = 'andy';\n  console.log(str.length); // 4\n```\n\n  按道理基本数据类型是没有属性和方法的，而对象才有属性和方法，但上面代码却可以执行，这是因为 js 会把基本数据类型包装为复杂数据类型，其执行过程如下 ：\n\n```js\n  // 1. 生成临时变量，把简单类型包装为复杂数据类型\n  var temp = new String('andy');\n  // 2. 赋值给我们声明的字符变量\n  str = temp;\n  // 3. 销毁临时变量\n  temp = null;\n```\n\n## **「字符串的不可变」**\n\n- 指的是里面的值不可变，虽然看上去可以改变内容，但其实是地址变了，内存中新开辟了一个内存空间。\n- 当重新给字符串变量赋值的时候，变量之前保存的字符串不会被修改，依然在内存中重新给字符串赋值，会重新在内存中开辟空间，这个特点就是字符串的不可变。\n- 由于字符串的不可变，在**「大量拼接字符串」**的时候会有效率问题\n\n## **「根据字符返回位置」**\n\n字符串通过基本包装类型可以调用部分方法来操作字符串，以下是返回指定字符的位置的方法：\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206121130186.png)\n\n```js\n    var str = \"anndy\";\n    console.log(str.indexOf(\"d\")); // 3\n    //指定从索引号为4的地方开始查找字符\"d\"\n    console.log(str.indexOf(\"d\", 4)); // -1\n    \n    console.log(str.lastIndexOf(\"n\")); // 2\n```\n\n\n\n### 案例：查找字符串\"abcoefoxyozzopp\"中所有o出现的位置以及次数\n\n```js\n//核心算法：先查找第一个o出现的位置\n//然后 只要indexOf 返回的结果不是 -1 就继续往后查找\n//因为indexOf 只能查找到第一个，所以后面的查找，利用第二个参数，当前索引加1，从而继续查找\nvar str = \"oabcoefoxyozzopp\";\nvar index = str.indexOf(\"o\");\nvar num = 0;\nwhile (index !== -1) {\n    console.log(index);\n    num++;\n    index = str.indexOf(\"o\", index + 1);\n}\nconsole.log('o出现的次数是' + num);\n```\n\n## **「根据位置返回字符」**\n\n字符串通过基本包装类型可以调用部分方法来操作字符串，以下是根据位置返回指定位置上的字符：\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206121136083.png)\n\n\n\n```js\n      // 根据位置返回字符\n      // 1. charAt(index) 根据位置返回字符\n      var str = 'andy';\n      console.log(str.charAt(3)); // y\n      // 遍历所有的字符\n      for (var i = 0; i < str.length; i++) {\n          console.log(str.charAt(i));\n      } // a n d y\n      \n      // 2. charCodeAt(index)  \n      //返回相应索引号的字符ASCII值 目的： 判断用户按下了那个键 \n      console.log(str.charCodeAt(0)); // 97\n      // 3. str[index] H5 新增的\n      console.log(str[0]); // a\n```\n\n\n\n### 案例：判断一个字符串 'abcoefoxyozzopp' 中出现次数最多的字符，并统计其次数\n\n\n\n```js\n//核心算法：利用 charAt(） 遍历这个字符串\n//把每个字符都存储给对象， 如果对象没有该属性，就为1，如果存在了就 +1\n//遍历对象，得到最大值和该字符 注意：在遍历的过程中，把字符串中的每个字符作为对象的属性存储在对象中，对应的属性值是该字符出现的次数     \n\t var str = \"abcoefoxyozzopp\";\n      var o = {};\n      for (var i = 0; i < str.length; i++) {\n        var chars = str.charAt(i); // chars 是 字符串的每一个字符\n        if (o[chars]) {\n          // o[chars] 得到的是属性值\n          o[chars]++;\n        } else {\n          o[chars] = 1;\n        }\n      }\n      console.log(o);\n      // 2. 遍历对象\n      var max = 0;\n      var ch = \"\";\n      for (var k in o) {\n        // k 得到是 属性名\n        // o[k] 得到的是属性值\n        if (o[k] > max) {\n          max = o[k];\n          ch = k;\n        }\n      }\n      console.log(max);\n      console.log(\"最多的字符是\" + ch);\n```\n\n## **「字符串操作方法」**\n\n字符串通过基本包装类型可以调用部分方法来操作字符串，以下是部分操作方法：\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206122119052.png)\n\n```js\n      // 字符串操作方法\n      // 1. concat('字符串1','字符串2'....)\n      var str = 'andy';\n      console.log(str.concat('red')); // andyred\n\n      // 2. substr('截取的起始位置', '截取几个字符');\n      var str1 = '改革春风吹满地';\n      // 第一个2 是索引号的2 从第几个开始  第二个2 是取几个字符\n      console.log(str1.substr(2, 2)); // 春风\n```\n\n```js\n    // 1. 替换字符 replace('被替换的字符', '替换为的字符')  它只会替换第一个字符\n    var str = \"andyandy\";\n    console.log(str.replace(\"a\", \"b\")); // bndyandy\n    // 有一个字符串 'abcoefoxyozzopp'  要求把里面所有的 o 替换为 *\n    var str1 = \"abcoefoxyozzopp\";\n    while (str1.indexOf(\"o\") !== -1) {\n      str1 = str1.replace(\"o\", \"*\");\n    }\n    console.log(str1); // abc*ef*xy*zz*pp\n\n    // 2. 字符转换为数组 split('分隔符')    \n    // 前面我们学过 join 把数组转换为字符串\n    var str2 = \"red, pink, blue\";\n    console.log(str2.split(\",\")); //[red,pink,blue]\n    var str3 = \"red&pink&blue\";\n    console.log(str3.split(\"&\")); // [red,pink,blue]\n```\n\n","source":"_posts/前端/Javascript内置对象.md","raw":"---\ntitle: JavaScript内置对象\ndate: 2022-06-13\nupdated: 2022-06-14\ntags:\n  - 小白的前端之路\n  - JavaScript基础\ncategories: 前端开发\nkeywords: \ndescription: \ntop_img: ./img/bg20.jpg\ncover: ./img/bg2.jpg\n\n---\n# 内置对象概述\n\nJavaScript 中的对象分为3种：**自定义对象** 、**内置对象**、 **浏览器对象**\n前面两种对象是JS基础内容，属于ECMAScript;第三个浏览器对象属于JS独有的，JS API讲解内置对象就是指 js语言自带的一些对象，这些对象供开发者使用，并提供了一些常用的或是最基本而非必要的功能(属性和方法),内置对象最大的优点就是帮助我们快速开发。\n\n- JavaScript提供了多个内置对象：Math，Data，Array，String等\n\n## **「查文档」**\n\n学习一个内置对象的使用，只要学会其常用成员的使用即可，我们可以通过查文档学习。\n`MDN:`https://developer.mozilla.org/zh-CN/\n\n# **Math对象**\n\n**「Math对象」**不是构造函数，它具有数学常数和函数的属性和方法，跟数学相关。\n\n| 属性. 方法名          | 功能                                   |\n| --------------------- | -------------------------------------- |\n| Math.PI               | 圆周率                                 |\n| Math.floor()          | 向下取整                               |\n| Math.ceil()           | 向上取整                               |\n| Math.round()          | 四舍五入，就近取整，注意-3.5 结果是 -3 |\n| Math.abs()            | 绝对值                                 |\n| Math.max()/Math.min() | 求最大值和最小值                       |\n| Math.random()         | 获取范围在【0，1） 内的随机数          |\n\n```js\n// Math数学对象不是一个构造函数，所以我们不需要new 来调用，而是直接使用里面的属性和方法即可\n//Math对象最大值\nconsole.log(Math.PI); // 一个属性 圆周率\nconsole.log(Math.max(1,99,3)); // 99\nconsole.log(Math.max(-1,-10)); // -1\nconsole.log(Math.max(1,99,'pink老师')); //NaN\nconsole.log(Math.max()); // -Infinity\n```\n\n## 案例：封装自己的数学对象\n\n```js\n// 利用对象封装自己的数学对象 里面有PI最大值和最小值\nvar myMath = {\n    PI: 3.1415926535,\n    max: function() {\n        max = arguments[0];\n        for (var i = 1; i < arguments.length; i++){\n            if (arguments[i] > max) {\n                max = arguments[i];\n            }\n        }\n        return max;\n    },\n    min: function() {\n        min = arguments[0];\n        for (var i = 1; i <= arguments - 1; i++) {\n            if (arguments[i] < min) {\n                min = arguments[i];\n            }\n        }\n        return min;\n    }\n}\nconsole.log(myMath.PI);\nconsole.log(myMath.max(1,3,6));\nconsole.log(myMath.min(3,5,1,5));\n```\n\n\n\n```js\n// Math绝对值和三个取整方法\n//1.绝对值方法\nconsole.log(Math.abs(1)); // 1\nconsole.log(Math.abs(-1)); // 1\nconsole.log(Math.abs('-1')); // 1 隐式转换，会把字符型转换为数字型\nconsole.log(Math.abs('pink')); // NaN\n//2.三个取整方法\n//(1)Math.floor() '地板' 向下取整，往最小了取值\nconsole.log(Math.floor(1.2)); //1\nconsole.log(Math.floor(1.8)); //1\n//(2)Math.ceil() '天花板' 向上取整，往最大了取值\nconsole.log(Math.ceil(1.2)); // 2\nconsole.log(Math.ceil(1.8)); // 2\n//(3)Math.round() 四舍五入 其他数字都是四舍五入，但是.5特殊，它往大了取\nconsole.log(Math.round(1.1)); // 1\nconsole.log(Math.round(1.5)); // 2\nconsole.log(Math.round(1.9)); // 2\nconsole.log(Math.round(-1.1)); // -1\nconsole.log(Math.round(-1.5)); // 这个结果是 -1\n```\n\n\n\n```js\n// 1.Math对象随机数方法， random() 返回一个随机小数 0 <= i <1\n// 2.这个方法里面不跟参数\n// 3.代码验证\nconsole.log(Math.random());\n// 4.两数之间随机数，包含两数\n// Math.floor(Math.random() * (max - min + 1)) + min;\nfunction getRandom(min,max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\nconsole.log(getRandom(1,10));\n// 5.随机点名\nvar arr = ['甲','乙','丙','丁','戊','己','庚'];\nconsole.log(arr[getRandom(0,arr.length - 1)]);\n```\n\n## 案例：猜数字游戏\n\n```js\n//猜数字游戏\n//1.随机生成一个1-10的整数，我们需要用到Math.random()方法\n//2.需要一直菜刀正确为止，所以要一直循环\n//3.while循环更简单\n//4.核心算法：使用if else if 多分支语句来判断大于雄安与等于\nfunction getRandom(min,max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\nvar random = getRandom(1,10);\nwhile (true) { //死循环\n    var num = prompt('你来猜？请输入1-10之间的一个数字');\n    if(num > random) {\n        alert('你猜大了');\n    } else if(num < random) {\n        alert('你猜小了')；\n    } else {\n        alert('猜对了');\n        break; // 退出整个循环结束程序\n    }\n}\n```\n\n# **Data对象**\n\n  Date 对象和 Math 对象不一样，Date是一个**构造函数**，所以使用时需要实例化后才能使用其中具体方法和属性。Date 实例用来处理日期和时间\n\n## **使用Date实例化日期对象**\n\n- 获取当前时间必须实例化\n- 获取指定时间的日期对象\n\n```js\n// Data() 日期对象，是一个构造函数，必须使用new来调用创建我们的日期对象\nvar arr = new Array(); // 创建一个数组对象\nvar obj = new Object(); // 创建一个对象实例\n\n// 1.使用Data 如果没有参数，返回系统当前时间\nvar data = new Data();\nconsole.log(data);\n\n// 2.参数常用的写法，数字型 2022,06,11 或者是字符串型 '2022-06-11 00:00:00'\nvar data1 = new Data(2022,06,11);\nconsole.log(data1); //返回的是7月，不是6月\nvar data2 = new Data('2022-06-11 00:00:00');\nconsole.log(data2);\n```\n\n## **日期格式化**\n\n获取日期的指定部分，通过日期对象里面的属性和方法手动得到这种格式\n\n- 使用Date实例的方法和属性\n- getMonth()方法获取到的月份 + 1 = 当月\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206111942811.png)\n\n格式化日期\n\n```js\n//日期格式化\n// 格式化日期 年 月 日\n      var date = new Date();\n      console.log(date.getFullYear()); //返回当前日期的年 2022\n      console.log(date.getMonth() + 1); //月份 返回的月份小1个月，记得月份加1呦\n      console.log(date.getDate()); //返回的是 几号\n      console.log(date.getDay); //周一返回的是1 周六返回的是6 周日返回的是0\n//我们写一个 2022年 6月 11日 星期六（当前日期）\n      var year = date.getFullYear();\n      var month = date.getMonth() + 1;\n      var dates = date.getDate();\n      var arr = ['星期日','星期一','星期二','星期三','星期四','星期五','星期六']；\n      var day = date.getDay();\n      console.log(\"今天是\" + year + \"年\" + month + \"月\" + dates + \"日\" + arr[day]);\n```\n\n\n\n```js\n//格式化日期 时分秒\n      var date = new Date();\n      console.log(date.getHours()); //时\n      console.log(date.getMinutes()); //分\n      console.log(date.getSeconds()); // 秒\n\n//封装一个函数返回当前的 时 分 秒 格式 08:08:08\n      function getTimer() {\n        var time = new Date();\n        var h = time.getHours();\n        var h = h < 10 ? \"0\" + h : h;\n\n        var m = time.getMinutes();\n        var m = m < 10 ? \"0\" + m : m;\n\n        var s = time.getSeconds();\n        var s = s < 10 ? \"0\" + s : s;\n        return h + \":\" + h + \":\" + s;\n      }\n      console.log(getTimer());\n```\n\n## 时间戳\n\n**获取Date日期总的毫秒数(时间戳)**\n基于1970年1月1日(世界标准世界)起的毫秒数\n\n```js\n  // 实例化Date对象\n  var now = new Date();\n  // 1. 通过 value() getTime()\n  console.log(now.valueOf());\n  console.log(now.getTime());\n  // 2. 简单写可以这么做 (最常用的)\n  var now = + new Date();   \n  // 3. HTML5中提供的方法，有兼容性问题\n  var now = Date.now();\n```\n\n### 案例：倒计时效果\n\n```js\n//  倒计时案例\n//  1. 核心算法：输入的时间减去现在的时间就是剩余的时间，即倒计时，但不能拿时分秒相减。\n//  2.用时间戳来做，用户输入时间总的毫秒数减去现在时间的总的毫秒数，\n//   得到的就是剩余时间的毫秒数\n//  3.把剩余时间总的毫秒数转换为天、时、分、秒  (时间戳转换时分秒)\n//    转换公式如下：\n//    d = parseInt(总秒数/60/60/24) // 计算天数\n//    h = parseInt(总秒数/60/60%24) // 计算小时\n//    m = parseInt(总秒数/60%60);   // 计算分钟  \n//    s = parseInt(总秒数%60);      // 计算当前秒数 \n\n      // 倒计时案例 封装函数实现\n      function countDown(time) {\n        var nowTime = +new Date(); // 返回的是当前时间总的毫秒数\n        var inputTime = +new Date(time); // 返回的是用户输入时间总的毫秒数\n        var times = (inputTime - nowTime) / 1000; // times是剩余时间总的秒数\n        var d = parseInt(times / 60 / 60 / 24); // 天\n        d = d < 10 ? \"0\" + d : d;\n        var h = parseInt((times / 60 / 60) % 24); //时\n        h = h < 10 ? \"0\" + h : h;\n        var m = parseInt((times / 60) % 60); // 分\n        m = m < 10 ? \"0\" + m : m;\n        var s = parseInt(times % 60); // 当前的秒\n        s = s < 10 ? \"0\" + s : s;\n        return d + \"天\" + h + \"时\" + m + \"分\" + s + \"秒\";\n      }\n      console.log(countDown(\"2022-10-1 18:00:00\"));\n      var date = new Date();\n      console.log(date);\n\n```\n\n# **数组对象**\n\n## **「创建数组的两种方式」**\n\n- **1. 字面量方式**`var arr = [1,\"test\",true];`\n- **2. 实例化数组对象 new Array()**`var arr = new Array();`\n\n**注意：**\n\n1. 上面代码中 arr 创建出的是一个空数组，如果需要使用构造函数Array创建非空数组，可以在创建数组时传入参数\n2. 如果只传入一个参数(数字)，则参数规定了数组的长度。\n3. 如果传入了多个参数，则参数称为数组的元素。\n\n```js\n// 1.利用数组字面量\nvar arr = [1,2,3];\nconsole.log(arr[0]);\n\n// 2.利用new Array()\nvar arr1 = new Array(); // 创建了一个空数组\nvar arr1 = new Array(2); // 这个2表示数组长度为2 里面有两个空的数组元素\nvar arr1 = new Array(2,3); // 等价于[2,3] 这样写表示 里面有两个数组元素 是2和1 \nconsole.log(arr1);\n```\n\n## **「检测是否为数组」**\n\n- **1. instanceof 运算符**\n\ninstanceof 可以判断一个对象是否是某个构造函数的实例\n\n```js\n  var arr = [1, 23];\n  var obj = {};\n  console.log(arr instanceof Array); // true\n  console.log(obj instanceof Array); // false\n```\n\n- **2. Array.isArray()**\n\nArray.isArray()用于判断一个对象是否为数组，isArray() 是 HTML5 中提供的方法\n\n```js\n  var arr = [1, 23];\n  var obj = {};\n  console.log(Array.isArray(arr));   // true\n  console.log(Array.isArray(obj));   // false\n```\n\n- **3. 注意 typeof用法**\n\ntypeof 用于判断变量的类型\n\n```js\n var arr = [1, 23];\n  console.log(typeof arr) // object 对象arr是构造函数的实例因此是对象数据类型\n```\n\n## **「添加删除数组元素的方法」**\n\n- 数组中有进行增加、删除元素的方法，部分方法如下表\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206121009271.png)\n\n```js\n// 添加删除素组元素的方法\n// 1.push() 在数组的末尾添加一个或者多个数组元素，\nvar arr = [1,2,3];\narr.push(4,'pink');\nconsole.log(arr.push(4,'pink'));\nconsole.log(arr);\n// (1)push可以给数组追加新的元素\n// (2)push() 参数直接写数组元素就可以\n// (3)push完毕后，返回的结果是 新数组的长度\n// (4)原数组也会发生变化\n\n// 2.unshiift是可以给数组前面追加新元素\nconsole.log(arr.unshift('red','blue'));\nconsole.log(arr);\n// 和push同理\n\n// 3.pop() 可以删除数组里最后一个元素\nconsole.log(arr.pop());\nconsole.log(arr);\n// (1)pop是可以删除数组最后一个元素，但一次只能删除一个元素\n// (2)pop() 没有参数\n// (3)pop完毕之后，返回的结果是删除的那个元素\n// (4)原数组也会发生变化\n\n// 4.shift() 可以删除数组的第一个元素\nconsole.log(arr.shift());\nconsole.log(arr);\n// 和pop同理\n```\n\n### 案例：筛选数组\n\n```js\n// 有一个包含工资的数组[1500,1200,2000,2100,1800]，要求把超过2000的删除，剩余的放到新数组里\nvar arr = [1500,1200,2000,2100,1800];\nvar newArr = [];\nfor (var i = 1; i < arr.length; i++) {\n    if (arr[i] < 2000) {\n        // newArr[newArr.length] = arr[i];\n        newArr.push(arr[i]);\n    }\n}\nconsole.log(newArr);\n```\n\n## **「数组排序」**\n\n数组中有对数组本身排序的方法，部分方法如下表\n\n| 方法名    | 说明                       | 是否修改原数组              |\n| --------- | -------------------------- | --------------------------- |\n| reverse() | 颠倒数组中元素顺序，无参数 | 会改变原来数组，返回新数组  |\n| sort()    | 对数组元素进行排序         | 会改变原来数组， 返回新数组 |\n\n```js\n// 数组排序\n// 1.翻转数组\nvar arr = ['pink','red','blue'];\narr.reverse();\nconsole.log(arr);\n\n// 2.数组排序(冒泡排序)\nvar arr1 = [13,4,77,1,77];\narr1.sort(function(a,b){\n    // return a - b; // 升序的顺序排列\n    return b - a; // 降序的顺序排列\n});\nconsole.log(arr1);\n```\n\n**注意：**\n\n- **sort方法需要传入参数(函数)来设置升序、降序排序**\n- 如果传入“function(a,b){ return a-b;}”，则为升序\n- 如果传入“function(a,b){ return b-a;}”，则为降序\n\n## **「数组索引方法」**\n\n- 数组中有获取数组指定元素索引值的方法，部分方法如下表\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206121049869.png)\n\n```js\n// 返回数组元素索引号的方法 indexOf(数组元素)  作用就是返回该数组元素的索引号 从前面开始查找\n// 它只返回第一个满足条件的索引号\n// 如果在数组里面找不到元素，则返回的结果是-1\n//var arr = ['red','green','blue','pink','blue'];\nvar arr = ['red','green','pink'];\nconsole.log(arr.indexOf('blue')); //-1\n// 返回数组元素索引号的方法 lastindexOf(数组元素)  作用就是返回该数组元素的索引号 从后面开始查找\nvar arr = ['red','green','blue','pink','blue'];\nconsole.log(arr.lastindexOf('blue')); // 4\n```\n\n### 案例：数组去重\n\n```js\n// 数组去重 ['c','a','z','a','x','a','x','c','b'] 要求去除重复元素\n// 1.目标：把旧数组里面不重复的元素取出来放进新数组，重复的元素只保留一个，放到新数组里去重\n// 2.核心算法：遍历旧数组，然后拿旧数组元素查询新数组，如果该元素在新数组里没有出现过，我们就添加，否则不添加\n// 3.如何知道该元素有没有存在？利用 新数组.indexOf(数组元素) 如果返回-1 ，说明数组里没有该元素\n// 封装一个去重函数 unique '独一无二的'\nfunction unique(arr) {\n    var newArr = [];\n    for (var i = 0; i < arr.length; i++) {\n        if (newArr.indexOf(arr[i]) === -1) {\n            newArr.push(arr[i]);     \n        }\n    }\n    return newArr;\n}\nvar demo = unique(['c','a','z','a','x','a','x','c','b']);\nconsole.log(demo);\n```\n\n## **「数组转换为字符串」**\n\n- 数组中有把数组转化为字符串的方法，部分方法如下表\n- 注意：join方法如果不传入参数，则按照 “ , ”拼接元素\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206121108168.png)\n\n```js\n// 1.toString(\n)    \nvar arr = [1, 2, 3, 4];\nvar str = arr.toString(); // 将数组转换为字符串   \nconsole.log(str); // 1,2,3,4\n\n// 2.join(分隔符)\nvar arr2 = [1, 2, 3, 4];\nvar str2 = arr2.join(\"|\");//按照键入字符将数组转换为字符串    \nconsole.log(str2); // 1|2|3|4\n```\n\n## **「其他方法」**\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206121111243.png)\n\n```js\n\n    var arr = [1, 2, 3, 4];\n    var arr2 = [5, 6, 7, 8];\n    var arr3 = arr.concat(arr2);\n    console.log(arr3); // [1,2,3,4,5,6,7,8]\n\n    // slice(begin,end) 是一种左闭右开区间 [1,3)\n    // 从索引1出开始截取，到索引3之前\n    var arr4 = arr.slice(1, 3);\n    console.log(arr4); // [2,3]\n\n    var arr5 = arr2.splice(0, 3);\n    console.log(arr5); // [5,6,7]\n    console.log(arr2); // [8]   splice()会影响原数组\n```\n\n\n\n# **字符串对象**\n\n## **「基本包装类型」**\n\n为了方便操作基本数据类型，JavaScript 还提供了三个特殊的引用类型：String、Number和 Boolean。\n  `基本包装类型就是把简单数据类型包装成为复杂数据类型`，这样基本数据类型就有了属性和方法。\n\n```js\n  // 下面代码有什么问题？\n  var str = 'andy';\n  console.log(str.length); // 4\n```\n\n  按道理基本数据类型是没有属性和方法的，而对象才有属性和方法，但上面代码却可以执行，这是因为 js 会把基本数据类型包装为复杂数据类型，其执行过程如下 ：\n\n```js\n  // 1. 生成临时变量，把简单类型包装为复杂数据类型\n  var temp = new String('andy');\n  // 2. 赋值给我们声明的字符变量\n  str = temp;\n  // 3. 销毁临时变量\n  temp = null;\n```\n\n## **「字符串的不可变」**\n\n- 指的是里面的值不可变，虽然看上去可以改变内容，但其实是地址变了，内存中新开辟了一个内存空间。\n- 当重新给字符串变量赋值的时候，变量之前保存的字符串不会被修改，依然在内存中重新给字符串赋值，会重新在内存中开辟空间，这个特点就是字符串的不可变。\n- 由于字符串的不可变，在**「大量拼接字符串」**的时候会有效率问题\n\n## **「根据字符返回位置」**\n\n字符串通过基本包装类型可以调用部分方法来操作字符串，以下是返回指定字符的位置的方法：\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206121130186.png)\n\n```js\n    var str = \"anndy\";\n    console.log(str.indexOf(\"d\")); // 3\n    //指定从索引号为4的地方开始查找字符\"d\"\n    console.log(str.indexOf(\"d\", 4)); // -1\n    \n    console.log(str.lastIndexOf(\"n\")); // 2\n```\n\n\n\n### 案例：查找字符串\"abcoefoxyozzopp\"中所有o出现的位置以及次数\n\n```js\n//核心算法：先查找第一个o出现的位置\n//然后 只要indexOf 返回的结果不是 -1 就继续往后查找\n//因为indexOf 只能查找到第一个，所以后面的查找，利用第二个参数，当前索引加1，从而继续查找\nvar str = \"oabcoefoxyozzopp\";\nvar index = str.indexOf(\"o\");\nvar num = 0;\nwhile (index !== -1) {\n    console.log(index);\n    num++;\n    index = str.indexOf(\"o\", index + 1);\n}\nconsole.log('o出现的次数是' + num);\n```\n\n## **「根据位置返回字符」**\n\n字符串通过基本包装类型可以调用部分方法来操作字符串，以下是根据位置返回指定位置上的字符：\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206121136083.png)\n\n\n\n```js\n      // 根据位置返回字符\n      // 1. charAt(index) 根据位置返回字符\n      var str = 'andy';\n      console.log(str.charAt(3)); // y\n      // 遍历所有的字符\n      for (var i = 0; i < str.length; i++) {\n          console.log(str.charAt(i));\n      } // a n d y\n      \n      // 2. charCodeAt(index)  \n      //返回相应索引号的字符ASCII值 目的： 判断用户按下了那个键 \n      console.log(str.charCodeAt(0)); // 97\n      // 3. str[index] H5 新增的\n      console.log(str[0]); // a\n```\n\n\n\n### 案例：判断一个字符串 'abcoefoxyozzopp' 中出现次数最多的字符，并统计其次数\n\n\n\n```js\n//核心算法：利用 charAt(） 遍历这个字符串\n//把每个字符都存储给对象， 如果对象没有该属性，就为1，如果存在了就 +1\n//遍历对象，得到最大值和该字符 注意：在遍历的过程中，把字符串中的每个字符作为对象的属性存储在对象中，对应的属性值是该字符出现的次数     \n\t var str = \"abcoefoxyozzopp\";\n      var o = {};\n      for (var i = 0; i < str.length; i++) {\n        var chars = str.charAt(i); // chars 是 字符串的每一个字符\n        if (o[chars]) {\n          // o[chars] 得到的是属性值\n          o[chars]++;\n        } else {\n          o[chars] = 1;\n        }\n      }\n      console.log(o);\n      // 2. 遍历对象\n      var max = 0;\n      var ch = \"\";\n      for (var k in o) {\n        // k 得到是 属性名\n        // o[k] 得到的是属性值\n        if (o[k] > max) {\n          max = o[k];\n          ch = k;\n        }\n      }\n      console.log(max);\n      console.log(\"最多的字符是\" + ch);\n```\n\n## **「字符串操作方法」**\n\n字符串通过基本包装类型可以调用部分方法来操作字符串，以下是部分操作方法：\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206122119052.png)\n\n```js\n      // 字符串操作方法\n      // 1. concat('字符串1','字符串2'....)\n      var str = 'andy';\n      console.log(str.concat('red')); // andyred\n\n      // 2. substr('截取的起始位置', '截取几个字符');\n      var str1 = '改革春风吹满地';\n      // 第一个2 是索引号的2 从第几个开始  第二个2 是取几个字符\n      console.log(str1.substr(2, 2)); // 春风\n```\n\n```js\n    // 1. 替换字符 replace('被替换的字符', '替换为的字符')  它只会替换第一个字符\n    var str = \"andyandy\";\n    console.log(str.replace(\"a\", \"b\")); // bndyandy\n    // 有一个字符串 'abcoefoxyozzopp'  要求把里面所有的 o 替换为 *\n    var str1 = \"abcoefoxyozzopp\";\n    while (str1.indexOf(\"o\") !== -1) {\n      str1 = str1.replace(\"o\", \"*\");\n    }\n    console.log(str1); // abc*ef*xy*zz*pp\n\n    // 2. 字符转换为数组 split('分隔符')    \n    // 前面我们学过 join 把数组转换为字符串\n    var str2 = \"red, pink, blue\";\n    console.log(str2.split(\",\")); //[red,pink,blue]\n    var str3 = \"red&pink&blue\";\n    console.log(str3.split(\"&\")); // [red,pink,blue]\n```\n\n","slug":"前端/Javascript内置对象","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cl5db79k60010ywtuaoa78oes","content":"<h1 id=\"内置对象概述\"><a href=\"#内置对象概述\" class=\"headerlink\" title=\"内置对象概述\"></a>内置对象概述</h1><p>JavaScript 中的对象分为3种：<strong>自定义对象</strong> 、<strong>内置对象</strong>、 <strong>浏览器对象</strong><br>前面两种对象是JS基础内容，属于ECMAScript;第三个浏览器对象属于JS独有的，JS API讲解内置对象就是指 js语言自带的一些对象，这些对象供开发者使用，并提供了一些常用的或是最基本而非必要的功能(属性和方法),内置对象最大的优点就是帮助我们快速开发。</p>\n<ul>\n<li>JavaScript提供了多个内置对象：Math，Data，Array，String等</li>\n</ul>\n<h2 id=\"「查文档」\"><a href=\"#「查文档」\" class=\"headerlink\" title=\"「查文档」\"></a><strong>「查文档」</strong></h2><p>学习一个内置对象的使用，只要学会其常用成员的使用即可，我们可以通过查文档学习。<br><code>MDN:</code><a href=\"https://developer.mozilla.org/zh-CN/\">https://developer.mozilla.org/zh-CN/</a></p>\n<h1 id=\"Math对象\"><a href=\"#Math对象\" class=\"headerlink\" title=\"Math对象\"></a><strong>Math对象</strong></h1><p><strong>「Math对象」</strong>不是构造函数，它具有数学常数和函数的属性和方法，跟数学相关。</p>\n<table>\n<thead>\n<tr>\n<th>属性. 方法名</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Math.PI</td>\n<td>圆周率</td>\n</tr>\n<tr>\n<td>Math.floor()</td>\n<td>向下取整</td>\n</tr>\n<tr>\n<td>Math.ceil()</td>\n<td>向上取整</td>\n</tr>\n<tr>\n<td>Math.round()</td>\n<td>四舍五入，就近取整，注意-3.5 结果是 -3</td>\n</tr>\n<tr>\n<td>Math.abs()</td>\n<td>绝对值</td>\n</tr>\n<tr>\n<td>Math.max()/Math.min()</td>\n<td>求最大值和最小值</td>\n</tr>\n<tr>\n<td>Math.random()</td>\n<td>获取范围在【0，1） 内的随机数</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Math数学对象不是一个构造函数，所以我们不需要new 来调用，而是直接使用里面的属性和方法即可</span></span><br><span class=\"line\"><span class=\"comment\">//Math对象最大值</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.PI); <span class=\"comment\">// 一个属性 圆周率</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.max(<span class=\"number\">1</span>,<span class=\"number\">99</span>,<span class=\"number\">3</span>)); <span class=\"comment\">// 99</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.max(-<span class=\"number\">1</span>,-<span class=\"number\">10</span>)); <span class=\"comment\">// -1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.max(<span class=\"number\">1</span>,<span class=\"number\">99</span>,<span class=\"string\">&#x27;pink老师&#x27;</span>)); <span class=\"comment\">//NaN</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.max()); <span class=\"comment\">// -Infinity</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"案例：封装自己的数学对象\"><a href=\"#案例：封装自己的数学对象\" class=\"headerlink\" title=\"案例：封装自己的数学对象\"></a>案例：封装自己的数学对象</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 利用对象封装自己的数学对象 里面有PI最大值和最小值</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> myMath = &#123;</span><br><span class=\"line\">    <span class=\"attr\">PI</span>: <span class=\"number\">3.1415926535</span>,</span><br><span class=\"line\">    <span class=\"attr\">max</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        max = <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"built_in\">arguments</span>.length; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>[i] &gt; max) &#123;</span><br><span class=\"line\">                max = <span class=\"built_in\">arguments</span>[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">min</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        min = <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"built_in\">arguments</span> - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>[i] &lt; min) &#123;</span><br><span class=\"line\">                min = <span class=\"built_in\">arguments</span>[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> min;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myMath.PI);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myMath.max(<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">6</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myMath.min(<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">1</span>,<span class=\"number\">5</span>));</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Math绝对值和三个取整方法</span></span><br><span class=\"line\"><span class=\"comment\">//1.绝对值方法</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.abs(<span class=\"number\">1</span>)); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.abs(-<span class=\"number\">1</span>)); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.abs(<span class=\"string\">&#x27;-1&#x27;</span>)); <span class=\"comment\">// 1 隐式转换，会把字符型转换为数字型</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.abs(<span class=\"string\">&#x27;pink&#x27;</span>)); <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"comment\">//2.三个取整方法</span></span><br><span class=\"line\"><span class=\"comment\">//(1)Math.floor() &#x27;地板&#x27; 向下取整，往最小了取值</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.floor(<span class=\"number\">1.2</span>)); <span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.floor(<span class=\"number\">1.8</span>)); <span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"comment\">//(2)Math.ceil() &#x27;天花板&#x27; 向上取整，往最大了取值</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.ceil(<span class=\"number\">1.2</span>)); <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.ceil(<span class=\"number\">1.8</span>)); <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"comment\">//(3)Math.round() 四舍五入 其他数字都是四舍五入，但是.5特殊，它往大了取</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.round(<span class=\"number\">1.1</span>)); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.round(<span class=\"number\">1.5</span>)); <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.round(<span class=\"number\">1.9</span>)); <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.round(-<span class=\"number\">1.1</span>)); <span class=\"comment\">// -1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.round(-<span class=\"number\">1.5</span>)); <span class=\"comment\">// 这个结果是 -1</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.Math对象随机数方法， random() 返回一个随机小数 0 &lt;= i &lt;1</span></span><br><span class=\"line\"><span class=\"comment\">// 2.这个方法里面不跟参数</span></span><br><span class=\"line\"><span class=\"comment\">// 3.代码验证</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.random());</span><br><span class=\"line\"><span class=\"comment\">// 4.两数之间随机数，包含两数</span></span><br><span class=\"line\"><span class=\"comment\">// Math.floor(Math.random() * (max - min + 1)) + min;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getRandom</span>(<span class=\"params\">min,max</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * (max - min + <span class=\"number\">1</span>)) + min;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(getRandom(<span class=\"number\">1</span>,<span class=\"number\">10</span>));</span><br><span class=\"line\"><span class=\"comment\">// 5.随机点名</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">&#x27;甲&#x27;</span>,<span class=\"string\">&#x27;乙&#x27;</span>,<span class=\"string\">&#x27;丙&#x27;</span>,<span class=\"string\">&#x27;丁&#x27;</span>,<span class=\"string\">&#x27;戊&#x27;</span>,<span class=\"string\">&#x27;己&#x27;</span>,<span class=\"string\">&#x27;庚&#x27;</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr[getRandom(<span class=\"number\">0</span>,arr.length - <span class=\"number\">1</span>)]);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"案例：猜数字游戏\"><a href=\"#案例：猜数字游戏\" class=\"headerlink\" title=\"案例：猜数字游戏\"></a>案例：猜数字游戏</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//猜数字游戏</span></span><br><span class=\"line\"><span class=\"comment\">//1.随机生成一个1-10的整数，我们需要用到Math.random()方法</span></span><br><span class=\"line\"><span class=\"comment\">//2.需要一直菜刀正确为止，所以要一直循环</span></span><br><span class=\"line\"><span class=\"comment\">//3.while循环更简单</span></span><br><span class=\"line\"><span class=\"comment\">//4.核心算法：使用if else if 多分支语句来判断大于雄安与等于</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getRandom</span>(<span class=\"params\">min,max</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * (max - min + <span class=\"number\">1</span>)) + min;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> random = getRandom(<span class=\"number\">1</span>,<span class=\"number\">10</span>);</span><br><span class=\"line\"><span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123; <span class=\"comment\">//死循环</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> num = prompt(<span class=\"string\">&#x27;你来猜？请输入1-10之间的一个数字&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(num &gt; random) &#123;</span><br><span class=\"line\">        alert(<span class=\"string\">&#x27;你猜大了&#x27;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(num &lt; random) &#123;</span><br><span class=\"line\">        alert(<span class=\"string\">&#x27;你猜小了&#x27;</span>)；</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        alert(<span class=\"string\">&#x27;猜对了&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>; <span class=\"comment\">// 退出整个循环结束程序</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Data对象\"><a href=\"#Data对象\" class=\"headerlink\" title=\"Data对象\"></a><strong>Data对象</strong></h1><p>  Date 对象和 Math 对象不一样，Date是一个<strong>构造函数</strong>，所以使用时需要实例化后才能使用其中具体方法和属性。Date 实例用来处理日期和时间</p>\n<h2 id=\"使用Date实例化日期对象\"><a href=\"#使用Date实例化日期对象\" class=\"headerlink\" title=\"使用Date实例化日期对象\"></a><strong>使用Date实例化日期对象</strong></h2><ul>\n<li>获取当前时间必须实例化</li>\n<li>获取指定时间的日期对象</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Data() 日期对象，是一个构造函数，必须使用new来调用创建我们的日期对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(); <span class=\"comment\">// 创建一个数组对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>(); <span class=\"comment\">// 创建一个对象实例</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1.使用Data 如果没有参数，返回系统当前时间</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> data = <span class=\"keyword\">new</span> Data();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2.参数常用的写法，数字型 2022,06,11 或者是字符串型 &#x27;2022-06-11 00:00:00&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> data1 = <span class=\"keyword\">new</span> Data(<span class=\"number\">2022</span>,<span class=\"number\">06</span>,<span class=\"number\">11</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(data1); <span class=\"comment\">//返回的是7月，不是6月</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> data2 = <span class=\"keyword\">new</span> Data(<span class=\"string\">&#x27;2022-06-11 00:00:00&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(data2);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"日期格式化\"><a href=\"#日期格式化\" class=\"headerlink\" title=\"日期格式化\"></a><strong>日期格式化</strong></h2><p>获取日期的指定部分，通过日期对象里面的属性和方法手动得到这种格式</p>\n<ul>\n<li>使用Date实例的方法和属性</li>\n<li>getMonth()方法获取到的月份 + 1 = 当月</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206111942811.png\"></p>\n<p>格式化日期</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//日期格式化</span></span><br><span class=\"line\"><span class=\"comment\">// 格式化日期 年 月 日</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(date.getFullYear()); <span class=\"comment\">//返回当前日期的年 2022</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(date.getMonth() + <span class=\"number\">1</span>); <span class=\"comment\">//月份 返回的月份小1个月，记得月份加1呦</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(date.getDate()); <span class=\"comment\">//返回的是 几号</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(date.getDay); <span class=\"comment\">//周一返回的是1 周六返回的是6 周日返回的是0</span></span><br><span class=\"line\"><span class=\"comment\">//我们写一个 2022年 6月 11日 星期六（当前日期）</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> year = date.getFullYear();</span><br><span class=\"line\">      <span class=\"keyword\">var</span> month = date.getMonth() + <span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> dates = date.getDate();</span><br><span class=\"line\">      <span class=\"keyword\">var</span> arr = [<span class=\"string\">&#x27;星期日&#x27;</span>,<span class=\"string\">&#x27;星期一&#x27;</span>,<span class=\"string\">&#x27;星期二&#x27;</span>,<span class=\"string\">&#x27;星期三&#x27;</span>,<span class=\"string\">&#x27;星期四&#x27;</span>,<span class=\"string\">&#x27;星期五&#x27;</span>,<span class=\"string\">&#x27;星期六&#x27;</span>]；</span><br><span class=\"line\">      <span class=\"keyword\">var</span> day = date.getDay();</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;今天是&quot;</span> + year + <span class=\"string\">&quot;年&quot;</span> + month + <span class=\"string\">&quot;月&quot;</span> + dates + <span class=\"string\">&quot;日&quot;</span> + arr[day]);</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//格式化日期 时分秒</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(date.getHours()); <span class=\"comment\">//时</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(date.getMinutes()); <span class=\"comment\">//分</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(date.getSeconds()); <span class=\"comment\">// 秒</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//封装一个函数返回当前的 时 分 秒 格式 08:08:08</span></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getTimer</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> time = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">        <span class=\"keyword\">var</span> h = time.getHours();</span><br><span class=\"line\">        <span class=\"keyword\">var</span> h = h &lt; <span class=\"number\">10</span> ? <span class=\"string\">&quot;0&quot;</span> + h : h;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> m = time.getMinutes();</span><br><span class=\"line\">        <span class=\"keyword\">var</span> m = m &lt; <span class=\"number\">10</span> ? <span class=\"string\">&quot;0&quot;</span> + m : m;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> s = time.getSeconds();</span><br><span class=\"line\">        <span class=\"keyword\">var</span> s = s &lt; <span class=\"number\">10</span> ? <span class=\"string\">&quot;0&quot;</span> + s : s;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> h + <span class=\"string\">&quot;:&quot;</span> + h + <span class=\"string\">&quot;:&quot;</span> + s;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(getTimer());</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"时间戳\"><a href=\"#时间戳\" class=\"headerlink\" title=\"时间戳\"></a>时间戳</h2><p><strong>获取Date日期总的毫秒数(时间戳)</strong><br>基于1970年1月1日(世界标准世界)起的毫秒数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 实例化Date对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> now = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\"><span class=\"comment\">// 1. 通过 value() getTime()</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(now.valueOf());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(now.getTime());</span><br><span class=\"line\"><span class=\"comment\">// 2. 简单写可以这么做 (最常用的)</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> now = + <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();   </span><br><span class=\"line\"><span class=\"comment\">// 3. HTML5中提供的方法，有兼容性问题</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> now = <span class=\"built_in\">Date</span>.now();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例：倒计时效果\"><a href=\"#案例：倒计时效果\" class=\"headerlink\" title=\"案例：倒计时效果\"></a>案例：倒计时效果</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//  倒计时案例</span></span><br><span class=\"line\"><span class=\"comment\">//  1. 核心算法：输入的时间减去现在的时间就是剩余的时间，即倒计时，但不能拿时分秒相减。</span></span><br><span class=\"line\"><span class=\"comment\">//  2.用时间戳来做，用户输入时间总的毫秒数减去现在时间的总的毫秒数，</span></span><br><span class=\"line\"><span class=\"comment\">//   得到的就是剩余时间的毫秒数</span></span><br><span class=\"line\"><span class=\"comment\">//  3.把剩余时间总的毫秒数转换为天、时、分、秒  (时间戳转换时分秒)</span></span><br><span class=\"line\"><span class=\"comment\">//    转换公式如下：</span></span><br><span class=\"line\"><span class=\"comment\">//    d = parseInt(总秒数/60/60/24) // 计算天数</span></span><br><span class=\"line\"><span class=\"comment\">//    h = parseInt(总秒数/60/60%24) // 计算小时</span></span><br><span class=\"line\"><span class=\"comment\">//    m = parseInt(总秒数/60%60);   // 计算分钟  </span></span><br><span class=\"line\"><span class=\"comment\">//    s = parseInt(总秒数%60);      // 计算当前秒数 </span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 倒计时案例 封装函数实现</span></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">countDown</span>(<span class=\"params\">time</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> nowTime = +<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(); <span class=\"comment\">// 返回的是当前时间总的毫秒数</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> inputTime = +<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(time); <span class=\"comment\">// 返回的是用户输入时间总的毫秒数</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> times = (inputTime - nowTime) / <span class=\"number\">1000</span>; <span class=\"comment\">// times是剩余时间总的秒数</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> d = <span class=\"built_in\">parseInt</span>(times / <span class=\"number\">60</span> / <span class=\"number\">60</span> / <span class=\"number\">24</span>); <span class=\"comment\">// 天</span></span><br><span class=\"line\">        d = d &lt; <span class=\"number\">10</span> ? <span class=\"string\">&quot;0&quot;</span> + d : d;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> h = <span class=\"built_in\">parseInt</span>((times / <span class=\"number\">60</span> / <span class=\"number\">60</span>) % <span class=\"number\">24</span>); <span class=\"comment\">//时</span></span><br><span class=\"line\">        h = h &lt; <span class=\"number\">10</span> ? <span class=\"string\">&quot;0&quot;</span> + h : h;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> m = <span class=\"built_in\">parseInt</span>((times / <span class=\"number\">60</span>) % <span class=\"number\">60</span>); <span class=\"comment\">// 分</span></span><br><span class=\"line\">        m = m &lt; <span class=\"number\">10</span> ? <span class=\"string\">&quot;0&quot;</span> + m : m;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> s = <span class=\"built_in\">parseInt</span>(times % <span class=\"number\">60</span>); <span class=\"comment\">// 当前的秒</span></span><br><span class=\"line\">        s = s &lt; <span class=\"number\">10</span> ? <span class=\"string\">&quot;0&quot;</span> + s : s;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> d + <span class=\"string\">&quot;天&quot;</span> + h + <span class=\"string\">&quot;时&quot;</span> + m + <span class=\"string\">&quot;分&quot;</span> + s + <span class=\"string\">&quot;秒&quot;</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(countDown(<span class=\"string\">&quot;2022-10-1 18:00:00&quot;</span>));</span><br><span class=\"line\">      <span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(date);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"数组对象\"><a href=\"#数组对象\" class=\"headerlink\" title=\"数组对象\"></a><strong>数组对象</strong></h1><h2 id=\"「创建数组的两种方式」\"><a href=\"#「创建数组的两种方式」\" class=\"headerlink\" title=\"「创建数组的两种方式」\"></a><strong>「创建数组的两种方式」</strong></h2><ul>\n<li><strong>1. 字面量方式</strong><code>var arr = [1,&quot;test&quot;,true];</code></li>\n<li><strong>2. 实例化数组对象 new Array()</strong><code>var arr = new Array();</code></li>\n</ul>\n<p><strong>注意：</strong></p>\n<ol>\n<li>上面代码中 arr 创建出的是一个空数组，如果需要使用构造函数Array创建非空数组，可以在创建数组时传入参数</li>\n<li>如果只传入一个参数(数字)，则参数规定了数组的长度。</li>\n<li>如果传入了多个参数，则参数称为数组的元素。</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.利用数组字面量</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr[<span class=\"number\">0</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2.利用new Array()</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(); <span class=\"comment\">// 创建了一个空数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">2</span>); <span class=\"comment\">// 这个2表示数组长度为2 里面有两个空的数组元素</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">2</span>,<span class=\"number\">3</span>); <span class=\"comment\">// 等价于[2,3] 这样写表示 里面有两个数组元素 是2和1 </span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr1);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「检测是否为数组」\"><a href=\"#「检测是否为数组」\" class=\"headerlink\" title=\"「检测是否为数组」\"></a><strong>「检测是否为数组」</strong></h2><ul>\n<li><strong>1. instanceof 运算符</strong></li>\n</ul>\n<p>instanceof 可以判断一个对象是否是某个构造函数的实例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">23</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>2. Array.isArray()</strong></li>\n</ul>\n<p>Array.isArray()用于判断一个对象是否为数组，isArray() 是 HTML5 中提供的方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">23</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.isArray(arr));   <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.isArray(obj));   <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>3. 注意 typeof用法</strong></li>\n</ul>\n<p>typeof 用于判断变量的类型</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">23</span>];</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> arr) <span class=\"comment\">// object 对象arr是构造函数的实例因此是对象数据类型</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「添加删除数组元素的方法」\"><a href=\"#「添加删除数组元素的方法」\" class=\"headerlink\" title=\"「添加删除数组元素的方法」\"></a><strong>「添加删除数组元素的方法」</strong></h2><ul>\n<li>数组中有进行增加、删除元素的方法，部分方法如下表</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206121009271.png\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 添加删除素组元素的方法</span></span><br><span class=\"line\"><span class=\"comment\">// 1.push() 在数组的末尾添加一个或者多个数组元素，</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\">arr.push(<span class=\"number\">4</span>,<span class=\"string\">&#x27;pink&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.push(<span class=\"number\">4</span>,<span class=\"string\">&#x27;pink&#x27;</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr);</span><br><span class=\"line\"><span class=\"comment\">// (1)push可以给数组追加新的元素</span></span><br><span class=\"line\"><span class=\"comment\">// (2)push() 参数直接写数组元素就可以</span></span><br><span class=\"line\"><span class=\"comment\">// (3)push完毕后，返回的结果是 新数组的长度</span></span><br><span class=\"line\"><span class=\"comment\">// (4)原数组也会发生变化</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2.unshiift是可以给数组前面追加新元素</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.unshift(<span class=\"string\">&#x27;red&#x27;</span>,<span class=\"string\">&#x27;blue&#x27;</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr);</span><br><span class=\"line\"><span class=\"comment\">// 和push同理</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3.pop() 可以删除数组里最后一个元素</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.pop());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr);</span><br><span class=\"line\"><span class=\"comment\">// (1)pop是可以删除数组最后一个元素，但一次只能删除一个元素</span></span><br><span class=\"line\"><span class=\"comment\">// (2)pop() 没有参数</span></span><br><span class=\"line\"><span class=\"comment\">// (3)pop完毕之后，返回的结果是删除的那个元素</span></span><br><span class=\"line\"><span class=\"comment\">// (4)原数组也会发生变化</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 4.shift() 可以删除数组的第一个元素</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.shift());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr);</span><br><span class=\"line\"><span class=\"comment\">// 和pop同理</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例：筛选数组\"><a href=\"#案例：筛选数组\" class=\"headerlink\" title=\"案例：筛选数组\"></a>案例：筛选数组</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 有一个包含工资的数组[1500,1200,2000,2100,1800]，要求把超过2000的删除，剩余的放到新数组里</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1500</span>,<span class=\"number\">1200</span>,<span class=\"number\">2000</span>,<span class=\"number\">2100</span>,<span class=\"number\">1800</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> newArr = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr[i] &lt; <span class=\"number\">2000</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// newArr[newArr.length] = arr[i];</span></span><br><span class=\"line\">        newArr.push(arr[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArr);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「数组排序」\"><a href=\"#「数组排序」\" class=\"headerlink\" title=\"「数组排序」\"></a><strong>「数组排序」</strong></h2><p>数组中有对数组本身排序的方法，部分方法如下表</p>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>说明</th>\n<th>是否修改原数组</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>reverse()</td>\n<td>颠倒数组中元素顺序，无参数</td>\n<td>会改变原来数组，返回新数组</td>\n</tr>\n<tr>\n<td>sort()</td>\n<td>对数组元素进行排序</td>\n<td>会改变原来数组， 返回新数组</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 数组排序</span></span><br><span class=\"line\"><span class=\"comment\">// 1.翻转数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">&#x27;pink&#x27;</span>,<span class=\"string\">&#x27;red&#x27;</span>,<span class=\"string\">&#x27;blue&#x27;</span>];</span><br><span class=\"line\">arr.reverse();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2.数组排序(冒泡排序)</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"number\">13</span>,<span class=\"number\">4</span>,<span class=\"number\">77</span>,<span class=\"number\">1</span>,<span class=\"number\">77</span>];</span><br><span class=\"line\">arr1.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// return a - b; // 升序的顺序排列</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> b - a; <span class=\"comment\">// 降序的顺序排列</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr1);</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：</strong></p>\n<ul>\n<li><strong>sort方法需要传入参数(函数)来设置升序、降序排序</strong></li>\n<li>如果传入“function(a,b){ return a-b;}”，则为升序</li>\n<li>如果传入“function(a,b){ return b-a;}”，则为降序</li>\n</ul>\n<h2 id=\"「数组索引方法」\"><a href=\"#「数组索引方法」\" class=\"headerlink\" title=\"「数组索引方法」\"></a><strong>「数组索引方法」</strong></h2><ul>\n<li>数组中有获取数组指定元素索引值的方法，部分方法如下表</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206121049869.png\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 返回数组元素索引号的方法 indexOf(数组元素)  作用就是返回该数组元素的索引号 从前面开始查找</span></span><br><span class=\"line\"><span class=\"comment\">// 它只返回第一个满足条件的索引号</span></span><br><span class=\"line\"><span class=\"comment\">// 如果在数组里面找不到元素，则返回的结果是-1</span></span><br><span class=\"line\"><span class=\"comment\">//var arr = [&#x27;red&#x27;,&#x27;green&#x27;,&#x27;blue&#x27;,&#x27;pink&#x27;,&#x27;blue&#x27;];</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">&#x27;red&#x27;</span>,<span class=\"string\">&#x27;green&#x27;</span>,<span class=\"string\">&#x27;pink&#x27;</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.indexOf(<span class=\"string\">&#x27;blue&#x27;</span>)); <span class=\"comment\">//-1</span></span><br><span class=\"line\"><span class=\"comment\">// 返回数组元素索引号的方法 lastindexOf(数组元素)  作用就是返回该数组元素的索引号 从后面开始查找</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">&#x27;red&#x27;</span>,<span class=\"string\">&#x27;green&#x27;</span>,<span class=\"string\">&#x27;blue&#x27;</span>,<span class=\"string\">&#x27;pink&#x27;</span>,<span class=\"string\">&#x27;blue&#x27;</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.lastindexOf(<span class=\"string\">&#x27;blue&#x27;</span>)); <span class=\"comment\">// 4</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例：数组去重\"><a href=\"#案例：数组去重\" class=\"headerlink\" title=\"案例：数组去重\"></a>案例：数组去重</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 数组去重 [&#x27;c&#x27;,&#x27;a&#x27;,&#x27;z&#x27;,&#x27;a&#x27;,&#x27;x&#x27;,&#x27;a&#x27;,&#x27;x&#x27;,&#x27;c&#x27;,&#x27;b&#x27;] 要求去除重复元素</span></span><br><span class=\"line\"><span class=\"comment\">// 1.目标：把旧数组里面不重复的元素取出来放进新数组，重复的元素只保留一个，放到新数组里去重</span></span><br><span class=\"line\"><span class=\"comment\">// 2.核心算法：遍历旧数组，然后拿旧数组元素查询新数组，如果该元素在新数组里没有出现过，我们就添加，否则不添加</span></span><br><span class=\"line\"><span class=\"comment\">// 3.如何知道该元素有没有存在？利用 新数组.indexOf(数组元素) 如果返回-1 ，说明数组里没有该元素</span></span><br><span class=\"line\"><span class=\"comment\">// 封装一个去重函数 unique &#x27;独一无二的&#x27;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unique</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> newArr = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (newArr.indexOf(arr[i]) === -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            newArr.push(arr[i]);     </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newArr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> demo = unique([<span class=\"string\">&#x27;c&#x27;</span>,<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;z&#x27;</span>,<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;x&#x27;</span>,<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;x&#x27;</span>,<span class=\"string\">&#x27;c&#x27;</span>,<span class=\"string\">&#x27;b&#x27;</span>]);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(demo);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「数组转换为字符串」\"><a href=\"#「数组转换为字符串」\" class=\"headerlink\" title=\"「数组转换为字符串」\"></a><strong>「数组转换为字符串」</strong></h2><ul>\n<li>数组中有把数组转化为字符串的方法，部分方法如下表</li>\n<li>注意：join方法如果不传入参数，则按照 “ , ”拼接元素</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206121108168.png\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.toString(</span></span><br><span class=\"line\">)    </span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = arr.toString(); <span class=\"comment\">// 将数组转换为字符串   </span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str); <span class=\"comment\">// 1,2,3,4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2.join(分隔符)</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> str2 = arr2.join(<span class=\"string\">&quot;|&quot;</span>);<span class=\"comment\">//按照键入字符将数组转换为字符串    </span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str2); <span class=\"comment\">// 1|2|3|4</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「其他方法」\"><a href=\"#「其他方法」\" class=\"headerlink\" title=\"「其他方法」\"></a><strong>「其他方法」</strong></h2><p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206121111243.png\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = [<span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr3 = arr.concat(arr2);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr3); <span class=\"comment\">// [1,2,3,4,5,6,7,8]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// slice(begin,end) 是一种左闭右开区间 [1,3)</span></span><br><span class=\"line\"><span class=\"comment\">// 从索引1出开始截取，到索引3之前</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr4 = arr.slice(<span class=\"number\">1</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr4); <span class=\"comment\">// [2,3]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr5 = arr2.splice(<span class=\"number\">0</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr5); <span class=\"comment\">// [5,6,7]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2); <span class=\"comment\">// [8]   splice()会影响原数组</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"字符串对象\"><a href=\"#字符串对象\" class=\"headerlink\" title=\"字符串对象\"></a><strong>字符串对象</strong></h1><h2 id=\"「基本包装类型」\"><a href=\"#「基本包装类型」\" class=\"headerlink\" title=\"「基本包装类型」\"></a><strong>「基本包装类型」</strong></h2><p>为了方便操作基本数据类型，JavaScript 还提供了三个特殊的引用类型：String、Number和 Boolean。<br>  <code>基本包装类型就是把简单数据类型包装成为复杂数据类型</code>，这样基本数据类型就有了属性和方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 下面代码有什么问题？</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;andy&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.length); <span class=\"comment\">// 4</span></span><br></pre></td></tr></table></figure>\n\n<p>  按道理基本数据类型是没有属性和方法的，而对象才有属性和方法，但上面代码却可以执行，这是因为 js 会把基本数据类型包装为复杂数据类型，其执行过程如下 ：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 生成临时变量，把简单类型包装为复杂数据类型</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> temp = <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">&#x27;andy&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 2. 赋值给我们声明的字符变量</span></span><br><span class=\"line\">str = temp;</span><br><span class=\"line\"><span class=\"comment\">// 3. 销毁临时变量</span></span><br><span class=\"line\">temp = <span class=\"literal\">null</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「字符串的不可变」\"><a href=\"#「字符串的不可变」\" class=\"headerlink\" title=\"「字符串的不可变」\"></a><strong>「字符串的不可变」</strong></h2><ul>\n<li>指的是里面的值不可变，虽然看上去可以改变内容，但其实是地址变了，内存中新开辟了一个内存空间。</li>\n<li>当重新给字符串变量赋值的时候，变量之前保存的字符串不会被修改，依然在内存中重新给字符串赋值，会重新在内存中开辟空间，这个特点就是字符串的不可变。</li>\n<li>由于字符串的不可变，在<strong>「大量拼接字符串」</strong>的时候会有效率问题</li>\n</ul>\n<h2 id=\"「根据字符返回位置」\"><a href=\"#「根据字符返回位置」\" class=\"headerlink\" title=\"「根据字符返回位置」\"></a><strong>「根据字符返回位置」</strong></h2><p>字符串通过基本包装类型可以调用部分方法来操作字符串，以下是返回指定字符的位置的方法：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206121130186.png\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&quot;anndy&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.indexOf(<span class=\"string\">&quot;d&quot;</span>)); <span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"comment\">//指定从索引号为4的地方开始查找字符&quot;d&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.indexOf(<span class=\"string\">&quot;d&quot;</span>, <span class=\"number\">4</span>)); <span class=\"comment\">// -1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.lastIndexOf(<span class=\"string\">&quot;n&quot;</span>)); <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"案例：查找字符串”abcoefoxyozzopp”中所有o出现的位置以及次数\"><a href=\"#案例：查找字符串”abcoefoxyozzopp”中所有o出现的位置以及次数\" class=\"headerlink\" title=\"案例：查找字符串”abcoefoxyozzopp”中所有o出现的位置以及次数\"></a>案例：查找字符串”abcoefoxyozzopp”中所有o出现的位置以及次数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//核心算法：先查找第一个o出现的位置</span></span><br><span class=\"line\"><span class=\"comment\">//然后 只要indexOf 返回的结果不是 -1 就继续往后查找</span></span><br><span class=\"line\"><span class=\"comment\">//因为indexOf 只能查找到第一个，所以后面的查找，利用第二个参数，当前索引加1，从而继续查找</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&quot;oabcoefoxyozzopp&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> index = str.indexOf(<span class=\"string\">&quot;o&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (index !== -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(index);</span><br><span class=\"line\">    num++;</span><br><span class=\"line\">    index = str.indexOf(<span class=\"string\">&quot;o&quot;</span>, index + <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;o出现的次数是&#x27;</span> + num);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「根据位置返回字符」\"><a href=\"#「根据位置返回字符」\" class=\"headerlink\" title=\"「根据位置返回字符」\"></a><strong>「根据位置返回字符」</strong></h2><p>字符串通过基本包装类型可以调用部分方法来操作字符串，以下是根据位置返回指定位置上的字符：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206121136083.png\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 根据位置返回字符</span></span><br><span class=\"line\"><span class=\"comment\">// 1. charAt(index) 根据位置返回字符</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;andy&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.charAt(<span class=\"number\">3</span>)); <span class=\"comment\">// y</span></span><br><span class=\"line\"><span class=\"comment\">// 遍历所有的字符</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; str.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(str.charAt(i));</span><br><span class=\"line\">&#125; <span class=\"comment\">// a n d y</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. charCodeAt(index)  </span></span><br><span class=\"line\"><span class=\"comment\">//返回相应索引号的字符ASCII值 目的： 判断用户按下了那个键 </span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.charCodeAt(<span class=\"number\">0</span>)); <span class=\"comment\">// 97</span></span><br><span class=\"line\"><span class=\"comment\">// 3. str[index] H5 新增的</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str[<span class=\"number\">0</span>]); <span class=\"comment\">// a</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"案例：判断一个字符串-‘abcoefoxyozzopp’-中出现次数最多的字符，并统计其次数\"><a href=\"#案例：判断一个字符串-‘abcoefoxyozzopp’-中出现次数最多的字符，并统计其次数\" class=\"headerlink\" title=\"案例：判断一个字符串 ‘abcoefoxyozzopp’ 中出现次数最多的字符，并统计其次数\"></a>案例：判断一个字符串 ‘abcoefoxyozzopp’ 中出现次数最多的字符，并统计其次数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//核心算法：利用 charAt(） 遍历这个字符串</span></span><br><span class=\"line\"><span class=\"comment\">//把每个字符都存储给对象， 如果对象没有该属性，就为1，如果存在了就 +1</span></span><br><span class=\"line\"><span class=\"comment\">//遍历对象，得到最大值和该字符 注意：在遍历的过程中，把字符串中的每个字符作为对象的属性存储在对象中，对应的属性值是该字符出现的次数     </span></span><br><span class=\"line\">\t <span class=\"keyword\">var</span> str = <span class=\"string\">&quot;abcoefoxyozzopp&quot;</span>;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> o = &#123;&#125;;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; str.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> chars = str.charAt(i); <span class=\"comment\">// chars 是 字符串的每一个字符</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (o[chars]) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// o[chars] 得到的是属性值</span></span><br><span class=\"line\">          o[chars]++;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          o[chars] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(o);</span><br><span class=\"line\">      <span class=\"comment\">// 2. 遍历对象</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> max = <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> ch = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> o) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// k 得到是 属性名</span></span><br><span class=\"line\">        <span class=\"comment\">// o[k] 得到的是属性值</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (o[k] &gt; max) &#123;</span><br><span class=\"line\">          max = o[k];</span><br><span class=\"line\">          ch = k;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(max);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;最多的字符是&quot;</span> + ch);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「字符串操作方法」\"><a href=\"#「字符串操作方法」\" class=\"headerlink\" title=\"「字符串操作方法」\"></a><strong>「字符串操作方法」</strong></h2><p>字符串通过基本包装类型可以调用部分方法来操作字符串，以下是部分操作方法：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206122119052.png\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 字符串操作方法</span></span><br><span class=\"line\"><span class=\"comment\">// 1. concat(&#x27;字符串1&#x27;,&#x27;字符串2&#x27;....)</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;andy&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.concat(<span class=\"string\">&#x27;red&#x27;</span>)); <span class=\"comment\">// andyred</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. substr(&#x27;截取的起始位置&#x27;, &#x27;截取几个字符&#x27;);</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str1 = <span class=\"string\">&#x27;改革春风吹满地&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 第一个2 是索引号的2 从第几个开始  第二个2 是取几个字符</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str1.substr(<span class=\"number\">2</span>, <span class=\"number\">2</span>)); <span class=\"comment\">// 春风</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 替换字符 replace(&#x27;被替换的字符&#x27;, &#x27;替换为的字符&#x27;)  它只会替换第一个字符</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&quot;andyandy&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.replace(<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>)); <span class=\"comment\">// bndyandy</span></span><br><span class=\"line\"><span class=\"comment\">// 有一个字符串 &#x27;abcoefoxyozzopp&#x27;  要求把里面所有的 o 替换为 *</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str1 = <span class=\"string\">&quot;abcoefoxyozzopp&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (str1.indexOf(<span class=\"string\">&quot;o&quot;</span>) !== -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">  str1 = str1.replace(<span class=\"string\">&quot;o&quot;</span>, <span class=\"string\">&quot;*&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str1); <span class=\"comment\">// abc*ef*xy*zz*pp</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. 字符转换为数组 split(&#x27;分隔符&#x27;)    </span></span><br><span class=\"line\"><span class=\"comment\">// 前面我们学过 join 把数组转换为字符串</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str2 = <span class=\"string\">&quot;red, pink, blue&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str2.split(<span class=\"string\">&quot;,&quot;</span>)); <span class=\"comment\">//[red,pink,blue]</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str3 = <span class=\"string\">&quot;red&amp;pink&amp;blue&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str3.split(<span class=\"string\">&quot;&amp;&quot;</span>)); <span class=\"comment\">// [red,pink,blue]</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<h1 id=\"内置对象概述\"><a href=\"#内置对象概述\" class=\"headerlink\" title=\"内置对象概述\"></a>内置对象概述</h1><p>JavaScript 中的对象分为3种：<strong>自定义对象</strong> 、<strong>内置对象</strong>、 <strong>浏览器对象</strong><br>前面两种对象是JS基础内容，属于ECMAScript;第三个浏览器对象属于JS独有的，JS API讲解内置对象就是指 js语言自带的一些对象，这些对象供开发者使用，并提供了一些常用的或是最基本而非必要的功能(属性和方法),内置对象最大的优点就是帮助我们快速开发。</p>\n<ul>\n<li>JavaScript提供了多个内置对象：Math，Data，Array，String等</li>\n</ul>\n<h2 id=\"「查文档」\"><a href=\"#「查文档」\" class=\"headerlink\" title=\"「查文档」\"></a><strong>「查文档」</strong></h2><p>学习一个内置对象的使用，只要学会其常用成员的使用即可，我们可以通过查文档学习。<br><code>MDN:</code><a href=\"https://developer.mozilla.org/zh-CN/\">https://developer.mozilla.org/zh-CN/</a></p>\n<h1 id=\"Math对象\"><a href=\"#Math对象\" class=\"headerlink\" title=\"Math对象\"></a><strong>Math对象</strong></h1><p><strong>「Math对象」</strong>不是构造函数，它具有数学常数和函数的属性和方法，跟数学相关。</p>\n<table>\n<thead>\n<tr>\n<th>属性. 方法名</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Math.PI</td>\n<td>圆周率</td>\n</tr>\n<tr>\n<td>Math.floor()</td>\n<td>向下取整</td>\n</tr>\n<tr>\n<td>Math.ceil()</td>\n<td>向上取整</td>\n</tr>\n<tr>\n<td>Math.round()</td>\n<td>四舍五入，就近取整，注意-3.5 结果是 -3</td>\n</tr>\n<tr>\n<td>Math.abs()</td>\n<td>绝对值</td>\n</tr>\n<tr>\n<td>Math.max()/Math.min()</td>\n<td>求最大值和最小值</td>\n</tr>\n<tr>\n<td>Math.random()</td>\n<td>获取范围在【0，1） 内的随机数</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Math数学对象不是一个构造函数，所以我们不需要new 来调用，而是直接使用里面的属性和方法即可</span></span><br><span class=\"line\"><span class=\"comment\">//Math对象最大值</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.PI); <span class=\"comment\">// 一个属性 圆周率</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.max(<span class=\"number\">1</span>,<span class=\"number\">99</span>,<span class=\"number\">3</span>)); <span class=\"comment\">// 99</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.max(-<span class=\"number\">1</span>,-<span class=\"number\">10</span>)); <span class=\"comment\">// -1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.max(<span class=\"number\">1</span>,<span class=\"number\">99</span>,<span class=\"string\">&#x27;pink老师&#x27;</span>)); <span class=\"comment\">//NaN</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.max()); <span class=\"comment\">// -Infinity</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"案例：封装自己的数学对象\"><a href=\"#案例：封装自己的数学对象\" class=\"headerlink\" title=\"案例：封装自己的数学对象\"></a>案例：封装自己的数学对象</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 利用对象封装自己的数学对象 里面有PI最大值和最小值</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> myMath = &#123;</span><br><span class=\"line\">    <span class=\"attr\">PI</span>: <span class=\"number\">3.1415926535</span>,</span><br><span class=\"line\">    <span class=\"attr\">max</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        max = <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"built_in\">arguments</span>.length; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>[i] &gt; max) &#123;</span><br><span class=\"line\">                max = <span class=\"built_in\">arguments</span>[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">min</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        min = <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"built_in\">arguments</span> - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>[i] &lt; min) &#123;</span><br><span class=\"line\">                min = <span class=\"built_in\">arguments</span>[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> min;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myMath.PI);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myMath.max(<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">6</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myMath.min(<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">1</span>,<span class=\"number\">5</span>));</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Math绝对值和三个取整方法</span></span><br><span class=\"line\"><span class=\"comment\">//1.绝对值方法</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.abs(<span class=\"number\">1</span>)); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.abs(-<span class=\"number\">1</span>)); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.abs(<span class=\"string\">&#x27;-1&#x27;</span>)); <span class=\"comment\">// 1 隐式转换，会把字符型转换为数字型</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.abs(<span class=\"string\">&#x27;pink&#x27;</span>)); <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"comment\">//2.三个取整方法</span></span><br><span class=\"line\"><span class=\"comment\">//(1)Math.floor() &#x27;地板&#x27; 向下取整，往最小了取值</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.floor(<span class=\"number\">1.2</span>)); <span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.floor(<span class=\"number\">1.8</span>)); <span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"comment\">//(2)Math.ceil() &#x27;天花板&#x27; 向上取整，往最大了取值</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.ceil(<span class=\"number\">1.2</span>)); <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.ceil(<span class=\"number\">1.8</span>)); <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"comment\">//(3)Math.round() 四舍五入 其他数字都是四舍五入，但是.5特殊，它往大了取</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.round(<span class=\"number\">1.1</span>)); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.round(<span class=\"number\">1.5</span>)); <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.round(<span class=\"number\">1.9</span>)); <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.round(-<span class=\"number\">1.1</span>)); <span class=\"comment\">// -1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.round(-<span class=\"number\">1.5</span>)); <span class=\"comment\">// 这个结果是 -1</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.Math对象随机数方法， random() 返回一个随机小数 0 &lt;= i &lt;1</span></span><br><span class=\"line\"><span class=\"comment\">// 2.这个方法里面不跟参数</span></span><br><span class=\"line\"><span class=\"comment\">// 3.代码验证</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.random());</span><br><span class=\"line\"><span class=\"comment\">// 4.两数之间随机数，包含两数</span></span><br><span class=\"line\"><span class=\"comment\">// Math.floor(Math.random() * (max - min + 1)) + min;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getRandom</span>(<span class=\"params\">min,max</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * (max - min + <span class=\"number\">1</span>)) + min;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(getRandom(<span class=\"number\">1</span>,<span class=\"number\">10</span>));</span><br><span class=\"line\"><span class=\"comment\">// 5.随机点名</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">&#x27;甲&#x27;</span>,<span class=\"string\">&#x27;乙&#x27;</span>,<span class=\"string\">&#x27;丙&#x27;</span>,<span class=\"string\">&#x27;丁&#x27;</span>,<span class=\"string\">&#x27;戊&#x27;</span>,<span class=\"string\">&#x27;己&#x27;</span>,<span class=\"string\">&#x27;庚&#x27;</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr[getRandom(<span class=\"number\">0</span>,arr.length - <span class=\"number\">1</span>)]);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"案例：猜数字游戏\"><a href=\"#案例：猜数字游戏\" class=\"headerlink\" title=\"案例：猜数字游戏\"></a>案例：猜数字游戏</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//猜数字游戏</span></span><br><span class=\"line\"><span class=\"comment\">//1.随机生成一个1-10的整数，我们需要用到Math.random()方法</span></span><br><span class=\"line\"><span class=\"comment\">//2.需要一直菜刀正确为止，所以要一直循环</span></span><br><span class=\"line\"><span class=\"comment\">//3.while循环更简单</span></span><br><span class=\"line\"><span class=\"comment\">//4.核心算法：使用if else if 多分支语句来判断大于雄安与等于</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getRandom</span>(<span class=\"params\">min,max</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * (max - min + <span class=\"number\">1</span>)) + min;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> random = getRandom(<span class=\"number\">1</span>,<span class=\"number\">10</span>);</span><br><span class=\"line\"><span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123; <span class=\"comment\">//死循环</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> num = prompt(<span class=\"string\">&#x27;你来猜？请输入1-10之间的一个数字&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(num &gt; random) &#123;</span><br><span class=\"line\">        alert(<span class=\"string\">&#x27;你猜大了&#x27;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(num &lt; random) &#123;</span><br><span class=\"line\">        alert(<span class=\"string\">&#x27;你猜小了&#x27;</span>)；</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        alert(<span class=\"string\">&#x27;猜对了&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>; <span class=\"comment\">// 退出整个循环结束程序</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Data对象\"><a href=\"#Data对象\" class=\"headerlink\" title=\"Data对象\"></a><strong>Data对象</strong></h1><p>  Date 对象和 Math 对象不一样，Date是一个<strong>构造函数</strong>，所以使用时需要实例化后才能使用其中具体方法和属性。Date 实例用来处理日期和时间</p>\n<h2 id=\"使用Date实例化日期对象\"><a href=\"#使用Date实例化日期对象\" class=\"headerlink\" title=\"使用Date实例化日期对象\"></a><strong>使用Date实例化日期对象</strong></h2><ul>\n<li>获取当前时间必须实例化</li>\n<li>获取指定时间的日期对象</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Data() 日期对象，是一个构造函数，必须使用new来调用创建我们的日期对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(); <span class=\"comment\">// 创建一个数组对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>(); <span class=\"comment\">// 创建一个对象实例</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1.使用Data 如果没有参数，返回系统当前时间</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> data = <span class=\"keyword\">new</span> Data();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2.参数常用的写法，数字型 2022,06,11 或者是字符串型 &#x27;2022-06-11 00:00:00&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> data1 = <span class=\"keyword\">new</span> Data(<span class=\"number\">2022</span>,<span class=\"number\">06</span>,<span class=\"number\">11</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(data1); <span class=\"comment\">//返回的是7月，不是6月</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> data2 = <span class=\"keyword\">new</span> Data(<span class=\"string\">&#x27;2022-06-11 00:00:00&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(data2);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"日期格式化\"><a href=\"#日期格式化\" class=\"headerlink\" title=\"日期格式化\"></a><strong>日期格式化</strong></h2><p>获取日期的指定部分，通过日期对象里面的属性和方法手动得到这种格式</p>\n<ul>\n<li>使用Date实例的方法和属性</li>\n<li>getMonth()方法获取到的月份 + 1 = 当月</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206111942811.png\"></p>\n<p>格式化日期</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//日期格式化</span></span><br><span class=\"line\"><span class=\"comment\">// 格式化日期 年 月 日</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(date.getFullYear()); <span class=\"comment\">//返回当前日期的年 2022</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(date.getMonth() + <span class=\"number\">1</span>); <span class=\"comment\">//月份 返回的月份小1个月，记得月份加1呦</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(date.getDate()); <span class=\"comment\">//返回的是 几号</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(date.getDay); <span class=\"comment\">//周一返回的是1 周六返回的是6 周日返回的是0</span></span><br><span class=\"line\"><span class=\"comment\">//我们写一个 2022年 6月 11日 星期六（当前日期）</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> year = date.getFullYear();</span><br><span class=\"line\">      <span class=\"keyword\">var</span> month = date.getMonth() + <span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> dates = date.getDate();</span><br><span class=\"line\">      <span class=\"keyword\">var</span> arr = [<span class=\"string\">&#x27;星期日&#x27;</span>,<span class=\"string\">&#x27;星期一&#x27;</span>,<span class=\"string\">&#x27;星期二&#x27;</span>,<span class=\"string\">&#x27;星期三&#x27;</span>,<span class=\"string\">&#x27;星期四&#x27;</span>,<span class=\"string\">&#x27;星期五&#x27;</span>,<span class=\"string\">&#x27;星期六&#x27;</span>]；</span><br><span class=\"line\">      <span class=\"keyword\">var</span> day = date.getDay();</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;今天是&quot;</span> + year + <span class=\"string\">&quot;年&quot;</span> + month + <span class=\"string\">&quot;月&quot;</span> + dates + <span class=\"string\">&quot;日&quot;</span> + arr[day]);</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//格式化日期 时分秒</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(date.getHours()); <span class=\"comment\">//时</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(date.getMinutes()); <span class=\"comment\">//分</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(date.getSeconds()); <span class=\"comment\">// 秒</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//封装一个函数返回当前的 时 分 秒 格式 08:08:08</span></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getTimer</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> time = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">        <span class=\"keyword\">var</span> h = time.getHours();</span><br><span class=\"line\">        <span class=\"keyword\">var</span> h = h &lt; <span class=\"number\">10</span> ? <span class=\"string\">&quot;0&quot;</span> + h : h;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> m = time.getMinutes();</span><br><span class=\"line\">        <span class=\"keyword\">var</span> m = m &lt; <span class=\"number\">10</span> ? <span class=\"string\">&quot;0&quot;</span> + m : m;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> s = time.getSeconds();</span><br><span class=\"line\">        <span class=\"keyword\">var</span> s = s &lt; <span class=\"number\">10</span> ? <span class=\"string\">&quot;0&quot;</span> + s : s;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> h + <span class=\"string\">&quot;:&quot;</span> + h + <span class=\"string\">&quot;:&quot;</span> + s;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(getTimer());</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"时间戳\"><a href=\"#时间戳\" class=\"headerlink\" title=\"时间戳\"></a>时间戳</h2><p><strong>获取Date日期总的毫秒数(时间戳)</strong><br>基于1970年1月1日(世界标准世界)起的毫秒数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 实例化Date对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> now = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\"><span class=\"comment\">// 1. 通过 value() getTime()</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(now.valueOf());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(now.getTime());</span><br><span class=\"line\"><span class=\"comment\">// 2. 简单写可以这么做 (最常用的)</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> now = + <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();   </span><br><span class=\"line\"><span class=\"comment\">// 3. HTML5中提供的方法，有兼容性问题</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> now = <span class=\"built_in\">Date</span>.now();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例：倒计时效果\"><a href=\"#案例：倒计时效果\" class=\"headerlink\" title=\"案例：倒计时效果\"></a>案例：倒计时效果</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//  倒计时案例</span></span><br><span class=\"line\"><span class=\"comment\">//  1. 核心算法：输入的时间减去现在的时间就是剩余的时间，即倒计时，但不能拿时分秒相减。</span></span><br><span class=\"line\"><span class=\"comment\">//  2.用时间戳来做，用户输入时间总的毫秒数减去现在时间的总的毫秒数，</span></span><br><span class=\"line\"><span class=\"comment\">//   得到的就是剩余时间的毫秒数</span></span><br><span class=\"line\"><span class=\"comment\">//  3.把剩余时间总的毫秒数转换为天、时、分、秒  (时间戳转换时分秒)</span></span><br><span class=\"line\"><span class=\"comment\">//    转换公式如下：</span></span><br><span class=\"line\"><span class=\"comment\">//    d = parseInt(总秒数/60/60/24) // 计算天数</span></span><br><span class=\"line\"><span class=\"comment\">//    h = parseInt(总秒数/60/60%24) // 计算小时</span></span><br><span class=\"line\"><span class=\"comment\">//    m = parseInt(总秒数/60%60);   // 计算分钟  </span></span><br><span class=\"line\"><span class=\"comment\">//    s = parseInt(总秒数%60);      // 计算当前秒数 </span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 倒计时案例 封装函数实现</span></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">countDown</span>(<span class=\"params\">time</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> nowTime = +<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(); <span class=\"comment\">// 返回的是当前时间总的毫秒数</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> inputTime = +<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(time); <span class=\"comment\">// 返回的是用户输入时间总的毫秒数</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> times = (inputTime - nowTime) / <span class=\"number\">1000</span>; <span class=\"comment\">// times是剩余时间总的秒数</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> d = <span class=\"built_in\">parseInt</span>(times / <span class=\"number\">60</span> / <span class=\"number\">60</span> / <span class=\"number\">24</span>); <span class=\"comment\">// 天</span></span><br><span class=\"line\">        d = d &lt; <span class=\"number\">10</span> ? <span class=\"string\">&quot;0&quot;</span> + d : d;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> h = <span class=\"built_in\">parseInt</span>((times / <span class=\"number\">60</span> / <span class=\"number\">60</span>) % <span class=\"number\">24</span>); <span class=\"comment\">//时</span></span><br><span class=\"line\">        h = h &lt; <span class=\"number\">10</span> ? <span class=\"string\">&quot;0&quot;</span> + h : h;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> m = <span class=\"built_in\">parseInt</span>((times / <span class=\"number\">60</span>) % <span class=\"number\">60</span>); <span class=\"comment\">// 分</span></span><br><span class=\"line\">        m = m &lt; <span class=\"number\">10</span> ? <span class=\"string\">&quot;0&quot;</span> + m : m;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> s = <span class=\"built_in\">parseInt</span>(times % <span class=\"number\">60</span>); <span class=\"comment\">// 当前的秒</span></span><br><span class=\"line\">        s = s &lt; <span class=\"number\">10</span> ? <span class=\"string\">&quot;0&quot;</span> + s : s;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> d + <span class=\"string\">&quot;天&quot;</span> + h + <span class=\"string\">&quot;时&quot;</span> + m + <span class=\"string\">&quot;分&quot;</span> + s + <span class=\"string\">&quot;秒&quot;</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(countDown(<span class=\"string\">&quot;2022-10-1 18:00:00&quot;</span>));</span><br><span class=\"line\">      <span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(date);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"数组对象\"><a href=\"#数组对象\" class=\"headerlink\" title=\"数组对象\"></a><strong>数组对象</strong></h1><h2 id=\"「创建数组的两种方式」\"><a href=\"#「创建数组的两种方式」\" class=\"headerlink\" title=\"「创建数组的两种方式」\"></a><strong>「创建数组的两种方式」</strong></h2><ul>\n<li><strong>1. 字面量方式</strong><code>var arr = [1,&quot;test&quot;,true];</code></li>\n<li><strong>2. 实例化数组对象 new Array()</strong><code>var arr = new Array();</code></li>\n</ul>\n<p><strong>注意：</strong></p>\n<ol>\n<li>上面代码中 arr 创建出的是一个空数组，如果需要使用构造函数Array创建非空数组，可以在创建数组时传入参数</li>\n<li>如果只传入一个参数(数字)，则参数规定了数组的长度。</li>\n<li>如果传入了多个参数，则参数称为数组的元素。</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.利用数组字面量</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr[<span class=\"number\">0</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2.利用new Array()</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(); <span class=\"comment\">// 创建了一个空数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">2</span>); <span class=\"comment\">// 这个2表示数组长度为2 里面有两个空的数组元素</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">2</span>,<span class=\"number\">3</span>); <span class=\"comment\">// 等价于[2,3] 这样写表示 里面有两个数组元素 是2和1 </span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr1);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「检测是否为数组」\"><a href=\"#「检测是否为数组」\" class=\"headerlink\" title=\"「检测是否为数组」\"></a><strong>「检测是否为数组」</strong></h2><ul>\n<li><strong>1. instanceof 运算符</strong></li>\n</ul>\n<p>instanceof 可以判断一个对象是否是某个构造函数的实例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">23</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>2. Array.isArray()</strong></li>\n</ul>\n<p>Array.isArray()用于判断一个对象是否为数组，isArray() 是 HTML5 中提供的方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">23</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.isArray(arr));   <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.isArray(obj));   <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>3. 注意 typeof用法</strong></li>\n</ul>\n<p>typeof 用于判断变量的类型</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">23</span>];</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> arr) <span class=\"comment\">// object 对象arr是构造函数的实例因此是对象数据类型</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「添加删除数组元素的方法」\"><a href=\"#「添加删除数组元素的方法」\" class=\"headerlink\" title=\"「添加删除数组元素的方法」\"></a><strong>「添加删除数组元素的方法」</strong></h2><ul>\n<li>数组中有进行增加、删除元素的方法，部分方法如下表</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206121009271.png\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 添加删除素组元素的方法</span></span><br><span class=\"line\"><span class=\"comment\">// 1.push() 在数组的末尾添加一个或者多个数组元素，</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\">arr.push(<span class=\"number\">4</span>,<span class=\"string\">&#x27;pink&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.push(<span class=\"number\">4</span>,<span class=\"string\">&#x27;pink&#x27;</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr);</span><br><span class=\"line\"><span class=\"comment\">// (1)push可以给数组追加新的元素</span></span><br><span class=\"line\"><span class=\"comment\">// (2)push() 参数直接写数组元素就可以</span></span><br><span class=\"line\"><span class=\"comment\">// (3)push完毕后，返回的结果是 新数组的长度</span></span><br><span class=\"line\"><span class=\"comment\">// (4)原数组也会发生变化</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2.unshiift是可以给数组前面追加新元素</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.unshift(<span class=\"string\">&#x27;red&#x27;</span>,<span class=\"string\">&#x27;blue&#x27;</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr);</span><br><span class=\"line\"><span class=\"comment\">// 和push同理</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3.pop() 可以删除数组里最后一个元素</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.pop());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr);</span><br><span class=\"line\"><span class=\"comment\">// (1)pop是可以删除数组最后一个元素，但一次只能删除一个元素</span></span><br><span class=\"line\"><span class=\"comment\">// (2)pop() 没有参数</span></span><br><span class=\"line\"><span class=\"comment\">// (3)pop完毕之后，返回的结果是删除的那个元素</span></span><br><span class=\"line\"><span class=\"comment\">// (4)原数组也会发生变化</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 4.shift() 可以删除数组的第一个元素</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.shift());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr);</span><br><span class=\"line\"><span class=\"comment\">// 和pop同理</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例：筛选数组\"><a href=\"#案例：筛选数组\" class=\"headerlink\" title=\"案例：筛选数组\"></a>案例：筛选数组</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 有一个包含工资的数组[1500,1200,2000,2100,1800]，要求把超过2000的删除，剩余的放到新数组里</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1500</span>,<span class=\"number\">1200</span>,<span class=\"number\">2000</span>,<span class=\"number\">2100</span>,<span class=\"number\">1800</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> newArr = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr[i] &lt; <span class=\"number\">2000</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// newArr[newArr.length] = arr[i];</span></span><br><span class=\"line\">        newArr.push(arr[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArr);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「数组排序」\"><a href=\"#「数组排序」\" class=\"headerlink\" title=\"「数组排序」\"></a><strong>「数组排序」</strong></h2><p>数组中有对数组本身排序的方法，部分方法如下表</p>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>说明</th>\n<th>是否修改原数组</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>reverse()</td>\n<td>颠倒数组中元素顺序，无参数</td>\n<td>会改变原来数组，返回新数组</td>\n</tr>\n<tr>\n<td>sort()</td>\n<td>对数组元素进行排序</td>\n<td>会改变原来数组， 返回新数组</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 数组排序</span></span><br><span class=\"line\"><span class=\"comment\">// 1.翻转数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">&#x27;pink&#x27;</span>,<span class=\"string\">&#x27;red&#x27;</span>,<span class=\"string\">&#x27;blue&#x27;</span>];</span><br><span class=\"line\">arr.reverse();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2.数组排序(冒泡排序)</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"number\">13</span>,<span class=\"number\">4</span>,<span class=\"number\">77</span>,<span class=\"number\">1</span>,<span class=\"number\">77</span>];</span><br><span class=\"line\">arr1.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// return a - b; // 升序的顺序排列</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> b - a; <span class=\"comment\">// 降序的顺序排列</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr1);</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：</strong></p>\n<ul>\n<li><strong>sort方法需要传入参数(函数)来设置升序、降序排序</strong></li>\n<li>如果传入“function(a,b){ return a-b;}”，则为升序</li>\n<li>如果传入“function(a,b){ return b-a;}”，则为降序</li>\n</ul>\n<h2 id=\"「数组索引方法」\"><a href=\"#「数组索引方法」\" class=\"headerlink\" title=\"「数组索引方法」\"></a><strong>「数组索引方法」</strong></h2><ul>\n<li>数组中有获取数组指定元素索引值的方法，部分方法如下表</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206121049869.png\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 返回数组元素索引号的方法 indexOf(数组元素)  作用就是返回该数组元素的索引号 从前面开始查找</span></span><br><span class=\"line\"><span class=\"comment\">// 它只返回第一个满足条件的索引号</span></span><br><span class=\"line\"><span class=\"comment\">// 如果在数组里面找不到元素，则返回的结果是-1</span></span><br><span class=\"line\"><span class=\"comment\">//var arr = [&#x27;red&#x27;,&#x27;green&#x27;,&#x27;blue&#x27;,&#x27;pink&#x27;,&#x27;blue&#x27;];</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">&#x27;red&#x27;</span>,<span class=\"string\">&#x27;green&#x27;</span>,<span class=\"string\">&#x27;pink&#x27;</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.indexOf(<span class=\"string\">&#x27;blue&#x27;</span>)); <span class=\"comment\">//-1</span></span><br><span class=\"line\"><span class=\"comment\">// 返回数组元素索引号的方法 lastindexOf(数组元素)  作用就是返回该数组元素的索引号 从后面开始查找</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">&#x27;red&#x27;</span>,<span class=\"string\">&#x27;green&#x27;</span>,<span class=\"string\">&#x27;blue&#x27;</span>,<span class=\"string\">&#x27;pink&#x27;</span>,<span class=\"string\">&#x27;blue&#x27;</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.lastindexOf(<span class=\"string\">&#x27;blue&#x27;</span>)); <span class=\"comment\">// 4</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例：数组去重\"><a href=\"#案例：数组去重\" class=\"headerlink\" title=\"案例：数组去重\"></a>案例：数组去重</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 数组去重 [&#x27;c&#x27;,&#x27;a&#x27;,&#x27;z&#x27;,&#x27;a&#x27;,&#x27;x&#x27;,&#x27;a&#x27;,&#x27;x&#x27;,&#x27;c&#x27;,&#x27;b&#x27;] 要求去除重复元素</span></span><br><span class=\"line\"><span class=\"comment\">// 1.目标：把旧数组里面不重复的元素取出来放进新数组，重复的元素只保留一个，放到新数组里去重</span></span><br><span class=\"line\"><span class=\"comment\">// 2.核心算法：遍历旧数组，然后拿旧数组元素查询新数组，如果该元素在新数组里没有出现过，我们就添加，否则不添加</span></span><br><span class=\"line\"><span class=\"comment\">// 3.如何知道该元素有没有存在？利用 新数组.indexOf(数组元素) 如果返回-1 ，说明数组里没有该元素</span></span><br><span class=\"line\"><span class=\"comment\">// 封装一个去重函数 unique &#x27;独一无二的&#x27;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unique</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> newArr = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (newArr.indexOf(arr[i]) === -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            newArr.push(arr[i]);     </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newArr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> demo = unique([<span class=\"string\">&#x27;c&#x27;</span>,<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;z&#x27;</span>,<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;x&#x27;</span>,<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;x&#x27;</span>,<span class=\"string\">&#x27;c&#x27;</span>,<span class=\"string\">&#x27;b&#x27;</span>]);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(demo);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「数组转换为字符串」\"><a href=\"#「数组转换为字符串」\" class=\"headerlink\" title=\"「数组转换为字符串」\"></a><strong>「数组转换为字符串」</strong></h2><ul>\n<li>数组中有把数组转化为字符串的方法，部分方法如下表</li>\n<li>注意：join方法如果不传入参数，则按照 “ , ”拼接元素</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206121108168.png\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.toString(</span></span><br><span class=\"line\">)    </span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = arr.toString(); <span class=\"comment\">// 将数组转换为字符串   </span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str); <span class=\"comment\">// 1,2,3,4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2.join(分隔符)</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> str2 = arr2.join(<span class=\"string\">&quot;|&quot;</span>);<span class=\"comment\">//按照键入字符将数组转换为字符串    </span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str2); <span class=\"comment\">// 1|2|3|4</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「其他方法」\"><a href=\"#「其他方法」\" class=\"headerlink\" title=\"「其他方法」\"></a><strong>「其他方法」</strong></h2><p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206121111243.png\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = [<span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr3 = arr.concat(arr2);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr3); <span class=\"comment\">// [1,2,3,4,5,6,7,8]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// slice(begin,end) 是一种左闭右开区间 [1,3)</span></span><br><span class=\"line\"><span class=\"comment\">// 从索引1出开始截取，到索引3之前</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr4 = arr.slice(<span class=\"number\">1</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr4); <span class=\"comment\">// [2,3]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr5 = arr2.splice(<span class=\"number\">0</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr5); <span class=\"comment\">// [5,6,7]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2); <span class=\"comment\">// [8]   splice()会影响原数组</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"字符串对象\"><a href=\"#字符串对象\" class=\"headerlink\" title=\"字符串对象\"></a><strong>字符串对象</strong></h1><h2 id=\"「基本包装类型」\"><a href=\"#「基本包装类型」\" class=\"headerlink\" title=\"「基本包装类型」\"></a><strong>「基本包装类型」</strong></h2><p>为了方便操作基本数据类型，JavaScript 还提供了三个特殊的引用类型：String、Number和 Boolean。<br>  <code>基本包装类型就是把简单数据类型包装成为复杂数据类型</code>，这样基本数据类型就有了属性和方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 下面代码有什么问题？</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;andy&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.length); <span class=\"comment\">// 4</span></span><br></pre></td></tr></table></figure>\n\n<p>  按道理基本数据类型是没有属性和方法的，而对象才有属性和方法，但上面代码却可以执行，这是因为 js 会把基本数据类型包装为复杂数据类型，其执行过程如下 ：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 生成临时变量，把简单类型包装为复杂数据类型</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> temp = <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">&#x27;andy&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 2. 赋值给我们声明的字符变量</span></span><br><span class=\"line\">str = temp;</span><br><span class=\"line\"><span class=\"comment\">// 3. 销毁临时变量</span></span><br><span class=\"line\">temp = <span class=\"literal\">null</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「字符串的不可变」\"><a href=\"#「字符串的不可变」\" class=\"headerlink\" title=\"「字符串的不可变」\"></a><strong>「字符串的不可变」</strong></h2><ul>\n<li>指的是里面的值不可变，虽然看上去可以改变内容，但其实是地址变了，内存中新开辟了一个内存空间。</li>\n<li>当重新给字符串变量赋值的时候，变量之前保存的字符串不会被修改，依然在内存中重新给字符串赋值，会重新在内存中开辟空间，这个特点就是字符串的不可变。</li>\n<li>由于字符串的不可变，在<strong>「大量拼接字符串」</strong>的时候会有效率问题</li>\n</ul>\n<h2 id=\"「根据字符返回位置」\"><a href=\"#「根据字符返回位置」\" class=\"headerlink\" title=\"「根据字符返回位置」\"></a><strong>「根据字符返回位置」</strong></h2><p>字符串通过基本包装类型可以调用部分方法来操作字符串，以下是返回指定字符的位置的方法：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206121130186.png\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&quot;anndy&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.indexOf(<span class=\"string\">&quot;d&quot;</span>)); <span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"comment\">//指定从索引号为4的地方开始查找字符&quot;d&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.indexOf(<span class=\"string\">&quot;d&quot;</span>, <span class=\"number\">4</span>)); <span class=\"comment\">// -1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.lastIndexOf(<span class=\"string\">&quot;n&quot;</span>)); <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"案例：查找字符串”abcoefoxyozzopp”中所有o出现的位置以及次数\"><a href=\"#案例：查找字符串”abcoefoxyozzopp”中所有o出现的位置以及次数\" class=\"headerlink\" title=\"案例：查找字符串”abcoefoxyozzopp”中所有o出现的位置以及次数\"></a>案例：查找字符串”abcoefoxyozzopp”中所有o出现的位置以及次数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//核心算法：先查找第一个o出现的位置</span></span><br><span class=\"line\"><span class=\"comment\">//然后 只要indexOf 返回的结果不是 -1 就继续往后查找</span></span><br><span class=\"line\"><span class=\"comment\">//因为indexOf 只能查找到第一个，所以后面的查找，利用第二个参数，当前索引加1，从而继续查找</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&quot;oabcoefoxyozzopp&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> index = str.indexOf(<span class=\"string\">&quot;o&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (index !== -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(index);</span><br><span class=\"line\">    num++;</span><br><span class=\"line\">    index = str.indexOf(<span class=\"string\">&quot;o&quot;</span>, index + <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;o出现的次数是&#x27;</span> + num);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「根据位置返回字符」\"><a href=\"#「根据位置返回字符」\" class=\"headerlink\" title=\"「根据位置返回字符」\"></a><strong>「根据位置返回字符」</strong></h2><p>字符串通过基本包装类型可以调用部分方法来操作字符串，以下是根据位置返回指定位置上的字符：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206121136083.png\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 根据位置返回字符</span></span><br><span class=\"line\"><span class=\"comment\">// 1. charAt(index) 根据位置返回字符</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;andy&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.charAt(<span class=\"number\">3</span>)); <span class=\"comment\">// y</span></span><br><span class=\"line\"><span class=\"comment\">// 遍历所有的字符</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; str.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(str.charAt(i));</span><br><span class=\"line\">&#125; <span class=\"comment\">// a n d y</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. charCodeAt(index)  </span></span><br><span class=\"line\"><span class=\"comment\">//返回相应索引号的字符ASCII值 目的： 判断用户按下了那个键 </span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.charCodeAt(<span class=\"number\">0</span>)); <span class=\"comment\">// 97</span></span><br><span class=\"line\"><span class=\"comment\">// 3. str[index] H5 新增的</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str[<span class=\"number\">0</span>]); <span class=\"comment\">// a</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"案例：判断一个字符串-‘abcoefoxyozzopp’-中出现次数最多的字符，并统计其次数\"><a href=\"#案例：判断一个字符串-‘abcoefoxyozzopp’-中出现次数最多的字符，并统计其次数\" class=\"headerlink\" title=\"案例：判断一个字符串 ‘abcoefoxyozzopp’ 中出现次数最多的字符，并统计其次数\"></a>案例：判断一个字符串 ‘abcoefoxyozzopp’ 中出现次数最多的字符，并统计其次数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//核心算法：利用 charAt(） 遍历这个字符串</span></span><br><span class=\"line\"><span class=\"comment\">//把每个字符都存储给对象， 如果对象没有该属性，就为1，如果存在了就 +1</span></span><br><span class=\"line\"><span class=\"comment\">//遍历对象，得到最大值和该字符 注意：在遍历的过程中，把字符串中的每个字符作为对象的属性存储在对象中，对应的属性值是该字符出现的次数     </span></span><br><span class=\"line\">\t <span class=\"keyword\">var</span> str = <span class=\"string\">&quot;abcoefoxyozzopp&quot;</span>;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> o = &#123;&#125;;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; str.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> chars = str.charAt(i); <span class=\"comment\">// chars 是 字符串的每一个字符</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (o[chars]) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// o[chars] 得到的是属性值</span></span><br><span class=\"line\">          o[chars]++;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          o[chars] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(o);</span><br><span class=\"line\">      <span class=\"comment\">// 2. 遍历对象</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> max = <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> ch = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> o) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// k 得到是 属性名</span></span><br><span class=\"line\">        <span class=\"comment\">// o[k] 得到的是属性值</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (o[k] &gt; max) &#123;</span><br><span class=\"line\">          max = o[k];</span><br><span class=\"line\">          ch = k;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(max);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;最多的字符是&quot;</span> + ch);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「字符串操作方法」\"><a href=\"#「字符串操作方法」\" class=\"headerlink\" title=\"「字符串操作方法」\"></a><strong>「字符串操作方法」</strong></h2><p>字符串通过基本包装类型可以调用部分方法来操作字符串，以下是部分操作方法：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206122119052.png\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 字符串操作方法</span></span><br><span class=\"line\"><span class=\"comment\">// 1. concat(&#x27;字符串1&#x27;,&#x27;字符串2&#x27;....)</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;andy&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.concat(<span class=\"string\">&#x27;red&#x27;</span>)); <span class=\"comment\">// andyred</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. substr(&#x27;截取的起始位置&#x27;, &#x27;截取几个字符&#x27;);</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str1 = <span class=\"string\">&#x27;改革春风吹满地&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 第一个2 是索引号的2 从第几个开始  第二个2 是取几个字符</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str1.substr(<span class=\"number\">2</span>, <span class=\"number\">2</span>)); <span class=\"comment\">// 春风</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 替换字符 replace(&#x27;被替换的字符&#x27;, &#x27;替换为的字符&#x27;)  它只会替换第一个字符</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&quot;andyandy&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.replace(<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>)); <span class=\"comment\">// bndyandy</span></span><br><span class=\"line\"><span class=\"comment\">// 有一个字符串 &#x27;abcoefoxyozzopp&#x27;  要求把里面所有的 o 替换为 *</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str1 = <span class=\"string\">&quot;abcoefoxyozzopp&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (str1.indexOf(<span class=\"string\">&quot;o&quot;</span>) !== -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">  str1 = str1.replace(<span class=\"string\">&quot;o&quot;</span>, <span class=\"string\">&quot;*&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str1); <span class=\"comment\">// abc*ef*xy*zz*pp</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. 字符转换为数组 split(&#x27;分隔符&#x27;)    </span></span><br><span class=\"line\"><span class=\"comment\">// 前面我们学过 join 把数组转换为字符串</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str2 = <span class=\"string\">&quot;red, pink, blue&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str2.split(<span class=\"string\">&quot;,&quot;</span>)); <span class=\"comment\">//[red,pink,blue]</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str3 = <span class=\"string\">&quot;red&amp;pink&amp;blue&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str3.split(<span class=\"string\">&quot;&amp;&quot;</span>)); <span class=\"comment\">// [red,pink,blue]</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"JavaScript函数","date":"2022-06-08T16:00:00.000Z","updated":"2022-06-09T16:00:00.000Z","keywords":null,"description":null,"top_img":"./img/bg25.jpg","cover":"./img/bg3.jpg","_content":"# 函数\n\n## **「1.函数的概念」**\n\n封装了一段可被重复调用执行的代码块，通过函数可以实现大量代码的重复使用。函数是一种数据类型。\n\n## **「2.函数的使用」**\n\n函数的使用分为两步：**声明函数**和**调用函数**\n\n- 声明函数\n\n```js\n// 1. 通过function关键字定义函数 -- 命名函数\n  function 函数名() {\n    函数体代码\n  }\n  // 1.1 function 是声明函数的关键字，必须小写\n  // 1.2 函数名 命名为动词形式 例: getSum\n  \n// 2. 通过函数表达式定义函数 ---匿名函数\n  var fn = function() {};\n  // 2.1 fn是变量名，不是函数名\n  // 2.2 fn是变量，只不过变量存储的是函数\n  // 2.3 函数表达式创建的函数可以通过 变量名() 来调用\n  // 2.4 函数表达式也可以定义形参和调用传入实参。\n\n```\n\n```js\n  // 匿名函数使用的有第二种方式- -匿名函数自调用\n  ( function() {\n      alert(123);\n  })\n  ();\n```\n\n- 调用函数\n\n```js\n// 2.调用函数\n  函数名(); \n  // 通过调用函数名来执行函数体代码\n  // 调用时不要忘记添加小括号\n  // 函数不调用，自己不执行\n```\n\n\n\n### 案例：函数封装求1-100和\n\n```js\n//函数计算1-100的和\nfunction getSum() {\n    var sum = 0;\n    for (var i = 1; i <= 100; i++) {\n        sum += i;\n    }\n    console.log(sum);\n} //声明\ngetSum(); //调用\n```\n\n## **「3.函数的参数」**\n\n- 形式参数：函数定义时，传递的参数（实参值传递给形参，不用声明的变量）\n\n- 实际参数：函数调用时，传递的参数\n\n```js\n// 带参数的函数声明\nfunction 函数名(形参1,形参2,形参3...) {\n    函数体;\n}\n// 带参数的函数调用\n函数名(实参1,实参2,实参3...);\n```\n\n**函数形参和实参数量不匹配时**\n\n| 参数个数    | 说明                                 |\n| ----------- | ------------------------------------ |\n| 实参 = 形参 | 输出正确结果                         |\n| 实参 > 形参 | 只取到形参的个数                     |\n| 实参 < 形参 | 多的形参定义为 undefined，结果为 NaN |\n\n```js\n\n      function getSum(a, b, c) {\n        return a + b + c;\n      }\n      // js中形参的默认值是undefined。\n      // 调用函数\n      var n = getSum(1, 2);// n = NaN\n      var n = getSum(1, 2, 3, 4); //1 + 2 +3 = 6\n\n```\n\n## **「4.函数的返回值」**\n\n```js\n// 1.函数是做某件事或者实现某种功能\nfunction cook(aru) {\n    console.log(aru);\n}\ncook('大肘子');\n\n// 2.函数的返回值格式\nfunction 函数名() {\n    return 需要返回的结果;\n}\n函数名();\n// (1)我们函数只是实现某种功能，最终的结果需要返回给函数的调用者 函数名() 通过return实现\n// (2)只要函数遇到return 就把后面的结果返回给函数的调用者 函数名() = return返回的结果\n\n// 3.代码演示\nfunction getResult() {\n    return 666;\n}\ngetResult(); // getResult() = 666\nconsole.log(getResult());\n\nfunction cook(aru) {\n    return aru;\n}\nconsole.log(cook('大肘子'))；\n```\n\n### 案例：求两个数最大值\n\n```js\n// 利用函数，求两个数最大值\nfunction getMax(num1,num2) {\n    if(num1 > num2) {\n        return num1;\n    } else {\n        return num2;\n    }\n    // return num1 > num2 ? num1 : num2;\n}\nconsole.log(getMax(1,3));\n```\n\n### 案例：求数组中最大值\n\n```js\n// 利用函数求数组['5','2','99','101','67','77'] 中的最大值\nfunction getArrMax(arr) {\n    var max = arr[0];\n    for (var i = 1; i <= arr.length; i++) {\n        if(arr[i] > max) {\n            max = arr[i];\n        }\n    }\n    return max;\n}\ngetArrMax(['5','2','99','101','67','77']); //实参是一个数组送过去\n// 在实际开发中，我们经常用一个变量来接收函数的返回结果\nvar re = getArrMax(['5','2','99','101','67','77']);\nconsole.log(re);\n```\n\n### **函数返回值注意事项**\n\n```js\n// 1.return终止函数\nfunction getSum(num1,num2) {\n    return num1 + num2; // return后面的代码不会被执行\n    alert('我是不会被执行的');\n}\nconsole.log(getSum(1,2));\n\n// 2.return只能返回一个值\nfunction fn(num1,num2) {\n    return num1,num2; // 返回的结果是最后一个\n}\nconsole.log(fn(1,2));\n\n// 3.求任意两数加减乘除的结果\nfunction gerResult(num1,num2) {\n    return [num1+num2, num1-num2,num1*num2, num1/num2];\n}\nvar re = getResult(1,2); // 返回的是一个数组\nconsole.log(re);\n\n// 4.函数没有return，返回undefined\nfunction fun() {\n    \n}\nconsole.log(fun()); // 函数返回的结果是undefined\n```\n\n### break,continue,return的区别\n\n- break: 结束当前的循环体 (如for、while)\n- continue: 跳出本次循环，继续执行下次循环\n- return: 不仅可以退出(函数体内)循环，还能够返回return语句中的值，同时还可以结束当前的函数体内的代码\n\n```js\n//避免踩坑 return只能结束函数体内的代码\n  function breakDown() {\n    for (var i = 0; i < 10; i++) {\n      if (i == 5) {\n        return 1;\n      }\n    console.log(i);\n    }\n  }\n  breakDown();\n  \n//避免踩坑2 函数如果有return 则返回的是 return 后面的值；\n// return d,a,b; 返回的是b的值\n//如果函数没有 return语句，则返回undefined\n\n```\n\n## **「5.arguments的使用」**\n\n  当不确定有多少个参数传递的时候，可以用 arguments 来获取。JS中，arguments实际上它是当前函数的一个内置对象。所有函数都内   置了一个 arguments 对象，arguments 对象中存储了传递的所有实参。arguments展示形式是一个伪数组，因此可以进行遍历。\n\n伪数组具有以下特点：\n\n1. 具有length属性\n2. 按索引方式存储数据\n3. 不具有数组的push，pop等方法\n\n```js\n// arguments的使用 只有函数才有arguments对象，而且每个函数都内置arguments\n  function fn() {\n    //arguments 里面存储了所有传递过来的实参\n    console.log(arguments);// [1,2,3...]\n    console.log(arguments[1]); // 2\n    console.log(arguments.length); // 3\n    \n    //我们可以按照数组的方式 遍历argument  \n    for(var i = 0; i <= arguments; i++) {\n        console.log(arguments[i]);\n    }\n  }\n  fn(1, 2, 3);\n\n// 伪数组并不是真正意义上的数组\n```\n\n### 案例：利用函数求最大值\n\n```js\n // 用伪数组 实现求最大值\n function getMax() {\n    var max = arguments[0];\n    for (var i = 1; i < arguments.length; i++) {\n      if (arguments[i] > arguments[0]) {\n        max = arguments[i];\n      }\n    }\n    return max;\n  }\n  var result = getMax(1,3,77,5,85)\n  colsole.log(result);\n```\n\n### 案例：利用函数翻转数组\n\n```js\n//利用函数翻转任意数组  reverse 翻转\nfunction reverse(arr) {\n    var newArr = [];\n    for (var i = arr.length - 1; i <= 0; i--) {\n        newArr[newArr.length] = arr[i];\n    }\n    return newArr;\n}\nvar arr1 = reverse([1,3,4,6,9]);\nconsole.log(arr1);\nvar arr2 = reverse(['red','pink','blue']);\nconsole.log(arr2);\n```\n\n### 案例：利用函数冒泡排序\n\n```js\n// 利用函数冒泡排序\nfunction sort(arr) {\n    for (var i = 0; i <= arr.length - 1; i++) {\n        for(var j = 0;j <= arr.length - i- 1; j++) {\n            if (arr[j] > arr[j+1]) {\n                var temp = arr[j];\n                arr[j] = arr[j+1];\n                arr[j+1] = temp;\n            }\n        }\n    }\n    return arr;\n}\nvar arr1 = sort([1,3,5,7]);\nconsole.log(arr1);\nvar arr2 = sort([2,3,5,1,88]);\nconsole.log(arr2);\n```\n\n### 案例：利用函数判断闰年\n\n```js\n// 利用函数判断闰年\nfunction isRunYear(year) {\n    //如果是闰年返回true，否则返回false\n    var flag = false;\n    if (year % 4 == 0 && year % 100 != 0 || year % 400 == 0) {\n        flag = true;\n    } \n    return flag;\n}\nconsole.log(isRunYear(2000));\nconsole.log(isRunYear(1999));\n```\n\n**函数是可以相互调用的**\n\n### 案例：输出年份的二月份天数\n\n```js\n//用户输入年份，输出该年份二月份的天数\nfunction backDay() {\n    var year = prompt('请您输入年份');\n    if (isRunYear(year)) {  // 调用函数需要加小括号\n        alert('当前年份是闰年2月份有29天');\n    } else {\n        alert('当前年份是平年2月份有28天');\n    }\n}\nfunction isRunYear(year) {\n    //如果是闰年返回true，否则返回false\n    var flag = false;\n    if (year % 4 == 0 && year % 100 != 0 || year % 400 == 0) {\n        flag = true;\n    } \n    return flag;\n}\nbackDay();\n```\n\n\n\n# 作用域\n\n## 作用域\n\n**「作用域」**一段程序代码中所用到的名字并不总是有效和可靠的，而限定这个名字的可用性代码范围就是这个名字的作用域。\n\n- 作用域的使用提高了程序逻辑的局部性，增强了程序的可靠性，减少了名字冲突。\n- ES6之前作用域有两种 `全局作用域`和`局部作用域`(函数作用域)\n\n**「全局作用域」**作用于所有代码执行的环境(整个 script 标签内部)或者一个独立的 js 文件。\n\n**「局部作用域」**作用于函数内部的代码环境，就是局部作用域。因为跟函数有关系，所以也被称为`函数作用域`。\n\n**「JS没有块级作用域」**\n\n- 块作用域由 {} 包括\n- 在其他编程语言，if语句中，循环语句创建的变量，仅仅只能在本if语句，本循环语句中使用，如下\n\n```java\n\n  if(true){\n    int num = 123;\n    System.out.print(num); //123\n  }\n  System.out.print(num);//报错\n```\n\n以上java代码会报错，因为代码中 {}是一块作用域，其中声明的变量num，在{}之外不能使用，而JavaScript代码则不会报错\n\nJs中没有块级作用域 (在ES6之前)\n\n```js\n if(true){\n    var num = 123;\n    console.log(num); // 123\n  }\n  console.log(num);// 123\n```\n\n## 变量的作用域\n\n在JavaScript中，根据作用域的不同，变量可以分为两种:\n\n- `全局变量`\n- `局部变量`\n\n**「全局变量」**在全局作用域下声明的变量(在函数外部定义的变量)\n\n- 全局变量在代码的任何位置都可以使用\n- 在全局作用域下 var 声明的变量 是全局变量\n- 特殊情况下，在函数内不使用var声明的变量也是全局变量(不建议使用)。\n\n**「局部变量」**在局部作用域下声明的变量(在函数内部定义的变量)\n\n- 局部变量只能在函数内部使用\n- 在函数内部 var声明的变量是局部变量\n- 函数的形参实际上就是局部变量\n\n**「全局变量和局部变量的区别」**\n\n- `全局变量:`在任何一个地方都可以使用，只有在浏览器关闭时才会销毁，因此比较占内存\n- `局部变量:`旨在函数内部使用，当其所在的代码块被执行时，才会被初始化；当代码块运行结束后，就会被销毁，因此更节省内存空间。\n\n## 作用域链\n\n**「作用域链」**只要是代码都在一个作用域中，写在函数内部的局部作用域，未卸载仍和行数内部即在全局作用域中；如果函数中还有函数，那么在这个作用域中就又可以诞生一个作用域；根据`[内部函数可以访问外部函数变量]` 的这种机制，用链式查找决定哪些数据能被内部函数访问，就称作作用域链。\n\n```js\n\n  function f1() {\n      var num = 123;\n      function f2() {\n          console.log( num );\n      }\n      f2();\n  }\n  var num = 456;\n  f1();//123\n```\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206102305503.png)\n\n`作用域链`采取就近原则的方式来查找变量最终的值\n\n```js\n  var a = 1;\n  function fn1() {\n      var a = 2;\n      var b = '22';\n      fn2();\n      function fn2() {\n          var a = 3;\n          fn3();\n          function fn3() {\n              var a = 4;\n              console.log(a); //a的值 4\n              console.log(b); //b的值 '22'\n          }\n      }\n  }\n  fn1();\n```\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206102306310.png)\n\n# 预解析\n\n**「预解析相关概念」**JavaScript代码是由浏览器中的JavaScript解析器来执行的。JavaScript解析器在运行JavaScript代码的时候分为两步:预解析和代码执行。\n\n- **「预解析」**在当前作用域下，JS代码执行之前，浏览器会默认把带有 var 和 function声明的变量在内存中进行提前声明或定义。\n- **「代码执行」**从上往下执行JS语句\n\n预解析会把变量和函数的声明在代码执行之前完成，**预解析也叫做变量、函数提升**。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/前端/Javascript函数.md","raw":"---\ntitle: JavaScript函数\ndate: 2022-06-09\nupdated: 2022-06-10\ntags:\n  - 小白的前端之路\n  - JavaScript基础\ncategories: 前端开发\nkeywords: \ndescription: \ntop_img: ./img/bg25.jpg\ncover: ./img/bg3.jpg\n\n---\n# 函数\n\n## **「1.函数的概念」**\n\n封装了一段可被重复调用执行的代码块，通过函数可以实现大量代码的重复使用。函数是一种数据类型。\n\n## **「2.函数的使用」**\n\n函数的使用分为两步：**声明函数**和**调用函数**\n\n- 声明函数\n\n```js\n// 1. 通过function关键字定义函数 -- 命名函数\n  function 函数名() {\n    函数体代码\n  }\n  // 1.1 function 是声明函数的关键字，必须小写\n  // 1.2 函数名 命名为动词形式 例: getSum\n  \n// 2. 通过函数表达式定义函数 ---匿名函数\n  var fn = function() {};\n  // 2.1 fn是变量名，不是函数名\n  // 2.2 fn是变量，只不过变量存储的是函数\n  // 2.3 函数表达式创建的函数可以通过 变量名() 来调用\n  // 2.4 函数表达式也可以定义形参和调用传入实参。\n\n```\n\n```js\n  // 匿名函数使用的有第二种方式- -匿名函数自调用\n  ( function() {\n      alert(123);\n  })\n  ();\n```\n\n- 调用函数\n\n```js\n// 2.调用函数\n  函数名(); \n  // 通过调用函数名来执行函数体代码\n  // 调用时不要忘记添加小括号\n  // 函数不调用，自己不执行\n```\n\n\n\n### 案例：函数封装求1-100和\n\n```js\n//函数计算1-100的和\nfunction getSum() {\n    var sum = 0;\n    for (var i = 1; i <= 100; i++) {\n        sum += i;\n    }\n    console.log(sum);\n} //声明\ngetSum(); //调用\n```\n\n## **「3.函数的参数」**\n\n- 形式参数：函数定义时，传递的参数（实参值传递给形参，不用声明的变量）\n\n- 实际参数：函数调用时，传递的参数\n\n```js\n// 带参数的函数声明\nfunction 函数名(形参1,形参2,形参3...) {\n    函数体;\n}\n// 带参数的函数调用\n函数名(实参1,实参2,实参3...);\n```\n\n**函数形参和实参数量不匹配时**\n\n| 参数个数    | 说明                                 |\n| ----------- | ------------------------------------ |\n| 实参 = 形参 | 输出正确结果                         |\n| 实参 > 形参 | 只取到形参的个数                     |\n| 实参 < 形参 | 多的形参定义为 undefined，结果为 NaN |\n\n```js\n\n      function getSum(a, b, c) {\n        return a + b + c;\n      }\n      // js中形参的默认值是undefined。\n      // 调用函数\n      var n = getSum(1, 2);// n = NaN\n      var n = getSum(1, 2, 3, 4); //1 + 2 +3 = 6\n\n```\n\n## **「4.函数的返回值」**\n\n```js\n// 1.函数是做某件事或者实现某种功能\nfunction cook(aru) {\n    console.log(aru);\n}\ncook('大肘子');\n\n// 2.函数的返回值格式\nfunction 函数名() {\n    return 需要返回的结果;\n}\n函数名();\n// (1)我们函数只是实现某种功能，最终的结果需要返回给函数的调用者 函数名() 通过return实现\n// (2)只要函数遇到return 就把后面的结果返回给函数的调用者 函数名() = return返回的结果\n\n// 3.代码演示\nfunction getResult() {\n    return 666;\n}\ngetResult(); // getResult() = 666\nconsole.log(getResult());\n\nfunction cook(aru) {\n    return aru;\n}\nconsole.log(cook('大肘子'))；\n```\n\n### 案例：求两个数最大值\n\n```js\n// 利用函数，求两个数最大值\nfunction getMax(num1,num2) {\n    if(num1 > num2) {\n        return num1;\n    } else {\n        return num2;\n    }\n    // return num1 > num2 ? num1 : num2;\n}\nconsole.log(getMax(1,3));\n```\n\n### 案例：求数组中最大值\n\n```js\n// 利用函数求数组['5','2','99','101','67','77'] 中的最大值\nfunction getArrMax(arr) {\n    var max = arr[0];\n    for (var i = 1; i <= arr.length; i++) {\n        if(arr[i] > max) {\n            max = arr[i];\n        }\n    }\n    return max;\n}\ngetArrMax(['5','2','99','101','67','77']); //实参是一个数组送过去\n// 在实际开发中，我们经常用一个变量来接收函数的返回结果\nvar re = getArrMax(['5','2','99','101','67','77']);\nconsole.log(re);\n```\n\n### **函数返回值注意事项**\n\n```js\n// 1.return终止函数\nfunction getSum(num1,num2) {\n    return num1 + num2; // return后面的代码不会被执行\n    alert('我是不会被执行的');\n}\nconsole.log(getSum(1,2));\n\n// 2.return只能返回一个值\nfunction fn(num1,num2) {\n    return num1,num2; // 返回的结果是最后一个\n}\nconsole.log(fn(1,2));\n\n// 3.求任意两数加减乘除的结果\nfunction gerResult(num1,num2) {\n    return [num1+num2, num1-num2,num1*num2, num1/num2];\n}\nvar re = getResult(1,2); // 返回的是一个数组\nconsole.log(re);\n\n// 4.函数没有return，返回undefined\nfunction fun() {\n    \n}\nconsole.log(fun()); // 函数返回的结果是undefined\n```\n\n### break,continue,return的区别\n\n- break: 结束当前的循环体 (如for、while)\n- continue: 跳出本次循环，继续执行下次循环\n- return: 不仅可以退出(函数体内)循环，还能够返回return语句中的值，同时还可以结束当前的函数体内的代码\n\n```js\n//避免踩坑 return只能结束函数体内的代码\n  function breakDown() {\n    for (var i = 0; i < 10; i++) {\n      if (i == 5) {\n        return 1;\n      }\n    console.log(i);\n    }\n  }\n  breakDown();\n  \n//避免踩坑2 函数如果有return 则返回的是 return 后面的值；\n// return d,a,b; 返回的是b的值\n//如果函数没有 return语句，则返回undefined\n\n```\n\n## **「5.arguments的使用」**\n\n  当不确定有多少个参数传递的时候，可以用 arguments 来获取。JS中，arguments实际上它是当前函数的一个内置对象。所有函数都内   置了一个 arguments 对象，arguments 对象中存储了传递的所有实参。arguments展示形式是一个伪数组，因此可以进行遍历。\n\n伪数组具有以下特点：\n\n1. 具有length属性\n2. 按索引方式存储数据\n3. 不具有数组的push，pop等方法\n\n```js\n// arguments的使用 只有函数才有arguments对象，而且每个函数都内置arguments\n  function fn() {\n    //arguments 里面存储了所有传递过来的实参\n    console.log(arguments);// [1,2,3...]\n    console.log(arguments[1]); // 2\n    console.log(arguments.length); // 3\n    \n    //我们可以按照数组的方式 遍历argument  \n    for(var i = 0; i <= arguments; i++) {\n        console.log(arguments[i]);\n    }\n  }\n  fn(1, 2, 3);\n\n// 伪数组并不是真正意义上的数组\n```\n\n### 案例：利用函数求最大值\n\n```js\n // 用伪数组 实现求最大值\n function getMax() {\n    var max = arguments[0];\n    for (var i = 1; i < arguments.length; i++) {\n      if (arguments[i] > arguments[0]) {\n        max = arguments[i];\n      }\n    }\n    return max;\n  }\n  var result = getMax(1,3,77,5,85)\n  colsole.log(result);\n```\n\n### 案例：利用函数翻转数组\n\n```js\n//利用函数翻转任意数组  reverse 翻转\nfunction reverse(arr) {\n    var newArr = [];\n    for (var i = arr.length - 1; i <= 0; i--) {\n        newArr[newArr.length] = arr[i];\n    }\n    return newArr;\n}\nvar arr1 = reverse([1,3,4,6,9]);\nconsole.log(arr1);\nvar arr2 = reverse(['red','pink','blue']);\nconsole.log(arr2);\n```\n\n### 案例：利用函数冒泡排序\n\n```js\n// 利用函数冒泡排序\nfunction sort(arr) {\n    for (var i = 0; i <= arr.length - 1; i++) {\n        for(var j = 0;j <= arr.length - i- 1; j++) {\n            if (arr[j] > arr[j+1]) {\n                var temp = arr[j];\n                arr[j] = arr[j+1];\n                arr[j+1] = temp;\n            }\n        }\n    }\n    return arr;\n}\nvar arr1 = sort([1,3,5,7]);\nconsole.log(arr1);\nvar arr2 = sort([2,3,5,1,88]);\nconsole.log(arr2);\n```\n\n### 案例：利用函数判断闰年\n\n```js\n// 利用函数判断闰年\nfunction isRunYear(year) {\n    //如果是闰年返回true，否则返回false\n    var flag = false;\n    if (year % 4 == 0 && year % 100 != 0 || year % 400 == 0) {\n        flag = true;\n    } \n    return flag;\n}\nconsole.log(isRunYear(2000));\nconsole.log(isRunYear(1999));\n```\n\n**函数是可以相互调用的**\n\n### 案例：输出年份的二月份天数\n\n```js\n//用户输入年份，输出该年份二月份的天数\nfunction backDay() {\n    var year = prompt('请您输入年份');\n    if (isRunYear(year)) {  // 调用函数需要加小括号\n        alert('当前年份是闰年2月份有29天');\n    } else {\n        alert('当前年份是平年2月份有28天');\n    }\n}\nfunction isRunYear(year) {\n    //如果是闰年返回true，否则返回false\n    var flag = false;\n    if (year % 4 == 0 && year % 100 != 0 || year % 400 == 0) {\n        flag = true;\n    } \n    return flag;\n}\nbackDay();\n```\n\n\n\n# 作用域\n\n## 作用域\n\n**「作用域」**一段程序代码中所用到的名字并不总是有效和可靠的，而限定这个名字的可用性代码范围就是这个名字的作用域。\n\n- 作用域的使用提高了程序逻辑的局部性，增强了程序的可靠性，减少了名字冲突。\n- ES6之前作用域有两种 `全局作用域`和`局部作用域`(函数作用域)\n\n**「全局作用域」**作用于所有代码执行的环境(整个 script 标签内部)或者一个独立的 js 文件。\n\n**「局部作用域」**作用于函数内部的代码环境，就是局部作用域。因为跟函数有关系，所以也被称为`函数作用域`。\n\n**「JS没有块级作用域」**\n\n- 块作用域由 {} 包括\n- 在其他编程语言，if语句中，循环语句创建的变量，仅仅只能在本if语句，本循环语句中使用，如下\n\n```java\n\n  if(true){\n    int num = 123;\n    System.out.print(num); //123\n  }\n  System.out.print(num);//报错\n```\n\n以上java代码会报错，因为代码中 {}是一块作用域，其中声明的变量num，在{}之外不能使用，而JavaScript代码则不会报错\n\nJs中没有块级作用域 (在ES6之前)\n\n```js\n if(true){\n    var num = 123;\n    console.log(num); // 123\n  }\n  console.log(num);// 123\n```\n\n## 变量的作用域\n\n在JavaScript中，根据作用域的不同，变量可以分为两种:\n\n- `全局变量`\n- `局部变量`\n\n**「全局变量」**在全局作用域下声明的变量(在函数外部定义的变量)\n\n- 全局变量在代码的任何位置都可以使用\n- 在全局作用域下 var 声明的变量 是全局变量\n- 特殊情况下，在函数内不使用var声明的变量也是全局变量(不建议使用)。\n\n**「局部变量」**在局部作用域下声明的变量(在函数内部定义的变量)\n\n- 局部变量只能在函数内部使用\n- 在函数内部 var声明的变量是局部变量\n- 函数的形参实际上就是局部变量\n\n**「全局变量和局部变量的区别」**\n\n- `全局变量:`在任何一个地方都可以使用，只有在浏览器关闭时才会销毁，因此比较占内存\n- `局部变量:`旨在函数内部使用，当其所在的代码块被执行时，才会被初始化；当代码块运行结束后，就会被销毁，因此更节省内存空间。\n\n## 作用域链\n\n**「作用域链」**只要是代码都在一个作用域中，写在函数内部的局部作用域，未卸载仍和行数内部即在全局作用域中；如果函数中还有函数，那么在这个作用域中就又可以诞生一个作用域；根据`[内部函数可以访问外部函数变量]` 的这种机制，用链式查找决定哪些数据能被内部函数访问，就称作作用域链。\n\n```js\n\n  function f1() {\n      var num = 123;\n      function f2() {\n          console.log( num );\n      }\n      f2();\n  }\n  var num = 456;\n  f1();//123\n```\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206102305503.png)\n\n`作用域链`采取就近原则的方式来查找变量最终的值\n\n```js\n  var a = 1;\n  function fn1() {\n      var a = 2;\n      var b = '22';\n      fn2();\n      function fn2() {\n          var a = 3;\n          fn3();\n          function fn3() {\n              var a = 4;\n              console.log(a); //a的值 4\n              console.log(b); //b的值 '22'\n          }\n      }\n  }\n  fn1();\n```\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206102306310.png)\n\n# 预解析\n\n**「预解析相关概念」**JavaScript代码是由浏览器中的JavaScript解析器来执行的。JavaScript解析器在运行JavaScript代码的时候分为两步:预解析和代码执行。\n\n- **「预解析」**在当前作用域下，JS代码执行之前，浏览器会默认把带有 var 和 function声明的变量在内存中进行提前声明或定义。\n- **「代码执行」**从上往下执行JS语句\n\n预解析会把变量和函数的声明在代码执行之前完成，**预解析也叫做变量、函数提升**。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"前端/Javascript函数","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cl5db79k70013ywtucd2r3uop","content":"<h1 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h1><h2 id=\"「1-函数的概念」\"><a href=\"#「1-函数的概念」\" class=\"headerlink\" title=\"「1.函数的概念」\"></a><strong>「1.函数的概念」</strong></h2><p>封装了一段可被重复调用执行的代码块，通过函数可以实现大量代码的重复使用。函数是一种数据类型。</p>\n<h2 id=\"「2-函数的使用」\"><a href=\"#「2-函数的使用」\" class=\"headerlink\" title=\"「2.函数的使用」\"></a><strong>「2.函数的使用」</strong></h2><p>函数的使用分为两步：<strong>声明函数</strong>和<strong>调用函数</strong></p>\n<ul>\n<li>声明函数</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 通过function关键字定义函数 -- 命名函数</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> 函数名(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    函数体代码</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 1.1 function 是声明函数的关键字，必须小写</span></span><br><span class=\"line\">  <span class=\"comment\">// 1.2 函数名 命名为动词形式 例: getSum</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">// 2. 通过函数表达式定义函数 ---匿名函数</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> fn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">  <span class=\"comment\">// 2.1 fn是变量名，不是函数名</span></span><br><span class=\"line\">  <span class=\"comment\">// 2.2 fn是变量，只不过变量存储的是函数</span></span><br><span class=\"line\">  <span class=\"comment\">// 2.3 函数表达式创建的函数可以通过 变量名() 来调用</span></span><br><span class=\"line\">  <span class=\"comment\">// 2.4 函数表达式也可以定义形参和调用传入实参。</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 匿名函数使用的有第二种方式- -匿名函数自调用</span></span><br><span class=\"line\">( <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"number\">123</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">();</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>调用函数</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 2.调用函数</span></span><br><span class=\"line\">  函数名(); </span><br><span class=\"line\">  <span class=\"comment\">// 通过调用函数名来执行函数体代码</span></span><br><span class=\"line\">  <span class=\"comment\">// 调用时不要忘记添加小括号</span></span><br><span class=\"line\">  <span class=\"comment\">// 函数不调用，自己不执行</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"案例：函数封装求1-100和\"><a href=\"#案例：函数封装求1-100和\" class=\"headerlink\" title=\"案例：函数封装求1-100和\"></a>案例：函数封装求1-100和</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//函数计算1-100的和</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSum</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">        sum += i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(sum);</span><br><span class=\"line\">&#125; <span class=\"comment\">//声明</span></span><br><span class=\"line\">getSum(); <span class=\"comment\">//调用</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「3-函数的参数」\"><a href=\"#「3-函数的参数」\" class=\"headerlink\" title=\"「3.函数的参数」\"></a><strong>「3.函数的参数」</strong></h2><ul>\n<li><p>形式参数：函数定义时，传递的参数（实参值传递给形参，不用声明的变量）</p>\n</li>\n<li><p>实际参数：函数调用时，传递的参数</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 带参数的函数声明</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> 函数名(<span class=\"params\">形参<span class=\"number\">1</span>,形参<span class=\"number\">2</span>,形参<span class=\"number\">3.</span>..</span>) </span>&#123;</span><br><span class=\"line\">    函数体;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 带参数的函数调用</span></span><br><span class=\"line\">函数名(实参<span class=\"number\">1</span>,实参<span class=\"number\">2</span>,实参<span class=\"number\">3.</span>..);</span><br></pre></td></tr></table></figure>\n\n<p><strong>函数形参和实参数量不匹配时</strong></p>\n<table>\n<thead>\n<tr>\n<th>参数个数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>实参 = 形参</td>\n<td>输出正确结果</td>\n</tr>\n<tr>\n<td>实参 &gt; 形参</td>\n<td>只取到形参的个数</td>\n</tr>\n<tr>\n<td>实参 &lt; 形参</td>\n<td>多的形参定义为 undefined，结果为 NaN</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSum</span>(<span class=\"params\">a, b, c</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + b + c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// js中形参的默认值是undefined。</span></span><br><span class=\"line\"><span class=\"comment\">// 调用函数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> n = getSum(<span class=\"number\">1</span>, <span class=\"number\">2</span>);<span class=\"comment\">// n = NaN</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> n = getSum(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>); <span class=\"comment\">//1 + 2 +3 = 6</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「4-函数的返回值」\"><a href=\"#「4-函数的返回值」\" class=\"headerlink\" title=\"「4.函数的返回值」\"></a><strong>「4.函数的返回值」</strong></h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.函数是做某件事或者实现某种功能</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cook</span>(<span class=\"params\">aru</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(aru);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">cook(<span class=\"string\">&#x27;大肘子&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2.函数的返回值格式</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> 函数名(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> 需要返回的结果;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">函数名();</span><br><span class=\"line\"><span class=\"comment\">// (1)我们函数只是实现某种功能，最终的结果需要返回给函数的调用者 函数名() 通过return实现</span></span><br><span class=\"line\"><span class=\"comment\">// (2)只要函数遇到return 就把后面的结果返回给函数的调用者 函数名() = return返回的结果</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3.代码演示</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getResult</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">666</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">getResult(); <span class=\"comment\">// getResult() = 666</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(getResult());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cook</span>(<span class=\"params\">aru</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> aru;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(cook(<span class=\"string\">&#x27;大肘子&#x27;</span>))；</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例：求两个数最大值\"><a href=\"#案例：求两个数最大值\" class=\"headerlink\" title=\"案例：求两个数最大值\"></a>案例：求两个数最大值</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 利用函数，求两个数最大值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getMax</span>(<span class=\"params\">num1,num2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(num1 &gt; num2) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> num1;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> num2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// return num1 &gt; num2 ? num1 : num2;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(getMax(<span class=\"number\">1</span>,<span class=\"number\">3</span>));</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例：求数组中最大值\"><a href=\"#案例：求数组中最大值\" class=\"headerlink\" title=\"案例：求数组中最大值\"></a>案例：求数组中最大值</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 利用函数求数组[&#x27;5&#x27;,&#x27;2&#x27;,&#x27;99&#x27;,&#x27;101&#x27;,&#x27;67&#x27;,&#x27;77&#x27;] 中的最大值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getArrMax</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> max = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= arr.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr[i] &gt; max) &#123;</span><br><span class=\"line\">            max = arr[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">getArrMax([<span class=\"string\">&#x27;5&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"string\">&#x27;99&#x27;</span>,<span class=\"string\">&#x27;101&#x27;</span>,<span class=\"string\">&#x27;67&#x27;</span>,<span class=\"string\">&#x27;77&#x27;</span>]); <span class=\"comment\">//实参是一个数组送过去</span></span><br><span class=\"line\"><span class=\"comment\">// 在实际开发中，我们经常用一个变量来接收函数的返回结果</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> re = getArrMax([<span class=\"string\">&#x27;5&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"string\">&#x27;99&#x27;</span>,<span class=\"string\">&#x27;101&#x27;</span>,<span class=\"string\">&#x27;67&#x27;</span>,<span class=\"string\">&#x27;77&#x27;</span>]);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(re);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"函数返回值注意事项\"><a href=\"#函数返回值注意事项\" class=\"headerlink\" title=\"函数返回值注意事项\"></a><strong>函数返回值注意事项</strong></h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.return终止函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSum</span>(<span class=\"params\">num1,num2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num1 + num2; <span class=\"comment\">// return后面的代码不会被执行</span></span><br><span class=\"line\">    alert(<span class=\"string\">&#x27;我是不会被执行的&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(getSum(<span class=\"number\">1</span>,<span class=\"number\">2</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2.return只能返回一个值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">num1,num2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num1,num2; <span class=\"comment\">// 返回的结果是最后一个</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(fn(<span class=\"number\">1</span>,<span class=\"number\">2</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3.求任意两数加减乘除的结果</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">gerResult</span>(<span class=\"params\">num1,num2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [num1+num2, num1-num2,num1*num2, num1/num2];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> re = getResult(<span class=\"number\">1</span>,<span class=\"number\">2</span>); <span class=\"comment\">// 返回的是一个数组</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(re);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 4.函数没有return，返回undefined</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(fun()); <span class=\"comment\">// 函数返回的结果是undefined</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"break-continue-return的区别\"><a href=\"#break-continue-return的区别\" class=\"headerlink\" title=\"break,continue,return的区别\"></a>break,continue,return的区别</h3><ul>\n<li>break: 结束当前的循环体 (如for、while)</li>\n<li>continue: 跳出本次循环，继续执行下次循环</li>\n<li>return: 不仅可以退出(函数体内)循环，还能够返回return语句中的值，同时还可以结束当前的函数体内的代码</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//避免踩坑 return只能结束函数体内的代码</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">breakDown</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (i == <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  breakDown();</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">//避免踩坑2 函数如果有return 则返回的是 return 后面的值；</span></span><br><span class=\"line\"><span class=\"comment\">// return d,a,b; 返回的是b的值</span></span><br><span class=\"line\"><span class=\"comment\">//如果函数没有 return语句，则返回undefined</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「5-arguments的使用」\"><a href=\"#「5-arguments的使用」\" class=\"headerlink\" title=\"「5.arguments的使用」\"></a><strong>「5.arguments的使用」</strong></h2><p>  当不确定有多少个参数传递的时候，可以用 arguments 来获取。JS中，arguments实际上它是当前函数的一个内置对象。所有函数都内   置了一个 arguments 对象，arguments 对象中存储了传递的所有实参。arguments展示形式是一个伪数组，因此可以进行遍历。</p>\n<p>伪数组具有以下特点：</p>\n<ol>\n<li>具有length属性</li>\n<li>按索引方式存储数据</li>\n<li>不具有数组的push，pop等方法</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// arguments的使用 只有函数才有arguments对象，而且每个函数都内置arguments</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//arguments 里面存储了所有传递过来的实参</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>);<span class=\"comment\">// [1,2,3...]</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>[<span class=\"number\">1</span>]); <span class=\"comment\">// 2</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>.length); <span class=\"comment\">// 3</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//我们可以按照数组的方式 遍历argument  </span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt;= <span class=\"built_in\">arguments</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  fn(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 伪数组并不是真正意义上的数组</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例：利用函数求最大值\"><a href=\"#案例：利用函数求最大值\" class=\"headerlink\" title=\"案例：利用函数求最大值\"></a>案例：利用函数求最大值</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 用伪数组 实现求最大值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getMax</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> max = <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">   <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"built_in\">arguments</span>.length; i++) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>[i] &gt; <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">       max = <span class=\"built_in\">arguments</span>[i];</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> max;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> result = getMax(<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">77</span>,<span class=\"number\">5</span>,<span class=\"number\">85</span>)</span><br><span class=\"line\"> colsole.log(result);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例：利用函数翻转数组\"><a href=\"#案例：利用函数翻转数组\" class=\"headerlink\" title=\"案例：利用函数翻转数组\"></a>案例：利用函数翻转数组</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//利用函数翻转任意数组  reverse 翻转</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reverse</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> newArr = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = arr.length - <span class=\"number\">1</span>; i &lt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">        newArr[newArr.length] = arr[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newArr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr1 = reverse([<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">9</span>]);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr1);</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = reverse([<span class=\"string\">&#x27;red&#x27;</span>,<span class=\"string\">&#x27;pink&#x27;</span>,<span class=\"string\">&#x27;blue&#x27;</span>]);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例：利用函数冒泡排序\"><a href=\"#案例：利用函数冒泡排序\" class=\"headerlink\" title=\"案例：利用函数冒泡排序\"></a>案例：利用函数冒泡排序</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 利用函数冒泡排序</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sort</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt;= arr.length - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>;j &lt;= arr.length - i- <span class=\"number\">1</span>; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[j] &gt; arr[j+<span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> temp = arr[j];</span><br><span class=\"line\">                arr[j] = arr[j+<span class=\"number\">1</span>];</span><br><span class=\"line\">                arr[j+<span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr1 = sort([<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>]);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr1);</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = sort([<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">1</span>,<span class=\"number\">88</span>]);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例：利用函数判断闰年\"><a href=\"#案例：利用函数判断闰年\" class=\"headerlink\" title=\"案例：利用函数判断闰年\"></a>案例：利用函数判断闰年</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 利用函数判断闰年</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isRunYear</span>(<span class=\"params\">year</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//如果是闰年返回true，否则返回false</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (year % <span class=\"number\">4</span> == <span class=\"number\">0</span> &amp;&amp; year % <span class=\"number\">100</span> != <span class=\"number\">0</span> || year % <span class=\"number\">400</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> flag;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isRunYear(<span class=\"number\">2000</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isRunYear(<span class=\"number\">1999</span>));</span><br></pre></td></tr></table></figure>\n\n<p><strong>函数是可以相互调用的</strong></p>\n<h3 id=\"案例：输出年份的二月份天数\"><a href=\"#案例：输出年份的二月份天数\" class=\"headerlink\" title=\"案例：输出年份的二月份天数\"></a>案例：输出年份的二月份天数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//用户输入年份，输出该年份二月份的天数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">backDay</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> year = prompt(<span class=\"string\">&#x27;请您输入年份&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isRunYear(year)) &#123;  <span class=\"comment\">// 调用函数需要加小括号</span></span><br><span class=\"line\">        alert(<span class=\"string\">&#x27;当前年份是闰年2月份有29天&#x27;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        alert(<span class=\"string\">&#x27;当前年份是平年2月份有28天&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isRunYear</span>(<span class=\"params\">year</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//如果是闰年返回true，否则返回false</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (year % <span class=\"number\">4</span> == <span class=\"number\">0</span> &amp;&amp; year % <span class=\"number\">100</span> != <span class=\"number\">0</span> || year % <span class=\"number\">400</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> flag;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">backDay();</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h1><h2 id=\"作用域-1\"><a href=\"#作用域-1\" class=\"headerlink\" title=\"作用域\"></a>作用域</h2><p><strong>「作用域」</strong>一段程序代码中所用到的名字并不总是有效和可靠的，而限定这个名字的可用性代码范围就是这个名字的作用域。</p>\n<ul>\n<li>作用域的使用提高了程序逻辑的局部性，增强了程序的可靠性，减少了名字冲突。</li>\n<li>ES6之前作用域有两种 <code>全局作用域</code>和<code>局部作用域</code>(函数作用域)</li>\n</ul>\n<p><strong>「全局作用域」</strong>作用于所有代码执行的环境(整个 script 标签内部)或者一个独立的 js 文件。</p>\n<p><strong>「局部作用域」</strong>作用于函数内部的代码环境，就是局部作用域。因为跟函数有关系，所以也被称为<code>函数作用域</code>。</p>\n<p><strong>「JS没有块级作用域」</strong></p>\n<ul>\n<li>块作用域由 {} 包括</li>\n<li>在其他编程语言，if语句中，循环语句创建的变量，仅仅只能在本if语句，本循环语句中使用，如下</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> num = <span class=\"number\">123</span>;</span><br><span class=\"line\">  System.out.print(num); <span class=\"comment\">//123</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">System.out.print(num);<span class=\"comment\">//报错</span></span><br></pre></td></tr></table></figure>\n\n<p>以上java代码会报错，因为代码中 {}是一块作用域，其中声明的变量num，在{}之外不能使用，而JavaScript代码则不会报错</p>\n<p>Js中没有块级作用域 (在ES6之前)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> num = <span class=\"number\">123</span>;</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(num); <span class=\"comment\">// 123</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(num);<span class=\"comment\">// 123</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"变量的作用域\"><a href=\"#变量的作用域\" class=\"headerlink\" title=\"变量的作用域\"></a>变量的作用域</h2><p>在JavaScript中，根据作用域的不同，变量可以分为两种:</p>\n<ul>\n<li><code>全局变量</code></li>\n<li><code>局部变量</code></li>\n</ul>\n<p><strong>「全局变量」</strong>在全局作用域下声明的变量(在函数外部定义的变量)</p>\n<ul>\n<li>全局变量在代码的任何位置都可以使用</li>\n<li>在全局作用域下 var 声明的变量 是全局变量</li>\n<li>特殊情况下，在函数内不使用var声明的变量也是全局变量(不建议使用)。</li>\n</ul>\n<p><strong>「局部变量」</strong>在局部作用域下声明的变量(在函数内部定义的变量)</p>\n<ul>\n<li>局部变量只能在函数内部使用</li>\n<li>在函数内部 var声明的变量是局部变量</li>\n<li>函数的形参实际上就是局部变量</li>\n</ul>\n<p><strong>「全局变量和局部变量的区别」</strong></p>\n<ul>\n<li><code>全局变量:</code>在任何一个地方都可以使用，只有在浏览器关闭时才会销毁，因此比较占内存</li>\n<li><code>局部变量:</code>旨在函数内部使用，当其所在的代码块被执行时，才会被初始化；当代码块运行结束后，就会被销毁，因此更节省内存空间。</li>\n</ul>\n<h2 id=\"作用域链\"><a href=\"#作用域链\" class=\"headerlink\" title=\"作用域链\"></a>作用域链</h2><p><strong>「作用域链」</strong>只要是代码都在一个作用域中，写在函数内部的局部作用域，未卸载仍和行数内部即在全局作用域中；如果函数中还有函数，那么在这个作用域中就又可以诞生一个作用域；根据<code>[内部函数可以访问外部函数变量]</code> 的这种机制，用链式查找决定哪些数据能被内部函数访问，就称作作用域链。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> num = <span class=\"number\">123</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log( num );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    f2();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">456</span>;</span><br><span class=\"line\">f1();<span class=\"comment\">//123</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206102305503.png\"></p>\n<p><code>作用域链</code>采取就近原则的方式来查找变量最终的值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> b = <span class=\"string\">&#x27;22&#x27;</span>;</span><br><span class=\"line\">    fn2();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> a = <span class=\"number\">3</span>;</span><br><span class=\"line\">        fn3();</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn3</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> a = <span class=\"number\">4</span>;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(a); <span class=\"comment\">//a的值 4</span></span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(b); <span class=\"comment\">//b的值 &#x27;22&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn1();</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206102306310.png\"></p>\n<h1 id=\"预解析\"><a href=\"#预解析\" class=\"headerlink\" title=\"预解析\"></a>预解析</h1><p><strong>「预解析相关概念」</strong>JavaScript代码是由浏览器中的JavaScript解析器来执行的。JavaScript解析器在运行JavaScript代码的时候分为两步:预解析和代码执行。</p>\n<ul>\n<li><strong>「预解析」</strong>在当前作用域下，JS代码执行之前，浏览器会默认把带有 var 和 function声明的变量在内存中进行提前声明或定义。</li>\n<li><strong>「代码执行」</strong>从上往下执行JS语句</li>\n</ul>\n<p>预解析会把变量和函数的声明在代码执行之前完成，<strong>预解析也叫做变量、函数提升</strong>。</p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<h1 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h1><h2 id=\"「1-函数的概念」\"><a href=\"#「1-函数的概念」\" class=\"headerlink\" title=\"「1.函数的概念」\"></a><strong>「1.函数的概念」</strong></h2><p>封装了一段可被重复调用执行的代码块，通过函数可以实现大量代码的重复使用。函数是一种数据类型。</p>\n<h2 id=\"「2-函数的使用」\"><a href=\"#「2-函数的使用」\" class=\"headerlink\" title=\"「2.函数的使用」\"></a><strong>「2.函数的使用」</strong></h2><p>函数的使用分为两步：<strong>声明函数</strong>和<strong>调用函数</strong></p>\n<ul>\n<li>声明函数</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 通过function关键字定义函数 -- 命名函数</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> 函数名(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    函数体代码</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 1.1 function 是声明函数的关键字，必须小写</span></span><br><span class=\"line\">  <span class=\"comment\">// 1.2 函数名 命名为动词形式 例: getSum</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">// 2. 通过函数表达式定义函数 ---匿名函数</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> fn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">  <span class=\"comment\">// 2.1 fn是变量名，不是函数名</span></span><br><span class=\"line\">  <span class=\"comment\">// 2.2 fn是变量，只不过变量存储的是函数</span></span><br><span class=\"line\">  <span class=\"comment\">// 2.3 函数表达式创建的函数可以通过 变量名() 来调用</span></span><br><span class=\"line\">  <span class=\"comment\">// 2.4 函数表达式也可以定义形参和调用传入实参。</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 匿名函数使用的有第二种方式- -匿名函数自调用</span></span><br><span class=\"line\">( <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"number\">123</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">();</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>调用函数</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 2.调用函数</span></span><br><span class=\"line\">  函数名(); </span><br><span class=\"line\">  <span class=\"comment\">// 通过调用函数名来执行函数体代码</span></span><br><span class=\"line\">  <span class=\"comment\">// 调用时不要忘记添加小括号</span></span><br><span class=\"line\">  <span class=\"comment\">// 函数不调用，自己不执行</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"案例：函数封装求1-100和\"><a href=\"#案例：函数封装求1-100和\" class=\"headerlink\" title=\"案例：函数封装求1-100和\"></a>案例：函数封装求1-100和</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//函数计算1-100的和</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSum</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">        sum += i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(sum);</span><br><span class=\"line\">&#125; <span class=\"comment\">//声明</span></span><br><span class=\"line\">getSum(); <span class=\"comment\">//调用</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「3-函数的参数」\"><a href=\"#「3-函数的参数」\" class=\"headerlink\" title=\"「3.函数的参数」\"></a><strong>「3.函数的参数」</strong></h2><ul>\n<li><p>形式参数：函数定义时，传递的参数（实参值传递给形参，不用声明的变量）</p>\n</li>\n<li><p>实际参数：函数调用时，传递的参数</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 带参数的函数声明</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> 函数名(<span class=\"params\">形参<span class=\"number\">1</span>,形参<span class=\"number\">2</span>,形参<span class=\"number\">3.</span>..</span>) </span>&#123;</span><br><span class=\"line\">    函数体;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 带参数的函数调用</span></span><br><span class=\"line\">函数名(实参<span class=\"number\">1</span>,实参<span class=\"number\">2</span>,实参<span class=\"number\">3.</span>..);</span><br></pre></td></tr></table></figure>\n\n<p><strong>函数形参和实参数量不匹配时</strong></p>\n<table>\n<thead>\n<tr>\n<th>参数个数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>实参 = 形参</td>\n<td>输出正确结果</td>\n</tr>\n<tr>\n<td>实参 &gt; 形参</td>\n<td>只取到形参的个数</td>\n</tr>\n<tr>\n<td>实参 &lt; 形参</td>\n<td>多的形参定义为 undefined，结果为 NaN</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSum</span>(<span class=\"params\">a, b, c</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + b + c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// js中形参的默认值是undefined。</span></span><br><span class=\"line\"><span class=\"comment\">// 调用函数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> n = getSum(<span class=\"number\">1</span>, <span class=\"number\">2</span>);<span class=\"comment\">// n = NaN</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> n = getSum(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>); <span class=\"comment\">//1 + 2 +3 = 6</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「4-函数的返回值」\"><a href=\"#「4-函数的返回值」\" class=\"headerlink\" title=\"「4.函数的返回值」\"></a><strong>「4.函数的返回值」</strong></h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.函数是做某件事或者实现某种功能</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cook</span>(<span class=\"params\">aru</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(aru);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">cook(<span class=\"string\">&#x27;大肘子&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2.函数的返回值格式</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> 函数名(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> 需要返回的结果;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">函数名();</span><br><span class=\"line\"><span class=\"comment\">// (1)我们函数只是实现某种功能，最终的结果需要返回给函数的调用者 函数名() 通过return实现</span></span><br><span class=\"line\"><span class=\"comment\">// (2)只要函数遇到return 就把后面的结果返回给函数的调用者 函数名() = return返回的结果</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3.代码演示</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getResult</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">666</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">getResult(); <span class=\"comment\">// getResult() = 666</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(getResult());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cook</span>(<span class=\"params\">aru</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> aru;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(cook(<span class=\"string\">&#x27;大肘子&#x27;</span>))；</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例：求两个数最大值\"><a href=\"#案例：求两个数最大值\" class=\"headerlink\" title=\"案例：求两个数最大值\"></a>案例：求两个数最大值</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 利用函数，求两个数最大值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getMax</span>(<span class=\"params\">num1,num2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(num1 &gt; num2) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> num1;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> num2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// return num1 &gt; num2 ? num1 : num2;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(getMax(<span class=\"number\">1</span>,<span class=\"number\">3</span>));</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例：求数组中最大值\"><a href=\"#案例：求数组中最大值\" class=\"headerlink\" title=\"案例：求数组中最大值\"></a>案例：求数组中最大值</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 利用函数求数组[&#x27;5&#x27;,&#x27;2&#x27;,&#x27;99&#x27;,&#x27;101&#x27;,&#x27;67&#x27;,&#x27;77&#x27;] 中的最大值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getArrMax</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> max = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= arr.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr[i] &gt; max) &#123;</span><br><span class=\"line\">            max = arr[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">getArrMax([<span class=\"string\">&#x27;5&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"string\">&#x27;99&#x27;</span>,<span class=\"string\">&#x27;101&#x27;</span>,<span class=\"string\">&#x27;67&#x27;</span>,<span class=\"string\">&#x27;77&#x27;</span>]); <span class=\"comment\">//实参是一个数组送过去</span></span><br><span class=\"line\"><span class=\"comment\">// 在实际开发中，我们经常用一个变量来接收函数的返回结果</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> re = getArrMax([<span class=\"string\">&#x27;5&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"string\">&#x27;99&#x27;</span>,<span class=\"string\">&#x27;101&#x27;</span>,<span class=\"string\">&#x27;67&#x27;</span>,<span class=\"string\">&#x27;77&#x27;</span>]);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(re);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"函数返回值注意事项\"><a href=\"#函数返回值注意事项\" class=\"headerlink\" title=\"函数返回值注意事项\"></a><strong>函数返回值注意事项</strong></h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.return终止函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSum</span>(<span class=\"params\">num1,num2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num1 + num2; <span class=\"comment\">// return后面的代码不会被执行</span></span><br><span class=\"line\">    alert(<span class=\"string\">&#x27;我是不会被执行的&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(getSum(<span class=\"number\">1</span>,<span class=\"number\">2</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2.return只能返回一个值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">num1,num2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num1,num2; <span class=\"comment\">// 返回的结果是最后一个</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(fn(<span class=\"number\">1</span>,<span class=\"number\">2</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3.求任意两数加减乘除的结果</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">gerResult</span>(<span class=\"params\">num1,num2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [num1+num2, num1-num2,num1*num2, num1/num2];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> re = getResult(<span class=\"number\">1</span>,<span class=\"number\">2</span>); <span class=\"comment\">// 返回的是一个数组</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(re);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 4.函数没有return，返回undefined</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(fun()); <span class=\"comment\">// 函数返回的结果是undefined</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"break-continue-return的区别\"><a href=\"#break-continue-return的区别\" class=\"headerlink\" title=\"break,continue,return的区别\"></a>break,continue,return的区别</h3><ul>\n<li>break: 结束当前的循环体 (如for、while)</li>\n<li>continue: 跳出本次循环，继续执行下次循环</li>\n<li>return: 不仅可以退出(函数体内)循环，还能够返回return语句中的值，同时还可以结束当前的函数体内的代码</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//避免踩坑 return只能结束函数体内的代码</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">breakDown</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (i == <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  breakDown();</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">//避免踩坑2 函数如果有return 则返回的是 return 后面的值；</span></span><br><span class=\"line\"><span class=\"comment\">// return d,a,b; 返回的是b的值</span></span><br><span class=\"line\"><span class=\"comment\">//如果函数没有 return语句，则返回undefined</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「5-arguments的使用」\"><a href=\"#「5-arguments的使用」\" class=\"headerlink\" title=\"「5.arguments的使用」\"></a><strong>「5.arguments的使用」</strong></h2><p>  当不确定有多少个参数传递的时候，可以用 arguments 来获取。JS中，arguments实际上它是当前函数的一个内置对象。所有函数都内   置了一个 arguments 对象，arguments 对象中存储了传递的所有实参。arguments展示形式是一个伪数组，因此可以进行遍历。</p>\n<p>伪数组具有以下特点：</p>\n<ol>\n<li>具有length属性</li>\n<li>按索引方式存储数据</li>\n<li>不具有数组的push，pop等方法</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// arguments的使用 只有函数才有arguments对象，而且每个函数都内置arguments</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//arguments 里面存储了所有传递过来的实参</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>);<span class=\"comment\">// [1,2,3...]</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>[<span class=\"number\">1</span>]); <span class=\"comment\">// 2</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>.length); <span class=\"comment\">// 3</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//我们可以按照数组的方式 遍历argument  </span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt;= <span class=\"built_in\">arguments</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  fn(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 伪数组并不是真正意义上的数组</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例：利用函数求最大值\"><a href=\"#案例：利用函数求最大值\" class=\"headerlink\" title=\"案例：利用函数求最大值\"></a>案例：利用函数求最大值</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 用伪数组 实现求最大值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getMax</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> max = <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">   <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"built_in\">arguments</span>.length; i++) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>[i] &gt; <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">       max = <span class=\"built_in\">arguments</span>[i];</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> max;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> result = getMax(<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">77</span>,<span class=\"number\">5</span>,<span class=\"number\">85</span>)</span><br><span class=\"line\"> colsole.log(result);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例：利用函数翻转数组\"><a href=\"#案例：利用函数翻转数组\" class=\"headerlink\" title=\"案例：利用函数翻转数组\"></a>案例：利用函数翻转数组</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//利用函数翻转任意数组  reverse 翻转</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reverse</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> newArr = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = arr.length - <span class=\"number\">1</span>; i &lt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">        newArr[newArr.length] = arr[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newArr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr1 = reverse([<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">9</span>]);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr1);</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = reverse([<span class=\"string\">&#x27;red&#x27;</span>,<span class=\"string\">&#x27;pink&#x27;</span>,<span class=\"string\">&#x27;blue&#x27;</span>]);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例：利用函数冒泡排序\"><a href=\"#案例：利用函数冒泡排序\" class=\"headerlink\" title=\"案例：利用函数冒泡排序\"></a>案例：利用函数冒泡排序</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 利用函数冒泡排序</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sort</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt;= arr.length - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>;j &lt;= arr.length - i- <span class=\"number\">1</span>; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[j] &gt; arr[j+<span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> temp = arr[j];</span><br><span class=\"line\">                arr[j] = arr[j+<span class=\"number\">1</span>];</span><br><span class=\"line\">                arr[j+<span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr1 = sort([<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>]);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr1);</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = sort([<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">1</span>,<span class=\"number\">88</span>]);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例：利用函数判断闰年\"><a href=\"#案例：利用函数判断闰年\" class=\"headerlink\" title=\"案例：利用函数判断闰年\"></a>案例：利用函数判断闰年</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 利用函数判断闰年</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isRunYear</span>(<span class=\"params\">year</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//如果是闰年返回true，否则返回false</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (year % <span class=\"number\">4</span> == <span class=\"number\">0</span> &amp;&amp; year % <span class=\"number\">100</span> != <span class=\"number\">0</span> || year % <span class=\"number\">400</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> flag;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isRunYear(<span class=\"number\">2000</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isRunYear(<span class=\"number\">1999</span>));</span><br></pre></td></tr></table></figure>\n\n<p><strong>函数是可以相互调用的</strong></p>\n<h3 id=\"案例：输出年份的二月份天数\"><a href=\"#案例：输出年份的二月份天数\" class=\"headerlink\" title=\"案例：输出年份的二月份天数\"></a>案例：输出年份的二月份天数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//用户输入年份，输出该年份二月份的天数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">backDay</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> year = prompt(<span class=\"string\">&#x27;请您输入年份&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isRunYear(year)) &#123;  <span class=\"comment\">// 调用函数需要加小括号</span></span><br><span class=\"line\">        alert(<span class=\"string\">&#x27;当前年份是闰年2月份有29天&#x27;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        alert(<span class=\"string\">&#x27;当前年份是平年2月份有28天&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isRunYear</span>(<span class=\"params\">year</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//如果是闰年返回true，否则返回false</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (year % <span class=\"number\">4</span> == <span class=\"number\">0</span> &amp;&amp; year % <span class=\"number\">100</span> != <span class=\"number\">0</span> || year % <span class=\"number\">400</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> flag;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">backDay();</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h1><h2 id=\"作用域-1\"><a href=\"#作用域-1\" class=\"headerlink\" title=\"作用域\"></a>作用域</h2><p><strong>「作用域」</strong>一段程序代码中所用到的名字并不总是有效和可靠的，而限定这个名字的可用性代码范围就是这个名字的作用域。</p>\n<ul>\n<li>作用域的使用提高了程序逻辑的局部性，增强了程序的可靠性，减少了名字冲突。</li>\n<li>ES6之前作用域有两种 <code>全局作用域</code>和<code>局部作用域</code>(函数作用域)</li>\n</ul>\n<p><strong>「全局作用域」</strong>作用于所有代码执行的环境(整个 script 标签内部)或者一个独立的 js 文件。</p>\n<p><strong>「局部作用域」</strong>作用于函数内部的代码环境，就是局部作用域。因为跟函数有关系，所以也被称为<code>函数作用域</code>。</p>\n<p><strong>「JS没有块级作用域」</strong></p>\n<ul>\n<li>块作用域由 {} 包括</li>\n<li>在其他编程语言，if语句中，循环语句创建的变量，仅仅只能在本if语句，本循环语句中使用，如下</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> num = <span class=\"number\">123</span>;</span><br><span class=\"line\">  System.out.print(num); <span class=\"comment\">//123</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">System.out.print(num);<span class=\"comment\">//报错</span></span><br></pre></td></tr></table></figure>\n\n<p>以上java代码会报错，因为代码中 {}是一块作用域，其中声明的变量num，在{}之外不能使用，而JavaScript代码则不会报错</p>\n<p>Js中没有块级作用域 (在ES6之前)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> num = <span class=\"number\">123</span>;</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(num); <span class=\"comment\">// 123</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(num);<span class=\"comment\">// 123</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"变量的作用域\"><a href=\"#变量的作用域\" class=\"headerlink\" title=\"变量的作用域\"></a>变量的作用域</h2><p>在JavaScript中，根据作用域的不同，变量可以分为两种:</p>\n<ul>\n<li><code>全局变量</code></li>\n<li><code>局部变量</code></li>\n</ul>\n<p><strong>「全局变量」</strong>在全局作用域下声明的变量(在函数外部定义的变量)</p>\n<ul>\n<li>全局变量在代码的任何位置都可以使用</li>\n<li>在全局作用域下 var 声明的变量 是全局变量</li>\n<li>特殊情况下，在函数内不使用var声明的变量也是全局变量(不建议使用)。</li>\n</ul>\n<p><strong>「局部变量」</strong>在局部作用域下声明的变量(在函数内部定义的变量)</p>\n<ul>\n<li>局部变量只能在函数内部使用</li>\n<li>在函数内部 var声明的变量是局部变量</li>\n<li>函数的形参实际上就是局部变量</li>\n</ul>\n<p><strong>「全局变量和局部变量的区别」</strong></p>\n<ul>\n<li><code>全局变量:</code>在任何一个地方都可以使用，只有在浏览器关闭时才会销毁，因此比较占内存</li>\n<li><code>局部变量:</code>旨在函数内部使用，当其所在的代码块被执行时，才会被初始化；当代码块运行结束后，就会被销毁，因此更节省内存空间。</li>\n</ul>\n<h2 id=\"作用域链\"><a href=\"#作用域链\" class=\"headerlink\" title=\"作用域链\"></a>作用域链</h2><p><strong>「作用域链」</strong>只要是代码都在一个作用域中，写在函数内部的局部作用域，未卸载仍和行数内部即在全局作用域中；如果函数中还有函数，那么在这个作用域中就又可以诞生一个作用域；根据<code>[内部函数可以访问外部函数变量]</code> 的这种机制，用链式查找决定哪些数据能被内部函数访问，就称作作用域链。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> num = <span class=\"number\">123</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log( num );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    f2();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">456</span>;</span><br><span class=\"line\">f1();<span class=\"comment\">//123</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206102305503.png\"></p>\n<p><code>作用域链</code>采取就近原则的方式来查找变量最终的值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> b = <span class=\"string\">&#x27;22&#x27;</span>;</span><br><span class=\"line\">    fn2();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> a = <span class=\"number\">3</span>;</span><br><span class=\"line\">        fn3();</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn3</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> a = <span class=\"number\">4</span>;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(a); <span class=\"comment\">//a的值 4</span></span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(b); <span class=\"comment\">//b的值 &#x27;22&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn1();</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206102306310.png\"></p>\n<h1 id=\"预解析\"><a href=\"#预解析\" class=\"headerlink\" title=\"预解析\"></a>预解析</h1><p><strong>「预解析相关概念」</strong>JavaScript代码是由浏览器中的JavaScript解析器来执行的。JavaScript解析器在运行JavaScript代码的时候分为两步:预解析和代码执行。</p>\n<ul>\n<li><strong>「预解析」</strong>在当前作用域下，JS代码执行之前，浏览器会默认把带有 var 和 function声明的变量在内存中进行提前声明或定义。</li>\n<li><strong>「代码执行」</strong>从上往下执行JS语句</li>\n</ul>\n<p>预解析会把变量和函数的声明在代码执行之前完成，<strong>预解析也叫做变量、函数提升</strong>。</p>\n"},{"title":"HTML基础","date":"2022-01-13T16:00:00.000Z","updated":"2022-07-07T16:00:00.000Z","keywords":null,"description":null,"top_img":"./img/bg16.jpg","comments":1,"cover":"./img/bg8.jpg","toc":null,"toc_number":null,"copyright":null,"copyright_author":null,"copyright_author_href":null,"copyright_url":null,"copyright_info":null,"mathjax":null,"katex":null,"aplayer":null,"highlight_shrink":null,"aside":null,"_content":"# HTML基础\n\n## HTML初识\n\n**「HTML」**(Hyper Text Markup Language):超文本标记语言\n\n**「所谓超文本，有2层含义：」**\n\n- 因为它可以加入图片、声音、动画、多媒体等内容（超越文本限制 ）\n- 不仅如此，它还可以从一个文件跳转到另一个文件，与世界各地主机的文件连接（超级链接文本）。\n\n**「HTML骨架格式」**\n\n```html\n<!-- 页面中最大的标签 根标签 -->\n<html>\n    <!-- 头部标签 -->\n    <head>     \n        <!-- 标题标签 -->\n        <title></title> \n    </head>\n    <!-- 文档的主体 -->\n    <body>\n    </body>\n</html>\n```\n\n**「团队约定大小写」**\n\n- HTML标签名、类名、标签属性和大部分属性值统一用小写\n\n**「HTML元素标签分类」**\n\n- 常规元素(双标签)\n- 空元素(单标签)\n\n```html\n  常规元素(双标签)\n  <标签名> 内容 </标签名>   比如<body>我是文字</body>\n\n  空元素(单标签)\n  <标签名 />  比如 <br />或<br>\n```\n\n**「HTML标签关系」**\n\n- 嵌套关系父子级包含关系\n\n- 并列关系兄弟级并列关系\n\n- - 如果两个标签之间的关系是嵌套关系，子元素最好缩进一个tab键的身位（一个tab是4个空格）。如果是并列关系，最好上下对齐。\n\n## 文档类型\n\n**「文档类型」**用来说明你用的XHTML或者HTML是什么版本。<!DOCTYPE html>告诉浏览器按照HTML5标准解析页面。\n\n## **页面语言**\n\n页面语言lang指定该html标签内容所用的语言\n\n```html\n  <html lang=\"en\">  \n  en 定义语言为英语 zh-CN定义语言为中文\n```\n\n**「lang的作用」**\n\n- 根据根据lang属性来设定不同语言的css样式，或者字体\n- 告诉搜索引擎做精确的识别\n- 让语法检查程序做语言识别\n- 帮助翻译工具做识别\n- 帮助网页阅读程序做识别\n\n## 字符集\n\n**「字符集」**(Character set)是多个字符的集合,计算机要准确的处理各种字符集文字，需要进行字符编码，以便计算机能够识别和存储各种文字。\n\n- UTF-8是目前最常用的字符集编码方式，称为万国码\n- 让 html 文件是以 UTF-8 编码保存的， 浏览器根据编码去解码对应的html内容。\n\n```html\n  <meta charset=\"UTF-8\" />\n```\n\n**「meta viewport的用法」**\n  通常viewport是指视窗、视口。浏览器上(也可能是一个app中的webview)用来显示网页的那部分区域。在移动端和pc端视口是不同的，pc端的视口是浏览器窗口区域，而在移动端有三个不同的视口概念：布局视口、视觉视口、理想视口\n\n  meta有两个属性name 和 http-equiv\n\n**name属性的取值**\n\n- keywords(关键字) 告诉搜索引擎，该网页的关键字\n- description(网站内容描述) 用于告诉搜索引擎，你网站的主要内容。\n- viewport(移动端的窗口)\n- robots(定义搜索引擎爬虫的索引方式) robots用来告诉爬虫哪些页面需要索引，哪些页面不需要索引\n- author(作者)\n- generator(网页制作软件）\n- copyright(版权)\n\n**http-equiv有以下参数**\n\nhttp-equiv相当于http的文件头作用，它可以向浏览器传回一些有用的信息，以帮助正确和精确地显示网页内容\n\n- content-Type 设定网页字符集(Html4用法，不推荐)\n- Expires(期限) ,可以用于设定网页的到期时间。一旦网页过期，必须到服务器上重新传输。\n- Pragma(cache模式),是用于设定禁止浏览器从本地机的缓存中调阅页面内容，设定后一旦离开网页就无法从Cache中再调出\n- Refresh(刷新),自动刷新并指向新页面。\n- cache-control（请求和响应遵循的缓存机制）\n\n```html\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n```\n\n## HTML标签的语义化\n\n- 方便代码的阅读和维护，样式丢失的时候能让页面呈现清晰的结构。\n- 有利于SEO，搜索引擎根据标签来确定上下文和各个关键字的权重。\n- 方便其他设备解析，如盲人阅读器根据语义渲染网页\n\n**「拓展」** 标签：规定页面上所有链接的默认 URL 和设置整体链接的打开状态\n\n```html\n<head>\n    <base href=\"http://www.baidu.com\" target=\"_blank\">\n    <base target=\"_self\">\n</head>\n<body>\n    <a href=\"\">测试</a> 跳转到 百度\n</body>\n```\n\n# HTML常用标签\n\n## **「1. 排版标签」**\n\n主要和css搭配使用，显示网页结构的标签，是网页布局最常用的标签。\n\n- 标题标签h(h1~h6)\n- 段落标签p,可以把 HTML 文档分割为若干段落\n- 水平线标签hr\n- 换行标签br\n- div和span标签:是没有语义的,是我们网页布局最主要的2个盒子。\n\n## **「2. 文本格式化标签」**\n\n- b和strong 文字以粗体显示\n- i和em 文字以斜体显示\n- s和del 文字以加删除线显示\n- u和ins 文字以加下划线显示\n\n## **「3. 标签属性(行内式)」**\n\n使用HTML制作网页时，如果想让HTML标签提供更多的信息，可以使用HTML标签的属性加以设置。\n\n```html\n<标签名 属性1=\"属性值1\" 属性2=\"属性值2\" …> 内容 </标签名>\n<手机 颜色=\"红色\" 大小=\"5寸\">  </手机>\n```\n\n## **「4. 图像标签img」**\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207080035188.png)\n\n**注意：**\n\n- 标签可以拥有多个属性，必须写在开始标签中，位于标签名后面。\n- 属性之间不分先后顺序，标签名与属性、属性与属性之间均以空格分开。\n- 采取**键值对**的格式  key=\"value\"  的格式\n\n```html\n<img src=\"cz.jpg\" width=\"300\" height=\"300\" border=\"3\" title=\"这是个小蒲公英\" />\n```\n\n## **「5. 链接标签(重点)」**\n\n```html\n<a href=\"跳转目标\" target=\"目标窗口的弹出方式\">文本或图像</a>\ntarget=\"_self\"  默认窗口弹出方式\ntarget=\"_blank\" 新窗口弹出\n```\n\n| **属性** | 作用                                                         |\n| -------- | ------------------------------------------------------------ |\n| href     | 用于指定链接目标的url地址，（必须属性）当为标签应用href属性时，它就具有了超链接的功能 |\n| target   | 用于指定链接页面的打开方式，其取值有_self和_blank两种，其中_self为默认值，_blank为在新窗口中打开方式。 |\n\n### **src 和 href 的区别**\n\n一句话概括:**src 是引入资源的 href 是跳转url的**\n\n1. src用于替换当前元素，href用于在当前文档和引用资源之间确立联系。\n2. src是source的缩写，指向外部资源的位置，指向的内容将会嵌入到文档中当前标签所在位置；在请求src资源时会将其指向的资源下载并应用到文档内，例如js脚本，img图片和frame等元素。当浏览器解析到该元素时，会暂停其他资源的下载和处理，直到将该资源加载、编译、执行完毕，图片和框架等元素也如此，类似于将所指向资源嵌入当前标签内。这也是为什么将js脚本放在底部而不是头部。\n3. href是Hypertext Reference的缩写，指向网络资源所在位置，建立和当前元素（锚点）或当前文档（链接）之间的链接。如果我们在文档中添加那么浏览器会识别该文档为css文件，就会并行下载资源并且不会停止对当前文档的处理。这也是为什么建议使用link方式来加载css，而不是使用@import方式。\n\n**注意：**\n\n1. 外部链接 需要添加 http:// www.baidu.com\n2. 内部链接 直接链接内部页面名称即可 比如 < a href=\"index.html\"> 首页\n3. 如果当时没有确定链接目标时，通常将链接标签的href属性值定义为“#”(即href=\"#\")，表示该链接暂时为一个空链接。\n4. 不仅可以创建文本超链接，在网页中各种网页元素，如图像、表格、音频、视频等都可以添加超链接。\n\n### **锚点定位**\n\n**锚点定位：通过创建锚点链接，用户能够快速定位到目标内容。**\n\n```html\n1. 使用相应的id名标注跳转目标的位置。 (找目标)\n  <h3 id=\"two\">第2集</h3> \n\n2. 使用<a href=\"#id名\">链接文本</a>创建链接文本（被点击的） \n  <a href=\"#two\">   \n```\n\n## **「6. 注释标签」**\n\n```html\n <!-- 注释语句 -->     \n  快捷键是：    ctrl + /       \n  或者 ctrl +shift + / \n```\n\n**团队约定：**注释内容前后各一个空格字符，注释位于要注释代码的上面，单独占一行\n\n## **「7. 路径」**\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207080042861.png)\n\n## **「8. 其他知识」**\n\n### **预格式化文本pre标签**\n\n元素中的文本通常会保留空格和换行符。而文本也会呈现为等宽字体。格式化文本就是 ，按照我们预先写好的文字格式来显示页面， 保留空格和换行等。\n\n### **特殊字符**\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207080043782.png)\n\n### **什么是XHTML**\n\n- XHTML 指**「可扩展超文本标签语言」**（EXtensible HyperText Markup Language）。\n- XHTML 的目标是取代 HTML。\n- XHTML 与 HTML 4.01 几乎是相同的。\n- XHTML 是更严格更纯净的 HTML 版本。\n- XHTML 是作为一种 XML 应用被重新定义的 HTML,是严格版本的HTML。例如它要求标签必须小写，标签必须被正确关闭，标签顺序必须正确排列，对于属性都必须使用双引号等。\n- XHTML 是一个 W3C 标准。\n\n### **写HTML代码时应注意什么？**\n\n- 尽可能少的使用无语义的标签div和span；\n- 在语义不明显时，既可以使用div或者p时，尽量用p, 因为p在默认情况下有上下间距，对兼容特殊终端有利；\n- 不要使用纯样式标签，如：b、font、u等，改用css设置。\n- 需要强调的文本，可以包含在strong或者em标签中（浏览器预设样式，能用CSS指定就不用他们），strong默认样式是加粗（不要用b），em是斜体（不用i）；\n- 使用表格时，标题要用caption，表头用thead，主体部分用tbody包围，尾部用tfoot包围。表头和一般单元格要区分开，表头用th，单元格用td；\n- 表单域要用fieldset标签包起来，并用legend标签说明表单的用途；\n- 每个input标签对应的说明文本都需要使用label标签，并且通过为input设置id属性，在lable标签中设置for来让说明文本和相对应的input关联起来。\n\n# 表格\n\n## **「1. 表格」**\n\n现在还是较为常用的一种标签，但不是用来布局，**常见显示、展示表格式数据**。因为它可以让数据显示的非常的规整，可读性非常好。**特别是后台展示数据的时候表格运用是否熟练就显得很重要**，一个清爽简约的表格能够把繁杂的数据表现得很有条理。\n\n## **「2. 创建表格」**\n\n```html\n<table>\n  <tr>\n    <td>单元格内的文字</td>\n    ...\n  </tr>\n  ...\n</table>\n```\n\ntable、tr、td，他们是创建表格的基本标签，缺一不可\n\n- table用于定义一个表格标签。\n- tr标签 用于定义表格中的行，必须嵌套在 table标签中。\n- td 用于定义表格中的单元格，必须嵌套在<tr></tr>标签中。\n- 字母 td 指表格数据（table data），即数据单元格的内容，现在我们明白，表格最合适的地方就是用来存储数据的。td像一个容器，可以容纳所有的元素。\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207080052352.jpg)\n\n### **表头单元格标签th**\n\n一般表头单元格位于表格的第一行或第一列，并且文本加粗居中,只需用表头标签<th></th>替代相应的单元格标签<td></td>即可。\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207080053567.png)\n\n### **表格标题caption**\n\n通常这个标题会被居中且显示于表格之上。caption 标签必须紧随 table 标签之后。这个标签只存在 表格里面才有意义。\n\n```html\n<table>\n   <caption>我是表格标题</caption>\n</table>\n```\n\n## **「3. 表格属性」**\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207080055050.png)\n\n三参为0，平时开发的我们这三个参数   border  cellpadding  cellspacing 为  0\n\n## **「4. 合并单元格」**\n\n合并的顺序我们按照  先上 后下   先左  后右 的顺序 ,合并完之后需要删除多余的单元格。\n\n- 跨行合并：rowspan=\"合并单元格的个数\"\n- 跨列合并：colspan=\"合并单元格的个数\"\n\n## **「5. 总结表格」**\n\n| 标签名             | 定义           | 说明                                         |\n| ------------------ | -------------- | -------------------------------------------- |\n| table              | 表格标签       | 就是一个四方的盒子                           |\n| tr                 | 表格行标签     | 行标签要再table标签内部才有意义              |\n| td                 | 单元格标签     | 单元格标签是个容器级元素，可以放任何东西     |\n| th                 | 表头单元格标签 | 它还是一个单元格，但是里面的文字会居中且加粗 |\n| caption            | 表格标题标签   | 表格的标题，跟着表格一起走，和表格居中对齐   |\n| clospan 和 rowspan | 合并属性       | 用来合并单元格的                             |\n\n## **「6. 表格划分结构」**\n\n  对于比较复杂的表格，表格的结构也就相对的复杂了，所以又将表格分割成三个部分：题头、正文和脚注。而这三部分分别用:thead,tbody,tfoot来标注， 这样更好的分清表格结构。\n\n**注意：**\n\n1. thead：用于定义表格的头部。用来放标题之类的东西。<thead> 内部必须拥有<tr> 标签！\n2. tbody：用于定义表格的主体。放数据本体 。\n3. tfoot：放表格的脚注之类。\n4.  以上标签都是放到table标签中。\n\n# 列表\n\n## **「列表」**\n\n容器里面装载着结构，样式一致的文字或图表的一种形式，叫列表。\n\n列表最大的特点就是整齐 、整洁、 有序，跟表格类似，但是它可组合自由度会更高。\n\n### **「1. 无序列表 ul」**\n\n- ul中只能嵌套li，直接在ul标签中输入其他标签或者文字的做法是不被允许的。\n- li之间相当于一个容器，可以容纳所有元素。\n\n```html\n<ul>\n  <li>列表项1</li>\n  <li>列表项2</li>\n  <li>列表项3</li>\n  ......\n</ul>\n```\n\n### **「2. 有序列表 ol」**\n\n- ol标签中的type属性值为排序的序列号，不添加type属性时，有序列表默认从数字1开始排序。\n\n- 常用的type属性值分别为是1，a，A，i，I\n\n- ol reversed=\"reversed\"中的reversed属性能够让有序列表中的序列倒序排列。\n\n- ol start=\"3\"中的start属性值为3，有序列表中的第一个序列号将从3开始排列。\n\n```html\n<ol type=\"A\"> \n  <li>列表项1</li>\n  <li>列表二</li>\n  <li>列表三</li>\n</ol>\n```\n\n## **「自定义列表 」**\n\n定义列表常用于对术语或名词进行解释和描述，定义列表的列表项前没有任何项目符号。\n\n```html\n<dl>\n  <dt>名词1</dt>\n  <dd>名词1解释1</dd>\n  <dd>名词1解释2</dd>\n  ...\n  <dt>名词2</dt>\n  <dd>名词2解释1</dd>\n  <dd>名词2解释2</dd>\n  ...\n</dl>\n```\n\n# 表单\n\n在HTML中，一个完整的表单通常由表单控件（也称为表单元素）、提示信息和表单域3个部分构成。表单目的是为了收集用户信息。\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207080853313.png)\n\n**表单控件：**\n 包含了具体的表单功能项，如单行文本输入框、密码输入框、复选框、提交按钮、重置按钮等。\n**提示信息：**\n 一个表单中通常还需要包含一些说明性的文字，提示用户进行填写和操作。\n**表单域：** \n 它相当于一个容器，用来容纳所有的表单控件和提示信息，可以通过他定义处理表单数据所用程序的url地址，以及数据提交到服务器的方法。如果不定义表单域，表单中的数据就无法传送到后台服务器。\n\n## **「1. input 控件」**\n\n```html\n<input type=\"属性值\" value=\"你好\">\n```\n\n- input 输入的意思\n- input 标签为单标签\n- type属性设置不同的属性值用来指定不同的控件类型\n- 除了type属性还有别的属性\n\n### **常用属性：**\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207080854979.png)\n\n```html\n用户名: <input type=\"text\" /> \n密  码：<input type=\"password\" />\n```\n\n### **value属性**\n\n- value 默认的文本值。有些表单想刚打开页面就默认显示几个文字，就可以通过这个value 来设置。\n\n```html\n用户名:<input type=\"text\"  name=\"username\" value=\"请输入用户名\"> \n```\n\n### **name属性**\n\n- name表单的名字， 这样，后台可以通过这个name属性找到这个表单。 页面中的表单很多，name主要作用就是用于区别不同的表单。\n- name属性后面的值，是我们自己定义的。\n- radio  如果是一组，我们必须给他们命名相同的名字 name  这样就可以多个选其中的一个啦\n- name属性，我们现在用的较少，但是，当我们学ajax 和后台的时候，是必须的。\n\n- \n\n```html\n<input type=\"radio\" name=\"sex\"  />男\n<input type=\"radio\" name=\"sex\" />女\n```\n\n### **checked属性**\n\n表示默认选中状态。 较常见于 单选按钮和复选按钮。\n\n```html\n性    别:\n<input type=\"radio\" name=\"sex\" value=\"男\" checked=\"checked\" />男\n<input type=\"radio\" name=\"sex\" value=\"女\" />女 \n```\n\n### **input 属性小结**\n\n| 属性    | 说明     | 作用                                                   |\n| ------- | -------- | ------------------------------------------------------ |\n| type    | 表单类型 | 用来指定不同的控件类型                                 |\n| value   | 表单值   | 表单里面默认显示的文本                                 |\n| name    | 表单名字 | 页面中的表单很多，name主要作用就是用于区别不同的表单。 |\n| checked | 默认选中 | 表示那个单选或者复选按钮一开始就被选中了               |\n\n## **「2.  label标签」**\n\n- label 标签为 input 元素定义标注（标签）。\n- label标签主要目的是为了提高用户体验。为用户提高最优秀的服务。\n\n**作用：**用于绑定一个表单元素, 当点击label标签的时候, 被绑定的表单元素就会获得输入焦点。\n\n### **如何绑定元素呢**\n\n- 第一种用法就是用label标签直接包含input表单， 适合单个表单选择\n- 第二种用法 for 属性规定 label 与哪个表单元素绑定(通过id)。\n\n```html\n  第一种\n  <label> 用户名： \n    <input type=\"radio\" name=\"usename\" value=\"请输入用户名\">   \n  </label>\n  \n  第二种\n  <label for=\"sex\">男</label>\n  <input type=\"radio\" name=\"sex\"  id=\"sex\">\n```\n\n## **「3.  textarea控件(文本域)」**\n\n- 通过textarea控件可以轻松地创建多行文本输入框.\n- cols=\"每行中的字符数\" rows=\"显示的行数\"  我们实际开发不用\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207080901727.png)\n\n```html\n  <textarea >\n    文本内容\n  </textarea>\n```\n\n### **文本框和文本域区别**\n\n| 表单              | 名称   | 区别             | 默认显示                    | 用于场景             |\n| ----------------- | ------ | ---------------- | --------------------------- | -------------------- |\n| input type=\"text\" | 文本框 | 只能显示一行文本 | 单标签，通过value显示默认值 | 用户名、昵称、密码等 |\n| textarea          | 文本域 | 可以显示多行文本 | 双标签，默认值写到标签中间  | 留言板               |\n\n## **「4.  select下拉列表」**\n\n- 如果有多个选项让用户选择，为了节约空间，我们可以使用select控件定义下拉列表。\n- 在option 中定义selected =\" selected \"时，当前项即为默认选中项。\n- 我们实际开发会用的比较少\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207080904309.png)\n\n```html\n<select>\n  \n  <option>选项1</option>\n  <option>选项2</option>\n  <option>选项3</option>\n  ...\n</select>\n```\n\n## **「5.form表单域」**\n\n1. 收集的用户信息怎么传递给服务器？\n\n2. - 通过form表单域\n\n3. 目的：\n\n4. - 在HTML中，form标签被用于定义表单域，以实现用户信息的收集和传递，form中的所有内容都会被提交给服务器。\n\n```html\n<form action=\"url地址\" method=\"提交方式\" name=\"表单名称\">\n  各种表单控件\n</form>\n```\n\n### **常用属性：**\n\n每个表单都应该有自己表单域。后面学 ajax 后台交互的时候，必须需要form表单域。\n\n| 属性   | 属性值   | 作用                                               |\n| ------ | -------- | -------------------------------------------------- |\n| action | url地址  | 用于指定接收并处理表单数据的服务器程序的url地址。  |\n| method | get/post | 用于设置表单数据的提交方式，其取值为get或post。    |\n| name   | 名称     | 用于指定表单的名称，以区分同一个页面中的多个表单。 |\n\n### **GET 和 POST 的区别**\n\n- GET在浏览器回退时是无害的，而POST会再次提交请求。\n- GET请求会被浏览器主动cache，而POST不会，除非手动设置。\n- GET请求只能进行url编码，而POST支持多种编码方式。\n- GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。\n- GET请求大小一般是(1024字节)，http协议并没有限制，而与服务器，操作系统有关，POST理论上来说没有大小限制，http协议规范也没有进行大小限制，但实际上post所能传递的数据量根据取决于服务器的设置和内存大小。\n- 对参数的数据类型，GET只接受ASCII字符，而POST没有限制。\n- GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。\n\n### **团队约定**\n\n- 元素属性值使用双引号语法\n- 元素属性值可以写上的都写上\n\n```html\n推荐\n<input type=\"text\" /> \n<input type=\"radio\" name=\"name\" checked=\"checked\" />\n```\n\n","source":"_posts/前端/HTML基础.md","raw":"---\ntitle: HTML基础\ndate: 2022-1-14 00:00:00\nupdated: 2022-07-08\ntags:\n  - 小白的前端之路\n  - HTML基础\ncategories: 前端开发\nkeywords: \ndescription: \ntop_img: ./img/bg16.jpg\ncomments:\ncover: ./img/bg8.jpg\ntoc: \ntoc_number: \ncopyright: \ncopyright_author: \ncopyright_author_href: \ncopyright_url: \ncopyright_info: \nmathjax: \nkatex:\naplayer:\nhighlight_shrink:\naside:\n---\n# HTML基础\n\n## HTML初识\n\n**「HTML」**(Hyper Text Markup Language):超文本标记语言\n\n**「所谓超文本，有2层含义：」**\n\n- 因为它可以加入图片、声音、动画、多媒体等内容（超越文本限制 ）\n- 不仅如此，它还可以从一个文件跳转到另一个文件，与世界各地主机的文件连接（超级链接文本）。\n\n**「HTML骨架格式」**\n\n```html\n<!-- 页面中最大的标签 根标签 -->\n<html>\n    <!-- 头部标签 -->\n    <head>     \n        <!-- 标题标签 -->\n        <title></title> \n    </head>\n    <!-- 文档的主体 -->\n    <body>\n    </body>\n</html>\n```\n\n**「团队约定大小写」**\n\n- HTML标签名、类名、标签属性和大部分属性值统一用小写\n\n**「HTML元素标签分类」**\n\n- 常规元素(双标签)\n- 空元素(单标签)\n\n```html\n  常规元素(双标签)\n  <标签名> 内容 </标签名>   比如<body>我是文字</body>\n\n  空元素(单标签)\n  <标签名 />  比如 <br />或<br>\n```\n\n**「HTML标签关系」**\n\n- 嵌套关系父子级包含关系\n\n- 并列关系兄弟级并列关系\n\n- - 如果两个标签之间的关系是嵌套关系，子元素最好缩进一个tab键的身位（一个tab是4个空格）。如果是并列关系，最好上下对齐。\n\n## 文档类型\n\n**「文档类型」**用来说明你用的XHTML或者HTML是什么版本。<!DOCTYPE html>告诉浏览器按照HTML5标准解析页面。\n\n## **页面语言**\n\n页面语言lang指定该html标签内容所用的语言\n\n```html\n  <html lang=\"en\">  \n  en 定义语言为英语 zh-CN定义语言为中文\n```\n\n**「lang的作用」**\n\n- 根据根据lang属性来设定不同语言的css样式，或者字体\n- 告诉搜索引擎做精确的识别\n- 让语法检查程序做语言识别\n- 帮助翻译工具做识别\n- 帮助网页阅读程序做识别\n\n## 字符集\n\n**「字符集」**(Character set)是多个字符的集合,计算机要准确的处理各种字符集文字，需要进行字符编码，以便计算机能够识别和存储各种文字。\n\n- UTF-8是目前最常用的字符集编码方式，称为万国码\n- 让 html 文件是以 UTF-8 编码保存的， 浏览器根据编码去解码对应的html内容。\n\n```html\n  <meta charset=\"UTF-8\" />\n```\n\n**「meta viewport的用法」**\n  通常viewport是指视窗、视口。浏览器上(也可能是一个app中的webview)用来显示网页的那部分区域。在移动端和pc端视口是不同的，pc端的视口是浏览器窗口区域，而在移动端有三个不同的视口概念：布局视口、视觉视口、理想视口\n\n  meta有两个属性name 和 http-equiv\n\n**name属性的取值**\n\n- keywords(关键字) 告诉搜索引擎，该网页的关键字\n- description(网站内容描述) 用于告诉搜索引擎，你网站的主要内容。\n- viewport(移动端的窗口)\n- robots(定义搜索引擎爬虫的索引方式) robots用来告诉爬虫哪些页面需要索引，哪些页面不需要索引\n- author(作者)\n- generator(网页制作软件）\n- copyright(版权)\n\n**http-equiv有以下参数**\n\nhttp-equiv相当于http的文件头作用，它可以向浏览器传回一些有用的信息，以帮助正确和精确地显示网页内容\n\n- content-Type 设定网页字符集(Html4用法，不推荐)\n- Expires(期限) ,可以用于设定网页的到期时间。一旦网页过期，必须到服务器上重新传输。\n- Pragma(cache模式),是用于设定禁止浏览器从本地机的缓存中调阅页面内容，设定后一旦离开网页就无法从Cache中再调出\n- Refresh(刷新),自动刷新并指向新页面。\n- cache-control（请求和响应遵循的缓存机制）\n\n```html\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n```\n\n## HTML标签的语义化\n\n- 方便代码的阅读和维护，样式丢失的时候能让页面呈现清晰的结构。\n- 有利于SEO，搜索引擎根据标签来确定上下文和各个关键字的权重。\n- 方便其他设备解析，如盲人阅读器根据语义渲染网页\n\n**「拓展」** 标签：规定页面上所有链接的默认 URL 和设置整体链接的打开状态\n\n```html\n<head>\n    <base href=\"http://www.baidu.com\" target=\"_blank\">\n    <base target=\"_self\">\n</head>\n<body>\n    <a href=\"\">测试</a> 跳转到 百度\n</body>\n```\n\n# HTML常用标签\n\n## **「1. 排版标签」**\n\n主要和css搭配使用，显示网页结构的标签，是网页布局最常用的标签。\n\n- 标题标签h(h1~h6)\n- 段落标签p,可以把 HTML 文档分割为若干段落\n- 水平线标签hr\n- 换行标签br\n- div和span标签:是没有语义的,是我们网页布局最主要的2个盒子。\n\n## **「2. 文本格式化标签」**\n\n- b和strong 文字以粗体显示\n- i和em 文字以斜体显示\n- s和del 文字以加删除线显示\n- u和ins 文字以加下划线显示\n\n## **「3. 标签属性(行内式)」**\n\n使用HTML制作网页时，如果想让HTML标签提供更多的信息，可以使用HTML标签的属性加以设置。\n\n```html\n<标签名 属性1=\"属性值1\" 属性2=\"属性值2\" …> 内容 </标签名>\n<手机 颜色=\"红色\" 大小=\"5寸\">  </手机>\n```\n\n## **「4. 图像标签img」**\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207080035188.png)\n\n**注意：**\n\n- 标签可以拥有多个属性，必须写在开始标签中，位于标签名后面。\n- 属性之间不分先后顺序，标签名与属性、属性与属性之间均以空格分开。\n- 采取**键值对**的格式  key=\"value\"  的格式\n\n```html\n<img src=\"cz.jpg\" width=\"300\" height=\"300\" border=\"3\" title=\"这是个小蒲公英\" />\n```\n\n## **「5. 链接标签(重点)」**\n\n```html\n<a href=\"跳转目标\" target=\"目标窗口的弹出方式\">文本或图像</a>\ntarget=\"_self\"  默认窗口弹出方式\ntarget=\"_blank\" 新窗口弹出\n```\n\n| **属性** | 作用                                                         |\n| -------- | ------------------------------------------------------------ |\n| href     | 用于指定链接目标的url地址，（必须属性）当为标签应用href属性时，它就具有了超链接的功能 |\n| target   | 用于指定链接页面的打开方式，其取值有_self和_blank两种，其中_self为默认值，_blank为在新窗口中打开方式。 |\n\n### **src 和 href 的区别**\n\n一句话概括:**src 是引入资源的 href 是跳转url的**\n\n1. src用于替换当前元素，href用于在当前文档和引用资源之间确立联系。\n2. src是source的缩写，指向外部资源的位置，指向的内容将会嵌入到文档中当前标签所在位置；在请求src资源时会将其指向的资源下载并应用到文档内，例如js脚本，img图片和frame等元素。当浏览器解析到该元素时，会暂停其他资源的下载和处理，直到将该资源加载、编译、执行完毕，图片和框架等元素也如此，类似于将所指向资源嵌入当前标签内。这也是为什么将js脚本放在底部而不是头部。\n3. href是Hypertext Reference的缩写，指向网络资源所在位置，建立和当前元素（锚点）或当前文档（链接）之间的链接。如果我们在文档中添加那么浏览器会识别该文档为css文件，就会并行下载资源并且不会停止对当前文档的处理。这也是为什么建议使用link方式来加载css，而不是使用@import方式。\n\n**注意：**\n\n1. 外部链接 需要添加 http:// www.baidu.com\n2. 内部链接 直接链接内部页面名称即可 比如 < a href=\"index.html\"> 首页\n3. 如果当时没有确定链接目标时，通常将链接标签的href属性值定义为“#”(即href=\"#\")，表示该链接暂时为一个空链接。\n4. 不仅可以创建文本超链接，在网页中各种网页元素，如图像、表格、音频、视频等都可以添加超链接。\n\n### **锚点定位**\n\n**锚点定位：通过创建锚点链接，用户能够快速定位到目标内容。**\n\n```html\n1. 使用相应的id名标注跳转目标的位置。 (找目标)\n  <h3 id=\"two\">第2集</h3> \n\n2. 使用<a href=\"#id名\">链接文本</a>创建链接文本（被点击的） \n  <a href=\"#two\">   \n```\n\n## **「6. 注释标签」**\n\n```html\n <!-- 注释语句 -->     \n  快捷键是：    ctrl + /       \n  或者 ctrl +shift + / \n```\n\n**团队约定：**注释内容前后各一个空格字符，注释位于要注释代码的上面，单独占一行\n\n## **「7. 路径」**\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207080042861.png)\n\n## **「8. 其他知识」**\n\n### **预格式化文本pre标签**\n\n元素中的文本通常会保留空格和换行符。而文本也会呈现为等宽字体。格式化文本就是 ，按照我们预先写好的文字格式来显示页面， 保留空格和换行等。\n\n### **特殊字符**\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207080043782.png)\n\n### **什么是XHTML**\n\n- XHTML 指**「可扩展超文本标签语言」**（EXtensible HyperText Markup Language）。\n- XHTML 的目标是取代 HTML。\n- XHTML 与 HTML 4.01 几乎是相同的。\n- XHTML 是更严格更纯净的 HTML 版本。\n- XHTML 是作为一种 XML 应用被重新定义的 HTML,是严格版本的HTML。例如它要求标签必须小写，标签必须被正确关闭，标签顺序必须正确排列，对于属性都必须使用双引号等。\n- XHTML 是一个 W3C 标准。\n\n### **写HTML代码时应注意什么？**\n\n- 尽可能少的使用无语义的标签div和span；\n- 在语义不明显时，既可以使用div或者p时，尽量用p, 因为p在默认情况下有上下间距，对兼容特殊终端有利；\n- 不要使用纯样式标签，如：b、font、u等，改用css设置。\n- 需要强调的文本，可以包含在strong或者em标签中（浏览器预设样式，能用CSS指定就不用他们），strong默认样式是加粗（不要用b），em是斜体（不用i）；\n- 使用表格时，标题要用caption，表头用thead，主体部分用tbody包围，尾部用tfoot包围。表头和一般单元格要区分开，表头用th，单元格用td；\n- 表单域要用fieldset标签包起来，并用legend标签说明表单的用途；\n- 每个input标签对应的说明文本都需要使用label标签，并且通过为input设置id属性，在lable标签中设置for来让说明文本和相对应的input关联起来。\n\n# 表格\n\n## **「1. 表格」**\n\n现在还是较为常用的一种标签，但不是用来布局，**常见显示、展示表格式数据**。因为它可以让数据显示的非常的规整，可读性非常好。**特别是后台展示数据的时候表格运用是否熟练就显得很重要**，一个清爽简约的表格能够把繁杂的数据表现得很有条理。\n\n## **「2. 创建表格」**\n\n```html\n<table>\n  <tr>\n    <td>单元格内的文字</td>\n    ...\n  </tr>\n  ...\n</table>\n```\n\ntable、tr、td，他们是创建表格的基本标签，缺一不可\n\n- table用于定义一个表格标签。\n- tr标签 用于定义表格中的行，必须嵌套在 table标签中。\n- td 用于定义表格中的单元格，必须嵌套在<tr></tr>标签中。\n- 字母 td 指表格数据（table data），即数据单元格的内容，现在我们明白，表格最合适的地方就是用来存储数据的。td像一个容器，可以容纳所有的元素。\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207080052352.jpg)\n\n### **表头单元格标签th**\n\n一般表头单元格位于表格的第一行或第一列，并且文本加粗居中,只需用表头标签<th></th>替代相应的单元格标签<td></td>即可。\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207080053567.png)\n\n### **表格标题caption**\n\n通常这个标题会被居中且显示于表格之上。caption 标签必须紧随 table 标签之后。这个标签只存在 表格里面才有意义。\n\n```html\n<table>\n   <caption>我是表格标题</caption>\n</table>\n```\n\n## **「3. 表格属性」**\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207080055050.png)\n\n三参为0，平时开发的我们这三个参数   border  cellpadding  cellspacing 为  0\n\n## **「4. 合并单元格」**\n\n合并的顺序我们按照  先上 后下   先左  后右 的顺序 ,合并完之后需要删除多余的单元格。\n\n- 跨行合并：rowspan=\"合并单元格的个数\"\n- 跨列合并：colspan=\"合并单元格的个数\"\n\n## **「5. 总结表格」**\n\n| 标签名             | 定义           | 说明                                         |\n| ------------------ | -------------- | -------------------------------------------- |\n| table              | 表格标签       | 就是一个四方的盒子                           |\n| tr                 | 表格行标签     | 行标签要再table标签内部才有意义              |\n| td                 | 单元格标签     | 单元格标签是个容器级元素，可以放任何东西     |\n| th                 | 表头单元格标签 | 它还是一个单元格，但是里面的文字会居中且加粗 |\n| caption            | 表格标题标签   | 表格的标题，跟着表格一起走，和表格居中对齐   |\n| clospan 和 rowspan | 合并属性       | 用来合并单元格的                             |\n\n## **「6. 表格划分结构」**\n\n  对于比较复杂的表格，表格的结构也就相对的复杂了，所以又将表格分割成三个部分：题头、正文和脚注。而这三部分分别用:thead,tbody,tfoot来标注， 这样更好的分清表格结构。\n\n**注意：**\n\n1. thead：用于定义表格的头部。用来放标题之类的东西。<thead> 内部必须拥有<tr> 标签！\n2. tbody：用于定义表格的主体。放数据本体 。\n3. tfoot：放表格的脚注之类。\n4.  以上标签都是放到table标签中。\n\n# 列表\n\n## **「列表」**\n\n容器里面装载着结构，样式一致的文字或图表的一种形式，叫列表。\n\n列表最大的特点就是整齐 、整洁、 有序，跟表格类似，但是它可组合自由度会更高。\n\n### **「1. 无序列表 ul」**\n\n- ul中只能嵌套li，直接在ul标签中输入其他标签或者文字的做法是不被允许的。\n- li之间相当于一个容器，可以容纳所有元素。\n\n```html\n<ul>\n  <li>列表项1</li>\n  <li>列表项2</li>\n  <li>列表项3</li>\n  ......\n</ul>\n```\n\n### **「2. 有序列表 ol」**\n\n- ol标签中的type属性值为排序的序列号，不添加type属性时，有序列表默认从数字1开始排序。\n\n- 常用的type属性值分别为是1，a，A，i，I\n\n- ol reversed=\"reversed\"中的reversed属性能够让有序列表中的序列倒序排列。\n\n- ol start=\"3\"中的start属性值为3，有序列表中的第一个序列号将从3开始排列。\n\n```html\n<ol type=\"A\"> \n  <li>列表项1</li>\n  <li>列表二</li>\n  <li>列表三</li>\n</ol>\n```\n\n## **「自定义列表 」**\n\n定义列表常用于对术语或名词进行解释和描述，定义列表的列表项前没有任何项目符号。\n\n```html\n<dl>\n  <dt>名词1</dt>\n  <dd>名词1解释1</dd>\n  <dd>名词1解释2</dd>\n  ...\n  <dt>名词2</dt>\n  <dd>名词2解释1</dd>\n  <dd>名词2解释2</dd>\n  ...\n</dl>\n```\n\n# 表单\n\n在HTML中，一个完整的表单通常由表单控件（也称为表单元素）、提示信息和表单域3个部分构成。表单目的是为了收集用户信息。\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207080853313.png)\n\n**表单控件：**\n 包含了具体的表单功能项，如单行文本输入框、密码输入框、复选框、提交按钮、重置按钮等。\n**提示信息：**\n 一个表单中通常还需要包含一些说明性的文字，提示用户进行填写和操作。\n**表单域：** \n 它相当于一个容器，用来容纳所有的表单控件和提示信息，可以通过他定义处理表单数据所用程序的url地址，以及数据提交到服务器的方法。如果不定义表单域，表单中的数据就无法传送到后台服务器。\n\n## **「1. input 控件」**\n\n```html\n<input type=\"属性值\" value=\"你好\">\n```\n\n- input 输入的意思\n- input 标签为单标签\n- type属性设置不同的属性值用来指定不同的控件类型\n- 除了type属性还有别的属性\n\n### **常用属性：**\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207080854979.png)\n\n```html\n用户名: <input type=\"text\" /> \n密  码：<input type=\"password\" />\n```\n\n### **value属性**\n\n- value 默认的文本值。有些表单想刚打开页面就默认显示几个文字，就可以通过这个value 来设置。\n\n```html\n用户名:<input type=\"text\"  name=\"username\" value=\"请输入用户名\"> \n```\n\n### **name属性**\n\n- name表单的名字， 这样，后台可以通过这个name属性找到这个表单。 页面中的表单很多，name主要作用就是用于区别不同的表单。\n- name属性后面的值，是我们自己定义的。\n- radio  如果是一组，我们必须给他们命名相同的名字 name  这样就可以多个选其中的一个啦\n- name属性，我们现在用的较少，但是，当我们学ajax 和后台的时候，是必须的。\n\n- \n\n```html\n<input type=\"radio\" name=\"sex\"  />男\n<input type=\"radio\" name=\"sex\" />女\n```\n\n### **checked属性**\n\n表示默认选中状态。 较常见于 单选按钮和复选按钮。\n\n```html\n性    别:\n<input type=\"radio\" name=\"sex\" value=\"男\" checked=\"checked\" />男\n<input type=\"radio\" name=\"sex\" value=\"女\" />女 \n```\n\n### **input 属性小结**\n\n| 属性    | 说明     | 作用                                                   |\n| ------- | -------- | ------------------------------------------------------ |\n| type    | 表单类型 | 用来指定不同的控件类型                                 |\n| value   | 表单值   | 表单里面默认显示的文本                                 |\n| name    | 表单名字 | 页面中的表单很多，name主要作用就是用于区别不同的表单。 |\n| checked | 默认选中 | 表示那个单选或者复选按钮一开始就被选中了               |\n\n## **「2.  label标签」**\n\n- label 标签为 input 元素定义标注（标签）。\n- label标签主要目的是为了提高用户体验。为用户提高最优秀的服务。\n\n**作用：**用于绑定一个表单元素, 当点击label标签的时候, 被绑定的表单元素就会获得输入焦点。\n\n### **如何绑定元素呢**\n\n- 第一种用法就是用label标签直接包含input表单， 适合单个表单选择\n- 第二种用法 for 属性规定 label 与哪个表单元素绑定(通过id)。\n\n```html\n  第一种\n  <label> 用户名： \n    <input type=\"radio\" name=\"usename\" value=\"请输入用户名\">   \n  </label>\n  \n  第二种\n  <label for=\"sex\">男</label>\n  <input type=\"radio\" name=\"sex\"  id=\"sex\">\n```\n\n## **「3.  textarea控件(文本域)」**\n\n- 通过textarea控件可以轻松地创建多行文本输入框.\n- cols=\"每行中的字符数\" rows=\"显示的行数\"  我们实际开发不用\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207080901727.png)\n\n```html\n  <textarea >\n    文本内容\n  </textarea>\n```\n\n### **文本框和文本域区别**\n\n| 表单              | 名称   | 区别             | 默认显示                    | 用于场景             |\n| ----------------- | ------ | ---------------- | --------------------------- | -------------------- |\n| input type=\"text\" | 文本框 | 只能显示一行文本 | 单标签，通过value显示默认值 | 用户名、昵称、密码等 |\n| textarea          | 文本域 | 可以显示多行文本 | 双标签，默认值写到标签中间  | 留言板               |\n\n## **「4.  select下拉列表」**\n\n- 如果有多个选项让用户选择，为了节约空间，我们可以使用select控件定义下拉列表。\n- 在option 中定义selected =\" selected \"时，当前项即为默认选中项。\n- 我们实际开发会用的比较少\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207080904309.png)\n\n```html\n<select>\n  \n  <option>选项1</option>\n  <option>选项2</option>\n  <option>选项3</option>\n  ...\n</select>\n```\n\n## **「5.form表单域」**\n\n1. 收集的用户信息怎么传递给服务器？\n\n2. - 通过form表单域\n\n3. 目的：\n\n4. - 在HTML中，form标签被用于定义表单域，以实现用户信息的收集和传递，form中的所有内容都会被提交给服务器。\n\n```html\n<form action=\"url地址\" method=\"提交方式\" name=\"表单名称\">\n  各种表单控件\n</form>\n```\n\n### **常用属性：**\n\n每个表单都应该有自己表单域。后面学 ajax 后台交互的时候，必须需要form表单域。\n\n| 属性   | 属性值   | 作用                                               |\n| ------ | -------- | -------------------------------------------------- |\n| action | url地址  | 用于指定接收并处理表单数据的服务器程序的url地址。  |\n| method | get/post | 用于设置表单数据的提交方式，其取值为get或post。    |\n| name   | 名称     | 用于指定表单的名称，以区分同一个页面中的多个表单。 |\n\n### **GET 和 POST 的区别**\n\n- GET在浏览器回退时是无害的，而POST会再次提交请求。\n- GET请求会被浏览器主动cache，而POST不会，除非手动设置。\n- GET请求只能进行url编码，而POST支持多种编码方式。\n- GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。\n- GET请求大小一般是(1024字节)，http协议并没有限制，而与服务器，操作系统有关，POST理论上来说没有大小限制，http协议规范也没有进行大小限制，但实际上post所能传递的数据量根据取决于服务器的设置和内存大小。\n- 对参数的数据类型，GET只接受ASCII字符，而POST没有限制。\n- GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。\n\n### **团队约定**\n\n- 元素属性值使用双引号语法\n- 元素属性值可以写上的都写上\n\n```html\n推荐\n<input type=\"text\" /> \n<input type=\"radio\" name=\"name\" checked=\"checked\" />\n```\n\n","slug":"前端/HTML基础","published":1,"layout":"post","photos":[],"link":"","_id":"cl5db79k80017ywtuftbwe4is","content":"<h1 id=\"HTML基础\"><a href=\"#HTML基础\" class=\"headerlink\" title=\"HTML基础\"></a>HTML基础</h1><h2 id=\"HTML初识\"><a href=\"#HTML初识\" class=\"headerlink\" title=\"HTML初识\"></a>HTML初识</h2><p><strong>「HTML」</strong>(Hyper Text Markup Language):超文本标记语言</p>\n<p><strong>「所谓超文本，有2层含义：」</strong></p>\n<ul>\n<li>因为它可以加入图片、声音、动画、多媒体等内容（超越文本限制 ）</li>\n<li>不仅如此，它还可以从一个文件跳转到另一个文件，与世界各地主机的文件连接（超级链接文本）。</li>\n</ul>\n<p><strong>「HTML骨架格式」</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 页面中最大的标签 根标签 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 头部标签 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span>     </span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 标题标签 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 文档的主体 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>「团队约定大小写」</strong></p>\n<ul>\n<li>HTML标签名、类名、标签属性和大部分属性值统一用小写</li>\n</ul>\n<p><strong>「HTML元素标签分类」</strong></p>\n<ul>\n<li>常规元素(双标签)</li>\n<li>空元素(单标签)</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">常规元素(双标签)</span><br><span class=\"line\">&lt;标签名&gt; 内容 &lt;/标签名&gt;   比如<span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span>我是文字<span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">空元素(单标签)</span><br><span class=\"line\">&lt;标签名 /&gt;  比如 <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span>或<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>「HTML标签关系」</strong></p>\n<ul>\n<li><p>嵌套关系父子级包含关系</p>\n</li>\n<li><p>并列关系兄弟级并列关系</p>\n</li>\n<li><ul>\n<li>如果两个标签之间的关系是嵌套关系，子元素最好缩进一个tab键的身位（一个tab是4个空格）。如果是并列关系，最好上下对齐。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"文档类型\"><a href=\"#文档类型\" class=\"headerlink\" title=\"文档类型\"></a>文档类型</h2><p><strong>「文档类型」</strong>用来说明你用的XHTML或者HTML是什么版本。<!DOCTYPE html>告诉浏览器按照HTML5标准解析页面。</p>\n<h2 id=\"页面语言\"><a href=\"#页面语言\" class=\"headerlink\" title=\"页面语言\"></a><strong>页面语言</strong></h2><p>页面语言lang指定该html标签内容所用的语言</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span>  </span><br><span class=\"line\">en 定义语言为英语 zh-CN定义语言为中文</span><br></pre></td></tr></table></figure>\n\n<p><strong>「lang的作用」</strong></p>\n<ul>\n<li>根据根据lang属性来设定不同语言的css样式，或者字体</li>\n<li>告诉搜索引擎做精确的识别</li>\n<li>让语法检查程序做语言识别</li>\n<li>帮助翻译工具做识别</li>\n<li>帮助网页阅读程序做识别</li>\n</ul>\n<h2 id=\"字符集\"><a href=\"#字符集\" class=\"headerlink\" title=\"字符集\"></a>字符集</h2><p><strong>「字符集」</strong>(Character set)是多个字符的集合,计算机要准确的处理各种字符集文字，需要进行字符编码，以便计算机能够识别和存储各种文字。</p>\n<ul>\n<li>UTF-8是目前最常用的字符集编码方式，称为万国码</li>\n<li>让 html 文件是以 UTF-8 编码保存的， 浏览器根据编码去解码对应的html内容。</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>「meta viewport的用法」</strong><br>  通常viewport是指视窗、视口。浏览器上(也可能是一个app中的webview)用来显示网页的那部分区域。在移动端和pc端视口是不同的，pc端的视口是浏览器窗口区域，而在移动端有三个不同的视口概念：布局视口、视觉视口、理想视口</p>\n<p>  meta有两个属性name 和 http-equiv</p>\n<p><strong>name属性的取值</strong></p>\n<ul>\n<li>keywords(关键字) 告诉搜索引擎，该网页的关键字</li>\n<li>description(网站内容描述) 用于告诉搜索引擎，你网站的主要内容。</li>\n<li>viewport(移动端的窗口)</li>\n<li>robots(定义搜索引擎爬虫的索引方式) robots用来告诉爬虫哪些页面需要索引，哪些页面不需要索引</li>\n<li>author(作者)</li>\n<li>generator(网页制作软件）</li>\n<li>copyright(版权)</li>\n</ul>\n<p><strong>http-equiv有以下参数</strong></p>\n<p>http-equiv相当于http的文件头作用，它可以向浏览器传回一些有用的信息，以帮助正确和精确地显示网页内容</p>\n<ul>\n<li>content-Type 设定网页字符集(Html4用法，不推荐)</li>\n<li>Expires(期限) ,可以用于设定网页的到期时间。一旦网页过期，必须到服务器上重新传输。</li>\n<li>Pragma(cache模式),是用于设定禁止浏览器从本地机的缓存中调阅页面内容，设定后一旦离开网页就无法从Cache中再调出</li>\n<li>Refresh(刷新),自动刷新并指向新页面。</li>\n<li>cache-control（请求和响应遵循的缓存机制）</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"HTML标签的语义化\"><a href=\"#HTML标签的语义化\" class=\"headerlink\" title=\"HTML标签的语义化\"></a>HTML标签的语义化</h2><ul>\n<li>方便代码的阅读和维护，样式丢失的时候能让页面呈现清晰的结构。</li>\n<li>有利于SEO，搜索引擎根据标签来确定上下文和各个关键字的权重。</li>\n<li>方便其他设备解析，如盲人阅读器根据语义渲染网页</li>\n</ul>\n<p><strong>「拓展」</strong> 标签：规定页面上所有链接的默认 URL 和设置整体链接的打开状态</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">base</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;http://www.baidu.com&quot;</span> <span class=\"attr\">target</span>=<span class=\"string\">&quot;_blank&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">base</span> <span class=\"attr\">target</span>=<span class=\"string\">&quot;_self&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>测试<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span> 跳转到 百度</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"HTML常用标签\"><a href=\"#HTML常用标签\" class=\"headerlink\" title=\"HTML常用标签\"></a>HTML常用标签</h1><h2 id=\"「1-排版标签」\"><a href=\"#「1-排版标签」\" class=\"headerlink\" title=\"「1. 排版标签」\"></a><strong>「1. 排版标签」</strong></h2><p>主要和css搭配使用，显示网页结构的标签，是网页布局最常用的标签。</p>\n<ul>\n<li>标题标签h(h1~h6)</li>\n<li>段落标签p,可以把 HTML 文档分割为若干段落</li>\n<li>水平线标签hr</li>\n<li>换行标签br</li>\n<li>div和span标签:是没有语义的,是我们网页布局最主要的2个盒子。</li>\n</ul>\n<h2 id=\"「2-文本格式化标签」\"><a href=\"#「2-文本格式化标签」\" class=\"headerlink\" title=\"「2. 文本格式化标签」\"></a><strong>「2. 文本格式化标签」</strong></h2><ul>\n<li>b和strong 文字以粗体显示</li>\n<li>i和em 文字以斜体显示</li>\n<li>s和del 文字以加删除线显示</li>\n<li>u和ins 文字以加下划线显示</li>\n</ul>\n<h2 id=\"「3-标签属性-行内式-」\"><a href=\"#「3-标签属性-行内式-」\" class=\"headerlink\" title=\"「3. 标签属性(行内式)」\"></a><strong>「3. 标签属性(行内式)」</strong></h2><p>使用HTML制作网页时，如果想让HTML标签提供更多的信息，可以使用HTML标签的属性加以设置。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;标签名 属性1=&quot;属性值1&quot; 属性2=&quot;属性值2&quot; …&gt; 内容 &lt;/标签名&gt;</span><br><span class=\"line\">&lt;手机 颜色=&quot;红色&quot; 大小=&quot;5寸&quot;&gt;  &lt;/手机&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「4-图像标签img」\"><a href=\"#「4-图像标签img」\" class=\"headerlink\" title=\"「4. 图像标签img」\"></a><strong>「4. 图像标签img」</strong></h2><p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207080035188.png\"></p>\n<p><strong>注意：</strong></p>\n<ul>\n<li>标签可以拥有多个属性，必须写在开始标签中，位于标签名后面。</li>\n<li>属性之间不分先后顺序，标签名与属性、属性与属性之间均以空格分开。</li>\n<li>采取<strong>键值对</strong>的格式  key=”value”  的格式</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;cz.jpg&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;300&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;300&quot;</span> <span class=\"attr\">border</span>=<span class=\"string\">&quot;3&quot;</span> <span class=\"attr\">title</span>=<span class=\"string\">&quot;这是个小蒲公英&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「5-链接标签-重点-」\"><a href=\"#「5-链接标签-重点-」\" class=\"headerlink\" title=\"「5. 链接标签(重点)」\"></a><strong>「5. 链接标签(重点)」</strong></h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;跳转目标&quot;</span> <span class=\"attr\">target</span>=<span class=\"string\">&quot;目标窗口的弹出方式&quot;</span>&gt;</span>文本或图像<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">target=&quot;_self&quot;  默认窗口弹出方式</span><br><span class=\"line\">target=&quot;_blank&quot; 新窗口弹出</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th><strong>属性</strong></th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>href</td>\n<td>用于指定链接目标的url地址，（必须属性）当为标签应用href属性时，它就具有了超链接的功能</td>\n</tr>\n<tr>\n<td>target</td>\n<td>用于指定链接页面的打开方式，其取值有_self和_blank两种，其中_self为默认值，_blank为在新窗口中打开方式。</td>\n</tr>\n</tbody></table>\n<h3 id=\"src-和-href-的区别\"><a href=\"#src-和-href-的区别\" class=\"headerlink\" title=\"src 和 href 的区别\"></a><strong>src 和 href 的区别</strong></h3><p>一句话概括:<strong>src 是引入资源的 href 是跳转url的</strong></p>\n<ol>\n<li>src用于替换当前元素，href用于在当前文档和引用资源之间确立联系。</li>\n<li>src是source的缩写，指向外部资源的位置，指向的内容将会嵌入到文档中当前标签所在位置；在请求src资源时会将其指向的资源下载并应用到文档内，例如js脚本，img图片和frame等元素。当浏览器解析到该元素时，会暂停其他资源的下载和处理，直到将该资源加载、编译、执行完毕，图片和框架等元素也如此，类似于将所指向资源嵌入当前标签内。这也是为什么将js脚本放在底部而不是头部。</li>\n<li>href是Hypertext Reference的缩写，指向网络资源所在位置，建立和当前元素（锚点）或当前文档（链接）之间的链接。如果我们在文档中添加那么浏览器会识别该文档为css文件，就会并行下载资源并且不会停止对当前文档的处理。这也是为什么建议使用link方式来加载css，而不是使用@import方式。</li>\n</ol>\n<p><strong>注意：</strong></p>\n<ol>\n<li>外部链接 需要添加 http:// <a href=\"http://www.baidu.com/\">www.baidu.com</a></li>\n<li>内部链接 直接链接内部页面名称即可 比如 &lt; a href=”index.html”&gt; 首页</li>\n<li>如果当时没有确定链接目标时，通常将链接标签的href属性值定义为“#”(即href=”#”)，表示该链接暂时为一个空链接。</li>\n<li>不仅可以创建文本超链接，在网页中各种网页元素，如图像、表格、音频、视频等都可以添加超链接。</li>\n</ol>\n<h3 id=\"锚点定位\"><a href=\"#锚点定位\" class=\"headerlink\" title=\"锚点定位\"></a><strong>锚点定位</strong></h3><p><strong>锚点定位：通过创建锚点链接，用户能够快速定位到目标内容。</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 使用相应的id名标注跳转目标的位置。 (找目标)</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h3</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;two&quot;</span>&gt;</span>第2集<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span> </span><br><span class=\"line\"></span><br><span class=\"line\">2. 使用<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#id名&quot;</span>&gt;</span>链接文本<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span>创建链接文本（被点击的） </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#two&quot;</span>&gt;</span>   </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「6-注释标签」\"><a href=\"#「6-注释标签」\" class=\"headerlink\" title=\"「6. 注释标签」\"></a><strong>「6. 注释标签」</strong></h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 注释语句 --&gt;</span>     </span><br><span class=\"line\"> 快捷键是：    ctrl + /       </span><br><span class=\"line\"> 或者 ctrl +shift + / </span><br></pre></td></tr></table></figure>\n\n<p><strong>团队约定：</strong>注释内容前后各一个空格字符，注释位于要注释代码的上面，单独占一行</p>\n<h2 id=\"「7-路径」\"><a href=\"#「7-路径」\" class=\"headerlink\" title=\"「7. 路径」\"></a><strong>「7. 路径」</strong></h2><p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207080042861.png\"></p>\n<h2 id=\"「8-其他知识」\"><a href=\"#「8-其他知识」\" class=\"headerlink\" title=\"「8. 其他知识」\"></a><strong>「8. 其他知识」</strong></h2><h3 id=\"预格式化文本pre标签\"><a href=\"#预格式化文本pre标签\" class=\"headerlink\" title=\"预格式化文本pre标签\"></a><strong>预格式化文本pre标签</strong></h3><p>元素中的文本通常会保留空格和换行符。而文本也会呈现为等宽字体。格式化文本就是 ，按照我们预先写好的文字格式来显示页面， 保留空格和换行等。</p>\n<h3 id=\"特殊字符\"><a href=\"#特殊字符\" class=\"headerlink\" title=\"特殊字符\"></a><strong>特殊字符</strong></h3><p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207080043782.png\"></p>\n<h3 id=\"什么是XHTML\"><a href=\"#什么是XHTML\" class=\"headerlink\" title=\"什么是XHTML\"></a><strong>什么是XHTML</strong></h3><ul>\n<li>XHTML 指<strong>「可扩展超文本标签语言」</strong>（EXtensible HyperText Markup Language）。</li>\n<li>XHTML 的目标是取代 HTML。</li>\n<li>XHTML 与 HTML 4.01 几乎是相同的。</li>\n<li>XHTML 是更严格更纯净的 HTML 版本。</li>\n<li>XHTML 是作为一种 XML 应用被重新定义的 HTML,是严格版本的HTML。例如它要求标签必须小写，标签必须被正确关闭，标签顺序必须正确排列，对于属性都必须使用双引号等。</li>\n<li>XHTML 是一个 W3C 标准。</li>\n</ul>\n<h3 id=\"写HTML代码时应注意什么？\"><a href=\"#写HTML代码时应注意什么？\" class=\"headerlink\" title=\"写HTML代码时应注意什么？\"></a><strong>写HTML代码时应注意什么？</strong></h3><ul>\n<li>尽可能少的使用无语义的标签div和span；</li>\n<li>在语义不明显时，既可以使用div或者p时，尽量用p, 因为p在默认情况下有上下间距，对兼容特殊终端有利；</li>\n<li>不要使用纯样式标签，如：b、font、u等，改用css设置。</li>\n<li>需要强调的文本，可以包含在strong或者em标签中（浏览器预设样式，能用CSS指定就不用他们），strong默认样式是加粗（不要用b），em是斜体（不用i）；</li>\n<li>使用表格时，标题要用caption，表头用thead，主体部分用tbody包围，尾部用tfoot包围。表头和一般单元格要区分开，表头用th，单元格用td；</li>\n<li>表单域要用fieldset标签包起来，并用legend标签说明表单的用途；</li>\n<li>每个input标签对应的说明文本都需要使用label标签，并且通过为input设置id属性，在lable标签中设置for来让说明文本和相对应的input关联起来。</li>\n</ul>\n<h1 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h1><h2 id=\"「1-表格」\"><a href=\"#「1-表格」\" class=\"headerlink\" title=\"「1. 表格」\"></a><strong>「1. 表格」</strong></h2><p>现在还是较为常用的一种标签，但不是用来布局，<strong>常见显示、展示表格式数据</strong>。因为它可以让数据显示的非常的规整，可读性非常好。<strong>特别是后台展示数据的时候表格运用是否熟练就显得很重要</strong>，一个清爽简约的表格能够把繁杂的数据表现得很有条理。</p>\n<h2 id=\"「2-创建表格」\"><a href=\"#「2-创建表格」\" class=\"headerlink\" title=\"「2. 创建表格」\"></a><strong>「2. 创建表格」</strong></h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>单元格内的文字<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>table、tr、td，他们是创建表格的基本标签，缺一不可</p>\n<ul>\n<li>table用于定义一个表格标签。</li>\n<li>tr标签 用于定义表格中的行，必须嵌套在 table标签中。</li>\n<li>td 用于定义表格中的单元格，必须嵌套在<tr></tr>标签中。</li>\n<li>字母 td 指表格数据（table data），即数据单元格的内容，现在我们明白，表格最合适的地方就是用来存储数据的。td像一个容器，可以容纳所有的元素。</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207080052352.jpg\"></p>\n<h3 id=\"表头单元格标签th\"><a href=\"#表头单元格标签th\" class=\"headerlink\" title=\"表头单元格标签th\"></a><strong>表头单元格标签th</strong></h3><p>一般表头单元格位于表格的第一行或第一列，并且文本加粗居中,只需用表头标签<th></th>替代相应的单元格标签<td></td>即可。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207080053567.png\"></p>\n<h3 id=\"表格标题caption\"><a href=\"#表格标题caption\" class=\"headerlink\" title=\"表格标题caption\"></a><strong>表格标题caption</strong></h3><p>通常这个标题会被居中且显示于表格之上。caption 标签必须紧随 table 标签之后。这个标签只存在 表格里面才有意义。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">caption</span>&gt;</span>我是表格标题<span class=\"tag\">&lt;/<span class=\"name\">caption</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「3-表格属性」\"><a href=\"#「3-表格属性」\" class=\"headerlink\" title=\"「3. 表格属性」\"></a><strong>「3. 表格属性」</strong></h2><p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207080055050.png\"></p>\n<p>三参为0，平时开发的我们这三个参数   border  cellpadding  cellspacing 为  0</p>\n<h2 id=\"「4-合并单元格」\"><a href=\"#「4-合并单元格」\" class=\"headerlink\" title=\"「4. 合并单元格」\"></a><strong>「4. 合并单元格」</strong></h2><p>合并的顺序我们按照  先上 后下   先左  后右 的顺序 ,合并完之后需要删除多余的单元格。</p>\n<ul>\n<li>跨行合并：rowspan=”合并单元格的个数”</li>\n<li>跨列合并：colspan=”合并单元格的个数”</li>\n</ul>\n<h2 id=\"「5-总结表格」\"><a href=\"#「5-总结表格」\" class=\"headerlink\" title=\"「5. 总结表格」\"></a><strong>「5. 总结表格」</strong></h2><table>\n<thead>\n<tr>\n<th>标签名</th>\n<th>定义</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>table</td>\n<td>表格标签</td>\n<td>就是一个四方的盒子</td>\n</tr>\n<tr>\n<td>tr</td>\n<td>表格行标签</td>\n<td>行标签要再table标签内部才有意义</td>\n</tr>\n<tr>\n<td>td</td>\n<td>单元格标签</td>\n<td>单元格标签是个容器级元素，可以放任何东西</td>\n</tr>\n<tr>\n<td>th</td>\n<td>表头单元格标签</td>\n<td>它还是一个单元格，但是里面的文字会居中且加粗</td>\n</tr>\n<tr>\n<td>caption</td>\n<td>表格标题标签</td>\n<td>表格的标题，跟着表格一起走，和表格居中对齐</td>\n</tr>\n<tr>\n<td>clospan 和 rowspan</td>\n<td>合并属性</td>\n<td>用来合并单元格的</td>\n</tr>\n</tbody></table>\n<h2 id=\"「6-表格划分结构」\"><a href=\"#「6-表格划分结构」\" class=\"headerlink\" title=\"「6. 表格划分结构」\"></a><strong>「6. 表格划分结构」</strong></h2><p>  对于比较复杂的表格，表格的结构也就相对的复杂了，所以又将表格分割成三个部分：题头、正文和脚注。而这三部分分别用:thead,tbody,tfoot来标注， 这样更好的分清表格结构。</p>\n<p><strong>注意：</strong></p>\n<ol>\n<li>thead：用于定义表格的头部。用来放标题之类的东西。<thead> 内部必须拥有<tr> 标签！</li>\n<li>tbody：用于定义表格的主体。放数据本体 。</li>\n<li>tfoot：放表格的脚注之类。</li>\n<li> 以上标签都是放到table标签中。</li>\n</ol>\n<h1 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h1><h2 id=\"「列表」\"><a href=\"#「列表」\" class=\"headerlink\" title=\"「列表」\"></a><strong>「列表」</strong></h2><p>容器里面装载着结构，样式一致的文字或图表的一种形式，叫列表。</p>\n<p>列表最大的特点就是整齐 、整洁、 有序，跟表格类似，但是它可组合自由度会更高。</p>\n<h3 id=\"「1-无序列表-ul」\"><a href=\"#「1-无序列表-ul」\" class=\"headerlink\" title=\"「1. 无序列表 ul」\"></a><strong>「1. 无序列表 ul」</strong></h3><ul>\n<li>ul中只能嵌套li，直接在ul标签中输入其他标签或者文字的做法是不被允许的。</li>\n<li>li之间相当于一个容器，可以容纳所有元素。</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>列表项1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>列表项2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>列表项3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  ......</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"「2-有序列表-ol」\"><a href=\"#「2-有序列表-ol」\" class=\"headerlink\" title=\"「2. 有序列表 ol」\"></a><strong>「2. 有序列表 ol」</strong></h3><ul>\n<li><p>ol标签中的type属性值为排序的序列号，不添加type属性时，有序列表默认从数字1开始排序。</p>\n</li>\n<li><p>常用的type属性值分别为是1，a，A，i，I</p>\n</li>\n<li><p>ol reversed=”reversed”中的reversed属性能够让有序列表中的序列倒序排列。</p>\n</li>\n<li><p>ol start=”3”中的start属性值为3，有序列表中的第一个序列号将从3开始排列。</p>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ol</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;A&quot;</span>&gt;</span> </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>列表项1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>列表二<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>列表三<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「自定义列表-」\"><a href=\"#「自定义列表-」\" class=\"headerlink\" title=\"「自定义列表 」\"></a><strong>「自定义列表 」</strong></h2><p>定义列表常用于对术语或名词进行解释和描述，定义列表的列表项前没有任何项目符号。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dl</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dt</span>&gt;</span>名词1<span class=\"tag\">&lt;/<span class=\"name\">dt</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dd</span>&gt;</span>名词1解释1<span class=\"tag\">&lt;/<span class=\"name\">dd</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dd</span>&gt;</span>名词1解释2<span class=\"tag\">&lt;/<span class=\"name\">dd</span>&gt;</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dt</span>&gt;</span>名词2<span class=\"tag\">&lt;/<span class=\"name\">dt</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dd</span>&gt;</span>名词2解释1<span class=\"tag\">&lt;/<span class=\"name\">dd</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dd</span>&gt;</span>名词2解释2<span class=\"tag\">&lt;/<span class=\"name\">dd</span>&gt;</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"表单\"><a href=\"#表单\" class=\"headerlink\" title=\"表单\"></a>表单</h1><p>在HTML中，一个完整的表单通常由表单控件（也称为表单元素）、提示信息和表单域3个部分构成。表单目的是为了收集用户信息。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207080853313.png\"></p>\n<p><strong>表单控件：</strong><br> 包含了具体的表单功能项，如单行文本输入框、密码输入框、复选框、提交按钮、重置按钮等。<br><strong>提示信息：</strong><br> 一个表单中通常还需要包含一些说明性的文字，提示用户进行填写和操作。<br><strong>表单域：</strong><br> 它相当于一个容器，用来容纳所有的表单控件和提示信息，可以通过他定义处理表单数据所用程序的url地址，以及数据提交到服务器的方法。如果不定义表单域，表单中的数据就无法传送到后台服务器。</p>\n<h2 id=\"「1-input-控件」\"><a href=\"#「1-input-控件」\" class=\"headerlink\" title=\"「1. input 控件」\"></a><strong>「1. input 控件」</strong></h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;属性值&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;你好&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>input 输入的意思</li>\n<li>input 标签为单标签</li>\n<li>type属性设置不同的属性值用来指定不同的控件类型</li>\n<li>除了type属性还有别的属性</li>\n</ul>\n<h3 id=\"常用属性：\"><a href=\"#常用属性：\" class=\"headerlink\" title=\"常用属性：\"></a><strong>常用属性：</strong></h3><p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207080854979.png\"></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用户名: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> /&gt;</span> </span><br><span class=\"line\">密  码：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;password&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"value属性\"><a href=\"#value属性\" class=\"headerlink\" title=\"value属性\"></a><strong>value属性</strong></h3><ul>\n<li>value 默认的文本值。有些表单想刚打开页面就默认显示几个文字，就可以通过这个value 来设置。</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用户名:<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span>  <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;请输入用户名&quot;</span>&gt;</span> </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"name属性\"><a href=\"#name属性\" class=\"headerlink\" title=\"name属性\"></a><strong>name属性</strong></h3><ul>\n<li><p>name表单的名字， 这样，后台可以通过这个name属性找到这个表单。 页面中的表单很多，name主要作用就是用于区别不同的表单。</p>\n</li>\n<li><p>name属性后面的值，是我们自己定义的。</p>\n</li>\n<li><p>radio  如果是一组，我们必须给他们命名相同的名字 name  这样就可以多个选其中的一个啦</p>\n</li>\n<li><p>name属性，我们现在用的较少，但是，当我们学ajax 和后台的时候，是必须的。</p>\n</li>\n<li></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;sex&quot;</span>  /&gt;</span>男</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;sex&quot;</span> /&gt;</span>女</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"checked属性\"><a href=\"#checked属性\" class=\"headerlink\" title=\"checked属性\"></a><strong>checked属性</strong></h3><p>表示默认选中状态。 较常见于 单选按钮和复选按钮。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">性    别:</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;sex&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;男&quot;</span> <span class=\"attr\">checked</span>=<span class=\"string\">&quot;checked&quot;</span> /&gt;</span>男</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;sex&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;女&quot;</span> /&gt;</span>女 </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"input-属性小结\"><a href=\"#input-属性小结\" class=\"headerlink\" title=\"input 属性小结\"></a><strong>input 属性小结</strong></h3><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>说明</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>type</td>\n<td>表单类型</td>\n<td>用来指定不同的控件类型</td>\n</tr>\n<tr>\n<td>value</td>\n<td>表单值</td>\n<td>表单里面默认显示的文本</td>\n</tr>\n<tr>\n<td>name</td>\n<td>表单名字</td>\n<td>页面中的表单很多，name主要作用就是用于区别不同的表单。</td>\n</tr>\n<tr>\n<td>checked</td>\n<td>默认选中</td>\n<td>表示那个单选或者复选按钮一开始就被选中了</td>\n</tr>\n</tbody></table>\n<h2 id=\"「2-label标签」\"><a href=\"#「2-label标签」\" class=\"headerlink\" title=\"「2.  label标签」\"></a><strong>「2.  label标签」</strong></h2><ul>\n<li>label 标签为 input 元素定义标注（标签）。</li>\n<li>label标签主要目的是为了提高用户体验。为用户提高最优秀的服务。</li>\n</ul>\n<p><strong>作用：</strong>用于绑定一个表单元素, 当点击label标签的时候, 被绑定的表单元素就会获得输入焦点。</p>\n<h3 id=\"如何绑定元素呢\"><a href=\"#如何绑定元素呢\" class=\"headerlink\" title=\"如何绑定元素呢\"></a><strong>如何绑定元素呢</strong></h3><ul>\n<li>第一种用法就是用label标签直接包含input表单， 适合单个表单选择</li>\n<li>第二种用法 for 属性规定 label 与哪个表单元素绑定(通过id)。</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第一种</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span> 用户名： </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;usename&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;请输入用户名&quot;</span>&gt;</span>   </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">第二种</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;sex&quot;</span>&gt;</span>男<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;sex&quot;</span>  <span class=\"attr\">id</span>=<span class=\"string\">&quot;sex&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「3-textarea控件-文本域-」\"><a href=\"#「3-textarea控件-文本域-」\" class=\"headerlink\" title=\"「3.  textarea控件(文本域)」\"></a><strong>「3.  textarea控件(文本域)」</strong></h2><ul>\n<li>通过textarea控件可以轻松地创建多行文本输入框.</li>\n<li>cols=”每行中的字符数” rows=”显示的行数”  我们实际开发不用</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207080901727.png\"></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">textarea</span> &gt;</span></span><br><span class=\"line\">  文本内容</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"文本框和文本域区别\"><a href=\"#文本框和文本域区别\" class=\"headerlink\" title=\"文本框和文本域区别\"></a><strong>文本框和文本域区别</strong></h3><table>\n<thead>\n<tr>\n<th>表单</th>\n<th>名称</th>\n<th>区别</th>\n<th>默认显示</th>\n<th>用于场景</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>input type=”text”</td>\n<td>文本框</td>\n<td>只能显示一行文本</td>\n<td>单标签，通过value显示默认值</td>\n<td>用户名、昵称、密码等</td>\n</tr>\n<tr>\n<td>textarea</td>\n<td>文本域</td>\n<td>可以显示多行文本</td>\n<td>双标签，默认值写到标签中间</td>\n<td>留言板</td>\n</tr>\n</tbody></table>\n<h2 id=\"「4-select下拉列表」\"><a href=\"#「4-select下拉列表」\" class=\"headerlink\" title=\"「4.  select下拉列表」\"></a><strong>「4.  select下拉列表」</strong></h2><ul>\n<li>如果有多个选项让用户选择，为了节约空间，我们可以使用select控件定义下拉列表。</li>\n<li>在option 中定义selected =” selected “时，当前项即为默认选中项。</li>\n<li>我们实际开发会用的比较少</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207080904309.png\"></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>选项1<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>选项2<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>选项3<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「5-form表单域」\"><a href=\"#「5-form表单域」\" class=\"headerlink\" title=\"「5.form表单域」\"></a><strong>「5.form表单域」</strong></h2><ol>\n<li><p>收集的用户信息怎么传递给服务器？</p>\n</li>\n<li><ul>\n<li>通过form表单域</li>\n</ul>\n</li>\n<li><p>目的：</p>\n</li>\n<li><ul>\n<li>在HTML中，form标签被用于定义表单域，以实现用户信息的收集和传递，form中的所有内容都会被提交给服务器。</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;url地址&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;提交方式&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;表单名称&quot;</span>&gt;</span></span><br><span class=\"line\">  各种表单控件</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"常用属性：-1\"><a href=\"#常用属性：-1\" class=\"headerlink\" title=\"常用属性：\"></a><strong>常用属性：</strong></h3><p>每个表单都应该有自己表单域。后面学 ajax 后台交互的时候，必须需要form表单域。</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>属性值</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>action</td>\n<td>url地址</td>\n<td>用于指定接收并处理表单数据的服务器程序的url地址。</td>\n</tr>\n<tr>\n<td>method</td>\n<td>get/post</td>\n<td>用于设置表单数据的提交方式，其取值为get或post。</td>\n</tr>\n<tr>\n<td>name</td>\n<td>名称</td>\n<td>用于指定表单的名称，以区分同一个页面中的多个表单。</td>\n</tr>\n</tbody></table>\n<h3 id=\"GET-和-POST-的区别\"><a href=\"#GET-和-POST-的区别\" class=\"headerlink\" title=\"GET 和 POST 的区别\"></a><strong>GET 和 POST 的区别</strong></h3><ul>\n<li>GET在浏览器回退时是无害的，而POST会再次提交请求。</li>\n<li>GET请求会被浏览器主动cache，而POST不会，除非手动设置。</li>\n<li>GET请求只能进行url编码，而POST支持多种编码方式。</li>\n<li>GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。</li>\n<li>GET请求大小一般是(1024字节)，http协议并没有限制，而与服务器，操作系统有关，POST理论上来说没有大小限制，http协议规范也没有进行大小限制，但实际上post所能传递的数据量根据取决于服务器的设置和内存大小。</li>\n<li>对参数的数据类型，GET只接受ASCII字符，而POST没有限制。</li>\n<li>GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。</li>\n</ul>\n<h3 id=\"团队约定\"><a href=\"#团队约定\" class=\"headerlink\" title=\"团队约定\"></a><strong>团队约定</strong></h3><ul>\n<li>元素属性值使用双引号语法</li>\n<li>元素属性值可以写上的都写上</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">推荐</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> /&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">checked</span>=<span class=\"string\">&quot;checked&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<h1 id=\"HTML基础\"><a href=\"#HTML基础\" class=\"headerlink\" title=\"HTML基础\"></a>HTML基础</h1><h2 id=\"HTML初识\"><a href=\"#HTML初识\" class=\"headerlink\" title=\"HTML初识\"></a>HTML初识</h2><p><strong>「HTML」</strong>(Hyper Text Markup Language):超文本标记语言</p>\n<p><strong>「所谓超文本，有2层含义：」</strong></p>\n<ul>\n<li>因为它可以加入图片、声音、动画、多媒体等内容（超越文本限制 ）</li>\n<li>不仅如此，它还可以从一个文件跳转到另一个文件，与世界各地主机的文件连接（超级链接文本）。</li>\n</ul>\n<p><strong>「HTML骨架格式」</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 页面中最大的标签 根标签 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 头部标签 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span>     </span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 标题标签 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 文档的主体 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>「团队约定大小写」</strong></p>\n<ul>\n<li>HTML标签名、类名、标签属性和大部分属性值统一用小写</li>\n</ul>\n<p><strong>「HTML元素标签分类」</strong></p>\n<ul>\n<li>常规元素(双标签)</li>\n<li>空元素(单标签)</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">常规元素(双标签)</span><br><span class=\"line\">&lt;标签名&gt; 内容 &lt;/标签名&gt;   比如<span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span>我是文字<span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">空元素(单标签)</span><br><span class=\"line\">&lt;标签名 /&gt;  比如 <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span>或<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>「HTML标签关系」</strong></p>\n<ul>\n<li><p>嵌套关系父子级包含关系</p>\n</li>\n<li><p>并列关系兄弟级并列关系</p>\n</li>\n<li><ul>\n<li>如果两个标签之间的关系是嵌套关系，子元素最好缩进一个tab键的身位（一个tab是4个空格）。如果是并列关系，最好上下对齐。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"文档类型\"><a href=\"#文档类型\" class=\"headerlink\" title=\"文档类型\"></a>文档类型</h2><p><strong>「文档类型」</strong>用来说明你用的XHTML或者HTML是什么版本。<!DOCTYPE html>告诉浏览器按照HTML5标准解析页面。</p>\n<h2 id=\"页面语言\"><a href=\"#页面语言\" class=\"headerlink\" title=\"页面语言\"></a><strong>页面语言</strong></h2><p>页面语言lang指定该html标签内容所用的语言</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span>  </span><br><span class=\"line\">en 定义语言为英语 zh-CN定义语言为中文</span><br></pre></td></tr></table></figure>\n\n<p><strong>「lang的作用」</strong></p>\n<ul>\n<li>根据根据lang属性来设定不同语言的css样式，或者字体</li>\n<li>告诉搜索引擎做精确的识别</li>\n<li>让语法检查程序做语言识别</li>\n<li>帮助翻译工具做识别</li>\n<li>帮助网页阅读程序做识别</li>\n</ul>\n<h2 id=\"字符集\"><a href=\"#字符集\" class=\"headerlink\" title=\"字符集\"></a>字符集</h2><p><strong>「字符集」</strong>(Character set)是多个字符的集合,计算机要准确的处理各种字符集文字，需要进行字符编码，以便计算机能够识别和存储各种文字。</p>\n<ul>\n<li>UTF-8是目前最常用的字符集编码方式，称为万国码</li>\n<li>让 html 文件是以 UTF-8 编码保存的， 浏览器根据编码去解码对应的html内容。</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>「meta viewport的用法」</strong><br>  通常viewport是指视窗、视口。浏览器上(也可能是一个app中的webview)用来显示网页的那部分区域。在移动端和pc端视口是不同的，pc端的视口是浏览器窗口区域，而在移动端有三个不同的视口概念：布局视口、视觉视口、理想视口</p>\n<p>  meta有两个属性name 和 http-equiv</p>\n<p><strong>name属性的取值</strong></p>\n<ul>\n<li>keywords(关键字) 告诉搜索引擎，该网页的关键字</li>\n<li>description(网站内容描述) 用于告诉搜索引擎，你网站的主要内容。</li>\n<li>viewport(移动端的窗口)</li>\n<li>robots(定义搜索引擎爬虫的索引方式) robots用来告诉爬虫哪些页面需要索引，哪些页面不需要索引</li>\n<li>author(作者)</li>\n<li>generator(网页制作软件）</li>\n<li>copyright(版权)</li>\n</ul>\n<p><strong>http-equiv有以下参数</strong></p>\n<p>http-equiv相当于http的文件头作用，它可以向浏览器传回一些有用的信息，以帮助正确和精确地显示网页内容</p>\n<ul>\n<li>content-Type 设定网页字符集(Html4用法，不推荐)</li>\n<li>Expires(期限) ,可以用于设定网页的到期时间。一旦网页过期，必须到服务器上重新传输。</li>\n<li>Pragma(cache模式),是用于设定禁止浏览器从本地机的缓存中调阅页面内容，设定后一旦离开网页就无法从Cache中再调出</li>\n<li>Refresh(刷新),自动刷新并指向新页面。</li>\n<li>cache-control（请求和响应遵循的缓存机制）</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"HTML标签的语义化\"><a href=\"#HTML标签的语义化\" class=\"headerlink\" title=\"HTML标签的语义化\"></a>HTML标签的语义化</h2><ul>\n<li>方便代码的阅读和维护，样式丢失的时候能让页面呈现清晰的结构。</li>\n<li>有利于SEO，搜索引擎根据标签来确定上下文和各个关键字的权重。</li>\n<li>方便其他设备解析，如盲人阅读器根据语义渲染网页</li>\n</ul>\n<p><strong>「拓展」</strong> 标签：规定页面上所有链接的默认 URL 和设置整体链接的打开状态</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">base</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;http://www.baidu.com&quot;</span> <span class=\"attr\">target</span>=<span class=\"string\">&quot;_blank&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">base</span> <span class=\"attr\">target</span>=<span class=\"string\">&quot;_self&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>测试<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span> 跳转到 百度</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"HTML常用标签\"><a href=\"#HTML常用标签\" class=\"headerlink\" title=\"HTML常用标签\"></a>HTML常用标签</h1><h2 id=\"「1-排版标签」\"><a href=\"#「1-排版标签」\" class=\"headerlink\" title=\"「1. 排版标签」\"></a><strong>「1. 排版标签」</strong></h2><p>主要和css搭配使用，显示网页结构的标签，是网页布局最常用的标签。</p>\n<ul>\n<li>标题标签h(h1~h6)</li>\n<li>段落标签p,可以把 HTML 文档分割为若干段落</li>\n<li>水平线标签hr</li>\n<li>换行标签br</li>\n<li>div和span标签:是没有语义的,是我们网页布局最主要的2个盒子。</li>\n</ul>\n<h2 id=\"「2-文本格式化标签」\"><a href=\"#「2-文本格式化标签」\" class=\"headerlink\" title=\"「2. 文本格式化标签」\"></a><strong>「2. 文本格式化标签」</strong></h2><ul>\n<li>b和strong 文字以粗体显示</li>\n<li>i和em 文字以斜体显示</li>\n<li>s和del 文字以加删除线显示</li>\n<li>u和ins 文字以加下划线显示</li>\n</ul>\n<h2 id=\"「3-标签属性-行内式-」\"><a href=\"#「3-标签属性-行内式-」\" class=\"headerlink\" title=\"「3. 标签属性(行内式)」\"></a><strong>「3. 标签属性(行内式)」</strong></h2><p>使用HTML制作网页时，如果想让HTML标签提供更多的信息，可以使用HTML标签的属性加以设置。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;标签名 属性1=&quot;属性值1&quot; 属性2=&quot;属性值2&quot; …&gt; 内容 &lt;/标签名&gt;</span><br><span class=\"line\">&lt;手机 颜色=&quot;红色&quot; 大小=&quot;5寸&quot;&gt;  &lt;/手机&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「4-图像标签img」\"><a href=\"#「4-图像标签img」\" class=\"headerlink\" title=\"「4. 图像标签img」\"></a><strong>「4. 图像标签img」</strong></h2><p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207080035188.png\"></p>\n<p><strong>注意：</strong></p>\n<ul>\n<li>标签可以拥有多个属性，必须写在开始标签中，位于标签名后面。</li>\n<li>属性之间不分先后顺序，标签名与属性、属性与属性之间均以空格分开。</li>\n<li>采取<strong>键值对</strong>的格式  key=”value”  的格式</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;cz.jpg&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;300&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;300&quot;</span> <span class=\"attr\">border</span>=<span class=\"string\">&quot;3&quot;</span> <span class=\"attr\">title</span>=<span class=\"string\">&quot;这是个小蒲公英&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「5-链接标签-重点-」\"><a href=\"#「5-链接标签-重点-」\" class=\"headerlink\" title=\"「5. 链接标签(重点)」\"></a><strong>「5. 链接标签(重点)」</strong></h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;跳转目标&quot;</span> <span class=\"attr\">target</span>=<span class=\"string\">&quot;目标窗口的弹出方式&quot;</span>&gt;</span>文本或图像<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">target=&quot;_self&quot;  默认窗口弹出方式</span><br><span class=\"line\">target=&quot;_blank&quot; 新窗口弹出</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th><strong>属性</strong></th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>href</td>\n<td>用于指定链接目标的url地址，（必须属性）当为标签应用href属性时，它就具有了超链接的功能</td>\n</tr>\n<tr>\n<td>target</td>\n<td>用于指定链接页面的打开方式，其取值有_self和_blank两种，其中_self为默认值，_blank为在新窗口中打开方式。</td>\n</tr>\n</tbody></table>\n<h3 id=\"src-和-href-的区别\"><a href=\"#src-和-href-的区别\" class=\"headerlink\" title=\"src 和 href 的区别\"></a><strong>src 和 href 的区别</strong></h3><p>一句话概括:<strong>src 是引入资源的 href 是跳转url的</strong></p>\n<ol>\n<li>src用于替换当前元素，href用于在当前文档和引用资源之间确立联系。</li>\n<li>src是source的缩写，指向外部资源的位置，指向的内容将会嵌入到文档中当前标签所在位置；在请求src资源时会将其指向的资源下载并应用到文档内，例如js脚本，img图片和frame等元素。当浏览器解析到该元素时，会暂停其他资源的下载和处理，直到将该资源加载、编译、执行完毕，图片和框架等元素也如此，类似于将所指向资源嵌入当前标签内。这也是为什么将js脚本放在底部而不是头部。</li>\n<li>href是Hypertext Reference的缩写，指向网络资源所在位置，建立和当前元素（锚点）或当前文档（链接）之间的链接。如果我们在文档中添加那么浏览器会识别该文档为css文件，就会并行下载资源并且不会停止对当前文档的处理。这也是为什么建议使用link方式来加载css，而不是使用@import方式。</li>\n</ol>\n<p><strong>注意：</strong></p>\n<ol>\n<li>外部链接 需要添加 http:// <a href=\"http://www.baidu.com/\">www.baidu.com</a></li>\n<li>内部链接 直接链接内部页面名称即可 比如 &lt; a href=”index.html”&gt; 首页</li>\n<li>如果当时没有确定链接目标时，通常将链接标签的href属性值定义为“#”(即href=”#”)，表示该链接暂时为一个空链接。</li>\n<li>不仅可以创建文本超链接，在网页中各种网页元素，如图像、表格、音频、视频等都可以添加超链接。</li>\n</ol>\n<h3 id=\"锚点定位\"><a href=\"#锚点定位\" class=\"headerlink\" title=\"锚点定位\"></a><strong>锚点定位</strong></h3><p><strong>锚点定位：通过创建锚点链接，用户能够快速定位到目标内容。</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 使用相应的id名标注跳转目标的位置。 (找目标)</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h3</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;two&quot;</span>&gt;</span>第2集<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span> </span><br><span class=\"line\"></span><br><span class=\"line\">2. 使用<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#id名&quot;</span>&gt;</span>链接文本<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span>创建链接文本（被点击的） </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#two&quot;</span>&gt;</span>   </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「6-注释标签」\"><a href=\"#「6-注释标签」\" class=\"headerlink\" title=\"「6. 注释标签」\"></a><strong>「6. 注释标签」</strong></h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 注释语句 --&gt;</span>     </span><br><span class=\"line\"> 快捷键是：    ctrl + /       </span><br><span class=\"line\"> 或者 ctrl +shift + / </span><br></pre></td></tr></table></figure>\n\n<p><strong>团队约定：</strong>注释内容前后各一个空格字符，注释位于要注释代码的上面，单独占一行</p>\n<h2 id=\"「7-路径」\"><a href=\"#「7-路径」\" class=\"headerlink\" title=\"「7. 路径」\"></a><strong>「7. 路径」</strong></h2><p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207080042861.png\"></p>\n<h2 id=\"「8-其他知识」\"><a href=\"#「8-其他知识」\" class=\"headerlink\" title=\"「8. 其他知识」\"></a><strong>「8. 其他知识」</strong></h2><h3 id=\"预格式化文本pre标签\"><a href=\"#预格式化文本pre标签\" class=\"headerlink\" title=\"预格式化文本pre标签\"></a><strong>预格式化文本pre标签</strong></h3><p>元素中的文本通常会保留空格和换行符。而文本也会呈现为等宽字体。格式化文本就是 ，按照我们预先写好的文字格式来显示页面， 保留空格和换行等。</p>\n<h3 id=\"特殊字符\"><a href=\"#特殊字符\" class=\"headerlink\" title=\"特殊字符\"></a><strong>特殊字符</strong></h3><p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207080043782.png\"></p>\n<h3 id=\"什么是XHTML\"><a href=\"#什么是XHTML\" class=\"headerlink\" title=\"什么是XHTML\"></a><strong>什么是XHTML</strong></h3><ul>\n<li>XHTML 指<strong>「可扩展超文本标签语言」</strong>（EXtensible HyperText Markup Language）。</li>\n<li>XHTML 的目标是取代 HTML。</li>\n<li>XHTML 与 HTML 4.01 几乎是相同的。</li>\n<li>XHTML 是更严格更纯净的 HTML 版本。</li>\n<li>XHTML 是作为一种 XML 应用被重新定义的 HTML,是严格版本的HTML。例如它要求标签必须小写，标签必须被正确关闭，标签顺序必须正确排列，对于属性都必须使用双引号等。</li>\n<li>XHTML 是一个 W3C 标准。</li>\n</ul>\n<h3 id=\"写HTML代码时应注意什么？\"><a href=\"#写HTML代码时应注意什么？\" class=\"headerlink\" title=\"写HTML代码时应注意什么？\"></a><strong>写HTML代码时应注意什么？</strong></h3><ul>\n<li>尽可能少的使用无语义的标签div和span；</li>\n<li>在语义不明显时，既可以使用div或者p时，尽量用p, 因为p在默认情况下有上下间距，对兼容特殊终端有利；</li>\n<li>不要使用纯样式标签，如：b、font、u等，改用css设置。</li>\n<li>需要强调的文本，可以包含在strong或者em标签中（浏览器预设样式，能用CSS指定就不用他们），strong默认样式是加粗（不要用b），em是斜体（不用i）；</li>\n<li>使用表格时，标题要用caption，表头用thead，主体部分用tbody包围，尾部用tfoot包围。表头和一般单元格要区分开，表头用th，单元格用td；</li>\n<li>表单域要用fieldset标签包起来，并用legend标签说明表单的用途；</li>\n<li>每个input标签对应的说明文本都需要使用label标签，并且通过为input设置id属性，在lable标签中设置for来让说明文本和相对应的input关联起来。</li>\n</ul>\n<h1 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h1><h2 id=\"「1-表格」\"><a href=\"#「1-表格」\" class=\"headerlink\" title=\"「1. 表格」\"></a><strong>「1. 表格」</strong></h2><p>现在还是较为常用的一种标签，但不是用来布局，<strong>常见显示、展示表格式数据</strong>。因为它可以让数据显示的非常的规整，可读性非常好。<strong>特别是后台展示数据的时候表格运用是否熟练就显得很重要</strong>，一个清爽简约的表格能够把繁杂的数据表现得很有条理。</p>\n<h2 id=\"「2-创建表格」\"><a href=\"#「2-创建表格」\" class=\"headerlink\" title=\"「2. 创建表格」\"></a><strong>「2. 创建表格」</strong></h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>单元格内的文字<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>table、tr、td，他们是创建表格的基本标签，缺一不可</p>\n<ul>\n<li>table用于定义一个表格标签。</li>\n<li>tr标签 用于定义表格中的行，必须嵌套在 table标签中。</li>\n<li>td 用于定义表格中的单元格，必须嵌套在<tr></tr>标签中。</li>\n<li>字母 td 指表格数据（table data），即数据单元格的内容，现在我们明白，表格最合适的地方就是用来存储数据的。td像一个容器，可以容纳所有的元素。</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207080052352.jpg\"></p>\n<h3 id=\"表头单元格标签th\"><a href=\"#表头单元格标签th\" class=\"headerlink\" title=\"表头单元格标签th\"></a><strong>表头单元格标签th</strong></h3><p>一般表头单元格位于表格的第一行或第一列，并且文本加粗居中,只需用表头标签<th></th>替代相应的单元格标签<td></td>即可。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207080053567.png\"></p>\n<h3 id=\"表格标题caption\"><a href=\"#表格标题caption\" class=\"headerlink\" title=\"表格标题caption\"></a><strong>表格标题caption</strong></h3><p>通常这个标题会被居中且显示于表格之上。caption 标签必须紧随 table 标签之后。这个标签只存在 表格里面才有意义。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">caption</span>&gt;</span>我是表格标题<span class=\"tag\">&lt;/<span class=\"name\">caption</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「3-表格属性」\"><a href=\"#「3-表格属性」\" class=\"headerlink\" title=\"「3. 表格属性」\"></a><strong>「3. 表格属性」</strong></h2><p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207080055050.png\"></p>\n<p>三参为0，平时开发的我们这三个参数   border  cellpadding  cellspacing 为  0</p>\n<h2 id=\"「4-合并单元格」\"><a href=\"#「4-合并单元格」\" class=\"headerlink\" title=\"「4. 合并单元格」\"></a><strong>「4. 合并单元格」</strong></h2><p>合并的顺序我们按照  先上 后下   先左  后右 的顺序 ,合并完之后需要删除多余的单元格。</p>\n<ul>\n<li>跨行合并：rowspan=”合并单元格的个数”</li>\n<li>跨列合并：colspan=”合并单元格的个数”</li>\n</ul>\n<h2 id=\"「5-总结表格」\"><a href=\"#「5-总结表格」\" class=\"headerlink\" title=\"「5. 总结表格」\"></a><strong>「5. 总结表格」</strong></h2><table>\n<thead>\n<tr>\n<th>标签名</th>\n<th>定义</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>table</td>\n<td>表格标签</td>\n<td>就是一个四方的盒子</td>\n</tr>\n<tr>\n<td>tr</td>\n<td>表格行标签</td>\n<td>行标签要再table标签内部才有意义</td>\n</tr>\n<tr>\n<td>td</td>\n<td>单元格标签</td>\n<td>单元格标签是个容器级元素，可以放任何东西</td>\n</tr>\n<tr>\n<td>th</td>\n<td>表头单元格标签</td>\n<td>它还是一个单元格，但是里面的文字会居中且加粗</td>\n</tr>\n<tr>\n<td>caption</td>\n<td>表格标题标签</td>\n<td>表格的标题，跟着表格一起走，和表格居中对齐</td>\n</tr>\n<tr>\n<td>clospan 和 rowspan</td>\n<td>合并属性</td>\n<td>用来合并单元格的</td>\n</tr>\n</tbody></table>\n<h2 id=\"「6-表格划分结构」\"><a href=\"#「6-表格划分结构」\" class=\"headerlink\" title=\"「6. 表格划分结构」\"></a><strong>「6. 表格划分结构」</strong></h2><p>  对于比较复杂的表格，表格的结构也就相对的复杂了，所以又将表格分割成三个部分：题头、正文和脚注。而这三部分分别用:thead,tbody,tfoot来标注， 这样更好的分清表格结构。</p>\n<p><strong>注意：</strong></p>\n<ol>\n<li>thead：用于定义表格的头部。用来放标题之类的东西。<thead> 内部必须拥有<tr> 标签！</li>\n<li>tbody：用于定义表格的主体。放数据本体 。</li>\n<li>tfoot：放表格的脚注之类。</li>\n<li> 以上标签都是放到table标签中。</li>\n</ol>\n<h1 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h1><h2 id=\"「列表」\"><a href=\"#「列表」\" class=\"headerlink\" title=\"「列表」\"></a><strong>「列表」</strong></h2><p>容器里面装载着结构，样式一致的文字或图表的一种形式，叫列表。</p>\n<p>列表最大的特点就是整齐 、整洁、 有序，跟表格类似，但是它可组合自由度会更高。</p>\n<h3 id=\"「1-无序列表-ul」\"><a href=\"#「1-无序列表-ul」\" class=\"headerlink\" title=\"「1. 无序列表 ul」\"></a><strong>「1. 无序列表 ul」</strong></h3><ul>\n<li>ul中只能嵌套li，直接在ul标签中输入其他标签或者文字的做法是不被允许的。</li>\n<li>li之间相当于一个容器，可以容纳所有元素。</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>列表项1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>列表项2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>列表项3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  ......</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"「2-有序列表-ol」\"><a href=\"#「2-有序列表-ol」\" class=\"headerlink\" title=\"「2. 有序列表 ol」\"></a><strong>「2. 有序列表 ol」</strong></h3><ul>\n<li><p>ol标签中的type属性值为排序的序列号，不添加type属性时，有序列表默认从数字1开始排序。</p>\n</li>\n<li><p>常用的type属性值分别为是1，a，A，i，I</p>\n</li>\n<li><p>ol reversed=”reversed”中的reversed属性能够让有序列表中的序列倒序排列。</p>\n</li>\n<li><p>ol start=”3”中的start属性值为3，有序列表中的第一个序列号将从3开始排列。</p>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ol</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;A&quot;</span>&gt;</span> </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>列表项1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>列表二<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>列表三<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「自定义列表-」\"><a href=\"#「自定义列表-」\" class=\"headerlink\" title=\"「自定义列表 」\"></a><strong>「自定义列表 」</strong></h2><p>定义列表常用于对术语或名词进行解释和描述，定义列表的列表项前没有任何项目符号。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dl</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dt</span>&gt;</span>名词1<span class=\"tag\">&lt;/<span class=\"name\">dt</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dd</span>&gt;</span>名词1解释1<span class=\"tag\">&lt;/<span class=\"name\">dd</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dd</span>&gt;</span>名词1解释2<span class=\"tag\">&lt;/<span class=\"name\">dd</span>&gt;</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dt</span>&gt;</span>名词2<span class=\"tag\">&lt;/<span class=\"name\">dt</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dd</span>&gt;</span>名词2解释1<span class=\"tag\">&lt;/<span class=\"name\">dd</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dd</span>&gt;</span>名词2解释2<span class=\"tag\">&lt;/<span class=\"name\">dd</span>&gt;</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"表单\"><a href=\"#表单\" class=\"headerlink\" title=\"表单\"></a>表单</h1><p>在HTML中，一个完整的表单通常由表单控件（也称为表单元素）、提示信息和表单域3个部分构成。表单目的是为了收集用户信息。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207080853313.png\"></p>\n<p><strong>表单控件：</strong><br> 包含了具体的表单功能项，如单行文本输入框、密码输入框、复选框、提交按钮、重置按钮等。<br><strong>提示信息：</strong><br> 一个表单中通常还需要包含一些说明性的文字，提示用户进行填写和操作。<br><strong>表单域：</strong><br> 它相当于一个容器，用来容纳所有的表单控件和提示信息，可以通过他定义处理表单数据所用程序的url地址，以及数据提交到服务器的方法。如果不定义表单域，表单中的数据就无法传送到后台服务器。</p>\n<h2 id=\"「1-input-控件」\"><a href=\"#「1-input-控件」\" class=\"headerlink\" title=\"「1. input 控件」\"></a><strong>「1. input 控件」</strong></h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;属性值&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;你好&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>input 输入的意思</li>\n<li>input 标签为单标签</li>\n<li>type属性设置不同的属性值用来指定不同的控件类型</li>\n<li>除了type属性还有别的属性</li>\n</ul>\n<h3 id=\"常用属性：\"><a href=\"#常用属性：\" class=\"headerlink\" title=\"常用属性：\"></a><strong>常用属性：</strong></h3><p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207080854979.png\"></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用户名: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> /&gt;</span> </span><br><span class=\"line\">密  码：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;password&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"value属性\"><a href=\"#value属性\" class=\"headerlink\" title=\"value属性\"></a><strong>value属性</strong></h3><ul>\n<li>value 默认的文本值。有些表单想刚打开页面就默认显示几个文字，就可以通过这个value 来设置。</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用户名:<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span>  <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;请输入用户名&quot;</span>&gt;</span> </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"name属性\"><a href=\"#name属性\" class=\"headerlink\" title=\"name属性\"></a><strong>name属性</strong></h3><ul>\n<li><p>name表单的名字， 这样，后台可以通过这个name属性找到这个表单。 页面中的表单很多，name主要作用就是用于区别不同的表单。</p>\n</li>\n<li><p>name属性后面的值，是我们自己定义的。</p>\n</li>\n<li><p>radio  如果是一组，我们必须给他们命名相同的名字 name  这样就可以多个选其中的一个啦</p>\n</li>\n<li><p>name属性，我们现在用的较少，但是，当我们学ajax 和后台的时候，是必须的。</p>\n</li>\n<li></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;sex&quot;</span>  /&gt;</span>男</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;sex&quot;</span> /&gt;</span>女</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"checked属性\"><a href=\"#checked属性\" class=\"headerlink\" title=\"checked属性\"></a><strong>checked属性</strong></h3><p>表示默认选中状态。 较常见于 单选按钮和复选按钮。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">性    别:</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;sex&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;男&quot;</span> <span class=\"attr\">checked</span>=<span class=\"string\">&quot;checked&quot;</span> /&gt;</span>男</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;sex&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;女&quot;</span> /&gt;</span>女 </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"input-属性小结\"><a href=\"#input-属性小结\" class=\"headerlink\" title=\"input 属性小结\"></a><strong>input 属性小结</strong></h3><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>说明</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>type</td>\n<td>表单类型</td>\n<td>用来指定不同的控件类型</td>\n</tr>\n<tr>\n<td>value</td>\n<td>表单值</td>\n<td>表单里面默认显示的文本</td>\n</tr>\n<tr>\n<td>name</td>\n<td>表单名字</td>\n<td>页面中的表单很多，name主要作用就是用于区别不同的表单。</td>\n</tr>\n<tr>\n<td>checked</td>\n<td>默认选中</td>\n<td>表示那个单选或者复选按钮一开始就被选中了</td>\n</tr>\n</tbody></table>\n<h2 id=\"「2-label标签」\"><a href=\"#「2-label标签」\" class=\"headerlink\" title=\"「2.  label标签」\"></a><strong>「2.  label标签」</strong></h2><ul>\n<li>label 标签为 input 元素定义标注（标签）。</li>\n<li>label标签主要目的是为了提高用户体验。为用户提高最优秀的服务。</li>\n</ul>\n<p><strong>作用：</strong>用于绑定一个表单元素, 当点击label标签的时候, 被绑定的表单元素就会获得输入焦点。</p>\n<h3 id=\"如何绑定元素呢\"><a href=\"#如何绑定元素呢\" class=\"headerlink\" title=\"如何绑定元素呢\"></a><strong>如何绑定元素呢</strong></h3><ul>\n<li>第一种用法就是用label标签直接包含input表单， 适合单个表单选择</li>\n<li>第二种用法 for 属性规定 label 与哪个表单元素绑定(通过id)。</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第一种</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span> 用户名： </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;usename&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;请输入用户名&quot;</span>&gt;</span>   </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">第二种</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;sex&quot;</span>&gt;</span>男<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;sex&quot;</span>  <span class=\"attr\">id</span>=<span class=\"string\">&quot;sex&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「3-textarea控件-文本域-」\"><a href=\"#「3-textarea控件-文本域-」\" class=\"headerlink\" title=\"「3.  textarea控件(文本域)」\"></a><strong>「3.  textarea控件(文本域)」</strong></h2><ul>\n<li>通过textarea控件可以轻松地创建多行文本输入框.</li>\n<li>cols=”每行中的字符数” rows=”显示的行数”  我们实际开发不用</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207080901727.png\"></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">textarea</span> &gt;</span></span><br><span class=\"line\">  文本内容</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"文本框和文本域区别\"><a href=\"#文本框和文本域区别\" class=\"headerlink\" title=\"文本框和文本域区别\"></a><strong>文本框和文本域区别</strong></h3><table>\n<thead>\n<tr>\n<th>表单</th>\n<th>名称</th>\n<th>区别</th>\n<th>默认显示</th>\n<th>用于场景</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>input type=”text”</td>\n<td>文本框</td>\n<td>只能显示一行文本</td>\n<td>单标签，通过value显示默认值</td>\n<td>用户名、昵称、密码等</td>\n</tr>\n<tr>\n<td>textarea</td>\n<td>文本域</td>\n<td>可以显示多行文本</td>\n<td>双标签，默认值写到标签中间</td>\n<td>留言板</td>\n</tr>\n</tbody></table>\n<h2 id=\"「4-select下拉列表」\"><a href=\"#「4-select下拉列表」\" class=\"headerlink\" title=\"「4.  select下拉列表」\"></a><strong>「4.  select下拉列表」</strong></h2><ul>\n<li>如果有多个选项让用户选择，为了节约空间，我们可以使用select控件定义下拉列表。</li>\n<li>在option 中定义selected =” selected “时，当前项即为默认选中项。</li>\n<li>我们实际开发会用的比较少</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207080904309.png\"></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>选项1<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>选项2<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>选项3<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「5-form表单域」\"><a href=\"#「5-form表单域」\" class=\"headerlink\" title=\"「5.form表单域」\"></a><strong>「5.form表单域」</strong></h2><ol>\n<li><p>收集的用户信息怎么传递给服务器？</p>\n</li>\n<li><ul>\n<li>通过form表单域</li>\n</ul>\n</li>\n<li><p>目的：</p>\n</li>\n<li><ul>\n<li>在HTML中，form标签被用于定义表单域，以实现用户信息的收集和传递，form中的所有内容都会被提交给服务器。</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;url地址&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;提交方式&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;表单名称&quot;</span>&gt;</span></span><br><span class=\"line\">  各种表单控件</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"常用属性：-1\"><a href=\"#常用属性：-1\" class=\"headerlink\" title=\"常用属性：\"></a><strong>常用属性：</strong></h3><p>每个表单都应该有自己表单域。后面学 ajax 后台交互的时候，必须需要form表单域。</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>属性值</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>action</td>\n<td>url地址</td>\n<td>用于指定接收并处理表单数据的服务器程序的url地址。</td>\n</tr>\n<tr>\n<td>method</td>\n<td>get/post</td>\n<td>用于设置表单数据的提交方式，其取值为get或post。</td>\n</tr>\n<tr>\n<td>name</td>\n<td>名称</td>\n<td>用于指定表单的名称，以区分同一个页面中的多个表单。</td>\n</tr>\n</tbody></table>\n<h3 id=\"GET-和-POST-的区别\"><a href=\"#GET-和-POST-的区别\" class=\"headerlink\" title=\"GET 和 POST 的区别\"></a><strong>GET 和 POST 的区别</strong></h3><ul>\n<li>GET在浏览器回退时是无害的，而POST会再次提交请求。</li>\n<li>GET请求会被浏览器主动cache，而POST不会，除非手动设置。</li>\n<li>GET请求只能进行url编码，而POST支持多种编码方式。</li>\n<li>GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。</li>\n<li>GET请求大小一般是(1024字节)，http协议并没有限制，而与服务器，操作系统有关，POST理论上来说没有大小限制，http协议规范也没有进行大小限制，但实际上post所能传递的数据量根据取决于服务器的设置和内存大小。</li>\n<li>对参数的数据类型，GET只接受ASCII字符，而POST没有限制。</li>\n<li>GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。</li>\n</ul>\n<h3 id=\"团队约定\"><a href=\"#团队约定\" class=\"headerlink\" title=\"团队约定\"></a><strong>团队约定</strong></h3><ul>\n<li>元素属性值使用双引号语法</li>\n<li>元素属性值可以写上的都写上</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">推荐</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> /&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">checked</span>=<span class=\"string\">&quot;checked&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"Javascript基础","date":"2022-05-14T16:00:00.000Z","updated":"2022-05-31T16:00:00.000Z","keywords":null,"description":null,"top_img":"./img/bg22.jpg","cover":"./img/bg4.jpg","_content":"# Javascript基础\n\n\n\n## 编程基础\n\n**「计算机语言」**分为机器语言，汇编语言，高级语言。计算机内部最终执行的都是机器语言，由`0`和`1`这样的二进制数构成。\n\n**「数据存储单位」**8bit(比特) = 1B(Byte)字节  千字节1KB = 1024B\n\n**「翻译器」**高级语言编写的程序不能被计算机识别，需要经过转换，将源代码程序翻译成`机器语言`才能运行。浏览器里面的js解释器就是这样的一个翻译器。\n\n**「程序运行」**\n\n- 打开某个程序时，先从硬盘中把程序的代码加载到内存中\n- CPU执行内存中的代码\n- 注意：之所以要内存的一个重要原因，是因为 cpu运行太快了，如果只从硬盘中读数据，会浪费cpu性能，所以，才使用存取速度更快的内存来保存运行时的数据。（内存是电，硬盘是机械）\n\n## 初识JavaScript\n\n**「创始人」**布兰登·艾奇(Brendan Eich),起初命名为`LiveScript`后来与Sun公司合作改名为`JavaScript`。\n\n**「JavaScript」**运行在客户端的脚本语言，不需要编译，由js解释器(js引擎)逐行解释执行。Node.js也可以用于服务器端编程。\n\n**「JavaScript组成」**ECMAScript(JavaScript语法)、DOM(文档对象模型)、BOM(浏览器对象模型)\n\n**「JavaScript的作用」**\n\n- 表单动态校验(密码强度检测)\n- 网页特效\n- 服务端开发(Node.js)\n- 桌面程序(Electron)、App(Cordova)、控制硬件-物联网(Ruff)、游戏开发(cocos2d-js)\n\n**「JavaScript书写位置」**\n\n> JS有3种书写位置，分别为行内、内嵌和外部。\n\n1. 行内\n\n   ```html\n   <input type=\"botton\" value=\"点我试试\" \n   \tonclick=\"alert('Helo World!')\"/>\n   ```\n\n2. 内嵌\n\n   ```html\n   <script>\n   \talret('Hello World!');\n   </script>\n   ```\n\n3. 外部\n\n   ```html\n   引用外部js文件\n   <script src=\"my.js\"> </script> \n   ```\n\n   \n\n**「注释」**\n\n1. 单行注释\n\n   ```javascript\n   // 我是单行注释 （ctrl + /）\n   ```\n\n2. 多行注释\n\n   ```js\n   /*\n     获取用户年龄和姓名\n     并通过提示框显示出来\n     点击vscode左下角管理-键盘快捷方式-切换块注释\n     (默认快捷键 alt + shift + a) 修改为 (ctrl + shift + /)\n   */\n   ```\n## 输入和输出语句\n\n   | 函数                      | 说明                     | 归属   |\n   | ------------------------- | ------------------------ | ------ |\n   | prompt(‘输入’);           | 浏览器弹出输入框         | 浏览器 |\n   | alert(‘输出’);            | 浏览器弹出警示框         | 浏览器 |\n   | console.log(‘控制台输出’) | 浏览器控制台打印输出信息 | 浏览器 |\n\n   \n\n```html\n<script>\n\t//输入框\n    prompt('请输入');\n    //弹出警示框，输出的展示给用户\n    alert('计算的结果是');\n    //控制台输出，给程序员测试用\n    console.log('控制台显示');\n</script>\n    \n```\n\n# 变量\n\n## **变量概述**\n\n变量是程序在内存中申请的一块用于存放数据的空间。变量是用于存放数据的容器，可以通过变量名获取数据，甚至修改数据。\n\n白话讲，变量就是一个装东西的盒子。\n\n## 变量的使用\n\n变量在使用时分为两步，声明和赋值\n\n### **「1. 声明变量」**\n\n```js\n//声明变量\nvar age; //声明一个名称为age的变量\n```\n\nvar是一个JS关键字，用来声明变量(variable变量的意思)。num是我们定义的变量名，可以通过变量名来访问内存中分配的空间。\n\n### **「2. 赋值」**\n\n```js\nage = 10;//给age变量赋值为10\n```\n\n### **「3. 变量的初始化」**\n\n```js\nvar age = 10;//声明变量并赋值为10\n```\n\n### 小案例\n\n```js\n//声明\nvar age;\n//赋值\nage=10;\n//输出结果\nconsole.log(age);\n```\n\n```js\n//用户输入姓名，存到一个myname的变量中\nvar myname=prompt('请输入你的名字')；\n//输出这个用户名\nalert(myname);\n```\n\n### **「4. 变量语法扩展」**\n\n```js\n// 1.一个变量被重新赋值后，它原有的值会被覆盖掉，变量值以最后一次赋的值为准。\nvar age=10;\nage=18;\n// 2.同时声明多个变量(只需要写一个var,多个变量名之间用英文逗号隔开)\nvar num=10,age=18,name='name';\n```\n\n声明变量特殊情况\n\n| 情况                       | 说明                     | 结果      |\n| -------------------------- | ------------------------ | --------- |\n| var age; console.log(age); | 只声明，不赋值           | undefined |\n| console.log(age);          | 不声明，不赋值，直接使用 | 报错      |\n| age=10;console.log(age);   | 不声明，只赋值           | 10        |\n\n### **「5. 变量命名规范」**\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202205302255403.png)\n\n### 小案例\n\n```js\n//小案例，交换两个变量的值\nvar temp;//引入临时变量\nvar apple1='青苹果',apple2='红苹果'；\ntemp=apple1;\napple1=apple2;\napple2=temp;\nconsole.log(apple1);\nconsole.log(apple2);\n```\n\n# 数据类型\n\n分为两类：简单数据类型(Number,String,Boolean,Undefined,Null)和复杂数据类型(object)。\n\n| 简单数据类型 | 说明                      | 默认值    |\n| ------------ | ------------------------- | --------- |\n| Number       | 数字型，包含整数和浮点数  | 0         |\n| String       | 字符串类型                | “ ”       |\n| Boolean      | 布尔值类型                | false     |\n| Undefined    | 声明但不赋值，a=undefined | undefined |\n| Null         | var a=null; 声明a为空值   | null      |\n\n## Number数字型\n\n### **「数字型进制」**\n\n```js\n// 1.在JS中八进制前面加0，十六进制前面加 0x\nvar num1 = 07;   // 对应十进制的7\n// 2.十六进制数字序列范围：0~9以及A~F\n var num = 0xA; //对应十进制10\n```\n\n### **「数字型范围」**\n\nJavaScript中的数值有最大值和最小值\n\n- 最大值:`Number.MAX_VALUE`，值为：1.7976931348623157e+308\n- 最小值:`Number.MIN_VALUE`，值为：5e-32\n- 特殊值：`Infinity` 无穷大 `-Infinity` 无穷小 `NaN` 代表一个非数字（not a number）\n- isNaN(): 用来判断一个变量是否为非数字的类型。非数字型为true,数字型为false。\n\n```js\nconsole.log(Number.MAX_VALUE);//数字的最大值\nconsole.log(Number.MIN_VALUE);//数字的最小值\n//无穷大\nconsole.log(Number.MAX_VALUE*2);//Infinity 无穷大\n//无穷小\nconsole.log(Number.MIN_VALUE*2);//-Infinity 无穷小\n//非数字\nconsole.log('pink老师'-100)；//NaN\n```\n\n\n\n```js\nvar usrage = 21;\nvar isOK = isNaN(usrage);\nconsole.log(isOK); //false 21不是一个非数字\nvar usrname = \"andy\";\nconsole.log(isNaN(usrname));//true \"andy\"是一个非数字\n```\n\n## String字符串型\n\n```js\n// 1.字符串型可以是引号中的任意文本，语法为 单引号 和 双引号\nvar msg = '我的名字叫';\nvar name = \"fan\";\n```\n\n由于HTML标签属性是双引号，这里推荐使用单引号，常见错误未使用引号，会被认定是js代码，但js没有这些语法。\n\n### **「字符串引号嵌套」**\n\njs可以使用单引号套双引号，或者使用双引号套单引号（外双内单，外单内双）\n\n```js\nvar str1=\"我是'程序员'\";\nvar str2='我是\"程序员\"';\n//常见错误\nvar str3='我是程序员\";//报错，不能单双引号搭配\n```\n\n\n\n### **「1. 字符串转义符」**\n\n都是以 \\ 开头，详细如下\n\n| 转义符 | 说明                     |\n| ------ | ------------------------ |\n| \\n     | 换行符，n是newline的意思 |\n| \\ \\    | 斜杠\\                    |\n| \\ '    | 单引号‘                  |\n| \\ \"    | 双引号 “                 |\n| \\t     | tab缩进                  |\n| \\b     | 空格，b是blank 的意思    |\n\n```js\n//字符串转义字符，都是\\开头，写在引号里面\nvar str=\"我是\\n程序员\";\nconsole.log(str);\n```\n\n### **「2. 字符串长度」**\n\n  字符串是由若干字符组成的，这些字符的数量就是字符串的长度，通过length属性可以获取整个字符串长度。\n\n```js\nvar str='我是程序员';\nalert(str.length);//显示5\n```\n\n### **「3. 字符串拼接」**\n\n-   多个字符串之间可以使用 + 进行拼接，其拼接方式为 字符串 + 任何类型 = 拼接之后的新字符串。\n-   拼接前会把与字符串相加的任何类型转成字符串，再拼接成一个新的字符串\n\n```js\n//1.1 字符串 \"相加\"\nalert('hello' + ' ' + 'world'); // hello world\n//1.2 数值字符串 \"相加\"\nalert('100' + '100'); // 100100\n//1.3 数值字符串 + 数值\nalert('11' + 12);     // 1112 +号口诀：数值相加，字符相连\n//1.4 数值相加\nalert(12+12); //24\n// 1.5 字符串拼接加强\nvar age = 18;\nalert(\"你\" + age +\"岁了\"); //变量和字符串引引加加\n```\n\n**+号口诀：数值相加，字符相连**\n\n### 案例：字符串拼接加强\n\n```js\n//弹出一个输入框，输入年宁\n//把输入年龄与字符串相接\n//输出结果\nvar age=prompt('请输入年龄');\nvar str='您今年已经'+ age + '岁了';\nalert(str);\n```\n\n## Boolean布尔型\n\n  布尔类型有两个值：true 和 false ，其中 true 表示真（对），而 false 表示假（错）。\n  布尔型和数字型相加的时候， true 的值为 1 ，false 的值为 0。\n\n```js\nconsole.log(true + 1); // 2\nconsole.log(false + 1); // 1\n```\n\n## Undefined 和 Null\n\n  一个变量声明后没有赋值会有一个默认值undefined（如果相连或者相加时，注意结果）\n\n```js\n  var variable;\n  console.log(variable); // undefined\n  console.log(\"你好\" + variable); // 你好undefined\n  console.log(11 + variable); // NaN\n  console.log(true + variable);// NaN\n```\n\n  一个变量声明并赋值null,里面存的值为空\n\n```js\n  var var2 = null;\n  console.log(var2); // null\n  console.log(\"你好\" + var2); // 你好null\n  console.log(11 + var2); // 11\n  console.log(true + var2);// 1\n```\n\n## 获取变量类型及转换\n\n### **「获取变量类型」**\n\n-  检测变量的数据类型语法`typeof`\n\n```js\nvar num = 10;\nconsole.log(typeof num);//结果为 number\nvar str = 'pink';\nconsole.log(typeof str);//结果为 string\nvar flag = 'true';\nconsole.log(typeof flog);//结果为 boolean\nvar vari = undefined;\nconsole.log(typeof vari);//结果为 undefined\nvar timer = null;\nconsole.log(typeof timer); //结果为 object\n//prompt 取过来的值是字符型的\nvar age = prompt('请输入年龄');\nconsole.log(age);\nconloge.log(typeof age);\n```\n\n**prompt 取过来的值是字符型的**\n\n`字面量`:是源代码中一个固定值的表示法，就是字面量如何去表达这个值。通过数据的格式特征可以判断数据的类型\n\n- 有数字字面量:8,9,10\n- 字符串字面量:'饭老板'，\"前端开发\"\n- 布尔字面量:true,false\n\n### **「数据类型转换」**\n\n#### 转换为字符串\n\n| 方式           | 说明                         | 案例 |\n| -------------- | ---------------------------- | ---- |\n| toString()     | 转换成字符型                 |      |\n| String()       | 强制转换                     |      |\n| 加号拼接字符串 | 和字符型拼接的结果都是字符型 |      |\n\ntoString()和String()使用方式不一样\n\n**三种转换方式更喜欢用第三种，被称为隐式转换**\n\n```js\n//1,数字型转换字符串 变量.toString()\nvar num = 10;\nvar str = num.toString();\nconsole,log(str);\nconsole,log(typeof str);\n//2，String()\nvar num = 10;\nvar str = String(num);\nconsole,log(typeof str);\n//3，加号拼接字符串\nvar num = 10;\nconsole.log(num + '');\n```\n\n#### 转换为数字型\n\n| 方式                   | 说明               | 案例 |\n| ---------------------- | ------------------ | ---- |\n| parseInt(String)函数   | 转化为整数型       |      |\n| parseFloat(String)函数 | 转化为浮点型       |      |\n| Number()强制转换函数   | 强制转换数值型     |      |\n| js隐式转换（- * /)     | 算数因算符转换数值 |      |\n\n```js\n//1，parseInt(变量) 得到的是整数\nconsole.log(parseInt('3.14'));//3 取整\nconsole.log(parseInt('3.93'));//3 取整\nconsole.log(parseInt('120px'));//120 会去掉px单位\nconsole.log(parseInt('rem120px'));//NaN\n//2，parseFloat(变量) 得到的是浮点数\nconsole.log(parseFloat('3.14'));//3.14\nconsole.log(parseFloat('120px'));//120 去掉单位\nconsole.log(parseFloat('rem120px'));//NaN\n//3，Number(变量)\nvar str = '123';\nconsole.log(Number(str));//123\nconsole.log(Number('12'));//12\n//4，利用算数运算符\nconsole.log('12'-0);//12\nconsole.log('123'-'120');//3\nconsole.log('123'*1);//123\n```\n\n#### 案例：简单加法器\n\n```js\nvar num1 = prompt('请输入第一个数');\nvar num2 = prompt('请输入第二个数');\nvar result = parseFloat(num1) + parseFloat(num2);\nconsole.log('您的结果是' + result);\n```\n\n#### 案例：计算年龄\n\n```js\nvar year = prompt('请输入生日年份')；\nvar age = 2022 - year; //隐式转换\nalert('你的年龄'+ age + '岁了');\n```\n\n\n\n#### 转换为布尔型\n\n1. 代表空、否定的值会被转换为false，如' '、0、NaN、null、undefined \n2. 其余值都会被转换为true。\n\n| 方式          | 说明               | 案例            |\n| ------------- | ------------------ | --------------- |\n| Boolean()函数 | 其他类型转换布尔型 | Boolean(‘true’) |\n\n```js\nconsole.log(Boolean(''));//false\nconsole.log(Boolean(0));//false\nconsole.log(Boolean(NaN));//false\nconsole.log(Boolean(null));//false\nconsole.log(Boolean(undefined));//false\nconsole.log(Boolean('小白'));//true\nconsole.log(Boolean('12'));//true\n```\n\n# 关键字和保留字\n\n**「标识符」**指开发人员为变量、属性、函数、参数取得名字。标识符不能是关键字或保留字。\n\n**「关键字」**指 JS本身已经使用了的字，不能再用它们充当变量名、方法名\n\n> 包括：break、case、catch、continue、default、delete、do、else、finally、for、function、if、in、instanceof、new、return、switch、this、throw、try、typeof、var、void、while、with 等。\n\n**「保留字」**实际上就是预留的“关键字”，意思是现在虽然还不是关键字，但是未来可能会成为关键字，同样不能使用它们当变量名或方法名。\n\n> boolean、byte、char、class、const、debugger、double、enum、export、extends、fimal、float、goto、implements、import、int、interface、long、mative、package、private、protected、public、short、static、super、synchronized、throws、transient、volatile 等。\n>\n> 注意：如果将保留字用作变量名或函数名，那么除非将来的浏览器实现了该保留字，否则很可能收不到任何错误消息。当浏览器将其实现后，该单词将被看做关键字，如此将出现关键字错误。\n\n# 运算符\n\n## **「运算符」**\n\n是用于实现赋值、比较和执行算数运算等功能的符号。常用运算符分类如下\n\n- 算数运算符\n- 递增和递减运算符\n- 比较运算符\n- 逻辑运算符\n- 赋值运算符\n\n| 运算符 | 描述         | 案例                |\n| ------ | ------------ | ------------------- |\n| +      | 加           | 10+20=30            |\n| -      | 减           | 10-20=-10           |\n| *      | 乘           | 10*20=200           |\n| /      | 除           | 10/20=0.5           |\n| %      | 取余（取模） | 返回除法的余数9%2=1 |\n\n### 浮点数的精度问题\n\n```js\n  var result = 0.1 + 0.2;    // 结果不是 0.3，而是：0.30000000000000004\n  console.log(0.07 * 100);   // 结果不是 7，  而是：7.000000000000001\n//浮点数不能用来比较是否相等\nvar num = 0.1 + 0.2;\nconsole.log(num == 0.3);//false\n```\n\n浮点数值的最高精度是17位小数，但是在进行算数运算时其精确度远远不如整数,所以不要直接判断两个浮点数是否相等!\n\n### **表达式与返回值**\n\n1. 表达式：由数字、运算符和变量组成的式子。\n2. 返回值：每一个表达式经过相应的运算之后，会有一个最终结果，称为表达式的返回值\n\n```js\nconsole.log(1+1);//2\nconsole.log(1-1);//0\nconsole.log(1*1);//1\nconsole.log(1/1);//1\n//取余\nconsole.log(4%2);//0\nconsole.lpg(5%3);//2\nconsole.log(3%5);//3\n//\nconsole.log(1+1);//2为返回值\nvar num = 1 + 1;//右边表达式计算完毕把返回值给左边\n\n```\n\n## **「递增和递减运算符」**\n\n  反复给变量增加或减去1，可以使用递增（++）或递减（- -）运算符，分为前置和后置，必须配合变量使用。\n\n- 递增运算符\n\n```js\n//前置递增 \nvar  num = 10;\nalert(++num + 10);   // 21 使用口诀：先自加，后返回值\n //后置递增 \nvar  num1 = 10;\nalert(10 + num1++);  // 20 使用口诀：先返回原值，后自加 \n```\n\n```js\n  var num = 1;\n  var num2 = ++num + num++; //num = 2\n  console.log(num2);//4\n  \n  var num = 1;\n  var num1 = 1;\n  var num2 = num++ + num1++; // 1 + 1\n  console.log(num2);//2\n  \n  var num = 1;\n  var num2 = num++ + num++;// 1 + 2 \n  console.log(num2); // 3  \n```\n\n## **「比较运算符」**\n\n返回的是布尔值（true || false）\n\n| 运算符 | 描述             | 案例         | 结果  |\n| ------ | ---------------- | ------------ | ----- |\n| <      | 小于号           | 1<2          | true  |\n| >      | 大于号           | 1>2          | false |\n| >=     | 大于等于号       | 2 >= 2       | true  |\n| <=     | 小于等于号       | 3 <= 2       | false |\n| ==     | 等判号（会转型） | 15 == ‘15’   | true  |\n| !=     | 不等号           | 37 != 37     | false |\n| ===    | 全等             | 37 === ‘37’  | false |\n| !===   | 全不等           | 37 !=== ‘37’ | true  |\n\n注意：\n\n- ==判断两边值是否相等（有隐式转换）\n- ===判断两边值和数据类型是否完全相同\n\n```js\n//==默认转换数字类型，会把字符串型转换成数字型，要求值相等即可\nconsole.log(3 == 5);//false\nconsole.log('pink' == '我');//false\nconsole.log(18 == 18);//true\nconsole.log(18 == '18');//true\nconsole.log(18 != 18);//false\n//===要求值和数据类型完全一样\nconsole.log(18 === 18);//true\nconsole.log(18 === '18');//false\n```\n\n## **「逻辑运算符」**\n\n  逻辑运算符是用来进行布尔值运算的运算符\n  短路运算:当有多个表达式（值）时,左边的表达式值可以确定结果时,就不再继续运算右边的表达式的值;\n\n| 运算符 | 描述                   | 案例           | 特点                 |\n| ------ | ---------------------- | -------------- | -------------------- |\n| &&     | “逻辑与”，简称“与” and | true && false  | 两边都true才返回true |\n| \\|\\|   | “逻辑或”，简称“或” or  | true \\|\\| true | 有真为真             |\n| !      | “逻辑非”，简称“非” not | ! true         | 取反                 |\n\n```js\n//1,&&\nconsole.log(3 > 5 && 3 > 2);//false\nconsole.log(3 < 5 && 3 > 2);//true\n//2,||\nconsole.log(3 > 5 || 3 > 2);//true\nconsole.log(3 < 5 || 3 < 2);//false\n//3,!\nconsole.log(!true);//false\n```\n\n```js\n//逻辑与短路运算 如表达式1结果为真，则返回表达式2，如果表达式1结果为假，则返回表达式1\nconsole.log(123 && 456);//\t456\nconsole.log(0 && 456);//\t0\nconsole.log(0 && 1+2 && 456*789);//\t0\nconsole.log('' && 1+2 && 456*789);//\t''\n//有空的或者否定的是假，其余为真 0 '' null undefined NaN\n//逻辑或短路运算 如表达式1结果为真，则返回表达式1，如果表达式1结果为假，则返回表达式2\nconsole.log(123 || 456);//\t123\nconsole.log(123 || 456 || 456+789);//\t123\nconsole.log(0 || 456 || 456+789);//\t456\n//逻辑中断很重要，会影响程序运行结果\nvar num = 0;\nconsole.log(123 || num++);//num++ 运行中断\nconsole.log(num);//0\n```\n\n## **「赋值运算符」**\n\n| 运算符   | 描述                 | 案例                   |\n| -------- | -------------------- | ---------------------- |\n| =        | 直接赋值             | var name = ‘fan’       |\n| +=  -=   | 加一个数后在赋值     | var age = 5; age += 5; |\n| *= /= %= | 乘，除，取模后在赋值 | var age = 5; age *= 5; |\n\n```js\nvar age = 10;\nage += 5;//相当于age = age + 5;\nage -= 5;//age = age - 5;\nage *= 10;//age = age * 10;\n```\n\n## **「运算符优先级」**\n\n| 优先级 | 运算符     | 顺序         |\n| ------ | ---------- | ------------ |\n| 1      | 小括号     | ()           |\n| 2      | 一元运算符 | ! ++ - -     |\n| 3      | 算数运算符 | 先* / % 后+- |\n| 4      | 关系运算符 | > >= < <=    |\n| 5      | 相等运算符 | == != === != |\n| 6      | 逻辑运算符 | 先&&后\\|\\|   |\n| 7      | 赋值运算符 | =            |\n| 8      | 逗号运算符 | ,            |\n\n- 一元运算符里面逻辑非优先级最高\n- 与比或高\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/前端/Javascript基础.md","raw":"---\ntitle: Javascript基础\ndate: 2022-05-15\nupdated: 2022-06-01\ntags:\n  - 小白的前端之路\n  - JavaScript基础\ncategories: 前端开发\nkeywords: \ndescription: \ntop_img: ./img/bg22.jpg\ncover: ./img/bg4.jpg\n\n---\n# Javascript基础\n\n\n\n## 编程基础\n\n**「计算机语言」**分为机器语言，汇编语言，高级语言。计算机内部最终执行的都是机器语言，由`0`和`1`这样的二进制数构成。\n\n**「数据存储单位」**8bit(比特) = 1B(Byte)字节  千字节1KB = 1024B\n\n**「翻译器」**高级语言编写的程序不能被计算机识别，需要经过转换，将源代码程序翻译成`机器语言`才能运行。浏览器里面的js解释器就是这样的一个翻译器。\n\n**「程序运行」**\n\n- 打开某个程序时，先从硬盘中把程序的代码加载到内存中\n- CPU执行内存中的代码\n- 注意：之所以要内存的一个重要原因，是因为 cpu运行太快了，如果只从硬盘中读数据，会浪费cpu性能，所以，才使用存取速度更快的内存来保存运行时的数据。（内存是电，硬盘是机械）\n\n## 初识JavaScript\n\n**「创始人」**布兰登·艾奇(Brendan Eich),起初命名为`LiveScript`后来与Sun公司合作改名为`JavaScript`。\n\n**「JavaScript」**运行在客户端的脚本语言，不需要编译，由js解释器(js引擎)逐行解释执行。Node.js也可以用于服务器端编程。\n\n**「JavaScript组成」**ECMAScript(JavaScript语法)、DOM(文档对象模型)、BOM(浏览器对象模型)\n\n**「JavaScript的作用」**\n\n- 表单动态校验(密码强度检测)\n- 网页特效\n- 服务端开发(Node.js)\n- 桌面程序(Electron)、App(Cordova)、控制硬件-物联网(Ruff)、游戏开发(cocos2d-js)\n\n**「JavaScript书写位置」**\n\n> JS有3种书写位置，分别为行内、内嵌和外部。\n\n1. 行内\n\n   ```html\n   <input type=\"botton\" value=\"点我试试\" \n   \tonclick=\"alert('Helo World!')\"/>\n   ```\n\n2. 内嵌\n\n   ```html\n   <script>\n   \talret('Hello World!');\n   </script>\n   ```\n\n3. 外部\n\n   ```html\n   引用外部js文件\n   <script src=\"my.js\"> </script> \n   ```\n\n   \n\n**「注释」**\n\n1. 单行注释\n\n   ```javascript\n   // 我是单行注释 （ctrl + /）\n   ```\n\n2. 多行注释\n\n   ```js\n   /*\n     获取用户年龄和姓名\n     并通过提示框显示出来\n     点击vscode左下角管理-键盘快捷方式-切换块注释\n     (默认快捷键 alt + shift + a) 修改为 (ctrl + shift + /)\n   */\n   ```\n## 输入和输出语句\n\n   | 函数                      | 说明                     | 归属   |\n   | ------------------------- | ------------------------ | ------ |\n   | prompt(‘输入’);           | 浏览器弹出输入框         | 浏览器 |\n   | alert(‘输出’);            | 浏览器弹出警示框         | 浏览器 |\n   | console.log(‘控制台输出’) | 浏览器控制台打印输出信息 | 浏览器 |\n\n   \n\n```html\n<script>\n\t//输入框\n    prompt('请输入');\n    //弹出警示框，输出的展示给用户\n    alert('计算的结果是');\n    //控制台输出，给程序员测试用\n    console.log('控制台显示');\n</script>\n    \n```\n\n# 变量\n\n## **变量概述**\n\n变量是程序在内存中申请的一块用于存放数据的空间。变量是用于存放数据的容器，可以通过变量名获取数据，甚至修改数据。\n\n白话讲，变量就是一个装东西的盒子。\n\n## 变量的使用\n\n变量在使用时分为两步，声明和赋值\n\n### **「1. 声明变量」**\n\n```js\n//声明变量\nvar age; //声明一个名称为age的变量\n```\n\nvar是一个JS关键字，用来声明变量(variable变量的意思)。num是我们定义的变量名，可以通过变量名来访问内存中分配的空间。\n\n### **「2. 赋值」**\n\n```js\nage = 10;//给age变量赋值为10\n```\n\n### **「3. 变量的初始化」**\n\n```js\nvar age = 10;//声明变量并赋值为10\n```\n\n### 小案例\n\n```js\n//声明\nvar age;\n//赋值\nage=10;\n//输出结果\nconsole.log(age);\n```\n\n```js\n//用户输入姓名，存到一个myname的变量中\nvar myname=prompt('请输入你的名字')；\n//输出这个用户名\nalert(myname);\n```\n\n### **「4. 变量语法扩展」**\n\n```js\n// 1.一个变量被重新赋值后，它原有的值会被覆盖掉，变量值以最后一次赋的值为准。\nvar age=10;\nage=18;\n// 2.同时声明多个变量(只需要写一个var,多个变量名之间用英文逗号隔开)\nvar num=10,age=18,name='name';\n```\n\n声明变量特殊情况\n\n| 情况                       | 说明                     | 结果      |\n| -------------------------- | ------------------------ | --------- |\n| var age; console.log(age); | 只声明，不赋值           | undefined |\n| console.log(age);          | 不声明，不赋值，直接使用 | 报错      |\n| age=10;console.log(age);   | 不声明，只赋值           | 10        |\n\n### **「5. 变量命名规范」**\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202205302255403.png)\n\n### 小案例\n\n```js\n//小案例，交换两个变量的值\nvar temp;//引入临时变量\nvar apple1='青苹果',apple2='红苹果'；\ntemp=apple1;\napple1=apple2;\napple2=temp;\nconsole.log(apple1);\nconsole.log(apple2);\n```\n\n# 数据类型\n\n分为两类：简单数据类型(Number,String,Boolean,Undefined,Null)和复杂数据类型(object)。\n\n| 简单数据类型 | 说明                      | 默认值    |\n| ------------ | ------------------------- | --------- |\n| Number       | 数字型，包含整数和浮点数  | 0         |\n| String       | 字符串类型                | “ ”       |\n| Boolean      | 布尔值类型                | false     |\n| Undefined    | 声明但不赋值，a=undefined | undefined |\n| Null         | var a=null; 声明a为空值   | null      |\n\n## Number数字型\n\n### **「数字型进制」**\n\n```js\n// 1.在JS中八进制前面加0，十六进制前面加 0x\nvar num1 = 07;   // 对应十进制的7\n// 2.十六进制数字序列范围：0~9以及A~F\n var num = 0xA; //对应十进制10\n```\n\n### **「数字型范围」**\n\nJavaScript中的数值有最大值和最小值\n\n- 最大值:`Number.MAX_VALUE`，值为：1.7976931348623157e+308\n- 最小值:`Number.MIN_VALUE`，值为：5e-32\n- 特殊值：`Infinity` 无穷大 `-Infinity` 无穷小 `NaN` 代表一个非数字（not a number）\n- isNaN(): 用来判断一个变量是否为非数字的类型。非数字型为true,数字型为false。\n\n```js\nconsole.log(Number.MAX_VALUE);//数字的最大值\nconsole.log(Number.MIN_VALUE);//数字的最小值\n//无穷大\nconsole.log(Number.MAX_VALUE*2);//Infinity 无穷大\n//无穷小\nconsole.log(Number.MIN_VALUE*2);//-Infinity 无穷小\n//非数字\nconsole.log('pink老师'-100)；//NaN\n```\n\n\n\n```js\nvar usrage = 21;\nvar isOK = isNaN(usrage);\nconsole.log(isOK); //false 21不是一个非数字\nvar usrname = \"andy\";\nconsole.log(isNaN(usrname));//true \"andy\"是一个非数字\n```\n\n## String字符串型\n\n```js\n// 1.字符串型可以是引号中的任意文本，语法为 单引号 和 双引号\nvar msg = '我的名字叫';\nvar name = \"fan\";\n```\n\n由于HTML标签属性是双引号，这里推荐使用单引号，常见错误未使用引号，会被认定是js代码，但js没有这些语法。\n\n### **「字符串引号嵌套」**\n\njs可以使用单引号套双引号，或者使用双引号套单引号（外双内单，外单内双）\n\n```js\nvar str1=\"我是'程序员'\";\nvar str2='我是\"程序员\"';\n//常见错误\nvar str3='我是程序员\";//报错，不能单双引号搭配\n```\n\n\n\n### **「1. 字符串转义符」**\n\n都是以 \\ 开头，详细如下\n\n| 转义符 | 说明                     |\n| ------ | ------------------------ |\n| \\n     | 换行符，n是newline的意思 |\n| \\ \\    | 斜杠\\                    |\n| \\ '    | 单引号‘                  |\n| \\ \"    | 双引号 “                 |\n| \\t     | tab缩进                  |\n| \\b     | 空格，b是blank 的意思    |\n\n```js\n//字符串转义字符，都是\\开头，写在引号里面\nvar str=\"我是\\n程序员\";\nconsole.log(str);\n```\n\n### **「2. 字符串长度」**\n\n  字符串是由若干字符组成的，这些字符的数量就是字符串的长度，通过length属性可以获取整个字符串长度。\n\n```js\nvar str='我是程序员';\nalert(str.length);//显示5\n```\n\n### **「3. 字符串拼接」**\n\n-   多个字符串之间可以使用 + 进行拼接，其拼接方式为 字符串 + 任何类型 = 拼接之后的新字符串。\n-   拼接前会把与字符串相加的任何类型转成字符串，再拼接成一个新的字符串\n\n```js\n//1.1 字符串 \"相加\"\nalert('hello' + ' ' + 'world'); // hello world\n//1.2 数值字符串 \"相加\"\nalert('100' + '100'); // 100100\n//1.3 数值字符串 + 数值\nalert('11' + 12);     // 1112 +号口诀：数值相加，字符相连\n//1.4 数值相加\nalert(12+12); //24\n// 1.5 字符串拼接加强\nvar age = 18;\nalert(\"你\" + age +\"岁了\"); //变量和字符串引引加加\n```\n\n**+号口诀：数值相加，字符相连**\n\n### 案例：字符串拼接加强\n\n```js\n//弹出一个输入框，输入年宁\n//把输入年龄与字符串相接\n//输出结果\nvar age=prompt('请输入年龄');\nvar str='您今年已经'+ age + '岁了';\nalert(str);\n```\n\n## Boolean布尔型\n\n  布尔类型有两个值：true 和 false ，其中 true 表示真（对），而 false 表示假（错）。\n  布尔型和数字型相加的时候， true 的值为 1 ，false 的值为 0。\n\n```js\nconsole.log(true + 1); // 2\nconsole.log(false + 1); // 1\n```\n\n## Undefined 和 Null\n\n  一个变量声明后没有赋值会有一个默认值undefined（如果相连或者相加时，注意结果）\n\n```js\n  var variable;\n  console.log(variable); // undefined\n  console.log(\"你好\" + variable); // 你好undefined\n  console.log(11 + variable); // NaN\n  console.log(true + variable);// NaN\n```\n\n  一个变量声明并赋值null,里面存的值为空\n\n```js\n  var var2 = null;\n  console.log(var2); // null\n  console.log(\"你好\" + var2); // 你好null\n  console.log(11 + var2); // 11\n  console.log(true + var2);// 1\n```\n\n## 获取变量类型及转换\n\n### **「获取变量类型」**\n\n-  检测变量的数据类型语法`typeof`\n\n```js\nvar num = 10;\nconsole.log(typeof num);//结果为 number\nvar str = 'pink';\nconsole.log(typeof str);//结果为 string\nvar flag = 'true';\nconsole.log(typeof flog);//结果为 boolean\nvar vari = undefined;\nconsole.log(typeof vari);//结果为 undefined\nvar timer = null;\nconsole.log(typeof timer); //结果为 object\n//prompt 取过来的值是字符型的\nvar age = prompt('请输入年龄');\nconsole.log(age);\nconloge.log(typeof age);\n```\n\n**prompt 取过来的值是字符型的**\n\n`字面量`:是源代码中一个固定值的表示法，就是字面量如何去表达这个值。通过数据的格式特征可以判断数据的类型\n\n- 有数字字面量:8,9,10\n- 字符串字面量:'饭老板'，\"前端开发\"\n- 布尔字面量:true,false\n\n### **「数据类型转换」**\n\n#### 转换为字符串\n\n| 方式           | 说明                         | 案例 |\n| -------------- | ---------------------------- | ---- |\n| toString()     | 转换成字符型                 |      |\n| String()       | 强制转换                     |      |\n| 加号拼接字符串 | 和字符型拼接的结果都是字符型 |      |\n\ntoString()和String()使用方式不一样\n\n**三种转换方式更喜欢用第三种，被称为隐式转换**\n\n```js\n//1,数字型转换字符串 变量.toString()\nvar num = 10;\nvar str = num.toString();\nconsole,log(str);\nconsole,log(typeof str);\n//2，String()\nvar num = 10;\nvar str = String(num);\nconsole,log(typeof str);\n//3，加号拼接字符串\nvar num = 10;\nconsole.log(num + '');\n```\n\n#### 转换为数字型\n\n| 方式                   | 说明               | 案例 |\n| ---------------------- | ------------------ | ---- |\n| parseInt(String)函数   | 转化为整数型       |      |\n| parseFloat(String)函数 | 转化为浮点型       |      |\n| Number()强制转换函数   | 强制转换数值型     |      |\n| js隐式转换（- * /)     | 算数因算符转换数值 |      |\n\n```js\n//1，parseInt(变量) 得到的是整数\nconsole.log(parseInt('3.14'));//3 取整\nconsole.log(parseInt('3.93'));//3 取整\nconsole.log(parseInt('120px'));//120 会去掉px单位\nconsole.log(parseInt('rem120px'));//NaN\n//2，parseFloat(变量) 得到的是浮点数\nconsole.log(parseFloat('3.14'));//3.14\nconsole.log(parseFloat('120px'));//120 去掉单位\nconsole.log(parseFloat('rem120px'));//NaN\n//3，Number(变量)\nvar str = '123';\nconsole.log(Number(str));//123\nconsole.log(Number('12'));//12\n//4，利用算数运算符\nconsole.log('12'-0);//12\nconsole.log('123'-'120');//3\nconsole.log('123'*1);//123\n```\n\n#### 案例：简单加法器\n\n```js\nvar num1 = prompt('请输入第一个数');\nvar num2 = prompt('请输入第二个数');\nvar result = parseFloat(num1) + parseFloat(num2);\nconsole.log('您的结果是' + result);\n```\n\n#### 案例：计算年龄\n\n```js\nvar year = prompt('请输入生日年份')；\nvar age = 2022 - year; //隐式转换\nalert('你的年龄'+ age + '岁了');\n```\n\n\n\n#### 转换为布尔型\n\n1. 代表空、否定的值会被转换为false，如' '、0、NaN、null、undefined \n2. 其余值都会被转换为true。\n\n| 方式          | 说明               | 案例            |\n| ------------- | ------------------ | --------------- |\n| Boolean()函数 | 其他类型转换布尔型 | Boolean(‘true’) |\n\n```js\nconsole.log(Boolean(''));//false\nconsole.log(Boolean(0));//false\nconsole.log(Boolean(NaN));//false\nconsole.log(Boolean(null));//false\nconsole.log(Boolean(undefined));//false\nconsole.log(Boolean('小白'));//true\nconsole.log(Boolean('12'));//true\n```\n\n# 关键字和保留字\n\n**「标识符」**指开发人员为变量、属性、函数、参数取得名字。标识符不能是关键字或保留字。\n\n**「关键字」**指 JS本身已经使用了的字，不能再用它们充当变量名、方法名\n\n> 包括：break、case、catch、continue、default、delete、do、else、finally、for、function、if、in、instanceof、new、return、switch、this、throw、try、typeof、var、void、while、with 等。\n\n**「保留字」**实际上就是预留的“关键字”，意思是现在虽然还不是关键字，但是未来可能会成为关键字，同样不能使用它们当变量名或方法名。\n\n> boolean、byte、char、class、const、debugger、double、enum、export、extends、fimal、float、goto、implements、import、int、interface、long、mative、package、private、protected、public、short、static、super、synchronized、throws、transient、volatile 等。\n>\n> 注意：如果将保留字用作变量名或函数名，那么除非将来的浏览器实现了该保留字，否则很可能收不到任何错误消息。当浏览器将其实现后，该单词将被看做关键字，如此将出现关键字错误。\n\n# 运算符\n\n## **「运算符」**\n\n是用于实现赋值、比较和执行算数运算等功能的符号。常用运算符分类如下\n\n- 算数运算符\n- 递增和递减运算符\n- 比较运算符\n- 逻辑运算符\n- 赋值运算符\n\n| 运算符 | 描述         | 案例                |\n| ------ | ------------ | ------------------- |\n| +      | 加           | 10+20=30            |\n| -      | 减           | 10-20=-10           |\n| *      | 乘           | 10*20=200           |\n| /      | 除           | 10/20=0.5           |\n| %      | 取余（取模） | 返回除法的余数9%2=1 |\n\n### 浮点数的精度问题\n\n```js\n  var result = 0.1 + 0.2;    // 结果不是 0.3，而是：0.30000000000000004\n  console.log(0.07 * 100);   // 结果不是 7，  而是：7.000000000000001\n//浮点数不能用来比较是否相等\nvar num = 0.1 + 0.2;\nconsole.log(num == 0.3);//false\n```\n\n浮点数值的最高精度是17位小数，但是在进行算数运算时其精确度远远不如整数,所以不要直接判断两个浮点数是否相等!\n\n### **表达式与返回值**\n\n1. 表达式：由数字、运算符和变量组成的式子。\n2. 返回值：每一个表达式经过相应的运算之后，会有一个最终结果，称为表达式的返回值\n\n```js\nconsole.log(1+1);//2\nconsole.log(1-1);//0\nconsole.log(1*1);//1\nconsole.log(1/1);//1\n//取余\nconsole.log(4%2);//0\nconsole.lpg(5%3);//2\nconsole.log(3%5);//3\n//\nconsole.log(1+1);//2为返回值\nvar num = 1 + 1;//右边表达式计算完毕把返回值给左边\n\n```\n\n## **「递增和递减运算符」**\n\n  反复给变量增加或减去1，可以使用递增（++）或递减（- -）运算符，分为前置和后置，必须配合变量使用。\n\n- 递增运算符\n\n```js\n//前置递增 \nvar  num = 10;\nalert(++num + 10);   // 21 使用口诀：先自加，后返回值\n //后置递增 \nvar  num1 = 10;\nalert(10 + num1++);  // 20 使用口诀：先返回原值，后自加 \n```\n\n```js\n  var num = 1;\n  var num2 = ++num + num++; //num = 2\n  console.log(num2);//4\n  \n  var num = 1;\n  var num1 = 1;\n  var num2 = num++ + num1++; // 1 + 1\n  console.log(num2);//2\n  \n  var num = 1;\n  var num2 = num++ + num++;// 1 + 2 \n  console.log(num2); // 3  \n```\n\n## **「比较运算符」**\n\n返回的是布尔值（true || false）\n\n| 运算符 | 描述             | 案例         | 结果  |\n| ------ | ---------------- | ------------ | ----- |\n| <      | 小于号           | 1<2          | true  |\n| >      | 大于号           | 1>2          | false |\n| >=     | 大于等于号       | 2 >= 2       | true  |\n| <=     | 小于等于号       | 3 <= 2       | false |\n| ==     | 等判号（会转型） | 15 == ‘15’   | true  |\n| !=     | 不等号           | 37 != 37     | false |\n| ===    | 全等             | 37 === ‘37’  | false |\n| !===   | 全不等           | 37 !=== ‘37’ | true  |\n\n注意：\n\n- ==判断两边值是否相等（有隐式转换）\n- ===判断两边值和数据类型是否完全相同\n\n```js\n//==默认转换数字类型，会把字符串型转换成数字型，要求值相等即可\nconsole.log(3 == 5);//false\nconsole.log('pink' == '我');//false\nconsole.log(18 == 18);//true\nconsole.log(18 == '18');//true\nconsole.log(18 != 18);//false\n//===要求值和数据类型完全一样\nconsole.log(18 === 18);//true\nconsole.log(18 === '18');//false\n```\n\n## **「逻辑运算符」**\n\n  逻辑运算符是用来进行布尔值运算的运算符\n  短路运算:当有多个表达式（值）时,左边的表达式值可以确定结果时,就不再继续运算右边的表达式的值;\n\n| 运算符 | 描述                   | 案例           | 特点                 |\n| ------ | ---------------------- | -------------- | -------------------- |\n| &&     | “逻辑与”，简称“与” and | true && false  | 两边都true才返回true |\n| \\|\\|   | “逻辑或”，简称“或” or  | true \\|\\| true | 有真为真             |\n| !      | “逻辑非”，简称“非” not | ! true         | 取反                 |\n\n```js\n//1,&&\nconsole.log(3 > 5 && 3 > 2);//false\nconsole.log(3 < 5 && 3 > 2);//true\n//2,||\nconsole.log(3 > 5 || 3 > 2);//true\nconsole.log(3 < 5 || 3 < 2);//false\n//3,!\nconsole.log(!true);//false\n```\n\n```js\n//逻辑与短路运算 如表达式1结果为真，则返回表达式2，如果表达式1结果为假，则返回表达式1\nconsole.log(123 && 456);//\t456\nconsole.log(0 && 456);//\t0\nconsole.log(0 && 1+2 && 456*789);//\t0\nconsole.log('' && 1+2 && 456*789);//\t''\n//有空的或者否定的是假，其余为真 0 '' null undefined NaN\n//逻辑或短路运算 如表达式1结果为真，则返回表达式1，如果表达式1结果为假，则返回表达式2\nconsole.log(123 || 456);//\t123\nconsole.log(123 || 456 || 456+789);//\t123\nconsole.log(0 || 456 || 456+789);//\t456\n//逻辑中断很重要，会影响程序运行结果\nvar num = 0;\nconsole.log(123 || num++);//num++ 运行中断\nconsole.log(num);//0\n```\n\n## **「赋值运算符」**\n\n| 运算符   | 描述                 | 案例                   |\n| -------- | -------------------- | ---------------------- |\n| =        | 直接赋值             | var name = ‘fan’       |\n| +=  -=   | 加一个数后在赋值     | var age = 5; age += 5; |\n| *= /= %= | 乘，除，取模后在赋值 | var age = 5; age *= 5; |\n\n```js\nvar age = 10;\nage += 5;//相当于age = age + 5;\nage -= 5;//age = age - 5;\nage *= 10;//age = age * 10;\n```\n\n## **「运算符优先级」**\n\n| 优先级 | 运算符     | 顺序         |\n| ------ | ---------- | ------------ |\n| 1      | 小括号     | ()           |\n| 2      | 一元运算符 | ! ++ - -     |\n| 3      | 算数运算符 | 先* / % 后+- |\n| 4      | 关系运算符 | > >= < <=    |\n| 5      | 相等运算符 | == != === != |\n| 6      | 逻辑运算符 | 先&&后\\|\\|   |\n| 7      | 赋值运算符 | =            |\n| 8      | 逗号运算符 | ,            |\n\n- 一元运算符里面逻辑非优先级最高\n- 与比或高\n\n\n\n\n\n\n\n\n\n\n\n","slug":"前端/Javascript基础","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cl5db79k8001aywtu3kdpeqao","content":"<h1 id=\"Javascript基础\"><a href=\"#Javascript基础\" class=\"headerlink\" title=\"Javascript基础\"></a>Javascript基础</h1><h2 id=\"编程基础\"><a href=\"#编程基础\" class=\"headerlink\" title=\"编程基础\"></a>编程基础</h2><p><strong>「计算机语言」</strong>分为机器语言，汇编语言，高级语言。计算机内部最终执行的都是机器语言，由<code>0</code>和<code>1</code>这样的二进制数构成。</p>\n<p><strong>「数据存储单位」</strong>8bit(比特) = 1B(Byte)字节  千字节1KB = 1024B</p>\n<p><strong>「翻译器」</strong>高级语言编写的程序不能被计算机识别，需要经过转换，将源代码程序翻译成<code>机器语言</code>才能运行。浏览器里面的js解释器就是这样的一个翻译器。</p>\n<p><strong>「程序运行」</strong></p>\n<ul>\n<li>打开某个程序时，先从硬盘中把程序的代码加载到内存中</li>\n<li>CPU执行内存中的代码</li>\n<li>注意：之所以要内存的一个重要原因，是因为 cpu运行太快了，如果只从硬盘中读数据，会浪费cpu性能，所以，才使用存取速度更快的内存来保存运行时的数据。（内存是电，硬盘是机械）</li>\n</ul>\n<h2 id=\"初识JavaScript\"><a href=\"#初识JavaScript\" class=\"headerlink\" title=\"初识JavaScript\"></a>初识JavaScript</h2><p><strong>「创始人」</strong>布兰登·艾奇(Brendan Eich),起初命名为<code>LiveScript</code>后来与Sun公司合作改名为<code>JavaScript</code>。</p>\n<p><strong>「JavaScript」</strong>运行在客户端的脚本语言，不需要编译，由js解释器(js引擎)逐行解释执行。Node.js也可以用于服务器端编程。</p>\n<p><strong>「JavaScript组成」</strong>ECMAScript(JavaScript语法)、DOM(文档对象模型)、BOM(浏览器对象模型)</p>\n<p><strong>「JavaScript的作用」</strong></p>\n<ul>\n<li>表单动态校验(密码强度检测)</li>\n<li>网页特效</li>\n<li>服务端开发(Node.js)</li>\n<li>桌面程序(Electron)、App(Cordova)、控制硬件-物联网(Ruff)、游戏开发(cocos2d-js)</li>\n</ul>\n<p><strong>「JavaScript书写位置」</strong></p>\n<blockquote>\n<p>JS有3种书写位置，分别为行内、内嵌和外部。</p>\n</blockquote>\n<ol>\n<li><p>行内</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;botton&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;点我试试&quot;</span> </span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">onclick</span>=<span class=\"string\">&quot;alert(&#x27;Helo World!&#x27;)&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>内嵌</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">\talret(<span class=\"string\">&#x27;Hello World!&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>外部</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">引用外部js文件</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;my.js&quot;</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span> </span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><strong>「注释」</strong></p>\n<ol>\n<li><p>单行注释</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 我是单行注释 （ctrl + /）</span></span><br></pre></td></tr></table></figure></li>\n<li><p>多行注释</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  获取用户年龄和姓名</span></span><br><span class=\"line\"><span class=\"comment\">  并通过提示框显示出来</span></span><br><span class=\"line\"><span class=\"comment\">  点击vscode左下角管理-键盘快捷方式-切换块注释</span></span><br><span class=\"line\"><span class=\"comment\">  (默认快捷键 alt + shift + a) 修改为 (ctrl + shift + /)</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"输入和输出语句\"><a href=\"#输入和输出语句\" class=\"headerlink\" title=\"输入和输出语句\"></a>输入和输出语句</h2><table>\n<thead>\n<tr>\n<th>函数</th>\n<th>说明</th>\n<th>归属</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>prompt(‘输入’);</td>\n<td>浏览器弹出输入框</td>\n<td>浏览器</td>\n</tr>\n<tr>\n<td>alert(‘输出’);</td>\n<td>浏览器弹出警示框</td>\n<td>浏览器</td>\n</tr>\n<tr>\n<td>console.log(‘控制台输出’)</td>\n<td>浏览器控制台打印输出信息</td>\n<td>浏览器</td>\n</tr>\n</tbody></table>\n</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"comment\">//输入框</span></span></span><br><span class=\"line\"><span class=\"javascript\">    prompt(<span class=\"string\">&#x27;请输入&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//弹出警示框，输出的展示给用户</span></span></span><br><span class=\"line\"><span class=\"javascript\">    alert(<span class=\"string\">&#x27;计算的结果是&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//控制台输出，给程序员测试用</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;控制台显示&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n\n<h1 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h1><h2 id=\"变量概述\"><a href=\"#变量概述\" class=\"headerlink\" title=\"变量概述\"></a><strong>变量概述</strong></h2><p>变量是程序在内存中申请的一块用于存放数据的空间。变量是用于存放数据的容器，可以通过变量名获取数据，甚至修改数据。</p>\n<p>白话讲，变量就是一个装东西的盒子。</p>\n<h2 id=\"变量的使用\"><a href=\"#变量的使用\" class=\"headerlink\" title=\"变量的使用\"></a>变量的使用</h2><p>变量在使用时分为两步，声明和赋值</p>\n<h3 id=\"「1-声明变量」\"><a href=\"#「1-声明变量」\" class=\"headerlink\" title=\"「1. 声明变量」\"></a><strong>「1. 声明变量」</strong></h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//声明变量</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> age; <span class=\"comment\">//声明一个名称为age的变量</span></span><br></pre></td></tr></table></figure>\n\n<p>var是一个JS关键字，用来声明变量(variable变量的意思)。num是我们定义的变量名，可以通过变量名来访问内存中分配的空间。</p>\n<h3 id=\"「2-赋值」\"><a href=\"#「2-赋值」\" class=\"headerlink\" title=\"「2. 赋值」\"></a><strong>「2. 赋值」</strong></h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">age = <span class=\"number\">10</span>;<span class=\"comment\">//给age变量赋值为10</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"「3-变量的初始化」\"><a href=\"#「3-变量的初始化」\" class=\"headerlink\" title=\"「3. 变量的初始化」\"></a><strong>「3. 变量的初始化」</strong></h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> age = <span class=\"number\">10</span>;<span class=\"comment\">//声明变量并赋值为10</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"小案例\"><a href=\"#小案例\" class=\"headerlink\" title=\"小案例\"></a>小案例</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//声明</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> age;</span><br><span class=\"line\"><span class=\"comment\">//赋值</span></span><br><span class=\"line\">age=<span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"comment\">//输出结果</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(age);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//用户输入姓名，存到一个myname的变量中</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> myname=prompt(<span class=\"string\">&#x27;请输入你的名字&#x27;</span>)；</span><br><span class=\"line\"><span class=\"comment\">//输出这个用户名</span></span><br><span class=\"line\">alert(myname);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"「4-变量语法扩展」\"><a href=\"#「4-变量语法扩展」\" class=\"headerlink\" title=\"「4. 变量语法扩展」\"></a><strong>「4. 变量语法扩展」</strong></h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.一个变量被重新赋值后，它原有的值会被覆盖掉，变量值以最后一次赋的值为准。</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> age=<span class=\"number\">10</span>;</span><br><span class=\"line\">age=<span class=\"number\">18</span>;</span><br><span class=\"line\"><span class=\"comment\">// 2.同时声明多个变量(只需要写一个var,多个变量名之间用英文逗号隔开)</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> num=<span class=\"number\">10</span>,age=<span class=\"number\">18</span>,name=<span class=\"string\">&#x27;name&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>声明变量特殊情况</p>\n<table>\n<thead>\n<tr>\n<th>情况</th>\n<th>说明</th>\n<th>结果</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>var age; console.log(age);</td>\n<td>只声明，不赋值</td>\n<td>undefined</td>\n</tr>\n<tr>\n<td>console.log(age);</td>\n<td>不声明，不赋值，直接使用</td>\n<td>报错</td>\n</tr>\n<tr>\n<td>age=10;console.log(age);</td>\n<td>不声明，只赋值</td>\n<td>10</td>\n</tr>\n</tbody></table>\n<h3 id=\"「5-变量命名规范」\"><a href=\"#「5-变量命名规范」\" class=\"headerlink\" title=\"「5. 变量命名规范」\"></a><strong>「5. 变量命名规范」</strong></h3><p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202205302255403.png\"></p>\n<h3 id=\"小案例-1\"><a href=\"#小案例-1\" class=\"headerlink\" title=\"小案例\"></a>小案例</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//小案例，交换两个变量的值</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> temp;<span class=\"comment\">//引入临时变量</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> apple1=<span class=\"string\">&#x27;青苹果&#x27;</span>,apple2=<span class=\"string\">&#x27;红苹果&#x27;</span>；</span><br><span class=\"line\">temp=apple1;</span><br><span class=\"line\">apple1=apple2;</span><br><span class=\"line\">apple2=temp;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(apple1);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(apple2);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h1><p>分为两类：简单数据类型(Number,String,Boolean,Undefined,Null)和复杂数据类型(object)。</p>\n<table>\n<thead>\n<tr>\n<th>简单数据类型</th>\n<th>说明</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Number</td>\n<td>数字型，包含整数和浮点数</td>\n<td>0</td>\n</tr>\n<tr>\n<td>String</td>\n<td>字符串类型</td>\n<td>“ ”</td>\n</tr>\n<tr>\n<td>Boolean</td>\n<td>布尔值类型</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Undefined</td>\n<td>声明但不赋值，a=undefined</td>\n<td>undefined</td>\n</tr>\n<tr>\n<td>Null</td>\n<td>var a=null; 声明a为空值</td>\n<td>null</td>\n</tr>\n</tbody></table>\n<h2 id=\"Number数字型\"><a href=\"#Number数字型\" class=\"headerlink\" title=\"Number数字型\"></a>Number数字型</h2><h3 id=\"「数字型进制」\"><a href=\"#「数字型进制」\" class=\"headerlink\" title=\"「数字型进制」\"></a><strong>「数字型进制」</strong></h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.在JS中八进制前面加0，十六进制前面加 0x</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> num1 = <span class=\"number\">07</span>;   <span class=\"comment\">// 对应十进制的7</span></span><br><span class=\"line\"><span class=\"comment\">// 2.十六进制数字序列范围：0~9以及A~F</span></span><br><span class=\"line\"> <span class=\"keyword\">var</span> num = <span class=\"number\">0xA</span>; <span class=\"comment\">//对应十进制10</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"「数字型范围」\"><a href=\"#「数字型范围」\" class=\"headerlink\" title=\"「数字型范围」\"></a><strong>「数字型范围」</strong></h3><p>JavaScript中的数值有最大值和最小值</p>\n<ul>\n<li>最大值:<code>Number.MAX_VALUE</code>，值为：1.7976931348623157e+308</li>\n<li>最小值:<code>Number.MIN_VALUE</code>，值为：5e-32</li>\n<li>特殊值：<code>Infinity</code> 无穷大 <code>-Infinity</code> 无穷小 <code>NaN</code> 代表一个非数字（not a number）</li>\n<li>isNaN(): 用来判断一个变量是否为非数字的类型。非数字型为true,数字型为false。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.MAX_VALUE);<span class=\"comment\">//数字的最大值</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.MIN_VALUE);<span class=\"comment\">//数字的最小值</span></span><br><span class=\"line\"><span class=\"comment\">//无穷大</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.MAX_VALUE*<span class=\"number\">2</span>);<span class=\"comment\">//Infinity 无穷大</span></span><br><span class=\"line\"><span class=\"comment\">//无穷小</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.MIN_VALUE*<span class=\"number\">2</span>);<span class=\"comment\">//-Infinity 无穷小</span></span><br><span class=\"line\"><span class=\"comment\">//非数字</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;pink老师&#x27;</span>-<span class=\"number\">100</span>)；<span class=\"comment\">//NaN</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> usrage = <span class=\"number\">21</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> isOK = <span class=\"built_in\">isNaN</span>(usrage);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isOK); <span class=\"comment\">//false 21不是一个非数字</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> usrname = <span class=\"string\">&quot;andy&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">isNaN</span>(usrname));<span class=\"comment\">//true &quot;andy&quot;是一个非数字</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"String字符串型\"><a href=\"#String字符串型\" class=\"headerlink\" title=\"String字符串型\"></a>String字符串型</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.字符串型可以是引号中的任意文本，语法为 单引号 和 双引号</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> msg = <span class=\"string\">&#x27;我的名字叫&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&quot;fan&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>由于HTML标签属性是双引号，这里推荐使用单引号，常见错误未使用引号，会被认定是js代码，但js没有这些语法。</p>\n<h3 id=\"「字符串引号嵌套」\"><a href=\"#「字符串引号嵌套」\" class=\"headerlink\" title=\"「字符串引号嵌套」\"></a><strong>「字符串引号嵌套」</strong></h3><p>js可以使用单引号套双引号，或者使用双引号套单引号（外双内单，外单内双）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str1=<span class=\"string\">&quot;我是&#x27;程序员&#x27;&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str2=<span class=\"string\">&#x27;我是&quot;程序员&quot;&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">//常见错误</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str3=<span class=\"string\">&#x27;我是程序员&quot;;//报错，不能单双引号搭配</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"「1-字符串转义符」\"><a href=\"#「1-字符串转义符」\" class=\"headerlink\" title=\"「1. 字符串转义符」\"></a><strong>「1. 字符串转义符」</strong></h3><p>都是以 \\ 开头，详细如下</p>\n<table>\n<thead>\n<tr>\n<th>转义符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>\\n</td>\n<td>换行符，n是newline的意思</td>\n</tr>\n<tr>\n<td>\\ \\</td>\n<td>斜杠\\</td>\n</tr>\n<tr>\n<td>\\ ‘</td>\n<td>单引号‘</td>\n</tr>\n<tr>\n<td>\\ “</td>\n<td>双引号 “</td>\n</tr>\n<tr>\n<td>\\t</td>\n<td>tab缩进</td>\n</tr>\n<tr>\n<td>\\b</td>\n<td>空格，b是blank 的意思</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//字符串转义字符，都是\\开头，写在引号里面</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str=<span class=\"string\">&quot;我是\\n程序员&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"「2-字符串长度」\"><a href=\"#「2-字符串长度」\" class=\"headerlink\" title=\"「2. 字符串长度」\"></a><strong>「2. 字符串长度」</strong></h3><p>  字符串是由若干字符组成的，这些字符的数量就是字符串的长度，通过length属性可以获取整个字符串长度。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str=<span class=\"string\">&#x27;我是程序员&#x27;</span>;</span><br><span class=\"line\">alert(str.length);<span class=\"comment\">//显示5</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"「3-字符串拼接」\"><a href=\"#「3-字符串拼接」\" class=\"headerlink\" title=\"「3. 字符串拼接」\"></a><strong>「3. 字符串拼接」</strong></h3><ul>\n<li>  多个字符串之间可以使用 + 进行拼接，其拼接方式为 字符串 + 任何类型 = 拼接之后的新字符串。</li>\n<li>  拼接前会把与字符串相加的任何类型转成字符串，再拼接成一个新的字符串</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1.1 字符串 &quot;相加&quot;</span></span><br><span class=\"line\">alert(<span class=\"string\">&#x27;hello&#x27;</span> + <span class=\"string\">&#x27; &#x27;</span> + <span class=\"string\">&#x27;world&#x27;</span>); <span class=\"comment\">// hello world</span></span><br><span class=\"line\"><span class=\"comment\">//1.2 数值字符串 &quot;相加&quot;</span></span><br><span class=\"line\">alert(<span class=\"string\">&#x27;100&#x27;</span> + <span class=\"string\">&#x27;100&#x27;</span>); <span class=\"comment\">// 100100</span></span><br><span class=\"line\"><span class=\"comment\">//1.3 数值字符串 + 数值</span></span><br><span class=\"line\">alert(<span class=\"string\">&#x27;11&#x27;</span> + <span class=\"number\">12</span>);     <span class=\"comment\">// 1112 +号口诀：数值相加，字符相连</span></span><br><span class=\"line\"><span class=\"comment\">//1.4 数值相加</span></span><br><span class=\"line\">alert(<span class=\"number\">12</span>+<span class=\"number\">12</span>); <span class=\"comment\">//24</span></span><br><span class=\"line\"><span class=\"comment\">// 1.5 字符串拼接加强</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> age = <span class=\"number\">18</span>;</span><br><span class=\"line\">alert(<span class=\"string\">&quot;你&quot;</span> + age +<span class=\"string\">&quot;岁了&quot;</span>); <span class=\"comment\">//变量和字符串引引加加</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>+号口诀：数值相加，字符相连</strong></p>\n<h3 id=\"案例：字符串拼接加强\"><a href=\"#案例：字符串拼接加强\" class=\"headerlink\" title=\"案例：字符串拼接加强\"></a>案例：字符串拼接加强</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//弹出一个输入框，输入年宁</span></span><br><span class=\"line\"><span class=\"comment\">//把输入年龄与字符串相接</span></span><br><span class=\"line\"><span class=\"comment\">//输出结果</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> age=prompt(<span class=\"string\">&#x27;请输入年龄&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> str=<span class=\"string\">&#x27;您今年已经&#x27;</span>+ age + <span class=\"string\">&#x27;岁了&#x27;</span>;</span><br><span class=\"line\">alert(str);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Boolean布尔型\"><a href=\"#Boolean布尔型\" class=\"headerlink\" title=\"Boolean布尔型\"></a>Boolean布尔型</h2><p>  布尔类型有两个值：true 和 false ，其中 true 表示真（对），而 false 表示假（错）。<br>  布尔型和数字型相加的时候， true 的值为 1 ，false 的值为 0。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"literal\">true</span> + <span class=\"number\">1</span>); <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"literal\">false</span> + <span class=\"number\">1</span>); <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Undefined-和-Null\"><a href=\"#Undefined-和-Null\" class=\"headerlink\" title=\"Undefined 和 Null\"></a>Undefined 和 Null</h2><p>  一个变量声明后没有赋值会有一个默认值undefined（如果相连或者相加时，注意结果）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> variable;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(variable); <span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;你好&quot;</span> + variable); <span class=\"comment\">// 你好undefined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">11</span> + variable); <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"literal\">true</span> + variable);<span class=\"comment\">// NaN</span></span><br></pre></td></tr></table></figure>\n\n<p>  一个变量声明并赋值null,里面存的值为空</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> var2 = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(var2); <span class=\"comment\">// null</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;你好&quot;</span> + var2); <span class=\"comment\">// 你好null</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">11</span> + var2); <span class=\"comment\">// 11</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"literal\">true</span> + var2);<span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"获取变量类型及转换\"><a href=\"#获取变量类型及转换\" class=\"headerlink\" title=\"获取变量类型及转换\"></a>获取变量类型及转换</h2><h3 id=\"「获取变量类型」\"><a href=\"#「获取变量类型」\" class=\"headerlink\" title=\"「获取变量类型」\"></a><strong>「获取变量类型」</strong></h3><ul>\n<li> 检测变量的数据类型语法<code>typeof</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> num);<span class=\"comment\">//结果为 number</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;pink&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> str);<span class=\"comment\">//结果为 string</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> flag = <span class=\"string\">&#x27;true&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> flog);<span class=\"comment\">//结果为 boolean</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> vari = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> vari);<span class=\"comment\">//结果为 undefined</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> timer); <span class=\"comment\">//结果为 object</span></span><br><span class=\"line\"><span class=\"comment\">//prompt 取过来的值是字符型的</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> age = prompt(<span class=\"string\">&#x27;请输入年龄&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(age);</span><br><span class=\"line\">conloge.log(<span class=\"keyword\">typeof</span> age);</span><br></pre></td></tr></table></figure>\n\n<p><strong>prompt 取过来的值是字符型的</strong></p>\n<p><code>字面量</code>:是源代码中一个固定值的表示法，就是字面量如何去表达这个值。通过数据的格式特征可以判断数据的类型</p>\n<ul>\n<li>有数字字面量:8,9,10</li>\n<li>字符串字面量:’饭老板’，”前端开发”</li>\n<li>布尔字面量:true,false</li>\n</ul>\n<h3 id=\"「数据类型转换」\"><a href=\"#「数据类型转换」\" class=\"headerlink\" title=\"「数据类型转换」\"></a><strong>「数据类型转换」</strong></h3><h4 id=\"转换为字符串\"><a href=\"#转换为字符串\" class=\"headerlink\" title=\"转换为字符串\"></a>转换为字符串</h4><table>\n<thead>\n<tr>\n<th>方式</th>\n<th>说明</th>\n<th>案例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>toString()</td>\n<td>转换成字符型</td>\n<td></td>\n</tr>\n<tr>\n<td>String()</td>\n<td>强制转换</td>\n<td></td>\n</tr>\n<tr>\n<td>加号拼接字符串</td>\n<td>和字符型拼接的结果都是字符型</td>\n<td></td>\n</tr>\n</tbody></table>\n<p>toString()和String()使用方式不一样</p>\n<p><strong>三种转换方式更喜欢用第三种，被称为隐式转换</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1,数字型转换字符串 变量.toString()</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = num.toString();</span><br><span class=\"line\"><span class=\"built_in\">console</span>,log(str);</span><br><span class=\"line\"><span class=\"built_in\">console</span>,log(<span class=\"keyword\">typeof</span> str);</span><br><span class=\"line\"><span class=\"comment\">//2，String()</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"built_in\">String</span>(num);</span><br><span class=\"line\"><span class=\"built_in\">console</span>,log(<span class=\"keyword\">typeof</span> str);</span><br><span class=\"line\"><span class=\"comment\">//3，加号拼接字符串</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(num + <span class=\"string\">&#x27;&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"转换为数字型\"><a href=\"#转换为数字型\" class=\"headerlink\" title=\"转换为数字型\"></a>转换为数字型</h4><table>\n<thead>\n<tr>\n<th>方式</th>\n<th>说明</th>\n<th>案例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>parseInt(String)函数</td>\n<td>转化为整数型</td>\n<td></td>\n</tr>\n<tr>\n<td>parseFloat(String)函数</td>\n<td>转化为浮点型</td>\n<td></td>\n</tr>\n<tr>\n<td>Number()强制转换函数</td>\n<td>强制转换数值型</td>\n<td></td>\n</tr>\n<tr>\n<td>js隐式转换（- * /)</td>\n<td>算数因算符转换数值</td>\n<td></td>\n</tr>\n</tbody></table>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1，parseInt(变量) 得到的是整数</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">parseInt</span>(<span class=\"string\">&#x27;3.14&#x27;</span>));<span class=\"comment\">//3 取整</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">parseInt</span>(<span class=\"string\">&#x27;3.93&#x27;</span>));<span class=\"comment\">//3 取整</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">parseInt</span>(<span class=\"string\">&#x27;120px&#x27;</span>));<span class=\"comment\">//120 会去掉px单位</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">parseInt</span>(<span class=\"string\">&#x27;rem120px&#x27;</span>));<span class=\"comment\">//NaN</span></span><br><span class=\"line\"><span class=\"comment\">//2，parseFloat(变量) 得到的是浮点数</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">parseFloat</span>(<span class=\"string\">&#x27;3.14&#x27;</span>));<span class=\"comment\">//3.14</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">parseFloat</span>(<span class=\"string\">&#x27;120px&#x27;</span>));<span class=\"comment\">//120 去掉单位</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">parseFloat</span>(<span class=\"string\">&#x27;rem120px&#x27;</span>));<span class=\"comment\">//NaN</span></span><br><span class=\"line\"><span class=\"comment\">//3，Number(变量)</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;123&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>(str));<span class=\"comment\">//123</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>(<span class=\"string\">&#x27;12&#x27;</span>));<span class=\"comment\">//12</span></span><br><span class=\"line\"><span class=\"comment\">//4，利用算数运算符</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;12&#x27;</span>-<span class=\"number\">0</span>);<span class=\"comment\">//12</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;123&#x27;</span>-<span class=\"string\">&#x27;120&#x27;</span>);<span class=\"comment\">//3</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;123&#x27;</span>*<span class=\"number\">1</span>);<span class=\"comment\">//123</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"案例：简单加法器\"><a href=\"#案例：简单加法器\" class=\"headerlink\" title=\"案例：简单加法器\"></a>案例：简单加法器</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num1 = prompt(<span class=\"string\">&#x27;请输入第一个数&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> num2 = prompt(<span class=\"string\">&#x27;请输入第二个数&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = <span class=\"built_in\">parseFloat</span>(num1) + <span class=\"built_in\">parseFloat</span>(num2);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;您的结果是&#x27;</span> + result);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"案例：计算年龄\"><a href=\"#案例：计算年龄\" class=\"headerlink\" title=\"案例：计算年龄\"></a>案例：计算年龄</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> year = prompt(<span class=\"string\">&#x27;请输入生日年份&#x27;</span>)；</span><br><span class=\"line\"><span class=\"keyword\">var</span> age = <span class=\"number\">2022</span> - year; <span class=\"comment\">//隐式转换</span></span><br><span class=\"line\">alert(<span class=\"string\">&#x27;你的年龄&#x27;</span>+ age + <span class=\"string\">&#x27;岁了&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"转换为布尔型\"><a href=\"#转换为布尔型\" class=\"headerlink\" title=\"转换为布尔型\"></a>转换为布尔型</h4><ol>\n<li>代表空、否定的值会被转换为false，如’ ‘、0、NaN、null、undefined </li>\n<li>其余值都会被转换为true。</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>方式</th>\n<th>说明</th>\n<th>案例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Boolean()函数</td>\n<td>其他类型转换布尔型</td>\n<td>Boolean(‘true’)</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Boolean</span>(<span class=\"string\">&#x27;&#x27;</span>));<span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Boolean</span>(<span class=\"number\">0</span>));<span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Boolean</span>(<span class=\"literal\">NaN</span>));<span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Boolean</span>(<span class=\"literal\">null</span>));<span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Boolean</span>(<span class=\"literal\">undefined</span>));<span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Boolean</span>(<span class=\"string\">&#x27;小白&#x27;</span>));<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Boolean</span>(<span class=\"string\">&#x27;12&#x27;</span>));<span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"关键字和保留字\"><a href=\"#关键字和保留字\" class=\"headerlink\" title=\"关键字和保留字\"></a>关键字和保留字</h1><p><strong>「标识符」</strong>指开发人员为变量、属性、函数、参数取得名字。标识符不能是关键字或保留字。</p>\n<p><strong>「关键字」</strong>指 JS本身已经使用了的字，不能再用它们充当变量名、方法名</p>\n<blockquote>\n<p>包括：break、case、catch、continue、default、delete、do、else、finally、for、function、if、in、instanceof、new、return、switch、this、throw、try、typeof、var、void、while、with 等。</p>\n</blockquote>\n<p><strong>「保留字」</strong>实际上就是预留的“关键字”，意思是现在虽然还不是关键字，但是未来可能会成为关键字，同样不能使用它们当变量名或方法名。</p>\n<blockquote>\n<p>boolean、byte、char、class、const、debugger、double、enum、export、extends、fimal、float、goto、implements、import、int、interface、long、mative、package、private、protected、public、short、static、super、synchronized、throws、transient、volatile 等。</p>\n<p>注意：如果将保留字用作变量名或函数名，那么除非将来的浏览器实现了该保留字，否则很可能收不到任何错误消息。当浏览器将其实现后，该单词将被看做关键字，如此将出现关键字错误。</p>\n</blockquote>\n<h1 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h1><h2 id=\"「运算符」\"><a href=\"#「运算符」\" class=\"headerlink\" title=\"「运算符」\"></a><strong>「运算符」</strong></h2><p>是用于实现赋值、比较和执行算数运算等功能的符号。常用运算符分类如下</p>\n<ul>\n<li>算数运算符</li>\n<li>递增和递减运算符</li>\n<li>比较运算符</li>\n<li>逻辑运算符</li>\n<li>赋值运算符</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n<th>案例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>+</td>\n<td>加</td>\n<td>10+20=30</td>\n</tr>\n<tr>\n<td>-</td>\n<td>减</td>\n<td>10-20=-10</td>\n</tr>\n<tr>\n<td>*</td>\n<td>乘</td>\n<td>10*20=200</td>\n</tr>\n<tr>\n<td>/</td>\n<td>除</td>\n<td>10/20=0.5</td>\n</tr>\n<tr>\n<td>%</td>\n<td>取余（取模）</td>\n<td>返回除法的余数9%2=1</td>\n</tr>\n</tbody></table>\n<h3 id=\"浮点数的精度问题\"><a href=\"#浮点数的精度问题\" class=\"headerlink\" title=\"浮点数的精度问题\"></a>浮点数的精度问题</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">var</span> result = <span class=\"number\">0.1</span> + <span class=\"number\">0.2</span>;    <span class=\"comment\">// 结果不是 0.3，而是：0.30000000000000004</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">0.07</span> * <span class=\"number\">100</span>);   <span class=\"comment\">// 结果不是 7，  而是：7.000000000000001</span></span><br><span class=\"line\"><span class=\"comment\">//浮点数不能用来比较是否相等</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">0.1</span> + <span class=\"number\">0.2</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(num == <span class=\"number\">0.3</span>);<span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n\n<p>浮点数值的最高精度是17位小数，但是在进行算数运算时其精确度远远不如整数,所以不要直接判断两个浮点数是否相等!</p>\n<h3 id=\"表达式与返回值\"><a href=\"#表达式与返回值\" class=\"headerlink\" title=\"表达式与返回值\"></a><strong>表达式与返回值</strong></h3><ol>\n<li>表达式：由数字、运算符和变量组成的式子。</li>\n<li>返回值：每一个表达式经过相应的运算之后，会有一个最终结果，称为表达式的返回值</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>+<span class=\"number\">1</span>);<span class=\"comment\">//2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>-<span class=\"number\">1</span>);<span class=\"comment\">//0</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>*<span class=\"number\">1</span>);<span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>/<span class=\"number\">1</span>);<span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"comment\">//取余</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>%<span class=\"number\">2</span>);<span class=\"comment\">//0</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.lpg(<span class=\"number\">5</span>%<span class=\"number\">3</span>);<span class=\"comment\">//2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>%<span class=\"number\">5</span>);<span class=\"comment\">//3</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>+<span class=\"number\">1</span>);<span class=\"comment\">//2为返回值</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">1</span> + <span class=\"number\">1</span>;<span class=\"comment\">//右边表达式计算完毕把返回值给左边</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「递增和递减运算符」\"><a href=\"#「递增和递减运算符」\" class=\"headerlink\" title=\"「递增和递减运算符」\"></a><strong>「递增和递减运算符」</strong></h2><p>  反复给变量增加或减去1，可以使用递增（++）或递减（- -）运算符，分为前置和后置，必须配合变量使用。</p>\n<ul>\n<li>递增运算符</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//前置递增 </span></span><br><span class=\"line\"><span class=\"keyword\">var</span>  num = <span class=\"number\">10</span>;</span><br><span class=\"line\">alert(++num + <span class=\"number\">10</span>);   <span class=\"comment\">// 21 使用口诀：先自加，后返回值</span></span><br><span class=\"line\"> <span class=\"comment\">//后置递增 </span></span><br><span class=\"line\"><span class=\"keyword\">var</span>  num1 = <span class=\"number\">10</span>;</span><br><span class=\"line\">alert(<span class=\"number\">10</span> + num1++);  <span class=\"comment\">// 20 使用口诀：先返回原值，后自加 </span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> num2 = ++num + num++; <span class=\"comment\">//num = 2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(num2);<span class=\"comment\">//4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> num1 = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> num2 = num++ + num1++; <span class=\"comment\">// 1 + 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(num2);<span class=\"comment\">//2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> num2 = num++ + num++;<span class=\"comment\">// 1 + 2 </span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(num2); <span class=\"comment\">// 3  </span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「比较运算符」\"><a href=\"#「比较运算符」\" class=\"headerlink\" title=\"「比较运算符」\"></a><strong>「比较运算符」</strong></h2><p>返回的是布尔值（true || false）</p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n<th>案例</th>\n<th>结果</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&lt;</td>\n<td>小于号</td>\n<td>1&lt;2</td>\n<td>true</td>\n</tr>\n<tr>\n<td>&gt;</td>\n<td>大于号</td>\n<td>1&gt;2</td>\n<td>false</td>\n</tr>\n<tr>\n<td>&gt;=</td>\n<td>大于等于号</td>\n<td>2 &gt;= 2</td>\n<td>true</td>\n</tr>\n<tr>\n<td>&lt;=</td>\n<td>小于等于号</td>\n<td>3 &lt;= 2</td>\n<td>false</td>\n</tr>\n<tr>\n<td>==</td>\n<td>等判号（会转型）</td>\n<td>15 == ‘15’</td>\n<td>true</td>\n</tr>\n<tr>\n<td>!=</td>\n<td>不等号</td>\n<td>37 != 37</td>\n<td>false</td>\n</tr>\n<tr>\n<td>===</td>\n<td>全等</td>\n<td>37 === ‘37’</td>\n<td>false</td>\n</tr>\n<tr>\n<td>!===</td>\n<td>全不等</td>\n<td>37 !=== ‘37’</td>\n<td>true</td>\n</tr>\n</tbody></table>\n<p>注意：</p>\n<ul>\n<li>==判断两边值是否相等（有隐式转换）</li>\n<li>===判断两边值和数据类型是否完全相同</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//==默认转换数字类型，会把字符串型转换成数字型，要求值相等即可</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">3</span> == <span class=\"number\">5</span>);<span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;pink&#x27;</span> == <span class=\"string\">&#x27;我&#x27;</span>);<span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">18</span> == <span class=\"number\">18</span>);<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">18</span> == <span class=\"string\">&#x27;18&#x27;</span>);<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">18</span> != <span class=\"number\">18</span>);<span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"comment\">//===要求值和数据类型完全一样</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">18</span> === <span class=\"number\">18</span>);<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">18</span> === <span class=\"string\">&#x27;18&#x27;</span>);<span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「逻辑运算符」\"><a href=\"#「逻辑运算符」\" class=\"headerlink\" title=\"「逻辑运算符」\"></a><strong>「逻辑运算符」</strong></h2><p>  逻辑运算符是用来进行布尔值运算的运算符<br>  短路运算:当有多个表达式（值）时,左边的表达式值可以确定结果时,就不再继续运算右边的表达式的值;</p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n<th>案例</th>\n<th>特点</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&amp;&amp;</td>\n<td>“逻辑与”，简称“与” and</td>\n<td>true &amp;&amp; false</td>\n<td>两边都true才返回true</td>\n</tr>\n<tr>\n<td>||</td>\n<td>“逻辑或”，简称“或” or</td>\n<td>true || true</td>\n<td>有真为真</td>\n</tr>\n<tr>\n<td>!</td>\n<td>“逻辑非”，简称“非” not</td>\n<td>! true</td>\n<td>取反</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1,&amp;&amp;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">3</span> &gt; <span class=\"number\">5</span> &amp;&amp; <span class=\"number\">3</span> &gt; <span class=\"number\">2</span>);<span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">3</span> &lt; <span class=\"number\">5</span> &amp;&amp; <span class=\"number\">3</span> &gt; <span class=\"number\">2</span>);<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"comment\">//2,||</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">3</span> &gt; <span class=\"number\">5</span> || <span class=\"number\">3</span> &gt; <span class=\"number\">2</span>);<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">3</span> &lt; <span class=\"number\">5</span> || <span class=\"number\">3</span> &lt; <span class=\"number\">2</span>);<span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"comment\">//3,!</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(!<span class=\"literal\">true</span>);<span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//逻辑与短路运算 如表达式1结果为真，则返回表达式2，如果表达式1结果为假，则返回表达式1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">123</span> &amp;&amp; <span class=\"number\">456</span>);<span class=\"comment\">//\t456</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">0</span> &amp;&amp; <span class=\"number\">456</span>);<span class=\"comment\">//\t0</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">0</span> &amp;&amp; <span class=\"number\">1</span>+<span class=\"number\">2</span> &amp;&amp; <span class=\"number\">456</span>*<span class=\"number\">789</span>);<span class=\"comment\">//\t0</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;&#x27;</span> &amp;&amp; <span class=\"number\">1</span>+<span class=\"number\">2</span> &amp;&amp; <span class=\"number\">456</span>*<span class=\"number\">789</span>);<span class=\"comment\">//\t&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">//有空的或者否定的是假，其余为真 0 &#x27;&#x27; null undefined NaN</span></span><br><span class=\"line\"><span class=\"comment\">//逻辑或短路运算 如表达式1结果为真，则返回表达式1，如果表达式1结果为假，则返回表达式2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">123</span> || <span class=\"number\">456</span>);<span class=\"comment\">//\t123</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">123</span> || <span class=\"number\">456</span> || <span class=\"number\">456</span>+<span class=\"number\">789</span>);<span class=\"comment\">//\t123</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">0</span> || <span class=\"number\">456</span> || <span class=\"number\">456</span>+<span class=\"number\">789</span>);<span class=\"comment\">//\t456</span></span><br><span class=\"line\"><span class=\"comment\">//逻辑中断很重要，会影响程序运行结果</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">123</span> || num++);<span class=\"comment\">//num++ 运行中断</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(num);<span class=\"comment\">//0</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「赋值运算符」\"><a href=\"#「赋值运算符」\" class=\"headerlink\" title=\"「赋值运算符」\"></a><strong>「赋值运算符」</strong></h2><table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n<th>案例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>=</td>\n<td>直接赋值</td>\n<td>var name = ‘fan’</td>\n</tr>\n<tr>\n<td>+=  -=</td>\n<td>加一个数后在赋值</td>\n<td>var age = 5; age += 5;</td>\n</tr>\n<tr>\n<td>*= /= %=</td>\n<td>乘，除，取模后在赋值</td>\n<td>var age = 5; age *= 5;</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> age = <span class=\"number\">10</span>;</span><br><span class=\"line\">age += <span class=\"number\">5</span>;<span class=\"comment\">//相当于age = age + 5;</span></span><br><span class=\"line\">age -= <span class=\"number\">5</span>;<span class=\"comment\">//age = age - 5;</span></span><br><span class=\"line\">age *= <span class=\"number\">10</span>;<span class=\"comment\">//age = age * 10;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「运算符优先级」\"><a href=\"#「运算符优先级」\" class=\"headerlink\" title=\"「运算符优先级」\"></a><strong>「运算符优先级」</strong></h2><table>\n<thead>\n<tr>\n<th>优先级</th>\n<th>运算符</th>\n<th>顺序</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>小括号</td>\n<td>()</td>\n</tr>\n<tr>\n<td>2</td>\n<td>一元运算符</td>\n<td>! ++ - -</td>\n</tr>\n<tr>\n<td>3</td>\n<td>算数运算符</td>\n<td>先* / % 后+-</td>\n</tr>\n<tr>\n<td>4</td>\n<td>关系运算符</td>\n<td>&gt; &gt;= &lt; &lt;=</td>\n</tr>\n<tr>\n<td>5</td>\n<td>相等运算符</td>\n<td>== != === !=</td>\n</tr>\n<tr>\n<td>6</td>\n<td>逻辑运算符</td>\n<td>先&amp;&amp;后||</td>\n</tr>\n<tr>\n<td>7</td>\n<td>赋值运算符</td>\n<td>=</td>\n</tr>\n<tr>\n<td>8</td>\n<td>逗号运算符</td>\n<td>,</td>\n</tr>\n</tbody></table>\n<ul>\n<li>一元运算符里面逻辑非优先级最高</li>\n<li>与比或高</li>\n</ul>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<h1 id=\"Javascript基础\"><a href=\"#Javascript基础\" class=\"headerlink\" title=\"Javascript基础\"></a>Javascript基础</h1><h2 id=\"编程基础\"><a href=\"#编程基础\" class=\"headerlink\" title=\"编程基础\"></a>编程基础</h2><p><strong>「计算机语言」</strong>分为机器语言，汇编语言，高级语言。计算机内部最终执行的都是机器语言，由<code>0</code>和<code>1</code>这样的二进制数构成。</p>\n<p><strong>「数据存储单位」</strong>8bit(比特) = 1B(Byte)字节  千字节1KB = 1024B</p>\n<p><strong>「翻译器」</strong>高级语言编写的程序不能被计算机识别，需要经过转换，将源代码程序翻译成<code>机器语言</code>才能运行。浏览器里面的js解释器就是这样的一个翻译器。</p>\n<p><strong>「程序运行」</strong></p>\n<ul>\n<li>打开某个程序时，先从硬盘中把程序的代码加载到内存中</li>\n<li>CPU执行内存中的代码</li>\n<li>注意：之所以要内存的一个重要原因，是因为 cpu运行太快了，如果只从硬盘中读数据，会浪费cpu性能，所以，才使用存取速度更快的内存来保存运行时的数据。（内存是电，硬盘是机械）</li>\n</ul>\n<h2 id=\"初识JavaScript\"><a href=\"#初识JavaScript\" class=\"headerlink\" title=\"初识JavaScript\"></a>初识JavaScript</h2><p><strong>「创始人」</strong>布兰登·艾奇(Brendan Eich),起初命名为<code>LiveScript</code>后来与Sun公司合作改名为<code>JavaScript</code>。</p>\n<p><strong>「JavaScript」</strong>运行在客户端的脚本语言，不需要编译，由js解释器(js引擎)逐行解释执行。Node.js也可以用于服务器端编程。</p>\n<p><strong>「JavaScript组成」</strong>ECMAScript(JavaScript语法)、DOM(文档对象模型)、BOM(浏览器对象模型)</p>\n<p><strong>「JavaScript的作用」</strong></p>\n<ul>\n<li>表单动态校验(密码强度检测)</li>\n<li>网页特效</li>\n<li>服务端开发(Node.js)</li>\n<li>桌面程序(Electron)、App(Cordova)、控制硬件-物联网(Ruff)、游戏开发(cocos2d-js)</li>\n</ul>\n<p><strong>「JavaScript书写位置」</strong></p>\n<blockquote>\n<p>JS有3种书写位置，分别为行内、内嵌和外部。</p>\n</blockquote>\n<ol>\n<li><p>行内</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;botton&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;点我试试&quot;</span> </span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">onclick</span>=<span class=\"string\">&quot;alert(&#x27;Helo World!&#x27;)&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>内嵌</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">\talret(<span class=\"string\">&#x27;Hello World!&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>外部</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">引用外部js文件</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;my.js&quot;</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span> </span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><strong>「注释」</strong></p>\n<ol>\n<li><p>单行注释</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 我是单行注释 （ctrl + /）</span></span><br></pre></td></tr></table></figure></li>\n<li><p>多行注释</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  获取用户年龄和姓名</span></span><br><span class=\"line\"><span class=\"comment\">  并通过提示框显示出来</span></span><br><span class=\"line\"><span class=\"comment\">  点击vscode左下角管理-键盘快捷方式-切换块注释</span></span><br><span class=\"line\"><span class=\"comment\">  (默认快捷键 alt + shift + a) 修改为 (ctrl + shift + /)</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"输入和输出语句\"><a href=\"#输入和输出语句\" class=\"headerlink\" title=\"输入和输出语句\"></a>输入和输出语句</h2><table>\n<thead>\n<tr>\n<th>函数</th>\n<th>说明</th>\n<th>归属</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>prompt(‘输入’);</td>\n<td>浏览器弹出输入框</td>\n<td>浏览器</td>\n</tr>\n<tr>\n<td>alert(‘输出’);</td>\n<td>浏览器弹出警示框</td>\n<td>浏览器</td>\n</tr>\n<tr>\n<td>console.log(‘控制台输出’)</td>\n<td>浏览器控制台打印输出信息</td>\n<td>浏览器</td>\n</tr>\n</tbody></table>\n</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"comment\">//输入框</span></span></span><br><span class=\"line\"><span class=\"javascript\">    prompt(<span class=\"string\">&#x27;请输入&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//弹出警示框，输出的展示给用户</span></span></span><br><span class=\"line\"><span class=\"javascript\">    alert(<span class=\"string\">&#x27;计算的结果是&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//控制台输出，给程序员测试用</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;控制台显示&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n\n<h1 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h1><h2 id=\"变量概述\"><a href=\"#变量概述\" class=\"headerlink\" title=\"变量概述\"></a><strong>变量概述</strong></h2><p>变量是程序在内存中申请的一块用于存放数据的空间。变量是用于存放数据的容器，可以通过变量名获取数据，甚至修改数据。</p>\n<p>白话讲，变量就是一个装东西的盒子。</p>\n<h2 id=\"变量的使用\"><a href=\"#变量的使用\" class=\"headerlink\" title=\"变量的使用\"></a>变量的使用</h2><p>变量在使用时分为两步，声明和赋值</p>\n<h3 id=\"「1-声明变量」\"><a href=\"#「1-声明变量」\" class=\"headerlink\" title=\"「1. 声明变量」\"></a><strong>「1. 声明变量」</strong></h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//声明变量</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> age; <span class=\"comment\">//声明一个名称为age的变量</span></span><br></pre></td></tr></table></figure>\n\n<p>var是一个JS关键字，用来声明变量(variable变量的意思)。num是我们定义的变量名，可以通过变量名来访问内存中分配的空间。</p>\n<h3 id=\"「2-赋值」\"><a href=\"#「2-赋值」\" class=\"headerlink\" title=\"「2. 赋值」\"></a><strong>「2. 赋值」</strong></h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">age = <span class=\"number\">10</span>;<span class=\"comment\">//给age变量赋值为10</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"「3-变量的初始化」\"><a href=\"#「3-变量的初始化」\" class=\"headerlink\" title=\"「3. 变量的初始化」\"></a><strong>「3. 变量的初始化」</strong></h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> age = <span class=\"number\">10</span>;<span class=\"comment\">//声明变量并赋值为10</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"小案例\"><a href=\"#小案例\" class=\"headerlink\" title=\"小案例\"></a>小案例</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//声明</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> age;</span><br><span class=\"line\"><span class=\"comment\">//赋值</span></span><br><span class=\"line\">age=<span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"comment\">//输出结果</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(age);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//用户输入姓名，存到一个myname的变量中</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> myname=prompt(<span class=\"string\">&#x27;请输入你的名字&#x27;</span>)；</span><br><span class=\"line\"><span class=\"comment\">//输出这个用户名</span></span><br><span class=\"line\">alert(myname);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"「4-变量语法扩展」\"><a href=\"#「4-变量语法扩展」\" class=\"headerlink\" title=\"「4. 变量语法扩展」\"></a><strong>「4. 变量语法扩展」</strong></h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.一个变量被重新赋值后，它原有的值会被覆盖掉，变量值以最后一次赋的值为准。</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> age=<span class=\"number\">10</span>;</span><br><span class=\"line\">age=<span class=\"number\">18</span>;</span><br><span class=\"line\"><span class=\"comment\">// 2.同时声明多个变量(只需要写一个var,多个变量名之间用英文逗号隔开)</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> num=<span class=\"number\">10</span>,age=<span class=\"number\">18</span>,name=<span class=\"string\">&#x27;name&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>声明变量特殊情况</p>\n<table>\n<thead>\n<tr>\n<th>情况</th>\n<th>说明</th>\n<th>结果</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>var age; console.log(age);</td>\n<td>只声明，不赋值</td>\n<td>undefined</td>\n</tr>\n<tr>\n<td>console.log(age);</td>\n<td>不声明，不赋值，直接使用</td>\n<td>报错</td>\n</tr>\n<tr>\n<td>age=10;console.log(age);</td>\n<td>不声明，只赋值</td>\n<td>10</td>\n</tr>\n</tbody></table>\n<h3 id=\"「5-变量命名规范」\"><a href=\"#「5-变量命名规范」\" class=\"headerlink\" title=\"「5. 变量命名规范」\"></a><strong>「5. 变量命名规范」</strong></h3><p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202205302255403.png\"></p>\n<h3 id=\"小案例-1\"><a href=\"#小案例-1\" class=\"headerlink\" title=\"小案例\"></a>小案例</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//小案例，交换两个变量的值</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> temp;<span class=\"comment\">//引入临时变量</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> apple1=<span class=\"string\">&#x27;青苹果&#x27;</span>,apple2=<span class=\"string\">&#x27;红苹果&#x27;</span>；</span><br><span class=\"line\">temp=apple1;</span><br><span class=\"line\">apple1=apple2;</span><br><span class=\"line\">apple2=temp;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(apple1);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(apple2);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h1><p>分为两类：简单数据类型(Number,String,Boolean,Undefined,Null)和复杂数据类型(object)。</p>\n<table>\n<thead>\n<tr>\n<th>简单数据类型</th>\n<th>说明</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Number</td>\n<td>数字型，包含整数和浮点数</td>\n<td>0</td>\n</tr>\n<tr>\n<td>String</td>\n<td>字符串类型</td>\n<td>“ ”</td>\n</tr>\n<tr>\n<td>Boolean</td>\n<td>布尔值类型</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Undefined</td>\n<td>声明但不赋值，a=undefined</td>\n<td>undefined</td>\n</tr>\n<tr>\n<td>Null</td>\n<td>var a=null; 声明a为空值</td>\n<td>null</td>\n</tr>\n</tbody></table>\n<h2 id=\"Number数字型\"><a href=\"#Number数字型\" class=\"headerlink\" title=\"Number数字型\"></a>Number数字型</h2><h3 id=\"「数字型进制」\"><a href=\"#「数字型进制」\" class=\"headerlink\" title=\"「数字型进制」\"></a><strong>「数字型进制」</strong></h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.在JS中八进制前面加0，十六进制前面加 0x</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> num1 = <span class=\"number\">07</span>;   <span class=\"comment\">// 对应十进制的7</span></span><br><span class=\"line\"><span class=\"comment\">// 2.十六进制数字序列范围：0~9以及A~F</span></span><br><span class=\"line\"> <span class=\"keyword\">var</span> num = <span class=\"number\">0xA</span>; <span class=\"comment\">//对应十进制10</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"「数字型范围」\"><a href=\"#「数字型范围」\" class=\"headerlink\" title=\"「数字型范围」\"></a><strong>「数字型范围」</strong></h3><p>JavaScript中的数值有最大值和最小值</p>\n<ul>\n<li>最大值:<code>Number.MAX_VALUE</code>，值为：1.7976931348623157e+308</li>\n<li>最小值:<code>Number.MIN_VALUE</code>，值为：5e-32</li>\n<li>特殊值：<code>Infinity</code> 无穷大 <code>-Infinity</code> 无穷小 <code>NaN</code> 代表一个非数字（not a number）</li>\n<li>isNaN(): 用来判断一个变量是否为非数字的类型。非数字型为true,数字型为false。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.MAX_VALUE);<span class=\"comment\">//数字的最大值</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.MIN_VALUE);<span class=\"comment\">//数字的最小值</span></span><br><span class=\"line\"><span class=\"comment\">//无穷大</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.MAX_VALUE*<span class=\"number\">2</span>);<span class=\"comment\">//Infinity 无穷大</span></span><br><span class=\"line\"><span class=\"comment\">//无穷小</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.MIN_VALUE*<span class=\"number\">2</span>);<span class=\"comment\">//-Infinity 无穷小</span></span><br><span class=\"line\"><span class=\"comment\">//非数字</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;pink老师&#x27;</span>-<span class=\"number\">100</span>)；<span class=\"comment\">//NaN</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> usrage = <span class=\"number\">21</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> isOK = <span class=\"built_in\">isNaN</span>(usrage);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isOK); <span class=\"comment\">//false 21不是一个非数字</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> usrname = <span class=\"string\">&quot;andy&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">isNaN</span>(usrname));<span class=\"comment\">//true &quot;andy&quot;是一个非数字</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"String字符串型\"><a href=\"#String字符串型\" class=\"headerlink\" title=\"String字符串型\"></a>String字符串型</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.字符串型可以是引号中的任意文本，语法为 单引号 和 双引号</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> msg = <span class=\"string\">&#x27;我的名字叫&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&quot;fan&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>由于HTML标签属性是双引号，这里推荐使用单引号，常见错误未使用引号，会被认定是js代码，但js没有这些语法。</p>\n<h3 id=\"「字符串引号嵌套」\"><a href=\"#「字符串引号嵌套」\" class=\"headerlink\" title=\"「字符串引号嵌套」\"></a><strong>「字符串引号嵌套」</strong></h3><p>js可以使用单引号套双引号，或者使用双引号套单引号（外双内单，外单内双）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str1=<span class=\"string\">&quot;我是&#x27;程序员&#x27;&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str2=<span class=\"string\">&#x27;我是&quot;程序员&quot;&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">//常见错误</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str3=<span class=\"string\">&#x27;我是程序员&quot;;//报错，不能单双引号搭配</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"「1-字符串转义符」\"><a href=\"#「1-字符串转义符」\" class=\"headerlink\" title=\"「1. 字符串转义符」\"></a><strong>「1. 字符串转义符」</strong></h3><p>都是以 \\ 开头，详细如下</p>\n<table>\n<thead>\n<tr>\n<th>转义符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>\\n</td>\n<td>换行符，n是newline的意思</td>\n</tr>\n<tr>\n<td>\\ \\</td>\n<td>斜杠\\</td>\n</tr>\n<tr>\n<td>\\ ‘</td>\n<td>单引号‘</td>\n</tr>\n<tr>\n<td>\\ “</td>\n<td>双引号 “</td>\n</tr>\n<tr>\n<td>\\t</td>\n<td>tab缩进</td>\n</tr>\n<tr>\n<td>\\b</td>\n<td>空格，b是blank 的意思</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//字符串转义字符，都是\\开头，写在引号里面</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str=<span class=\"string\">&quot;我是\\n程序员&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"「2-字符串长度」\"><a href=\"#「2-字符串长度」\" class=\"headerlink\" title=\"「2. 字符串长度」\"></a><strong>「2. 字符串长度」</strong></h3><p>  字符串是由若干字符组成的，这些字符的数量就是字符串的长度，通过length属性可以获取整个字符串长度。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str=<span class=\"string\">&#x27;我是程序员&#x27;</span>;</span><br><span class=\"line\">alert(str.length);<span class=\"comment\">//显示5</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"「3-字符串拼接」\"><a href=\"#「3-字符串拼接」\" class=\"headerlink\" title=\"「3. 字符串拼接」\"></a><strong>「3. 字符串拼接」</strong></h3><ul>\n<li>  多个字符串之间可以使用 + 进行拼接，其拼接方式为 字符串 + 任何类型 = 拼接之后的新字符串。</li>\n<li>  拼接前会把与字符串相加的任何类型转成字符串，再拼接成一个新的字符串</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1.1 字符串 &quot;相加&quot;</span></span><br><span class=\"line\">alert(<span class=\"string\">&#x27;hello&#x27;</span> + <span class=\"string\">&#x27; &#x27;</span> + <span class=\"string\">&#x27;world&#x27;</span>); <span class=\"comment\">// hello world</span></span><br><span class=\"line\"><span class=\"comment\">//1.2 数值字符串 &quot;相加&quot;</span></span><br><span class=\"line\">alert(<span class=\"string\">&#x27;100&#x27;</span> + <span class=\"string\">&#x27;100&#x27;</span>); <span class=\"comment\">// 100100</span></span><br><span class=\"line\"><span class=\"comment\">//1.3 数值字符串 + 数值</span></span><br><span class=\"line\">alert(<span class=\"string\">&#x27;11&#x27;</span> + <span class=\"number\">12</span>);     <span class=\"comment\">// 1112 +号口诀：数值相加，字符相连</span></span><br><span class=\"line\"><span class=\"comment\">//1.4 数值相加</span></span><br><span class=\"line\">alert(<span class=\"number\">12</span>+<span class=\"number\">12</span>); <span class=\"comment\">//24</span></span><br><span class=\"line\"><span class=\"comment\">// 1.5 字符串拼接加强</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> age = <span class=\"number\">18</span>;</span><br><span class=\"line\">alert(<span class=\"string\">&quot;你&quot;</span> + age +<span class=\"string\">&quot;岁了&quot;</span>); <span class=\"comment\">//变量和字符串引引加加</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>+号口诀：数值相加，字符相连</strong></p>\n<h3 id=\"案例：字符串拼接加强\"><a href=\"#案例：字符串拼接加强\" class=\"headerlink\" title=\"案例：字符串拼接加强\"></a>案例：字符串拼接加强</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//弹出一个输入框，输入年宁</span></span><br><span class=\"line\"><span class=\"comment\">//把输入年龄与字符串相接</span></span><br><span class=\"line\"><span class=\"comment\">//输出结果</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> age=prompt(<span class=\"string\">&#x27;请输入年龄&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> str=<span class=\"string\">&#x27;您今年已经&#x27;</span>+ age + <span class=\"string\">&#x27;岁了&#x27;</span>;</span><br><span class=\"line\">alert(str);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Boolean布尔型\"><a href=\"#Boolean布尔型\" class=\"headerlink\" title=\"Boolean布尔型\"></a>Boolean布尔型</h2><p>  布尔类型有两个值：true 和 false ，其中 true 表示真（对），而 false 表示假（错）。<br>  布尔型和数字型相加的时候， true 的值为 1 ，false 的值为 0。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"literal\">true</span> + <span class=\"number\">1</span>); <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"literal\">false</span> + <span class=\"number\">1</span>); <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Undefined-和-Null\"><a href=\"#Undefined-和-Null\" class=\"headerlink\" title=\"Undefined 和 Null\"></a>Undefined 和 Null</h2><p>  一个变量声明后没有赋值会有一个默认值undefined（如果相连或者相加时，注意结果）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> variable;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(variable); <span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;你好&quot;</span> + variable); <span class=\"comment\">// 你好undefined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">11</span> + variable); <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"literal\">true</span> + variable);<span class=\"comment\">// NaN</span></span><br></pre></td></tr></table></figure>\n\n<p>  一个变量声明并赋值null,里面存的值为空</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> var2 = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(var2); <span class=\"comment\">// null</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;你好&quot;</span> + var2); <span class=\"comment\">// 你好null</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">11</span> + var2); <span class=\"comment\">// 11</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"literal\">true</span> + var2);<span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"获取变量类型及转换\"><a href=\"#获取变量类型及转换\" class=\"headerlink\" title=\"获取变量类型及转换\"></a>获取变量类型及转换</h2><h3 id=\"「获取变量类型」\"><a href=\"#「获取变量类型」\" class=\"headerlink\" title=\"「获取变量类型」\"></a><strong>「获取变量类型」</strong></h3><ul>\n<li> 检测变量的数据类型语法<code>typeof</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> num);<span class=\"comment\">//结果为 number</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;pink&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> str);<span class=\"comment\">//结果为 string</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> flag = <span class=\"string\">&#x27;true&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> flog);<span class=\"comment\">//结果为 boolean</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> vari = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> vari);<span class=\"comment\">//结果为 undefined</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> timer); <span class=\"comment\">//结果为 object</span></span><br><span class=\"line\"><span class=\"comment\">//prompt 取过来的值是字符型的</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> age = prompt(<span class=\"string\">&#x27;请输入年龄&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(age);</span><br><span class=\"line\">conloge.log(<span class=\"keyword\">typeof</span> age);</span><br></pre></td></tr></table></figure>\n\n<p><strong>prompt 取过来的值是字符型的</strong></p>\n<p><code>字面量</code>:是源代码中一个固定值的表示法，就是字面量如何去表达这个值。通过数据的格式特征可以判断数据的类型</p>\n<ul>\n<li>有数字字面量:8,9,10</li>\n<li>字符串字面量:’饭老板’，”前端开发”</li>\n<li>布尔字面量:true,false</li>\n</ul>\n<h3 id=\"「数据类型转换」\"><a href=\"#「数据类型转换」\" class=\"headerlink\" title=\"「数据类型转换」\"></a><strong>「数据类型转换」</strong></h3><h4 id=\"转换为字符串\"><a href=\"#转换为字符串\" class=\"headerlink\" title=\"转换为字符串\"></a>转换为字符串</h4><table>\n<thead>\n<tr>\n<th>方式</th>\n<th>说明</th>\n<th>案例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>toString()</td>\n<td>转换成字符型</td>\n<td></td>\n</tr>\n<tr>\n<td>String()</td>\n<td>强制转换</td>\n<td></td>\n</tr>\n<tr>\n<td>加号拼接字符串</td>\n<td>和字符型拼接的结果都是字符型</td>\n<td></td>\n</tr>\n</tbody></table>\n<p>toString()和String()使用方式不一样</p>\n<p><strong>三种转换方式更喜欢用第三种，被称为隐式转换</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1,数字型转换字符串 变量.toString()</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = num.toString();</span><br><span class=\"line\"><span class=\"built_in\">console</span>,log(str);</span><br><span class=\"line\"><span class=\"built_in\">console</span>,log(<span class=\"keyword\">typeof</span> str);</span><br><span class=\"line\"><span class=\"comment\">//2，String()</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"built_in\">String</span>(num);</span><br><span class=\"line\"><span class=\"built_in\">console</span>,log(<span class=\"keyword\">typeof</span> str);</span><br><span class=\"line\"><span class=\"comment\">//3，加号拼接字符串</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(num + <span class=\"string\">&#x27;&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"转换为数字型\"><a href=\"#转换为数字型\" class=\"headerlink\" title=\"转换为数字型\"></a>转换为数字型</h4><table>\n<thead>\n<tr>\n<th>方式</th>\n<th>说明</th>\n<th>案例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>parseInt(String)函数</td>\n<td>转化为整数型</td>\n<td></td>\n</tr>\n<tr>\n<td>parseFloat(String)函数</td>\n<td>转化为浮点型</td>\n<td></td>\n</tr>\n<tr>\n<td>Number()强制转换函数</td>\n<td>强制转换数值型</td>\n<td></td>\n</tr>\n<tr>\n<td>js隐式转换（- * /)</td>\n<td>算数因算符转换数值</td>\n<td></td>\n</tr>\n</tbody></table>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1，parseInt(变量) 得到的是整数</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">parseInt</span>(<span class=\"string\">&#x27;3.14&#x27;</span>));<span class=\"comment\">//3 取整</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">parseInt</span>(<span class=\"string\">&#x27;3.93&#x27;</span>));<span class=\"comment\">//3 取整</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">parseInt</span>(<span class=\"string\">&#x27;120px&#x27;</span>));<span class=\"comment\">//120 会去掉px单位</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">parseInt</span>(<span class=\"string\">&#x27;rem120px&#x27;</span>));<span class=\"comment\">//NaN</span></span><br><span class=\"line\"><span class=\"comment\">//2，parseFloat(变量) 得到的是浮点数</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">parseFloat</span>(<span class=\"string\">&#x27;3.14&#x27;</span>));<span class=\"comment\">//3.14</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">parseFloat</span>(<span class=\"string\">&#x27;120px&#x27;</span>));<span class=\"comment\">//120 去掉单位</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">parseFloat</span>(<span class=\"string\">&#x27;rem120px&#x27;</span>));<span class=\"comment\">//NaN</span></span><br><span class=\"line\"><span class=\"comment\">//3，Number(变量)</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;123&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>(str));<span class=\"comment\">//123</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>(<span class=\"string\">&#x27;12&#x27;</span>));<span class=\"comment\">//12</span></span><br><span class=\"line\"><span class=\"comment\">//4，利用算数运算符</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;12&#x27;</span>-<span class=\"number\">0</span>);<span class=\"comment\">//12</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;123&#x27;</span>-<span class=\"string\">&#x27;120&#x27;</span>);<span class=\"comment\">//3</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;123&#x27;</span>*<span class=\"number\">1</span>);<span class=\"comment\">//123</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"案例：简单加法器\"><a href=\"#案例：简单加法器\" class=\"headerlink\" title=\"案例：简单加法器\"></a>案例：简单加法器</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num1 = prompt(<span class=\"string\">&#x27;请输入第一个数&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> num2 = prompt(<span class=\"string\">&#x27;请输入第二个数&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = <span class=\"built_in\">parseFloat</span>(num1) + <span class=\"built_in\">parseFloat</span>(num2);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;您的结果是&#x27;</span> + result);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"案例：计算年龄\"><a href=\"#案例：计算年龄\" class=\"headerlink\" title=\"案例：计算年龄\"></a>案例：计算年龄</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> year = prompt(<span class=\"string\">&#x27;请输入生日年份&#x27;</span>)；</span><br><span class=\"line\"><span class=\"keyword\">var</span> age = <span class=\"number\">2022</span> - year; <span class=\"comment\">//隐式转换</span></span><br><span class=\"line\">alert(<span class=\"string\">&#x27;你的年龄&#x27;</span>+ age + <span class=\"string\">&#x27;岁了&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"转换为布尔型\"><a href=\"#转换为布尔型\" class=\"headerlink\" title=\"转换为布尔型\"></a>转换为布尔型</h4><ol>\n<li>代表空、否定的值会被转换为false，如’ ‘、0、NaN、null、undefined </li>\n<li>其余值都会被转换为true。</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>方式</th>\n<th>说明</th>\n<th>案例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Boolean()函数</td>\n<td>其他类型转换布尔型</td>\n<td>Boolean(‘true’)</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Boolean</span>(<span class=\"string\">&#x27;&#x27;</span>));<span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Boolean</span>(<span class=\"number\">0</span>));<span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Boolean</span>(<span class=\"literal\">NaN</span>));<span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Boolean</span>(<span class=\"literal\">null</span>));<span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Boolean</span>(<span class=\"literal\">undefined</span>));<span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Boolean</span>(<span class=\"string\">&#x27;小白&#x27;</span>));<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Boolean</span>(<span class=\"string\">&#x27;12&#x27;</span>));<span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"关键字和保留字\"><a href=\"#关键字和保留字\" class=\"headerlink\" title=\"关键字和保留字\"></a>关键字和保留字</h1><p><strong>「标识符」</strong>指开发人员为变量、属性、函数、参数取得名字。标识符不能是关键字或保留字。</p>\n<p><strong>「关键字」</strong>指 JS本身已经使用了的字，不能再用它们充当变量名、方法名</p>\n<blockquote>\n<p>包括：break、case、catch、continue、default、delete、do、else、finally、for、function、if、in、instanceof、new、return、switch、this、throw、try、typeof、var、void、while、with 等。</p>\n</blockquote>\n<p><strong>「保留字」</strong>实际上就是预留的“关键字”，意思是现在虽然还不是关键字，但是未来可能会成为关键字，同样不能使用它们当变量名或方法名。</p>\n<blockquote>\n<p>boolean、byte、char、class、const、debugger、double、enum、export、extends、fimal、float、goto、implements、import、int、interface、long、mative、package、private、protected、public、short、static、super、synchronized、throws、transient、volatile 等。</p>\n<p>注意：如果将保留字用作变量名或函数名，那么除非将来的浏览器实现了该保留字，否则很可能收不到任何错误消息。当浏览器将其实现后，该单词将被看做关键字，如此将出现关键字错误。</p>\n</blockquote>\n<h1 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h1><h2 id=\"「运算符」\"><a href=\"#「运算符」\" class=\"headerlink\" title=\"「运算符」\"></a><strong>「运算符」</strong></h2><p>是用于实现赋值、比较和执行算数运算等功能的符号。常用运算符分类如下</p>\n<ul>\n<li>算数运算符</li>\n<li>递增和递减运算符</li>\n<li>比较运算符</li>\n<li>逻辑运算符</li>\n<li>赋值运算符</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n<th>案例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>+</td>\n<td>加</td>\n<td>10+20=30</td>\n</tr>\n<tr>\n<td>-</td>\n<td>减</td>\n<td>10-20=-10</td>\n</tr>\n<tr>\n<td>*</td>\n<td>乘</td>\n<td>10*20=200</td>\n</tr>\n<tr>\n<td>/</td>\n<td>除</td>\n<td>10/20=0.5</td>\n</tr>\n<tr>\n<td>%</td>\n<td>取余（取模）</td>\n<td>返回除法的余数9%2=1</td>\n</tr>\n</tbody></table>\n<h3 id=\"浮点数的精度问题\"><a href=\"#浮点数的精度问题\" class=\"headerlink\" title=\"浮点数的精度问题\"></a>浮点数的精度问题</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">var</span> result = <span class=\"number\">0.1</span> + <span class=\"number\">0.2</span>;    <span class=\"comment\">// 结果不是 0.3，而是：0.30000000000000004</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">0.07</span> * <span class=\"number\">100</span>);   <span class=\"comment\">// 结果不是 7，  而是：7.000000000000001</span></span><br><span class=\"line\"><span class=\"comment\">//浮点数不能用来比较是否相等</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">0.1</span> + <span class=\"number\">0.2</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(num == <span class=\"number\">0.3</span>);<span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n\n<p>浮点数值的最高精度是17位小数，但是在进行算数运算时其精确度远远不如整数,所以不要直接判断两个浮点数是否相等!</p>\n<h3 id=\"表达式与返回值\"><a href=\"#表达式与返回值\" class=\"headerlink\" title=\"表达式与返回值\"></a><strong>表达式与返回值</strong></h3><ol>\n<li>表达式：由数字、运算符和变量组成的式子。</li>\n<li>返回值：每一个表达式经过相应的运算之后，会有一个最终结果，称为表达式的返回值</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>+<span class=\"number\">1</span>);<span class=\"comment\">//2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>-<span class=\"number\">1</span>);<span class=\"comment\">//0</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>*<span class=\"number\">1</span>);<span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>/<span class=\"number\">1</span>);<span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"comment\">//取余</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>%<span class=\"number\">2</span>);<span class=\"comment\">//0</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.lpg(<span class=\"number\">5</span>%<span class=\"number\">3</span>);<span class=\"comment\">//2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>%<span class=\"number\">5</span>);<span class=\"comment\">//3</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>+<span class=\"number\">1</span>);<span class=\"comment\">//2为返回值</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">1</span> + <span class=\"number\">1</span>;<span class=\"comment\">//右边表达式计算完毕把返回值给左边</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「递增和递减运算符」\"><a href=\"#「递增和递减运算符」\" class=\"headerlink\" title=\"「递增和递减运算符」\"></a><strong>「递增和递减运算符」</strong></h2><p>  反复给变量增加或减去1，可以使用递增（++）或递减（- -）运算符，分为前置和后置，必须配合变量使用。</p>\n<ul>\n<li>递增运算符</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//前置递增 </span></span><br><span class=\"line\"><span class=\"keyword\">var</span>  num = <span class=\"number\">10</span>;</span><br><span class=\"line\">alert(++num + <span class=\"number\">10</span>);   <span class=\"comment\">// 21 使用口诀：先自加，后返回值</span></span><br><span class=\"line\"> <span class=\"comment\">//后置递增 </span></span><br><span class=\"line\"><span class=\"keyword\">var</span>  num1 = <span class=\"number\">10</span>;</span><br><span class=\"line\">alert(<span class=\"number\">10</span> + num1++);  <span class=\"comment\">// 20 使用口诀：先返回原值，后自加 </span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> num2 = ++num + num++; <span class=\"comment\">//num = 2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(num2);<span class=\"comment\">//4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> num1 = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> num2 = num++ + num1++; <span class=\"comment\">// 1 + 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(num2);<span class=\"comment\">//2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> num2 = num++ + num++;<span class=\"comment\">// 1 + 2 </span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(num2); <span class=\"comment\">// 3  </span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「比较运算符」\"><a href=\"#「比较运算符」\" class=\"headerlink\" title=\"「比较运算符」\"></a><strong>「比较运算符」</strong></h2><p>返回的是布尔值（true || false）</p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n<th>案例</th>\n<th>结果</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&lt;</td>\n<td>小于号</td>\n<td>1&lt;2</td>\n<td>true</td>\n</tr>\n<tr>\n<td>&gt;</td>\n<td>大于号</td>\n<td>1&gt;2</td>\n<td>false</td>\n</tr>\n<tr>\n<td>&gt;=</td>\n<td>大于等于号</td>\n<td>2 &gt;= 2</td>\n<td>true</td>\n</tr>\n<tr>\n<td>&lt;=</td>\n<td>小于等于号</td>\n<td>3 &lt;= 2</td>\n<td>false</td>\n</tr>\n<tr>\n<td>==</td>\n<td>等判号（会转型）</td>\n<td>15 == ‘15’</td>\n<td>true</td>\n</tr>\n<tr>\n<td>!=</td>\n<td>不等号</td>\n<td>37 != 37</td>\n<td>false</td>\n</tr>\n<tr>\n<td>===</td>\n<td>全等</td>\n<td>37 === ‘37’</td>\n<td>false</td>\n</tr>\n<tr>\n<td>!===</td>\n<td>全不等</td>\n<td>37 !=== ‘37’</td>\n<td>true</td>\n</tr>\n</tbody></table>\n<p>注意：</p>\n<ul>\n<li>==判断两边值是否相等（有隐式转换）</li>\n<li>===判断两边值和数据类型是否完全相同</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//==默认转换数字类型，会把字符串型转换成数字型，要求值相等即可</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">3</span> == <span class=\"number\">5</span>);<span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;pink&#x27;</span> == <span class=\"string\">&#x27;我&#x27;</span>);<span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">18</span> == <span class=\"number\">18</span>);<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">18</span> == <span class=\"string\">&#x27;18&#x27;</span>);<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">18</span> != <span class=\"number\">18</span>);<span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"comment\">//===要求值和数据类型完全一样</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">18</span> === <span class=\"number\">18</span>);<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">18</span> === <span class=\"string\">&#x27;18&#x27;</span>);<span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「逻辑运算符」\"><a href=\"#「逻辑运算符」\" class=\"headerlink\" title=\"「逻辑运算符」\"></a><strong>「逻辑运算符」</strong></h2><p>  逻辑运算符是用来进行布尔值运算的运算符<br>  短路运算:当有多个表达式（值）时,左边的表达式值可以确定结果时,就不再继续运算右边的表达式的值;</p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n<th>案例</th>\n<th>特点</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&amp;&amp;</td>\n<td>“逻辑与”，简称“与” and</td>\n<td>true &amp;&amp; false</td>\n<td>两边都true才返回true</td>\n</tr>\n<tr>\n<td>||</td>\n<td>“逻辑或”，简称“或” or</td>\n<td>true || true</td>\n<td>有真为真</td>\n</tr>\n<tr>\n<td>!</td>\n<td>“逻辑非”，简称“非” not</td>\n<td>! true</td>\n<td>取反</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1,&amp;&amp;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">3</span> &gt; <span class=\"number\">5</span> &amp;&amp; <span class=\"number\">3</span> &gt; <span class=\"number\">2</span>);<span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">3</span> &lt; <span class=\"number\">5</span> &amp;&amp; <span class=\"number\">3</span> &gt; <span class=\"number\">2</span>);<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"comment\">//2,||</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">3</span> &gt; <span class=\"number\">5</span> || <span class=\"number\">3</span> &gt; <span class=\"number\">2</span>);<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">3</span> &lt; <span class=\"number\">5</span> || <span class=\"number\">3</span> &lt; <span class=\"number\">2</span>);<span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"comment\">//3,!</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(!<span class=\"literal\">true</span>);<span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//逻辑与短路运算 如表达式1结果为真，则返回表达式2，如果表达式1结果为假，则返回表达式1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">123</span> &amp;&amp; <span class=\"number\">456</span>);<span class=\"comment\">//\t456</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">0</span> &amp;&amp; <span class=\"number\">456</span>);<span class=\"comment\">//\t0</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">0</span> &amp;&amp; <span class=\"number\">1</span>+<span class=\"number\">2</span> &amp;&amp; <span class=\"number\">456</span>*<span class=\"number\">789</span>);<span class=\"comment\">//\t0</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;&#x27;</span> &amp;&amp; <span class=\"number\">1</span>+<span class=\"number\">2</span> &amp;&amp; <span class=\"number\">456</span>*<span class=\"number\">789</span>);<span class=\"comment\">//\t&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">//有空的或者否定的是假，其余为真 0 &#x27;&#x27; null undefined NaN</span></span><br><span class=\"line\"><span class=\"comment\">//逻辑或短路运算 如表达式1结果为真，则返回表达式1，如果表达式1结果为假，则返回表达式2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">123</span> || <span class=\"number\">456</span>);<span class=\"comment\">//\t123</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">123</span> || <span class=\"number\">456</span> || <span class=\"number\">456</span>+<span class=\"number\">789</span>);<span class=\"comment\">//\t123</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">0</span> || <span class=\"number\">456</span> || <span class=\"number\">456</span>+<span class=\"number\">789</span>);<span class=\"comment\">//\t456</span></span><br><span class=\"line\"><span class=\"comment\">//逻辑中断很重要，会影响程序运行结果</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">123</span> || num++);<span class=\"comment\">//num++ 运行中断</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(num);<span class=\"comment\">//0</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「赋值运算符」\"><a href=\"#「赋值运算符」\" class=\"headerlink\" title=\"「赋值运算符」\"></a><strong>「赋值运算符」</strong></h2><table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n<th>案例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>=</td>\n<td>直接赋值</td>\n<td>var name = ‘fan’</td>\n</tr>\n<tr>\n<td>+=  -=</td>\n<td>加一个数后在赋值</td>\n<td>var age = 5; age += 5;</td>\n</tr>\n<tr>\n<td>*= /= %=</td>\n<td>乘，除，取模后在赋值</td>\n<td>var age = 5; age *= 5;</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> age = <span class=\"number\">10</span>;</span><br><span class=\"line\">age += <span class=\"number\">5</span>;<span class=\"comment\">//相当于age = age + 5;</span></span><br><span class=\"line\">age -= <span class=\"number\">5</span>;<span class=\"comment\">//age = age - 5;</span></span><br><span class=\"line\">age *= <span class=\"number\">10</span>;<span class=\"comment\">//age = age * 10;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「运算符优先级」\"><a href=\"#「运算符优先级」\" class=\"headerlink\" title=\"「运算符优先级」\"></a><strong>「运算符优先级」</strong></h2><table>\n<thead>\n<tr>\n<th>优先级</th>\n<th>运算符</th>\n<th>顺序</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>小括号</td>\n<td>()</td>\n</tr>\n<tr>\n<td>2</td>\n<td>一元运算符</td>\n<td>! ++ - -</td>\n</tr>\n<tr>\n<td>3</td>\n<td>算数运算符</td>\n<td>先* / % 后+-</td>\n</tr>\n<tr>\n<td>4</td>\n<td>关系运算符</td>\n<td>&gt; &gt;= &lt; &lt;=</td>\n</tr>\n<tr>\n<td>5</td>\n<td>相等运算符</td>\n<td>== != === !=</td>\n</tr>\n<tr>\n<td>6</td>\n<td>逻辑运算符</td>\n<td>先&amp;&amp;后||</td>\n</tr>\n<tr>\n<td>7</td>\n<td>赋值运算符</td>\n<td>=</td>\n</tr>\n<tr>\n<td>8</td>\n<td>逗号运算符</td>\n<td>,</td>\n</tr>\n</tbody></table>\n<ul>\n<li>一元运算符里面逻辑非优先级最高</li>\n<li>与比或高</li>\n</ul>\n"},{"title":"Javascript数组","date":"2022-06-05T16:00:00.000Z","updated":"2022-06-06T16:00:00.000Z","keywords":null,"description":null,"top_img":"./img/bg12.jpg","cover":"./img/bg12.jpg","_content":"# **「1. 数组的概念」** \n\n\n\n一组数据的集合，其中的每个数据被称作`元素`，在数组中可以存放任意类型的元素。数组是一种将一组数据存储在单个变量名下的优雅方式。数组中可以存放任意类型的数据\n\n# **「2. 创建数组」**\n\n- 利用new关键字创建数组\n\n```js\nvar 数组名 = new Array([n]);//[]代表可选 若写n，则代表数组的长度\nvar arr = new Array();//创建了一个名为 arr 的空数组\n```\n\n\n\n- 利用数组字面量创建数组\n\n```js\n// 1. 使用数组字面量方式创建空的数组\nvar 数组名 = [];//若写n，则代表数组的长度\n    \n//2. 使用数组字面量方式创建带初始值的数组\n//3. 声明数组并赋值称为数组的初始化\nvar arr =['1','2','3','4'];\nvar arr2 = ['fan',true,17.5];//数组中可以存放任意类型的数据\n```\n\n\n\n# **「3. 访问数组元素」**\n\n索引(下标):用来访问数组元素的序号。索引从 `0` 开始\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206070836311.png)\n\n```js\n// 定义数组\nvar arrStus = [1,2,3];\n// 获取数组中的第2个元素 \nalert(arrStus[1]); \n// 如果访问数组时没有和索引值对应的元素(数组越界)，\n// 返回值为undefined\n```\n\n# **「4. 遍历数组」**\n\n把数组中的元素从头到尾都访问一次。\n\n```js\nvar arr = ['red','green','blue'];\nfor (var i = 0; i < 3; i++) {\n    console.log(arr[i]);\n}\n//1.数组索引号从零开始，所以i必须从零开始\n//2.输出结果的时候 arr[i]， i 计数器当索引号使用\n```\n\n# **「5.数组长度」**\n\n```js\n// 数组名.length\nvar arr = ['甲','乙','丙','戍','己','庚','辛'];\nfor (var i = 0; i < 7; i++) {\n    console.log(arr[i]);\n}\nconsole.log(arr.length);\nfor (var i = 0; i < arr.length; i++) {\n    console.log(arr[i]);\n}\n//1. 数组的长度是元素个数，不要跟索引号混淆\n//2. arr.length 动态监测数组元素个数\n\n```\n\n## 案例：求数组中最大值\n\n```js\n//求数组中最大值\n//声明一个保存最大元素的变量max\n//默认最大值可取数组中第一个元素\n//遍历这个数组，把里面的每个元素与max比较\n//如果该数组元素大于max，把这个元素保存到max里面\n//最后输出max\nvar arr = ['2','6','1','77','52','25','7'];\nvar max = arr[0];\nfor (var i = 1; i < arr.length; i++) {\n    if (arr[i] > arr[0]) {\n        max = arr[i];\n    }\n}\nconsole.log('该数组中最大的是' + max);\n```\n\n## 案例：数组转换为字符串\n\n```js\n//将数组转换为字符串，并用*分割\n//1.需要一个新变量存放转换完成的字符串\n//2.遍历原来的数组，分别把里面的数组元素取出来，加到字符串里面\n//3.同时在后面多加一个*\nvar arr = ['red','green','blue','pink'];\nvar str = '';\nvar sep = '*';\nfor (var i = 0; i < arr.length; i++) {\n    str += arr[i] + sep;\n}\nconsole.log(str);\n```\n\n\n\n# **「6.数组新增元素」**\n\n可以通过修改length长度以及索引号增加数组元素\n\n- **「修改length属性」**\n\n```js\n// 1.新增数组元素，修改length长度\nvar arr = ['red','green','blue'];\nconsole.log(arr.length);\narr.length = 5; // 把数组元素长度修改为5，里面应该有5个元素\nconsole.log(arr[3]);\nconsole.log(arr[3]); // 新增空间没有给值，所以是undefined\nconsole.log(arr[4]); // undefined\n```\n\n- **「修改数组索引」**\n\n```js\n// 2.新增数组元素，修改索引号，追加数组元素\nvar arr1 = ['red','green','blue'];\narr1[3] = 'pink';\nconsole.log(arr1);\narr1[4] = 'hotpink';\nconsole.log(arr1);\narr1[0] = 'yellow'; // 这里是替换原来的数组元素\nconsole.log(arr1);\narr1 = '有点意思';\nconsole.log(arr1); // 不要直接给数组名赋值，会覆盖掉以前的数据，数组里面的数组元素都没有了\n```\n\n\n\n## 案例：数组中存放1-100个值\n\n```js\n//新建一数组，存放1-100个值\n//核心原理：使用循环追加数组\n//1.声明一个空数组 arr\n//2.循环中计数器 i 可作为数组元素存入\n//3.由于数组索引号是从0开始，因此计数器从0开始合适，存入的数组元素需要 + 1\nvar arr = [];\nfor (var i = 0; i < 100; i++) {\n    arr[i] = i + 1;\n}\nconsole.log(arr);\n```\n\n## 案例：筛选数组\n\n```js\n//将数组['2','0','6','1','77','0','52','0','25','7','6']中大于等于10 的元素选出来放入新数组\n// 1.声明一个新的数组用于存放新数据 newArr\n// 2.遍历原来旧的数组，找出大于等于 10 的元素\n// 3.依次追加给新数组 newArr\nvar arr = ['2','0','6','1','77','0','52','0','25','7','6'];\nvar newArr = [];\nvar j = 0;\nfor (var i = 0; i < arr.length; i++) {\n    if (arr[i] >= 10) {\n        // 新数组索引号从0开始，依次递增\n        newArr[j] = arr[i];\n        j++;\n    }\n}\nconsole.log(newArr);\n// 方法二\nvar arr = ['2','0','6','1','77','0','52','0','25','7','6'];\nvar newArr = [];\n// 刚开始 newArr.length 就是0\nfor (var i = 0; i < arr.length; i++) {\n    if (arr[i] >= 10) {\n        // 新数组索引号应该从0开始，依次递增\n        newArr[newArr.length] = arr[i];\n    }\n}\nconsole.log(newArr);\n```\n\n## 案例：翻转数组\n\n```js\n//将数组\n// 1.声明一个新数组 newArr\n// 2.把旧数组索引号4个取过来（arr.length - 1），给新数组索引号第0个元素（newArr.length）\n// 3.采用递减的方式 i++\nvar arr = ['red','green','blue','pink','purple'];\nvar newArr[];\nfor (var i = arr.length - 1; i >= 0; i--) {\n    newArr[newArr.length] = arr[i];\n}\nconsole.log(newArr);\n```\n\n## 案例：冒泡排序 把数组从大到小或从小到大重新排序 \n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206070959111.png)\n\n```js\n// 冒泡排序 从小到大排序\n// var arr = [5, 4, 3, 2, 1];\nvar arr = [4, 1, 2, 3, 5,];\nfor (var i = 0; i <= arr.length - 1; i++) { // 外层循环负责趟数\n    for (var j = 0; j <= arr.length - i - 1; j++) { // 内层循环负责每一趟的交换次数\n        // 内部交换两个变量的值，第一个和后面一个数组元素相比较\n        if (arr[j] > arr[j + 1]) {\n            var temp = arr[j];\n            arr[j] = arr[j + 1];\n            arr[j + 1] = temp;\n        }\n    }\n}\nconsole.log(arr);\n```\n\n\n\n\n\n\n\n\n\n","source":"_posts/前端/Javascript数组.md","raw":"---\ntitle: Javascript数组\ndate: 2022-06-06\nupdated: 2022-06-07\ntags:\n  - 小白的前端之路\n  - JavaScript基础\ncategories: 前端开发\nkeywords: \ndescription: \ntop_img: ./img/bg12.jpg\ncover: ./img/bg12.jpg\n\n---\n# **「1. 数组的概念」** \n\n\n\n一组数据的集合，其中的每个数据被称作`元素`，在数组中可以存放任意类型的元素。数组是一种将一组数据存储在单个变量名下的优雅方式。数组中可以存放任意类型的数据\n\n# **「2. 创建数组」**\n\n- 利用new关键字创建数组\n\n```js\nvar 数组名 = new Array([n]);//[]代表可选 若写n，则代表数组的长度\nvar arr = new Array();//创建了一个名为 arr 的空数组\n```\n\n\n\n- 利用数组字面量创建数组\n\n```js\n// 1. 使用数组字面量方式创建空的数组\nvar 数组名 = [];//若写n，则代表数组的长度\n    \n//2. 使用数组字面量方式创建带初始值的数组\n//3. 声明数组并赋值称为数组的初始化\nvar arr =['1','2','3','4'];\nvar arr2 = ['fan',true,17.5];//数组中可以存放任意类型的数据\n```\n\n\n\n# **「3. 访问数组元素」**\n\n索引(下标):用来访问数组元素的序号。索引从 `0` 开始\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206070836311.png)\n\n```js\n// 定义数组\nvar arrStus = [1,2,3];\n// 获取数组中的第2个元素 \nalert(arrStus[1]); \n// 如果访问数组时没有和索引值对应的元素(数组越界)，\n// 返回值为undefined\n```\n\n# **「4. 遍历数组」**\n\n把数组中的元素从头到尾都访问一次。\n\n```js\nvar arr = ['red','green','blue'];\nfor (var i = 0; i < 3; i++) {\n    console.log(arr[i]);\n}\n//1.数组索引号从零开始，所以i必须从零开始\n//2.输出结果的时候 arr[i]， i 计数器当索引号使用\n```\n\n# **「5.数组长度」**\n\n```js\n// 数组名.length\nvar arr = ['甲','乙','丙','戍','己','庚','辛'];\nfor (var i = 0; i < 7; i++) {\n    console.log(arr[i]);\n}\nconsole.log(arr.length);\nfor (var i = 0; i < arr.length; i++) {\n    console.log(arr[i]);\n}\n//1. 数组的长度是元素个数，不要跟索引号混淆\n//2. arr.length 动态监测数组元素个数\n\n```\n\n## 案例：求数组中最大值\n\n```js\n//求数组中最大值\n//声明一个保存最大元素的变量max\n//默认最大值可取数组中第一个元素\n//遍历这个数组，把里面的每个元素与max比较\n//如果该数组元素大于max，把这个元素保存到max里面\n//最后输出max\nvar arr = ['2','6','1','77','52','25','7'];\nvar max = arr[0];\nfor (var i = 1; i < arr.length; i++) {\n    if (arr[i] > arr[0]) {\n        max = arr[i];\n    }\n}\nconsole.log('该数组中最大的是' + max);\n```\n\n## 案例：数组转换为字符串\n\n```js\n//将数组转换为字符串，并用*分割\n//1.需要一个新变量存放转换完成的字符串\n//2.遍历原来的数组，分别把里面的数组元素取出来，加到字符串里面\n//3.同时在后面多加一个*\nvar arr = ['red','green','blue','pink'];\nvar str = '';\nvar sep = '*';\nfor (var i = 0; i < arr.length; i++) {\n    str += arr[i] + sep;\n}\nconsole.log(str);\n```\n\n\n\n# **「6.数组新增元素」**\n\n可以通过修改length长度以及索引号增加数组元素\n\n- **「修改length属性」**\n\n```js\n// 1.新增数组元素，修改length长度\nvar arr = ['red','green','blue'];\nconsole.log(arr.length);\narr.length = 5; // 把数组元素长度修改为5，里面应该有5个元素\nconsole.log(arr[3]);\nconsole.log(arr[3]); // 新增空间没有给值，所以是undefined\nconsole.log(arr[4]); // undefined\n```\n\n- **「修改数组索引」**\n\n```js\n// 2.新增数组元素，修改索引号，追加数组元素\nvar arr1 = ['red','green','blue'];\narr1[3] = 'pink';\nconsole.log(arr1);\narr1[4] = 'hotpink';\nconsole.log(arr1);\narr1[0] = 'yellow'; // 这里是替换原来的数组元素\nconsole.log(arr1);\narr1 = '有点意思';\nconsole.log(arr1); // 不要直接给数组名赋值，会覆盖掉以前的数据，数组里面的数组元素都没有了\n```\n\n\n\n## 案例：数组中存放1-100个值\n\n```js\n//新建一数组，存放1-100个值\n//核心原理：使用循环追加数组\n//1.声明一个空数组 arr\n//2.循环中计数器 i 可作为数组元素存入\n//3.由于数组索引号是从0开始，因此计数器从0开始合适，存入的数组元素需要 + 1\nvar arr = [];\nfor (var i = 0; i < 100; i++) {\n    arr[i] = i + 1;\n}\nconsole.log(arr);\n```\n\n## 案例：筛选数组\n\n```js\n//将数组['2','0','6','1','77','0','52','0','25','7','6']中大于等于10 的元素选出来放入新数组\n// 1.声明一个新的数组用于存放新数据 newArr\n// 2.遍历原来旧的数组，找出大于等于 10 的元素\n// 3.依次追加给新数组 newArr\nvar arr = ['2','0','6','1','77','0','52','0','25','7','6'];\nvar newArr = [];\nvar j = 0;\nfor (var i = 0; i < arr.length; i++) {\n    if (arr[i] >= 10) {\n        // 新数组索引号从0开始，依次递增\n        newArr[j] = arr[i];\n        j++;\n    }\n}\nconsole.log(newArr);\n// 方法二\nvar arr = ['2','0','6','1','77','0','52','0','25','7','6'];\nvar newArr = [];\n// 刚开始 newArr.length 就是0\nfor (var i = 0; i < arr.length; i++) {\n    if (arr[i] >= 10) {\n        // 新数组索引号应该从0开始，依次递增\n        newArr[newArr.length] = arr[i];\n    }\n}\nconsole.log(newArr);\n```\n\n## 案例：翻转数组\n\n```js\n//将数组\n// 1.声明一个新数组 newArr\n// 2.把旧数组索引号4个取过来（arr.length - 1），给新数组索引号第0个元素（newArr.length）\n// 3.采用递减的方式 i++\nvar arr = ['red','green','blue','pink','purple'];\nvar newArr[];\nfor (var i = arr.length - 1; i >= 0; i--) {\n    newArr[newArr.length] = arr[i];\n}\nconsole.log(newArr);\n```\n\n## 案例：冒泡排序 把数组从大到小或从小到大重新排序 \n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206070959111.png)\n\n```js\n// 冒泡排序 从小到大排序\n// var arr = [5, 4, 3, 2, 1];\nvar arr = [4, 1, 2, 3, 5,];\nfor (var i = 0; i <= arr.length - 1; i++) { // 外层循环负责趟数\n    for (var j = 0; j <= arr.length - i - 1; j++) { // 内层循环负责每一趟的交换次数\n        // 内部交换两个变量的值，第一个和后面一个数组元素相比较\n        if (arr[j] > arr[j + 1]) {\n            var temp = arr[j];\n            arr[j] = arr[j + 1];\n            arr[j + 1] = temp;\n        }\n    }\n}\nconsole.log(arr);\n```\n\n\n\n\n\n\n\n\n\n","slug":"前端/Javascript数组","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cl5db79k9001dywtu5ae838ve","content":"<h1 id=\"「1-数组的概念」\"><a href=\"#「1-数组的概念」\" class=\"headerlink\" title=\"「1. 数组的概念」\"></a><strong>「1. 数组的概念」</strong></h1><p>一组数据的集合，其中的每个数据被称作<code>元素</code>，在数组中可以存放任意类型的元素。数组是一种将一组数据存储在单个变量名下的优雅方式。数组中可以存放任意类型的数据</p>\n<h1 id=\"「2-创建数组」\"><a href=\"#「2-创建数组」\" class=\"headerlink\" title=\"「2. 创建数组」\"></a><strong>「2. 创建数组」</strong></h1><ul>\n<li>利用new关键字创建数组</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> 数组名 = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>([n]);<span class=\"comment\">//[]代表可选 若写n，则代表数组的长度</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();<span class=\"comment\">//创建了一个名为 arr 的空数组</span></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>利用数组字面量创建数组</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 使用数组字面量方式创建空的数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> 数组名 = [];<span class=\"comment\">//若写n，则代表数组的长度</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">//2. 使用数组字面量方式创建带初始值的数组</span></span><br><span class=\"line\"><span class=\"comment\">//3. 声明数组并赋值称为数组的初始化</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr =[<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"string\">&#x27;3&#x27;</span>,<span class=\"string\">&#x27;4&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = [<span class=\"string\">&#x27;fan&#x27;</span>,<span class=\"literal\">true</span>,<span class=\"number\">17.5</span>];<span class=\"comment\">//数组中可以存放任意类型的数据</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"「3-访问数组元素」\"><a href=\"#「3-访问数组元素」\" class=\"headerlink\" title=\"「3. 访问数组元素」\"></a><strong>「3. 访问数组元素」</strong></h1><p>索引(下标):用来访问数组元素的序号。索引从 <code>0</code> 开始</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206070836311.png\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arrStus = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"comment\">// 获取数组中的第2个元素 </span></span><br><span class=\"line\">alert(arrStus[<span class=\"number\">1</span>]); </span><br><span class=\"line\"><span class=\"comment\">// 如果访问数组时没有和索引值对应的元素(数组越界)，</span></span><br><span class=\"line\"><span class=\"comment\">// 返回值为undefined</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"「4-遍历数组」\"><a href=\"#「4-遍历数组」\" class=\"headerlink\" title=\"「4. 遍历数组」\"></a><strong>「4. 遍历数组」</strong></h1><p>把数组中的元素从头到尾都访问一次。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">&#x27;red&#x27;</span>,<span class=\"string\">&#x27;green&#x27;</span>,<span class=\"string\">&#x27;blue&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(arr[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//1.数组索引号从零开始，所以i必须从零开始</span></span><br><span class=\"line\"><span class=\"comment\">//2.输出结果的时候 arr[i]， i 计数器当索引号使用</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"「5-数组长度」\"><a href=\"#「5-数组长度」\" class=\"headerlink\" title=\"「5.数组长度」\"></a><strong>「5.数组长度」</strong></h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 数组名.length</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">&#x27;甲&#x27;</span>,<span class=\"string\">&#x27;乙&#x27;</span>,<span class=\"string\">&#x27;丙&#x27;</span>,<span class=\"string\">&#x27;戍&#x27;</span>,<span class=\"string\">&#x27;己&#x27;</span>,<span class=\"string\">&#x27;庚&#x27;</span>,<span class=\"string\">&#x27;辛&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">7</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(arr[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.length);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(arr[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//1. 数组的长度是元素个数，不要跟索引号混淆</span></span><br><span class=\"line\"><span class=\"comment\">//2. arr.length 动态监测数组元素个数</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"案例：求数组中最大值\"><a href=\"#案例：求数组中最大值\" class=\"headerlink\" title=\"案例：求数组中最大值\"></a>案例：求数组中最大值</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//求数组中最大值</span></span><br><span class=\"line\"><span class=\"comment\">//声明一个保存最大元素的变量max</span></span><br><span class=\"line\"><span class=\"comment\">//默认最大值可取数组中第一个元素</span></span><br><span class=\"line\"><span class=\"comment\">//遍历这个数组，把里面的每个元素与max比较</span></span><br><span class=\"line\"><span class=\"comment\">//如果该数组元素大于max，把这个元素保存到max里面</span></span><br><span class=\"line\"><span class=\"comment\">//最后输出max</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"string\">&#x27;6&#x27;</span>,<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;77&#x27;</span>,<span class=\"string\">&#x27;52&#x27;</span>,<span class=\"string\">&#x27;25&#x27;</span>,<span class=\"string\">&#x27;7&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> max = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr[i] &gt; arr[<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">        max = arr[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;该数组中最大的是&#x27;</span> + max);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"案例：数组转换为字符串\"><a href=\"#案例：数组转换为字符串\" class=\"headerlink\" title=\"案例：数组转换为字符串\"></a>案例：数组转换为字符串</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//将数组转换为字符串，并用*分割</span></span><br><span class=\"line\"><span class=\"comment\">//1.需要一个新变量存放转换完成的字符串</span></span><br><span class=\"line\"><span class=\"comment\">//2.遍历原来的数组，分别把里面的数组元素取出来，加到字符串里面</span></span><br><span class=\"line\"><span class=\"comment\">//3.同时在后面多加一个*</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">&#x27;red&#x27;</span>,<span class=\"string\">&#x27;green&#x27;</span>,<span class=\"string\">&#x27;blue&#x27;</span>,<span class=\"string\">&#x27;pink&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> sep = <span class=\"string\">&#x27;*&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">    str += arr[i] + sep;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str);</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"「6-数组新增元素」\"><a href=\"#「6-数组新增元素」\" class=\"headerlink\" title=\"「6.数组新增元素」\"></a><strong>「6.数组新增元素」</strong></h1><p>可以通过修改length长度以及索引号增加数组元素</p>\n<ul>\n<li><strong>「修改length属性」</strong></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.新增数组元素，修改length长度</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">&#x27;red&#x27;</span>,<span class=\"string\">&#x27;green&#x27;</span>,<span class=\"string\">&#x27;blue&#x27;</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.length);</span><br><span class=\"line\">arr.length = <span class=\"number\">5</span>; <span class=\"comment\">// 把数组元素长度修改为5，里面应该有5个元素</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr[<span class=\"number\">3</span>]);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr[<span class=\"number\">3</span>]); <span class=\"comment\">// 新增空间没有给值，所以是undefined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr[<span class=\"number\">4</span>]); <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>「修改数组索引」</strong></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 2.新增数组元素，修改索引号，追加数组元素</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"string\">&#x27;red&#x27;</span>,<span class=\"string\">&#x27;green&#x27;</span>,<span class=\"string\">&#x27;blue&#x27;</span>];</span><br><span class=\"line\">arr1[<span class=\"number\">3</span>] = <span class=\"string\">&#x27;pink&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr1);</span><br><span class=\"line\">arr1[<span class=\"number\">4</span>] = <span class=\"string\">&#x27;hotpink&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr1);</span><br><span class=\"line\">arr1[<span class=\"number\">0</span>] = <span class=\"string\">&#x27;yellow&#x27;</span>; <span class=\"comment\">// 这里是替换原来的数组元素</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr1);</span><br><span class=\"line\">arr1 = <span class=\"string\">&#x27;有点意思&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr1); <span class=\"comment\">// 不要直接给数组名赋值，会覆盖掉以前的数据，数组里面的数组元素都没有了</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"案例：数组中存放1-100个值\"><a href=\"#案例：数组中存放1-100个值\" class=\"headerlink\" title=\"案例：数组中存放1-100个值\"></a>案例：数组中存放1-100个值</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//新建一数组，存放1-100个值</span></span><br><span class=\"line\"><span class=\"comment\">//核心原理：使用循环追加数组</span></span><br><span class=\"line\"><span class=\"comment\">//1.声明一个空数组 arr</span></span><br><span class=\"line\"><span class=\"comment\">//2.循环中计数器 i 可作为数组元素存入</span></span><br><span class=\"line\"><span class=\"comment\">//3.由于数组索引号是从0开始，因此计数器从0开始合适，存入的数组元素需要 + 1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">    arr[i] = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"案例：筛选数组\"><a href=\"#案例：筛选数组\" class=\"headerlink\" title=\"案例：筛选数组\"></a>案例：筛选数组</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//将数组[&#x27;2&#x27;,&#x27;0&#x27;,&#x27;6&#x27;,&#x27;1&#x27;,&#x27;77&#x27;,&#x27;0&#x27;,&#x27;52&#x27;,&#x27;0&#x27;,&#x27;25&#x27;,&#x27;7&#x27;,&#x27;6&#x27;]中大于等于10 的元素选出来放入新数组</span></span><br><span class=\"line\"><span class=\"comment\">// 1.声明一个新的数组用于存放新数据 newArr</span></span><br><span class=\"line\"><span class=\"comment\">// 2.遍历原来旧的数组，找出大于等于 10 的元素</span></span><br><span class=\"line\"><span class=\"comment\">// 3.依次追加给新数组 newArr</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"string\">&#x27;0&#x27;</span>,<span class=\"string\">&#x27;6&#x27;</span>,<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;77&#x27;</span>,<span class=\"string\">&#x27;0&#x27;</span>,<span class=\"string\">&#x27;52&#x27;</span>,<span class=\"string\">&#x27;0&#x27;</span>,<span class=\"string\">&#x27;25&#x27;</span>,<span class=\"string\">&#x27;7&#x27;</span>,<span class=\"string\">&#x27;6&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> newArr = [];</span><br><span class=\"line\"><span class=\"keyword\">var</span> j = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr[i] &gt;= <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 新数组索引号从0开始，依次递增</span></span><br><span class=\"line\">        newArr[j] = arr[i];</span><br><span class=\"line\">        j++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArr);</span><br><span class=\"line\"><span class=\"comment\">// 方法二</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"string\">&#x27;0&#x27;</span>,<span class=\"string\">&#x27;6&#x27;</span>,<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;77&#x27;</span>,<span class=\"string\">&#x27;0&#x27;</span>,<span class=\"string\">&#x27;52&#x27;</span>,<span class=\"string\">&#x27;0&#x27;</span>,<span class=\"string\">&#x27;25&#x27;</span>,<span class=\"string\">&#x27;7&#x27;</span>,<span class=\"string\">&#x27;6&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> newArr = [];</span><br><span class=\"line\"><span class=\"comment\">// 刚开始 newArr.length 就是0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr[i] &gt;= <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 新数组索引号应该从0开始，依次递增</span></span><br><span class=\"line\">        newArr[newArr.length] = arr[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArr);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"案例：翻转数组\"><a href=\"#案例：翻转数组\" class=\"headerlink\" title=\"案例：翻转数组\"></a>案例：翻转数组</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//将数组</span></span><br><span class=\"line\"><span class=\"comment\">// 1.声明一个新数组 newArr</span></span><br><span class=\"line\"><span class=\"comment\">// 2.把旧数组索引号4个取过来（arr.length - 1），给新数组索引号第0个元素（newArr.length）</span></span><br><span class=\"line\"><span class=\"comment\">// 3.采用递减的方式 i++</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">&#x27;red&#x27;</span>,<span class=\"string\">&#x27;green&#x27;</span>,<span class=\"string\">&#x27;blue&#x27;</span>,<span class=\"string\">&#x27;pink&#x27;</span>,<span class=\"string\">&#x27;purple&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> newArr[];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = arr.length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">    newArr[newArr.length] = arr[i];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArr);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"案例：冒泡排序-把数组从大到小或从小到大重新排序\"><a href=\"#案例：冒泡排序-把数组从大到小或从小到大重新排序\" class=\"headerlink\" title=\"案例：冒泡排序 把数组从大到小或从小到大重新排序\"></a>案例：冒泡排序 把数组从大到小或从小到大重新排序</h2><p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206070959111.png\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 冒泡排序 从小到大排序</span></span><br><span class=\"line\"><span class=\"comment\">// var arr = [5, 4, 3, 2, 1];</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>,];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt;= arr.length - <span class=\"number\">1</span>; i++) &#123; <span class=\"comment\">// 外层循环负责趟数</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt;= arr.length - i - <span class=\"number\">1</span>; j++) &#123; <span class=\"comment\">// 内层循环负责每一趟的交换次数</span></span><br><span class=\"line\">        <span class=\"comment\">// 内部交换两个变量的值，第一个和后面一个数组元素相比较</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arr[j] &gt; arr[j + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> temp = arr[j];</span><br><span class=\"line\">            arr[j] = arr[j + <span class=\"number\">1</span>];</span><br><span class=\"line\">            arr[j + <span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr);</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<h1 id=\"「1-数组的概念」\"><a href=\"#「1-数组的概念」\" class=\"headerlink\" title=\"「1. 数组的概念」\"></a><strong>「1. 数组的概念」</strong></h1><p>一组数据的集合，其中的每个数据被称作<code>元素</code>，在数组中可以存放任意类型的元素。数组是一种将一组数据存储在单个变量名下的优雅方式。数组中可以存放任意类型的数据</p>\n<h1 id=\"「2-创建数组」\"><a href=\"#「2-创建数组」\" class=\"headerlink\" title=\"「2. 创建数组」\"></a><strong>「2. 创建数组」</strong></h1><ul>\n<li>利用new关键字创建数组</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> 数组名 = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>([n]);<span class=\"comment\">//[]代表可选 若写n，则代表数组的长度</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();<span class=\"comment\">//创建了一个名为 arr 的空数组</span></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>利用数组字面量创建数组</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 使用数组字面量方式创建空的数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> 数组名 = [];<span class=\"comment\">//若写n，则代表数组的长度</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">//2. 使用数组字面量方式创建带初始值的数组</span></span><br><span class=\"line\"><span class=\"comment\">//3. 声明数组并赋值称为数组的初始化</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr =[<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"string\">&#x27;3&#x27;</span>,<span class=\"string\">&#x27;4&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = [<span class=\"string\">&#x27;fan&#x27;</span>,<span class=\"literal\">true</span>,<span class=\"number\">17.5</span>];<span class=\"comment\">//数组中可以存放任意类型的数据</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"「3-访问数组元素」\"><a href=\"#「3-访问数组元素」\" class=\"headerlink\" title=\"「3. 访问数组元素」\"></a><strong>「3. 访问数组元素」</strong></h1><p>索引(下标):用来访问数组元素的序号。索引从 <code>0</code> 开始</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206070836311.png\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arrStus = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"comment\">// 获取数组中的第2个元素 </span></span><br><span class=\"line\">alert(arrStus[<span class=\"number\">1</span>]); </span><br><span class=\"line\"><span class=\"comment\">// 如果访问数组时没有和索引值对应的元素(数组越界)，</span></span><br><span class=\"line\"><span class=\"comment\">// 返回值为undefined</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"「4-遍历数组」\"><a href=\"#「4-遍历数组」\" class=\"headerlink\" title=\"「4. 遍历数组」\"></a><strong>「4. 遍历数组」</strong></h1><p>把数组中的元素从头到尾都访问一次。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">&#x27;red&#x27;</span>,<span class=\"string\">&#x27;green&#x27;</span>,<span class=\"string\">&#x27;blue&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(arr[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//1.数组索引号从零开始，所以i必须从零开始</span></span><br><span class=\"line\"><span class=\"comment\">//2.输出结果的时候 arr[i]， i 计数器当索引号使用</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"「5-数组长度」\"><a href=\"#「5-数组长度」\" class=\"headerlink\" title=\"「5.数组长度」\"></a><strong>「5.数组长度」</strong></h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 数组名.length</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">&#x27;甲&#x27;</span>,<span class=\"string\">&#x27;乙&#x27;</span>,<span class=\"string\">&#x27;丙&#x27;</span>,<span class=\"string\">&#x27;戍&#x27;</span>,<span class=\"string\">&#x27;己&#x27;</span>,<span class=\"string\">&#x27;庚&#x27;</span>,<span class=\"string\">&#x27;辛&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">7</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(arr[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.length);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(arr[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//1. 数组的长度是元素个数，不要跟索引号混淆</span></span><br><span class=\"line\"><span class=\"comment\">//2. arr.length 动态监测数组元素个数</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"案例：求数组中最大值\"><a href=\"#案例：求数组中最大值\" class=\"headerlink\" title=\"案例：求数组中最大值\"></a>案例：求数组中最大值</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//求数组中最大值</span></span><br><span class=\"line\"><span class=\"comment\">//声明一个保存最大元素的变量max</span></span><br><span class=\"line\"><span class=\"comment\">//默认最大值可取数组中第一个元素</span></span><br><span class=\"line\"><span class=\"comment\">//遍历这个数组，把里面的每个元素与max比较</span></span><br><span class=\"line\"><span class=\"comment\">//如果该数组元素大于max，把这个元素保存到max里面</span></span><br><span class=\"line\"><span class=\"comment\">//最后输出max</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"string\">&#x27;6&#x27;</span>,<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;77&#x27;</span>,<span class=\"string\">&#x27;52&#x27;</span>,<span class=\"string\">&#x27;25&#x27;</span>,<span class=\"string\">&#x27;7&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> max = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr[i] &gt; arr[<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">        max = arr[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;该数组中最大的是&#x27;</span> + max);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"案例：数组转换为字符串\"><a href=\"#案例：数组转换为字符串\" class=\"headerlink\" title=\"案例：数组转换为字符串\"></a>案例：数组转换为字符串</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//将数组转换为字符串，并用*分割</span></span><br><span class=\"line\"><span class=\"comment\">//1.需要一个新变量存放转换完成的字符串</span></span><br><span class=\"line\"><span class=\"comment\">//2.遍历原来的数组，分别把里面的数组元素取出来，加到字符串里面</span></span><br><span class=\"line\"><span class=\"comment\">//3.同时在后面多加一个*</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">&#x27;red&#x27;</span>,<span class=\"string\">&#x27;green&#x27;</span>,<span class=\"string\">&#x27;blue&#x27;</span>,<span class=\"string\">&#x27;pink&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> sep = <span class=\"string\">&#x27;*&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">    str += arr[i] + sep;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str);</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"「6-数组新增元素」\"><a href=\"#「6-数组新增元素」\" class=\"headerlink\" title=\"「6.数组新增元素」\"></a><strong>「6.数组新增元素」</strong></h1><p>可以通过修改length长度以及索引号增加数组元素</p>\n<ul>\n<li><strong>「修改length属性」</strong></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.新增数组元素，修改length长度</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">&#x27;red&#x27;</span>,<span class=\"string\">&#x27;green&#x27;</span>,<span class=\"string\">&#x27;blue&#x27;</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.length);</span><br><span class=\"line\">arr.length = <span class=\"number\">5</span>; <span class=\"comment\">// 把数组元素长度修改为5，里面应该有5个元素</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr[<span class=\"number\">3</span>]);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr[<span class=\"number\">3</span>]); <span class=\"comment\">// 新增空间没有给值，所以是undefined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr[<span class=\"number\">4</span>]); <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>「修改数组索引」</strong></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 2.新增数组元素，修改索引号，追加数组元素</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"string\">&#x27;red&#x27;</span>,<span class=\"string\">&#x27;green&#x27;</span>,<span class=\"string\">&#x27;blue&#x27;</span>];</span><br><span class=\"line\">arr1[<span class=\"number\">3</span>] = <span class=\"string\">&#x27;pink&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr1);</span><br><span class=\"line\">arr1[<span class=\"number\">4</span>] = <span class=\"string\">&#x27;hotpink&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr1);</span><br><span class=\"line\">arr1[<span class=\"number\">0</span>] = <span class=\"string\">&#x27;yellow&#x27;</span>; <span class=\"comment\">// 这里是替换原来的数组元素</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr1);</span><br><span class=\"line\">arr1 = <span class=\"string\">&#x27;有点意思&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr1); <span class=\"comment\">// 不要直接给数组名赋值，会覆盖掉以前的数据，数组里面的数组元素都没有了</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"案例：数组中存放1-100个值\"><a href=\"#案例：数组中存放1-100个值\" class=\"headerlink\" title=\"案例：数组中存放1-100个值\"></a>案例：数组中存放1-100个值</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//新建一数组，存放1-100个值</span></span><br><span class=\"line\"><span class=\"comment\">//核心原理：使用循环追加数组</span></span><br><span class=\"line\"><span class=\"comment\">//1.声明一个空数组 arr</span></span><br><span class=\"line\"><span class=\"comment\">//2.循环中计数器 i 可作为数组元素存入</span></span><br><span class=\"line\"><span class=\"comment\">//3.由于数组索引号是从0开始，因此计数器从0开始合适，存入的数组元素需要 + 1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">    arr[i] = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"案例：筛选数组\"><a href=\"#案例：筛选数组\" class=\"headerlink\" title=\"案例：筛选数组\"></a>案例：筛选数组</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//将数组[&#x27;2&#x27;,&#x27;0&#x27;,&#x27;6&#x27;,&#x27;1&#x27;,&#x27;77&#x27;,&#x27;0&#x27;,&#x27;52&#x27;,&#x27;0&#x27;,&#x27;25&#x27;,&#x27;7&#x27;,&#x27;6&#x27;]中大于等于10 的元素选出来放入新数组</span></span><br><span class=\"line\"><span class=\"comment\">// 1.声明一个新的数组用于存放新数据 newArr</span></span><br><span class=\"line\"><span class=\"comment\">// 2.遍历原来旧的数组，找出大于等于 10 的元素</span></span><br><span class=\"line\"><span class=\"comment\">// 3.依次追加给新数组 newArr</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"string\">&#x27;0&#x27;</span>,<span class=\"string\">&#x27;6&#x27;</span>,<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;77&#x27;</span>,<span class=\"string\">&#x27;0&#x27;</span>,<span class=\"string\">&#x27;52&#x27;</span>,<span class=\"string\">&#x27;0&#x27;</span>,<span class=\"string\">&#x27;25&#x27;</span>,<span class=\"string\">&#x27;7&#x27;</span>,<span class=\"string\">&#x27;6&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> newArr = [];</span><br><span class=\"line\"><span class=\"keyword\">var</span> j = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr[i] &gt;= <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 新数组索引号从0开始，依次递增</span></span><br><span class=\"line\">        newArr[j] = arr[i];</span><br><span class=\"line\">        j++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArr);</span><br><span class=\"line\"><span class=\"comment\">// 方法二</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"string\">&#x27;0&#x27;</span>,<span class=\"string\">&#x27;6&#x27;</span>,<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;77&#x27;</span>,<span class=\"string\">&#x27;0&#x27;</span>,<span class=\"string\">&#x27;52&#x27;</span>,<span class=\"string\">&#x27;0&#x27;</span>,<span class=\"string\">&#x27;25&#x27;</span>,<span class=\"string\">&#x27;7&#x27;</span>,<span class=\"string\">&#x27;6&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> newArr = [];</span><br><span class=\"line\"><span class=\"comment\">// 刚开始 newArr.length 就是0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr[i] &gt;= <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 新数组索引号应该从0开始，依次递增</span></span><br><span class=\"line\">        newArr[newArr.length] = arr[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArr);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"案例：翻转数组\"><a href=\"#案例：翻转数组\" class=\"headerlink\" title=\"案例：翻转数组\"></a>案例：翻转数组</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//将数组</span></span><br><span class=\"line\"><span class=\"comment\">// 1.声明一个新数组 newArr</span></span><br><span class=\"line\"><span class=\"comment\">// 2.把旧数组索引号4个取过来（arr.length - 1），给新数组索引号第0个元素（newArr.length）</span></span><br><span class=\"line\"><span class=\"comment\">// 3.采用递减的方式 i++</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">&#x27;red&#x27;</span>,<span class=\"string\">&#x27;green&#x27;</span>,<span class=\"string\">&#x27;blue&#x27;</span>,<span class=\"string\">&#x27;pink&#x27;</span>,<span class=\"string\">&#x27;purple&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> newArr[];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = arr.length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">    newArr[newArr.length] = arr[i];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArr);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"案例：冒泡排序-把数组从大到小或从小到大重新排序\"><a href=\"#案例：冒泡排序-把数组从大到小或从小到大重新排序\" class=\"headerlink\" title=\"案例：冒泡排序 把数组从大到小或从小到大重新排序\"></a>案例：冒泡排序 把数组从大到小或从小到大重新排序</h2><p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206070959111.png\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 冒泡排序 从小到大排序</span></span><br><span class=\"line\"><span class=\"comment\">// var arr = [5, 4, 3, 2, 1];</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>,];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt;= arr.length - <span class=\"number\">1</span>; i++) &#123; <span class=\"comment\">// 外层循环负责趟数</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt;= arr.length - i - <span class=\"number\">1</span>; j++) &#123; <span class=\"comment\">// 内层循环负责每一趟的交换次数</span></span><br><span class=\"line\">        <span class=\"comment\">// 内部交换两个变量的值，第一个和后面一个数组元素相比较</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arr[j] &gt; arr[j + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> temp = arr[j];</span><br><span class=\"line\">            arr[j] = arr[j + <span class=\"number\">1</span>];</span><br><span class=\"line\">            arr[j + <span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr);</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n"},{"title":"Javascript流程控制","date":"2022-05-24T16:00:00.000Z","updated":"2022-06-02T16:00:00.000Z","keywords":null,"description":null,"top_img":"./img/bg14.jpg","cover":"./img/bg13.jpg","_content":"\n\n# **流程控制**\n\n在一个程序执行的过程中，各条代码的执行顺序对程序的结果是有直接影响的。很多时候我们要通过控制代码的执行顺序来实现我们要完成的功能。流程控制主要有三种结构，分别是**顺序结构**、**分支结构**和**循环结构**，代表三种代码执行的顺序。\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202205311435023.png)\n\n# **分支结构**\n\njs语言提供了两种分支结构语句\n\n- if语句\n- switch语句\n\n## **「if 语句」**\n\n```js\n//条件成立执行代码，否则什么也不做\nif(条件表达式){\n    //条件成立执行代码语句\n}\n```\n\n语句可以理解为一个行为，循环语句和分支语句就是典型的语句。一个程序由多个语句组成，一般情况下，会被分割成一个一个的语句。\n\n```js\n//执行思路，如果if里面的条件表达式结果为真，true，则执行大括号里面的执行语句\n//如果if条件表达式结果为假，则不执行大括号里的语句，执行if语句后面的代码\n//演示\nif (3>2){\n    alert('前端路漫漫');\n}\n```\n\n## **「if else语句（双分支语句）」**\n\n语法结构\n\n```js\n//条件成立，执行if里代码，否则执行else里代码\nif(条件表达式){\n    //if条件成立时执行的代码\n}\nelse{\n    //else执行的代码\n}\n//if里面的语句1和else里面的语句2，最终只能有一个语句被执行 2选1\n//else后面直接跟大括号\n```\n\n### 案例：进入网吧\n\n```js\n//弹出prompt警示框，用户输入年龄，存入变量age\n//使用if语句判断年龄，如年龄大于等于18，执行括号里内容\nvar age = prompt('请输入您的年龄')\nif(age >= 18){\n    alert('我想带你去网吧');\n} else{\n    alert('滚');\n}\n```\n\n### 案例：判断闰年\n\n```js\n//算法：能被四整除且不能被100整除的为闰年 或着 能被400整除的是闰年\n//弹出prompt输入框，输入年份存入白能量\n//使用if语句判断\n//注意&& 还有|| ，同时注意判断整除的方法是取余为0\nvar year = prompt('请输入年份');\nif(year % 4 == 0 && year % 100 != 0 || year % 400 == 0){\n    alert('您输入的年份是闰年');\n}\nelse{\n    alert('您输入的年份是平年');\n}\n\n```\n\n## **「if else if 语句（多分支语句）」**\n\n```js\n//1.多分支语句，就是利用多个条件来选择不同的语句执行，得到不同的结果，多选一的过程\n//2.if else if语句是多分支语句\n//3.语法规范\nif(条件表达式1){\n    //语句1;\n} else if(条件表达式2){\n    //语句2;\n} else if(条件表达式3){\n    //语句3;\n} else {\n    //最后的语句;\n}\n//4.执行思路\n/*\t如果条件表达式1满足就执行语句1，执行完毕后，退出整个if分支语句\n\t如果条件表达式1不满足，则判断条件表达式2，满足的话执行语句2，以此类推\n\t如果上面条件都不满足，则执行else里的语句\n*/\n//5.注意点\n/* 多分支语句是多选一，最后只能有一个语句被执行\n\telse if 理论上可以是任意多个\n\t\n```\n\n### 案例：判断成绩\n\n```js\n//(伪代码) 按从大到小的顺序\n//弹出prompt输入框，让用户输入分数保存在变量中\n//使用if else if多分支判断\nvar score = prompt('请输入成绩');\nif(score >= 90){\n    alert('A');\n} else if(score >= 80){\n    alert('B');\n} else if(score >= 70){\n    alert('C');\n} else if(score >= 60){\n    alert('D');\n} else{\n    alert('E');\n}\n```\n\n## **「三元表达式」**\n\n```js\n//1.有三个运算符组成的式子我们成为三元表达式\n//2.++num  3+5  ? :\n//3.语法结构\n条件表达式?表达式1:表达式2;\n//4.执行思路\n//如果条件表达式结果为真，则返回表达式1的值，如果条件表达式结果为假，则返回表达式2的值\n//5.代码体验\nvar num = 10;\nvar result = num > 5 ? '是的' : '不是的';\nconsole.log(result);\n```\n\n### 案例：数字补0\n\n```js\n//用户输入0-59之间的一个数字\n//如果数字小于10，则在这个数字面前补0，（加0拼接），否则不做操作\n//用一个变量接收这个返回值，输出\nvar time = prompt('请输入一个数字');\nvar result = time < 10 ? '0' + time : time;//把返回值赋值给第一个变量\nalert(result);\n```\n\n## **「switch分支」**\n\nswitch语句也是多分支语句，它用于基于不同的条件来执行不同的代码，当要针对变量设置一系列的特定值的选项时，就可以使用switch\n\n```js\n//1.switch也是多分支，可以实现多线一\n//2.语法结构  switch 转换，开关  case 小例子或选项的意思\nswitch(表达式){\n    case value1:\n        执行语句1;\n        break;\n    case value2:\n        执行语句2;\n        break;\n    ...\n    default:\n    \t执行最后的语句;\n}\n//3.执行思路，利用表达式的值和case后面的选项值相匹配，如果匹配上，就执行该case里面的语句，如果都没有匹配上，则执行default里面的语句\n//4.代码验证\nswitch(2){\n    case 1:\n        console.log('这是1');\n        break;\n    case 2:\n        console.log('这是2');\n        break;\n    case 3:\n        console.log('这是3');\n        break;\n    default:\n        console.log('无匹配结果');\n}\n```\n\n### switch注意事项\n\n```js\nvar num = 1;\nswitch(num){\n    case 1:\n        console.log(1);\n        break;\n    case 2:\n        console.log(2);\n        break;\n    case 3:\n        console.log(3);\n        break;\n    default:\n        console.log('无匹配');\n}\n//1.开发里面，表达式经常写成变量\n//2.num和case里值相匹配的时候要求全等，必须数值和数据类型一致才可以 num === 1\n//3.break 如果当前case没有break，则不会退出switch，而是继续执行下一个case\n```\n\n### 案例：查询水果案例\n\n```js\n//弹出prompt输入框，输入水果名称存入变量\n//将这个变量作为switch括号内的表达式\n//case后面的值写几个不同水果的名称，注意一定要加引号，因为必须时全等匹配\n//弹出不同价格即可，注意每个case后面的break语句\n//将default设置成无此水果\nvar frult = prompt('请输入查询的水果');\nswitch(frult){\n    case '苹果':\n        alert('苹果的价格是3.5')；\n        break;\n    case '榴莲':\n        alert('榴莲的价格是35');\n        break;\n    default:\n        alert('无此水果');\n}\n```\n\n### switch和if..else..if的区别\n\n1. 一般情况下，可以互相替换\n\n2. switch…case通常处理case比较确定的值的情况，而if…else…if更加灵活常用于范围判断\n\n3. switch语句进行条件判断后直接执行条件语句，效率更高，而if else if有多少条件就要判断多少次\n\n4. 当分支较少时，if…else执行效率比switch高\n\n5. 当分支较多时，switch语句执行效率比较高，且结构清晰\n\n   \n\n   \n\n# **循环结构**\n\njs中主要由三种类型的循环语句\n\n- for循环\n- while循环\n- do..while循环\n\n## **「for循环」**\n\n```js\n//1.for循环重复执行某些代码，通常跟计数有关\n//2.for循环语法结构\nfor(初始化变量;条件表达式;操作表达式){\n    循环体;\n}\n//3.初始化变量 就是用var声明的一个普通变量，通常用作计数器使用\n//4.条件表达式 就是用来决定每一次循环是否继续执行 ，就是终止的条件\n//5.操作表达式 是每次循环最后执行的代码 经常用于我们计数器变量的更新（递增或者递减）\n//6.代码体验\nfor(var i = 1; i <= 100; i++){\n    console.log('你好吗');\n}\n```\n\nfor循环执行过程\n\n1. 初始化变量，初始化操作在整个 for 循环只会执行一次。\n2. 执行条件表达式，如果为true，则执行循环体语句，否则退出循环，循环结束。\n3. 执行操作表达式,此时第一轮结束。\n4. 第二轮开始，直接去执行条件表达式（不再初始化变量），如果为 true ，则去执行循环体语句，否则退出循环。\n5. 继续执行操作表达式，第二轮结束。......\n\n```js\n//for循环执行相同代码\nfor(var i = 1; i <= 10; i++){\n    console.log('我错了');\n}\n//让用户控制输出次数\nvar num = prompt('输入循环次数');\nvar(var i = 1; i <= num; i++){\n    console.log('我错了');\n}\n```\n\n```js\n//for循环可以重复执行不同的代码 因为我们有计数器变量i的存在 i每次循环值都会变化\nfor(var i = 1; i <= 100; i++){\n    if(i == 1){\n        console.log('这个人今年1岁了，他出生了');\n    } else if(i == 100){\n        console.log('这个人今年100岁了，他死了');\n    } else {\n        console.log('这个人今年' + i + '岁了');//字符串与数字拼接\n    }\n}\n```\n\n### 案例：for循环求1-100累加和案例\n\n```js\n// 需要循环100次，我们需要一个计数器i\n//需要一个储存结果的变量sum，初始值为0\n//核心算法：1+2+3+4+...，sum = sum + i\nvar sum = 0;\nfor (var i = 1; i <= 100; i++) {\n    sum = sum + i;\n    //sum += i;\n}\nconsole.log(sum);\n\n\n```\n\n### 案例：for循环求1-100平均值\n\n```js\nvar sum = 0;\nvar average = 0;\nfor (var i = 1; i <= 100; i++) {\n    sum += i;\n}\naverage = sum / 100;\nconsole.log(average);\n```\n\n### 案例：求1-100所有奇数和偶数的和\n\n```js\nvar even = 0;\nvar odd = 0;\nfor (var i = 1; i <= 100; i++) {\n    if (i % 2 = 0) {\n        even += i;\n    } else {\n        odd += i;\n    }     \n}\nconsole.log('1-100之间所有的偶数的和是' + even);\nconsole.log('1-100之间所有的奇数的和是' + odd);\n```\n\n### 案例：求1-100所有能被3整除的数字的和\n\n```javascript\nvar result = 0;\nfor (var i = 1; i <= 100; i++) {\n    if (i % 3 = 0) {\n        result += i;\n    }\n} \nconsole.log('1-100之前能够被3整除的数字的和是' + result);\n```\n\n### 案例：求学生成绩案例\n\n```js\n//弹出输入框输入总的班级人数（num)\n//依次输入学生成绩（保存起来 score），此时用到for循环\n//for循环，弹出的次数跟输入的班级总人数有关系，条件表达式 i <= num\n//进行业务处理：计算成绩，先求总成绩（sum），之后求平均成绩（average）\n//弹出结果\nvar num = prompt('请输入班级总人数：'); // num 班级总人数\nvar sum = 0; // 求和的变量sum\nvar average = 0; // 平均值的变量average\nfor (var i = 1; i <= num; i++) {\n    var score = prompt('请输入第' + i + '个学生成绩');\n    // 因为从prompt取过来的数都是字符串型的，需要转换成数字型\n    sum = sum + parseFloat(score);\n}\naverage = sum / num;\nalert('班级总成绩是' + sum);\nalert('班级平均分是' + average);\n```\n\n### 案例：一行打印5个星星\n\n```js\n//一行打印5个星星(不能全部显示)\nfor (var i = 1; i <= 5; i++) {\n    console.log('#');\n}\n//如果一行全部展示出星星，采用拼接字符串型\nvar str = '';\nfor (var i = 1; i <= 5; i++) {\n    str = str + '#';\n}\nconsole.log(str);\n//自定义输出个数\nvar num = prompt('请输入星星的个数');\nvar str = '';\nfor (var i = 1; i <= num; i++){\n    str = str + '#';\n}\nconsole.log(str);\n```\n\n## **「双重for循环」**\n\n循环嵌套是指在一个循环语句中再定义一个循环语句的语法结构，例如在for循环语句中，可以再嵌套一个for 循环，这样的 for 循环语句我们称之为双重for循环。\n\n```js\n//1.双重for循环语法结构\nfor (外层初始化变量; 外层条件表达式; 外层操作表达式) {\n    for (里层初始化变量; 里层条件表达式; 里层操作表达式){\n        //执行语句\n    }\n}\n//2.我们可以把里面的循环看作是外层循环的语句\n//3.外层循环循环一次，里面的循环执行全部\n//4.代码验证\nfor (var i = 1; i <= 3; i++) {\n    console.log('这是外层循环第' + i + '次');\n    for (var j = 1; j <= 3; j++) {\n        console.log('这是内层循环第' + j + '次');\n    }\n}\n```\n\n### 案例：打印5行5列星星\n\n```js\n//内层循环负责一行打印5个星星\n//外层循环负责打印5行\nvar str = '';\nfor (var i = 1; i <= 5; i++) { //外层负责打印5行\n    for ( var j = 1; j <= 5; j++){ // 内层负责一行打印5个星星\n        str = str + '#';\n    }\n    //一行打完5个星星需要另起一行，加 \\n\n    str = str + '\\n';\n}\nconsole.log(str);\n```\n\n### 案例：打印n行n列星星\n\n```js\n//打印n行n列\nvar rows = prompt('请您输入行数');\nvar cols = prompt('请您输入列数');\nvar str = '';\nfor (var i = 1; i <= rows; i++) {\n    for (var j = 1; j <= cols; j++) {\n        str = str + '#';\n    }\n    str += '\\n';\n}\nconsole.log(str);\n```\n\n### 案例：打印倒三角\n\n```js\n//打印倒三角\n//核心算法：j = i; j <= 10; j++\nvar str = '';\nfor (var i = 1; i <= 10; i++) { //外层控制行数\n    for (var j = i; j <= 10; j++) { //内层循环打印个数不一样 j = i\n        str = str + '';\n    }\n    str += '\\n';\n}\nconsole.log(str);\n```\n\n### 案例：打印九九乘法表\n\n```js\n//九九乘法表\n//一共有9行，但每行个数不一样，因此用到双重for循环\n//外层for循环控制行数i，循环9次，可以打印9行\n//内层for循环控制每行公式 j\n//核心算法：每一行公式的个数正好和行数一样， j <= i\n//每行打印完毕都需要重新换行\nvar str = '';\nfor (i = 1; i <= 9; i++) { //外层控制行数\n    for (var j = 1; j <= i; j++) { //内层控制每一行个数 j <= i\n        //1 × 2 = 2\n        //str = str + '#'\n        str += j + '×' + i + '=' + i * j + '\\t'; //字符串拼接\n    }\n    str += '\\t';\n}\nconsole.log(str);\n\n```\n\n\n\n## **「while循环」**\n\n```js\n//1.while循环语法结构  （while 当...时候）\nwhile (条件表达式) {\n    //循环体\n}\n//2.执行思路，当条件表达式结果为true时，则执行循环体，否则退出循环\n//3.代码验证\nvar num = 1;\nwhile (num <= 100) {\n    console.log('循环');\n    num++;\n}\n//4.里面需要添加计数器，初始化变量\n//5.里面也需要操作表达式，完成计数器的更新，防止死循环\n```\n\n### 案例：打印人的一生\n\n```js\nvar i = 1;\nwhile (i <= 100) {\n    console.log('这个人今年' + i + '岁了');\n    i++;\n}\n```\n\n### 案例：计算1-100整数的和\n\n```js\nvar sum = 0;\nvar j = 1;\nwhile (j <= 100) {\n    sum += j;\n    j++;\n}\nconsole.log(sum);\n```\n\n```js\nvar message = prompt('你爱我吗');\nwhile (message !== '我爱你') {\n    message = prompt('你爱我吗');\n}\nalert('我也爱你');\n```\n\n## **「do while循环」**\n\n```js\n//1.do while语法结构\ndo {\n    //循环体\n} while (条件表达式)\n//2.执行思路，跟while不同的地方在于，do while先执行一次循环体，然后在判断条件，如果条件结果为真则继续执行循环体，否则退出循环\n//3.代码验证\nvar i = 1;\ndo {\n    console.log('你好吗');\n    i++;\n} while (i <= 100);\n//4.do while循环体至少执行一次\n```\n\n### 案例：打印人的一生\n\n```js\nvar i = 1;\ndo {\n    console.log('这个人今年' + i + '岁了');\n    i++;\n} while (i <= 100)\n```\n\n### 案例：计算1-100所有整数的和\n\n```js\nvar sum = 0;\nvar j = 1;\ndo {\n    sum += j;\n    j++;\n} while(j <= 100)\nconsole.log(sum)\n```\n\n## **「continue、break」**\n\n1.   `continue` 关键字用于立即跳出本次循环，继续下一次循环（本次循环体中 continue 之后的代码就会少执行一次）。\n\n2.   `break` 关键字用于立即跳出整个循环（循环结束）。\n\n```js\n//continue关键字 退出本次循环（当前次循环），继续执行剩余次数循环\nfor (var i = 1; i <= 5; i++) {\n    if (i == 3) {\n        continue;//只要遇见continue就退出本次循环，直接跳到i++\n    }\n    console.log('我正在吃第' + i + '个包子');\n}\n\n```\n\n### 案例：求1-100之间，除了能被7整除之外的整数和\n\n```js\nvar sum = 0;\nfor (var i = 1; i <= 100; i++) {\n    if (i % 7 == 0) {\n        continue;\n    }\n    sum += i;\n}\nconsole.log(sum);\n```\n\n```js\n//break退出整个循环\nfor (var i = 1; i <= 5; i++) {\n    if (i == 3) {\n        break;//退出整个循环\n    }\n    console.log('我正在吃第' + i + '个包子');\n}\n```\n\n# **代码规范**\n\n1. 标识符命名规范\n\n- 变量、函数的命名必须要有意义\n- 变量的名称一般用名词\n- 函数的名称一般用动词\n\n2. 操作符规范\n\n   ```js\n   // 操作符的左右两侧各保留一个空格\n   for (var i = 1; i <= 5; i++) {\n     if (i == 3) {\n         break; // 直接退出整个 for 循环，跳到整个for循环下面的语句\n     }\n     console.log('我正在吃第' + i + '个包子呢');\n   }\n   ```\n\n3. 单行注释规范\n\n   ```js\n    for (var i = 1; i <= 5; i++) {\n     if (i == 3) {\n         break; // 单行注释前面注意有个空格\n     }\n     console.log('我正在吃第' + i + '个包子呢');\n   }\n   ```\n\n4. 其他规范\n\n   ```js\n   //关键词 操作符空格\n   if (true) {}\n   for (var i = 0; i<=10; i++) {}\n   ```\n\n   \n\n\n\n","source":"_posts/前端/Javascript流程控制.md","raw":"---\ntitle: Javascript流程控制\ndate: 2022-05-25\nupdated: 2022-06-03\ntags:\n  - 小白的前端之路\n  - JavaScript基础\ncategories: 前端开发\nkeywords: \ndescription: \ntop_img: ./img/bg14.jpg\ncover: ./img/bg13.jpg\n\n---\n\n\n# **流程控制**\n\n在一个程序执行的过程中，各条代码的执行顺序对程序的结果是有直接影响的。很多时候我们要通过控制代码的执行顺序来实现我们要完成的功能。流程控制主要有三种结构，分别是**顺序结构**、**分支结构**和**循环结构**，代表三种代码执行的顺序。\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202205311435023.png)\n\n# **分支结构**\n\njs语言提供了两种分支结构语句\n\n- if语句\n- switch语句\n\n## **「if 语句」**\n\n```js\n//条件成立执行代码，否则什么也不做\nif(条件表达式){\n    //条件成立执行代码语句\n}\n```\n\n语句可以理解为一个行为，循环语句和分支语句就是典型的语句。一个程序由多个语句组成，一般情况下，会被分割成一个一个的语句。\n\n```js\n//执行思路，如果if里面的条件表达式结果为真，true，则执行大括号里面的执行语句\n//如果if条件表达式结果为假，则不执行大括号里的语句，执行if语句后面的代码\n//演示\nif (3>2){\n    alert('前端路漫漫');\n}\n```\n\n## **「if else语句（双分支语句）」**\n\n语法结构\n\n```js\n//条件成立，执行if里代码，否则执行else里代码\nif(条件表达式){\n    //if条件成立时执行的代码\n}\nelse{\n    //else执行的代码\n}\n//if里面的语句1和else里面的语句2，最终只能有一个语句被执行 2选1\n//else后面直接跟大括号\n```\n\n### 案例：进入网吧\n\n```js\n//弹出prompt警示框，用户输入年龄，存入变量age\n//使用if语句判断年龄，如年龄大于等于18，执行括号里内容\nvar age = prompt('请输入您的年龄')\nif(age >= 18){\n    alert('我想带你去网吧');\n} else{\n    alert('滚');\n}\n```\n\n### 案例：判断闰年\n\n```js\n//算法：能被四整除且不能被100整除的为闰年 或着 能被400整除的是闰年\n//弹出prompt输入框，输入年份存入白能量\n//使用if语句判断\n//注意&& 还有|| ，同时注意判断整除的方法是取余为0\nvar year = prompt('请输入年份');\nif(year % 4 == 0 && year % 100 != 0 || year % 400 == 0){\n    alert('您输入的年份是闰年');\n}\nelse{\n    alert('您输入的年份是平年');\n}\n\n```\n\n## **「if else if 语句（多分支语句）」**\n\n```js\n//1.多分支语句，就是利用多个条件来选择不同的语句执行，得到不同的结果，多选一的过程\n//2.if else if语句是多分支语句\n//3.语法规范\nif(条件表达式1){\n    //语句1;\n} else if(条件表达式2){\n    //语句2;\n} else if(条件表达式3){\n    //语句3;\n} else {\n    //最后的语句;\n}\n//4.执行思路\n/*\t如果条件表达式1满足就执行语句1，执行完毕后，退出整个if分支语句\n\t如果条件表达式1不满足，则判断条件表达式2，满足的话执行语句2，以此类推\n\t如果上面条件都不满足，则执行else里的语句\n*/\n//5.注意点\n/* 多分支语句是多选一，最后只能有一个语句被执行\n\telse if 理论上可以是任意多个\n\t\n```\n\n### 案例：判断成绩\n\n```js\n//(伪代码) 按从大到小的顺序\n//弹出prompt输入框，让用户输入分数保存在变量中\n//使用if else if多分支判断\nvar score = prompt('请输入成绩');\nif(score >= 90){\n    alert('A');\n} else if(score >= 80){\n    alert('B');\n} else if(score >= 70){\n    alert('C');\n} else if(score >= 60){\n    alert('D');\n} else{\n    alert('E');\n}\n```\n\n## **「三元表达式」**\n\n```js\n//1.有三个运算符组成的式子我们成为三元表达式\n//2.++num  3+5  ? :\n//3.语法结构\n条件表达式?表达式1:表达式2;\n//4.执行思路\n//如果条件表达式结果为真，则返回表达式1的值，如果条件表达式结果为假，则返回表达式2的值\n//5.代码体验\nvar num = 10;\nvar result = num > 5 ? '是的' : '不是的';\nconsole.log(result);\n```\n\n### 案例：数字补0\n\n```js\n//用户输入0-59之间的一个数字\n//如果数字小于10，则在这个数字面前补0，（加0拼接），否则不做操作\n//用一个变量接收这个返回值，输出\nvar time = prompt('请输入一个数字');\nvar result = time < 10 ? '0' + time : time;//把返回值赋值给第一个变量\nalert(result);\n```\n\n## **「switch分支」**\n\nswitch语句也是多分支语句，它用于基于不同的条件来执行不同的代码，当要针对变量设置一系列的特定值的选项时，就可以使用switch\n\n```js\n//1.switch也是多分支，可以实现多线一\n//2.语法结构  switch 转换，开关  case 小例子或选项的意思\nswitch(表达式){\n    case value1:\n        执行语句1;\n        break;\n    case value2:\n        执行语句2;\n        break;\n    ...\n    default:\n    \t执行最后的语句;\n}\n//3.执行思路，利用表达式的值和case后面的选项值相匹配，如果匹配上，就执行该case里面的语句，如果都没有匹配上，则执行default里面的语句\n//4.代码验证\nswitch(2){\n    case 1:\n        console.log('这是1');\n        break;\n    case 2:\n        console.log('这是2');\n        break;\n    case 3:\n        console.log('这是3');\n        break;\n    default:\n        console.log('无匹配结果');\n}\n```\n\n### switch注意事项\n\n```js\nvar num = 1;\nswitch(num){\n    case 1:\n        console.log(1);\n        break;\n    case 2:\n        console.log(2);\n        break;\n    case 3:\n        console.log(3);\n        break;\n    default:\n        console.log('无匹配');\n}\n//1.开发里面，表达式经常写成变量\n//2.num和case里值相匹配的时候要求全等，必须数值和数据类型一致才可以 num === 1\n//3.break 如果当前case没有break，则不会退出switch，而是继续执行下一个case\n```\n\n### 案例：查询水果案例\n\n```js\n//弹出prompt输入框，输入水果名称存入变量\n//将这个变量作为switch括号内的表达式\n//case后面的值写几个不同水果的名称，注意一定要加引号，因为必须时全等匹配\n//弹出不同价格即可，注意每个case后面的break语句\n//将default设置成无此水果\nvar frult = prompt('请输入查询的水果');\nswitch(frult){\n    case '苹果':\n        alert('苹果的价格是3.5')；\n        break;\n    case '榴莲':\n        alert('榴莲的价格是35');\n        break;\n    default:\n        alert('无此水果');\n}\n```\n\n### switch和if..else..if的区别\n\n1. 一般情况下，可以互相替换\n\n2. switch…case通常处理case比较确定的值的情况，而if…else…if更加灵活常用于范围判断\n\n3. switch语句进行条件判断后直接执行条件语句，效率更高，而if else if有多少条件就要判断多少次\n\n4. 当分支较少时，if…else执行效率比switch高\n\n5. 当分支较多时，switch语句执行效率比较高，且结构清晰\n\n   \n\n   \n\n# **循环结构**\n\njs中主要由三种类型的循环语句\n\n- for循环\n- while循环\n- do..while循环\n\n## **「for循环」**\n\n```js\n//1.for循环重复执行某些代码，通常跟计数有关\n//2.for循环语法结构\nfor(初始化变量;条件表达式;操作表达式){\n    循环体;\n}\n//3.初始化变量 就是用var声明的一个普通变量，通常用作计数器使用\n//4.条件表达式 就是用来决定每一次循环是否继续执行 ，就是终止的条件\n//5.操作表达式 是每次循环最后执行的代码 经常用于我们计数器变量的更新（递增或者递减）\n//6.代码体验\nfor(var i = 1; i <= 100; i++){\n    console.log('你好吗');\n}\n```\n\nfor循环执行过程\n\n1. 初始化变量，初始化操作在整个 for 循环只会执行一次。\n2. 执行条件表达式，如果为true，则执行循环体语句，否则退出循环，循环结束。\n3. 执行操作表达式,此时第一轮结束。\n4. 第二轮开始，直接去执行条件表达式（不再初始化变量），如果为 true ，则去执行循环体语句，否则退出循环。\n5. 继续执行操作表达式，第二轮结束。......\n\n```js\n//for循环执行相同代码\nfor(var i = 1; i <= 10; i++){\n    console.log('我错了');\n}\n//让用户控制输出次数\nvar num = prompt('输入循环次数');\nvar(var i = 1; i <= num; i++){\n    console.log('我错了');\n}\n```\n\n```js\n//for循环可以重复执行不同的代码 因为我们有计数器变量i的存在 i每次循环值都会变化\nfor(var i = 1; i <= 100; i++){\n    if(i == 1){\n        console.log('这个人今年1岁了，他出生了');\n    } else if(i == 100){\n        console.log('这个人今年100岁了，他死了');\n    } else {\n        console.log('这个人今年' + i + '岁了');//字符串与数字拼接\n    }\n}\n```\n\n### 案例：for循环求1-100累加和案例\n\n```js\n// 需要循环100次，我们需要一个计数器i\n//需要一个储存结果的变量sum，初始值为0\n//核心算法：1+2+3+4+...，sum = sum + i\nvar sum = 0;\nfor (var i = 1; i <= 100; i++) {\n    sum = sum + i;\n    //sum += i;\n}\nconsole.log(sum);\n\n\n```\n\n### 案例：for循环求1-100平均值\n\n```js\nvar sum = 0;\nvar average = 0;\nfor (var i = 1; i <= 100; i++) {\n    sum += i;\n}\naverage = sum / 100;\nconsole.log(average);\n```\n\n### 案例：求1-100所有奇数和偶数的和\n\n```js\nvar even = 0;\nvar odd = 0;\nfor (var i = 1; i <= 100; i++) {\n    if (i % 2 = 0) {\n        even += i;\n    } else {\n        odd += i;\n    }     \n}\nconsole.log('1-100之间所有的偶数的和是' + even);\nconsole.log('1-100之间所有的奇数的和是' + odd);\n```\n\n### 案例：求1-100所有能被3整除的数字的和\n\n```javascript\nvar result = 0;\nfor (var i = 1; i <= 100; i++) {\n    if (i % 3 = 0) {\n        result += i;\n    }\n} \nconsole.log('1-100之前能够被3整除的数字的和是' + result);\n```\n\n### 案例：求学生成绩案例\n\n```js\n//弹出输入框输入总的班级人数（num)\n//依次输入学生成绩（保存起来 score），此时用到for循环\n//for循环，弹出的次数跟输入的班级总人数有关系，条件表达式 i <= num\n//进行业务处理：计算成绩，先求总成绩（sum），之后求平均成绩（average）\n//弹出结果\nvar num = prompt('请输入班级总人数：'); // num 班级总人数\nvar sum = 0; // 求和的变量sum\nvar average = 0; // 平均值的变量average\nfor (var i = 1; i <= num; i++) {\n    var score = prompt('请输入第' + i + '个学生成绩');\n    // 因为从prompt取过来的数都是字符串型的，需要转换成数字型\n    sum = sum + parseFloat(score);\n}\naverage = sum / num;\nalert('班级总成绩是' + sum);\nalert('班级平均分是' + average);\n```\n\n### 案例：一行打印5个星星\n\n```js\n//一行打印5个星星(不能全部显示)\nfor (var i = 1; i <= 5; i++) {\n    console.log('#');\n}\n//如果一行全部展示出星星，采用拼接字符串型\nvar str = '';\nfor (var i = 1; i <= 5; i++) {\n    str = str + '#';\n}\nconsole.log(str);\n//自定义输出个数\nvar num = prompt('请输入星星的个数');\nvar str = '';\nfor (var i = 1; i <= num; i++){\n    str = str + '#';\n}\nconsole.log(str);\n```\n\n## **「双重for循环」**\n\n循环嵌套是指在一个循环语句中再定义一个循环语句的语法结构，例如在for循环语句中，可以再嵌套一个for 循环，这样的 for 循环语句我们称之为双重for循环。\n\n```js\n//1.双重for循环语法结构\nfor (外层初始化变量; 外层条件表达式; 外层操作表达式) {\n    for (里层初始化变量; 里层条件表达式; 里层操作表达式){\n        //执行语句\n    }\n}\n//2.我们可以把里面的循环看作是外层循环的语句\n//3.外层循环循环一次，里面的循环执行全部\n//4.代码验证\nfor (var i = 1; i <= 3; i++) {\n    console.log('这是外层循环第' + i + '次');\n    for (var j = 1; j <= 3; j++) {\n        console.log('这是内层循环第' + j + '次');\n    }\n}\n```\n\n### 案例：打印5行5列星星\n\n```js\n//内层循环负责一行打印5个星星\n//外层循环负责打印5行\nvar str = '';\nfor (var i = 1; i <= 5; i++) { //外层负责打印5行\n    for ( var j = 1; j <= 5; j++){ // 内层负责一行打印5个星星\n        str = str + '#';\n    }\n    //一行打完5个星星需要另起一行，加 \\n\n    str = str + '\\n';\n}\nconsole.log(str);\n```\n\n### 案例：打印n行n列星星\n\n```js\n//打印n行n列\nvar rows = prompt('请您输入行数');\nvar cols = prompt('请您输入列数');\nvar str = '';\nfor (var i = 1; i <= rows; i++) {\n    for (var j = 1; j <= cols; j++) {\n        str = str + '#';\n    }\n    str += '\\n';\n}\nconsole.log(str);\n```\n\n### 案例：打印倒三角\n\n```js\n//打印倒三角\n//核心算法：j = i; j <= 10; j++\nvar str = '';\nfor (var i = 1; i <= 10; i++) { //外层控制行数\n    for (var j = i; j <= 10; j++) { //内层循环打印个数不一样 j = i\n        str = str + '';\n    }\n    str += '\\n';\n}\nconsole.log(str);\n```\n\n### 案例：打印九九乘法表\n\n```js\n//九九乘法表\n//一共有9行，但每行个数不一样，因此用到双重for循环\n//外层for循环控制行数i，循环9次，可以打印9行\n//内层for循环控制每行公式 j\n//核心算法：每一行公式的个数正好和行数一样， j <= i\n//每行打印完毕都需要重新换行\nvar str = '';\nfor (i = 1; i <= 9; i++) { //外层控制行数\n    for (var j = 1; j <= i; j++) { //内层控制每一行个数 j <= i\n        //1 × 2 = 2\n        //str = str + '#'\n        str += j + '×' + i + '=' + i * j + '\\t'; //字符串拼接\n    }\n    str += '\\t';\n}\nconsole.log(str);\n\n```\n\n\n\n## **「while循环」**\n\n```js\n//1.while循环语法结构  （while 当...时候）\nwhile (条件表达式) {\n    //循环体\n}\n//2.执行思路，当条件表达式结果为true时，则执行循环体，否则退出循环\n//3.代码验证\nvar num = 1;\nwhile (num <= 100) {\n    console.log('循环');\n    num++;\n}\n//4.里面需要添加计数器，初始化变量\n//5.里面也需要操作表达式，完成计数器的更新，防止死循环\n```\n\n### 案例：打印人的一生\n\n```js\nvar i = 1;\nwhile (i <= 100) {\n    console.log('这个人今年' + i + '岁了');\n    i++;\n}\n```\n\n### 案例：计算1-100整数的和\n\n```js\nvar sum = 0;\nvar j = 1;\nwhile (j <= 100) {\n    sum += j;\n    j++;\n}\nconsole.log(sum);\n```\n\n```js\nvar message = prompt('你爱我吗');\nwhile (message !== '我爱你') {\n    message = prompt('你爱我吗');\n}\nalert('我也爱你');\n```\n\n## **「do while循环」**\n\n```js\n//1.do while语法结构\ndo {\n    //循环体\n} while (条件表达式)\n//2.执行思路，跟while不同的地方在于，do while先执行一次循环体，然后在判断条件，如果条件结果为真则继续执行循环体，否则退出循环\n//3.代码验证\nvar i = 1;\ndo {\n    console.log('你好吗');\n    i++;\n} while (i <= 100);\n//4.do while循环体至少执行一次\n```\n\n### 案例：打印人的一生\n\n```js\nvar i = 1;\ndo {\n    console.log('这个人今年' + i + '岁了');\n    i++;\n} while (i <= 100)\n```\n\n### 案例：计算1-100所有整数的和\n\n```js\nvar sum = 0;\nvar j = 1;\ndo {\n    sum += j;\n    j++;\n} while(j <= 100)\nconsole.log(sum)\n```\n\n## **「continue、break」**\n\n1.   `continue` 关键字用于立即跳出本次循环，继续下一次循环（本次循环体中 continue 之后的代码就会少执行一次）。\n\n2.   `break` 关键字用于立即跳出整个循环（循环结束）。\n\n```js\n//continue关键字 退出本次循环（当前次循环），继续执行剩余次数循环\nfor (var i = 1; i <= 5; i++) {\n    if (i == 3) {\n        continue;//只要遇见continue就退出本次循环，直接跳到i++\n    }\n    console.log('我正在吃第' + i + '个包子');\n}\n\n```\n\n### 案例：求1-100之间，除了能被7整除之外的整数和\n\n```js\nvar sum = 0;\nfor (var i = 1; i <= 100; i++) {\n    if (i % 7 == 0) {\n        continue;\n    }\n    sum += i;\n}\nconsole.log(sum);\n```\n\n```js\n//break退出整个循环\nfor (var i = 1; i <= 5; i++) {\n    if (i == 3) {\n        break;//退出整个循环\n    }\n    console.log('我正在吃第' + i + '个包子');\n}\n```\n\n# **代码规范**\n\n1. 标识符命名规范\n\n- 变量、函数的命名必须要有意义\n- 变量的名称一般用名词\n- 函数的名称一般用动词\n\n2. 操作符规范\n\n   ```js\n   // 操作符的左右两侧各保留一个空格\n   for (var i = 1; i <= 5; i++) {\n     if (i == 3) {\n         break; // 直接退出整个 for 循环，跳到整个for循环下面的语句\n     }\n     console.log('我正在吃第' + i + '个包子呢');\n   }\n   ```\n\n3. 单行注释规范\n\n   ```js\n    for (var i = 1; i <= 5; i++) {\n     if (i == 3) {\n         break; // 单行注释前面注意有个空格\n     }\n     console.log('我正在吃第' + i + '个包子呢');\n   }\n   ```\n\n4. 其他规范\n\n   ```js\n   //关键词 操作符空格\n   if (true) {}\n   for (var i = 0; i<=10; i++) {}\n   ```\n\n   \n\n\n\n","slug":"前端/Javascript流程控制","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cl5db79k9001gywtucow371ef","content":"<h1 id=\"流程控制\"><a href=\"#流程控制\" class=\"headerlink\" title=\"流程控制\"></a><strong>流程控制</strong></h1><p>在一个程序执行的过程中，各条代码的执行顺序对程序的结果是有直接影响的。很多时候我们要通过控制代码的执行顺序来实现我们要完成的功能。流程控制主要有三种结构，分别是<strong>顺序结构</strong>、<strong>分支结构</strong>和<strong>循环结构</strong>，代表三种代码执行的顺序。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202205311435023.png\"></p>\n<h1 id=\"分支结构\"><a href=\"#分支结构\" class=\"headerlink\" title=\"分支结构\"></a><strong>分支结构</strong></h1><p>js语言提供了两种分支结构语句</p>\n<ul>\n<li>if语句</li>\n<li>switch语句</li>\n</ul>\n<h2 id=\"「if-语句」\"><a href=\"#「if-语句」\" class=\"headerlink\" title=\"「if 语句」\"></a><strong>「if 语句」</strong></h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//条件成立执行代码，否则什么也不做</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(条件表达式)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//条件成立执行代码语句</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>语句可以理解为一个行为，循环语句和分支语句就是典型的语句。一个程序由多个语句组成，一般情况下，会被分割成一个一个的语句。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//执行思路，如果if里面的条件表达式结果为真，true，则执行大括号里面的执行语句</span></span><br><span class=\"line\"><span class=\"comment\">//如果if条件表达式结果为假，则不执行大括号里的语句，执行if语句后面的代码</span></span><br><span class=\"line\"><span class=\"comment\">//演示</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"number\">3</span>&gt;<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">&#x27;前端路漫漫&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「if-else语句（双分支语句）」\"><a href=\"#「if-else语句（双分支语句）」\" class=\"headerlink\" title=\"「if else语句（双分支语句）」\"></a><strong>「if else语句（双分支语句）」</strong></h2><p>语法结构</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//条件成立，执行if里代码，否则执行else里代码</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(条件表达式)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//if条件成立时执行的代码</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//else执行的代码</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//if里面的语句1和else里面的语句2，最终只能有一个语句被执行 2选1</span></span><br><span class=\"line\"><span class=\"comment\">//else后面直接跟大括号</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例：进入网吧\"><a href=\"#案例：进入网吧\" class=\"headerlink\" title=\"案例：进入网吧\"></a>案例：进入网吧</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//弹出prompt警示框，用户输入年龄，存入变量age</span></span><br><span class=\"line\"><span class=\"comment\">//使用if语句判断年龄，如年龄大于等于18，执行括号里内容</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> age = prompt(<span class=\"string\">&#x27;请输入您的年龄&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span>(age &gt;= <span class=\"number\">18</span>)&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">&#x27;我想带你去网吧&#x27;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">&#x27;滚&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例：判断闰年\"><a href=\"#案例：判断闰年\" class=\"headerlink\" title=\"案例：判断闰年\"></a>案例：判断闰年</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//算法：能被四整除且不能被100整除的为闰年 或着 能被400整除的是闰年</span></span><br><span class=\"line\"><span class=\"comment\">//弹出prompt输入框，输入年份存入白能量</span></span><br><span class=\"line\"><span class=\"comment\">//使用if语句判断</span></span><br><span class=\"line\"><span class=\"comment\">//注意&amp;&amp; 还有|| ，同时注意判断整除的方法是取余为0</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> year = prompt(<span class=\"string\">&#x27;请输入年份&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(year % <span class=\"number\">4</span> == <span class=\"number\">0</span> &amp;&amp; year % <span class=\"number\">100</span> != <span class=\"number\">0</span> || year % <span class=\"number\">400</span> == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">&#x27;您输入的年份是闰年&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">&#x27;您输入的年份是平年&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「if-else-if-语句（多分支语句）」\"><a href=\"#「if-else-if-语句（多分支语句）」\" class=\"headerlink\" title=\"「if else if 语句（多分支语句）」\"></a><strong>「if else if 语句（多分支语句）」</strong></h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1.多分支语句，就是利用多个条件来选择不同的语句执行，得到不同的结果，多选一的过程</span></span><br><span class=\"line\"><span class=\"comment\">//2.if else if语句是多分支语句</span></span><br><span class=\"line\"><span class=\"comment\">//3.语法规范</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(条件表达式<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//语句1;</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(条件表达式<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//语句2;</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(条件表达式<span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//语句3;</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//最后的语句;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//4.执行思路</span></span><br><span class=\"line\"><span class=\"comment\">/*\t如果条件表达式1满足就执行语句1，执行完毕后，退出整个if分支语句</span></span><br><span class=\"line\"><span class=\"comment\">\t如果条件表达式1不满足，则判断条件表达式2，满足的话执行语句2，以此类推</span></span><br><span class=\"line\"><span class=\"comment\">\t如果上面条件都不满足，则执行else里的语句</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"comment\">//5.注意点</span></span><br><span class=\"line\"><span class=\"comment\">/* 多分支语句是多选一，最后只能有一个语句被执行</span></span><br><span class=\"line\"><span class=\"comment\">\telse if 理论上可以是任意多个</span></span><br><span class=\"line\"><span class=\"comment\">\t</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例：判断成绩\"><a href=\"#案例：判断成绩\" class=\"headerlink\" title=\"案例：判断成绩\"></a>案例：判断成绩</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//(伪代码) 按从大到小的顺序</span></span><br><span class=\"line\"><span class=\"comment\">//弹出prompt输入框，让用户输入分数保存在变量中</span></span><br><span class=\"line\"><span class=\"comment\">//使用if else if多分支判断</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> score = prompt(<span class=\"string\">&#x27;请输入成绩&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(score &gt;= <span class=\"number\">90</span>)&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">&#x27;A&#x27;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(score &gt;= <span class=\"number\">80</span>)&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">&#x27;B&#x27;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(score &gt;= <span class=\"number\">70</span>)&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">&#x27;C&#x27;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(score &gt;= <span class=\"number\">60</span>)&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">&#x27;D&#x27;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">&#x27;E&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「三元表达式」\"><a href=\"#「三元表达式」\" class=\"headerlink\" title=\"「三元表达式」\"></a><strong>「三元表达式」</strong></h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1.有三个运算符组成的式子我们成为三元表达式</span></span><br><span class=\"line\"><span class=\"comment\">//2.++num  3+5  ? :</span></span><br><span class=\"line\"><span class=\"comment\">//3.语法结构</span></span><br><span class=\"line\">条件表达式?表达式<span class=\"number\">1</span>:表达式<span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"comment\">//4.执行思路</span></span><br><span class=\"line\"><span class=\"comment\">//如果条件表达式结果为真，则返回表达式1的值，如果条件表达式结果为假，则返回表达式2的值</span></span><br><span class=\"line\"><span class=\"comment\">//5.代码体验</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = num &gt; <span class=\"number\">5</span> ? <span class=\"string\">&#x27;是的&#x27;</span> : <span class=\"string\">&#x27;不是的&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例：数字补0\"><a href=\"#案例：数字补0\" class=\"headerlink\" title=\"案例：数字补0\"></a>案例：数字补0</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//用户输入0-59之间的一个数字</span></span><br><span class=\"line\"><span class=\"comment\">//如果数字小于10，则在这个数字面前补0，（加0拼接），否则不做操作</span></span><br><span class=\"line\"><span class=\"comment\">//用一个变量接收这个返回值，输出</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> time = prompt(<span class=\"string\">&#x27;请输入一个数字&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = time &lt; <span class=\"number\">10</span> ? <span class=\"string\">&#x27;0&#x27;</span> + time : time;<span class=\"comment\">//把返回值赋值给第一个变量</span></span><br><span class=\"line\">alert(result);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「switch分支」\"><a href=\"#「switch分支」\" class=\"headerlink\" title=\"「switch分支」\"></a><strong>「switch分支」</strong></h2><p>switch语句也是多分支语句，它用于基于不同的条件来执行不同的代码，当要针对变量设置一系列的特定值的选项时，就可以使用switch</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1.switch也是多分支，可以实现多线一</span></span><br><span class=\"line\"><span class=\"comment\">//2.语法结构  switch 转换，开关  case 小例子或选项的意思</span></span><br><span class=\"line\"><span class=\"keyword\">switch</span>(表达式)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> value1:</span><br><span class=\"line\">        执行语句<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> value2:</span><br><span class=\"line\">        执行语句<span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"attr\">default</span>:</span><br><span class=\"line\">    \t执行最后的语句;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//3.执行思路，利用表达式的值和case后面的选项值相匹配，如果匹配上，就执行该case里面的语句，如果都没有匹配上，则执行default里面的语句</span></span><br><span class=\"line\"><span class=\"comment\">//4.代码验证</span></span><br><span class=\"line\"><span class=\"keyword\">switch</span>(<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;这是1&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;这是2&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;这是3&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;无匹配结果&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"switch注意事项\"><a href=\"#switch注意事项\" class=\"headerlink\" title=\"switch注意事项\"></a>switch注意事项</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">switch</span>(num)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;无匹配&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//1.开发里面，表达式经常写成变量</span></span><br><span class=\"line\"><span class=\"comment\">//2.num和case里值相匹配的时候要求全等，必须数值和数据类型一致才可以 num === 1</span></span><br><span class=\"line\"><span class=\"comment\">//3.break 如果当前case没有break，则不会退出switch，而是继续执行下一个case</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例：查询水果案例\"><a href=\"#案例：查询水果案例\" class=\"headerlink\" title=\"案例：查询水果案例\"></a>案例：查询水果案例</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//弹出prompt输入框，输入水果名称存入变量</span></span><br><span class=\"line\"><span class=\"comment\">//将这个变量作为switch括号内的表达式</span></span><br><span class=\"line\"><span class=\"comment\">//case后面的值写几个不同水果的名称，注意一定要加引号，因为必须时全等匹配</span></span><br><span class=\"line\"><span class=\"comment\">//弹出不同价格即可，注意每个case后面的break语句</span></span><br><span class=\"line\"><span class=\"comment\">//将default设置成无此水果</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> frult = prompt(<span class=\"string\">&#x27;请输入查询的水果&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">switch</span>(frult)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;苹果&#x27;</span>:</span><br><span class=\"line\">        alert(<span class=\"string\">&#x27;苹果的价格是3.5&#x27;</span>)；</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;榴莲&#x27;</span>:</span><br><span class=\"line\">        alert(<span class=\"string\">&#x27;榴莲的价格是35&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        alert(<span class=\"string\">&#x27;无此水果&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"switch和if-else-if的区别\"><a href=\"#switch和if-else-if的区别\" class=\"headerlink\" title=\"switch和if..else..if的区别\"></a>switch和if..else..if的区别</h3><ol>\n<li><p>一般情况下，可以互相替换</p>\n</li>\n<li><p>switch…case通常处理case比较确定的值的情况，而if…else…if更加灵活常用于范围判断</p>\n</li>\n<li><p>switch语句进行条件判断后直接执行条件语句，效率更高，而if else if有多少条件就要判断多少次</p>\n</li>\n<li><p>当分支较少时，if…else执行效率比switch高</p>\n</li>\n<li><p>当分支较多时，switch语句执行效率比较高，且结构清晰</p>\n</li>\n</ol>\n<h1 id=\"循环结构\"><a href=\"#循环结构\" class=\"headerlink\" title=\"循环结构\"></a><strong>循环结构</strong></h1><p>js中主要由三种类型的循环语句</p>\n<ul>\n<li>for循环</li>\n<li>while循环</li>\n<li>do..while循环</li>\n</ul>\n<h2 id=\"「for循环」\"><a href=\"#「for循环」\" class=\"headerlink\" title=\"「for循环」\"></a><strong>「for循环」</strong></h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1.for循环重复执行某些代码，通常跟计数有关</span></span><br><span class=\"line\"><span class=\"comment\">//2.for循环语法结构</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(初始化变量;条件表达式;操作表达式)&#123;</span><br><span class=\"line\">    循环体;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//3.初始化变量 就是用var声明的一个普通变量，通常用作计数器使用</span></span><br><span class=\"line\"><span class=\"comment\">//4.条件表达式 就是用来决定每一次循环是否继续执行 ，就是终止的条件</span></span><br><span class=\"line\"><span class=\"comment\">//5.操作表达式 是每次循环最后执行的代码 经常用于我们计数器变量的更新（递增或者递减）</span></span><br><span class=\"line\"><span class=\"comment\">//6.代码体验</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">100</span>; i++)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;你好吗&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>for循环执行过程</p>\n<ol>\n<li>初始化变量，初始化操作在整个 for 循环只会执行一次。</li>\n<li>执行条件表达式，如果为true，则执行循环体语句，否则退出循环，循环结束。</li>\n<li>执行操作表达式,此时第一轮结束。</li>\n<li>第二轮开始，直接去执行条件表达式（不再初始化变量），如果为 true ，则去执行循环体语句，否则退出循环。</li>\n<li>继续执行操作表达式，第二轮结束。……</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//for循环执行相同代码</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">10</span>; i++)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;我错了&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//让用户控制输出次数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> num = prompt(<span class=\"string\">&#x27;输入循环次数&#x27;</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">var</span>(<span class=\"params\"><span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= num; i++</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;我错了&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//for循环可以重复执行不同的代码 因为我们有计数器变量i的存在 i每次循环值都会变化</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">100</span>; i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;这个人今年1岁了，他出生了&#x27;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(i == <span class=\"number\">100</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;这个人今年100岁了，他死了&#x27;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;这个人今年&#x27;</span> + i + <span class=\"string\">&#x27;岁了&#x27;</span>);<span class=\"comment\">//字符串与数字拼接</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例：for循环求1-100累加和案例\"><a href=\"#案例：for循环求1-100累加和案例\" class=\"headerlink\" title=\"案例：for循环求1-100累加和案例\"></a>案例：for循环求1-100累加和案例</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 需要循环100次，我们需要一个计数器i</span></span><br><span class=\"line\"><span class=\"comment\">//需要一个储存结果的变量sum，初始值为0</span></span><br><span class=\"line\"><span class=\"comment\">//核心算法：1+2+3+4+...，sum = sum + i</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">    sum = sum + i;</span><br><span class=\"line\">    <span class=\"comment\">//sum += i;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例：for循环求1-100平均值\"><a href=\"#案例：for循环求1-100平均值\" class=\"headerlink\" title=\"案例：for循环求1-100平均值\"></a>案例：for循环求1-100平均值</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> average = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">    sum += i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">average = sum / <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(average);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例：求1-100所有奇数和偶数的和\"><a href=\"#案例：求1-100所有奇数和偶数的和\" class=\"headerlink\" title=\"案例：求1-100所有奇数和偶数的和\"></a>案例：求1-100所有奇数和偶数的和</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> even = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> odd = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i % <span class=\"number\">2</span> = <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        even += i;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        odd += i;</span><br><span class=\"line\">    &#125;     </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;1-100之间所有的偶数的和是&#x27;</span> + even);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;1-100之间所有的奇数的和是&#x27;</span> + odd);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例：求1-100所有能被3整除的数字的和\"><a href=\"#案例：求1-100所有能被3整除的数字的和\" class=\"headerlink\" title=\"案例：求1-100所有能被3整除的数字的和\"></a>案例：求1-100所有能被3整除的数字的和</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i % <span class=\"number\">3</span> = <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        result += i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;1-100之前能够被3整除的数字的和是&#x27;</span> + result);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例：求学生成绩案例\"><a href=\"#案例：求学生成绩案例\" class=\"headerlink\" title=\"案例：求学生成绩案例\"></a>案例：求学生成绩案例</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//弹出输入框输入总的班级人数（num)</span></span><br><span class=\"line\"><span class=\"comment\">//依次输入学生成绩（保存起来 score），此时用到for循环</span></span><br><span class=\"line\"><span class=\"comment\">//for循环，弹出的次数跟输入的班级总人数有关系，条件表达式 i &lt;= num</span></span><br><span class=\"line\"><span class=\"comment\">//进行业务处理：计算成绩，先求总成绩（sum），之后求平均成绩（average）</span></span><br><span class=\"line\"><span class=\"comment\">//弹出结果</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> num = prompt(<span class=\"string\">&#x27;请输入班级总人数：&#x27;</span>); <span class=\"comment\">// num 班级总人数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>; <span class=\"comment\">// 求和的变量sum</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> average = <span class=\"number\">0</span>; <span class=\"comment\">// 平均值的变量average</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= num; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> score = prompt(<span class=\"string\">&#x27;请输入第&#x27;</span> + i + <span class=\"string\">&#x27;个学生成绩&#x27;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 因为从prompt取过来的数都是字符串型的，需要转换成数字型</span></span><br><span class=\"line\">    sum = sum + <span class=\"built_in\">parseFloat</span>(score);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">average = sum / num;</span><br><span class=\"line\">alert(<span class=\"string\">&#x27;班级总成绩是&#x27;</span> + sum);</span><br><span class=\"line\">alert(<span class=\"string\">&#x27;班级平均分是&#x27;</span> + average);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例：一行打印5个星星\"><a href=\"#案例：一行打印5个星星\" class=\"headerlink\" title=\"案例：一行打印5个星星\"></a>案例：一行打印5个星星</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//一行打印5个星星(不能全部显示)</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;#&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//如果一行全部展示出星星，采用拼接字符串型</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">    str = str + <span class=\"string\">&#x27;#&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str);</span><br><span class=\"line\"><span class=\"comment\">//自定义输出个数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> num = prompt(<span class=\"string\">&#x27;请输入星星的个数&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= num; i++)&#123;</span><br><span class=\"line\">    str = str + <span class=\"string\">&#x27;#&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「双重for循环」\"><a href=\"#「双重for循环」\" class=\"headerlink\" title=\"「双重for循环」\"></a><strong>「双重for循环」</strong></h2><p>循环嵌套是指在一个循环语句中再定义一个循环语句的语法结构，例如在for循环语句中，可以再嵌套一个for 循环，这样的 for 循环语句我们称之为双重for循环。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1.双重for循环语法结构</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (外层初始化变量; 外层条件表达式; 外层操作表达式) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (里层初始化变量; 里层条件表达式; 里层操作表达式)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//执行语句</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//2.我们可以把里面的循环看作是外层循环的语句</span></span><br><span class=\"line\"><span class=\"comment\">//3.外层循环循环一次，里面的循环执行全部</span></span><br><span class=\"line\"><span class=\"comment\">//4.代码验证</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;这是外层循环第&#x27;</span> + i + <span class=\"string\">&#x27;次&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">1</span>; j &lt;= <span class=\"number\">3</span>; j++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;这是内层循环第&#x27;</span> + j + <span class=\"string\">&#x27;次&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例：打印5行5列星星\"><a href=\"#案例：打印5行5列星星\" class=\"headerlink\" title=\"案例：打印5行5列星星\"></a>案例：打印5行5列星星</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//内层循环负责一行打印5个星星</span></span><br><span class=\"line\"><span class=\"comment\">//外层循环负责打印5行</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">5</span>; i++) &#123; <span class=\"comment\">//外层负责打印5行</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( <span class=\"keyword\">var</span> j = <span class=\"number\">1</span>; j &lt;= <span class=\"number\">5</span>; j++)&#123; <span class=\"comment\">// 内层负责一行打印5个星星</span></span><br><span class=\"line\">        str = str + <span class=\"string\">&#x27;#&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//一行打完5个星星需要另起一行，加 \\n</span></span><br><span class=\"line\">    str = str + <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例：打印n行n列星星\"><a href=\"#案例：打印n行n列星星\" class=\"headerlink\" title=\"案例：打印n行n列星星\"></a>案例：打印n行n列星星</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//打印n行n列</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> rows = prompt(<span class=\"string\">&#x27;请您输入行数&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> cols = prompt(<span class=\"string\">&#x27;请您输入列数&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= rows; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">1</span>; j &lt;= cols; j++) &#123;</span><br><span class=\"line\">        str = str + <span class=\"string\">&#x27;#&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    str += <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例：打印倒三角\"><a href=\"#案例：打印倒三角\" class=\"headerlink\" title=\"案例：打印倒三角\"></a>案例：打印倒三角</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//打印倒三角</span></span><br><span class=\"line\"><span class=\"comment\">//核心算法：j = i; j &lt;= 10; j++</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">10</span>; i++) &#123; <span class=\"comment\">//外层控制行数</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = i; j &lt;= <span class=\"number\">10</span>; j++) &#123; <span class=\"comment\">//内层循环打印个数不一样 j = i</span></span><br><span class=\"line\">        str = str + <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    str += <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例：打印九九乘法表\"><a href=\"#案例：打印九九乘法表\" class=\"headerlink\" title=\"案例：打印九九乘法表\"></a>案例：打印九九乘法表</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//九九乘法表</span></span><br><span class=\"line\"><span class=\"comment\">//一共有9行，但每行个数不一样，因此用到双重for循环</span></span><br><span class=\"line\"><span class=\"comment\">//外层for循环控制行数i，循环9次，可以打印9行</span></span><br><span class=\"line\"><span class=\"comment\">//内层for循环控制每行公式 j</span></span><br><span class=\"line\"><span class=\"comment\">//核心算法：每一行公式的个数正好和行数一样， j &lt;= i</span></span><br><span class=\"line\"><span class=\"comment\">//每行打印完毕都需要重新换行</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">9</span>; i++) &#123; <span class=\"comment\">//外层控制行数</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">1</span>; j &lt;= i; j++) &#123; <span class=\"comment\">//内层控制每一行个数 j &lt;= i</span></span><br><span class=\"line\">        <span class=\"comment\">//1 × 2 = 2</span></span><br><span class=\"line\">        <span class=\"comment\">//str = str + &#x27;#&#x27;</span></span><br><span class=\"line\">        str += j + <span class=\"string\">&#x27;×&#x27;</span> + i + <span class=\"string\">&#x27;=&#x27;</span> + i * j + <span class=\"string\">&#x27;\\t&#x27;</span>; <span class=\"comment\">//字符串拼接</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    str += <span class=\"string\">&#x27;\\t&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"「while循环」\"><a href=\"#「while循环」\" class=\"headerlink\" title=\"「while循环」\"></a><strong>「while循环」</strong></h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1.while循环语法结构  （while 当...时候）</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> (条件表达式) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//循环体</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//2.执行思路，当条件表达式结果为true时，则执行循环体，否则退出循环</span></span><br><span class=\"line\"><span class=\"comment\">//3.代码验证</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (num &lt;= <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;循环&#x27;</span>);</span><br><span class=\"line\">    num++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//4.里面需要添加计数器，初始化变量</span></span><br><span class=\"line\"><span class=\"comment\">//5.里面也需要操作表达式，完成计数器的更新，防止死循环</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例：打印人的一生\"><a href=\"#案例：打印人的一生\" class=\"headerlink\" title=\"案例：打印人的一生\"></a>案例：打印人的一生</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (i &lt;= <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;这个人今年&#x27;</span> + i + <span class=\"string\">&#x27;岁了&#x27;</span>);</span><br><span class=\"line\">    i++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例：计算1-100整数的和\"><a href=\"#案例：计算1-100整数的和\" class=\"headerlink\" title=\"案例：计算1-100整数的和\"></a>案例：计算1-100整数的和</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> j = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (j &lt;= <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">    sum += j;</span><br><span class=\"line\">    j++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> message = prompt(<span class=\"string\">&#x27;你爱我吗&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">while</span> (message !== <span class=\"string\">&#x27;我爱你&#x27;</span>) &#123;</span><br><span class=\"line\">    message = prompt(<span class=\"string\">&#x27;你爱我吗&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">alert(<span class=\"string\">&#x27;我也爱你&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「do-while循环」\"><a href=\"#「do-while循环」\" class=\"headerlink\" title=\"「do while循环」\"></a><strong>「do while循环」</strong></h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1.do while语法结构</span></span><br><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//循环体</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">while</span> (条件表达式)</span><br><span class=\"line\"><span class=\"comment\">//2.执行思路，跟while不同的地方在于，do while先执行一次循环体，然后在判断条件，如果条件结果为真则继续执行循环体，否则退出循环</span></span><br><span class=\"line\"><span class=\"comment\">//3.代码验证</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;你好吗&#x27;</span>);</span><br><span class=\"line\">    i++;</span><br><span class=\"line\">&#125; <span class=\"keyword\">while</span> (i &lt;= <span class=\"number\">100</span>);</span><br><span class=\"line\"><span class=\"comment\">//4.do while循环体至少执行一次</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例：打印人的一生-1\"><a href=\"#案例：打印人的一生-1\" class=\"headerlink\" title=\"案例：打印人的一生\"></a>案例：打印人的一生</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;这个人今年&#x27;</span> + i + <span class=\"string\">&#x27;岁了&#x27;</span>);</span><br><span class=\"line\">    i++;</span><br><span class=\"line\">&#125; <span class=\"keyword\">while</span> (i &lt;= <span class=\"number\">100</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例：计算1-100所有整数的和\"><a href=\"#案例：计算1-100所有整数的和\" class=\"headerlink\" title=\"案例：计算1-100所有整数的和\"></a>案例：计算1-100所有整数的和</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> j = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    sum += j;</span><br><span class=\"line\">    j++;</span><br><span class=\"line\">&#125; <span class=\"keyword\">while</span>(j &lt;= <span class=\"number\">100</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「continue、break」\"><a href=\"#「continue、break」\" class=\"headerlink\" title=\"「continue、break」\"></a><strong>「continue、break」</strong></h2><ol>\n<li><p>  <code>continue</code> 关键字用于立即跳出本次循环，继续下一次循环（本次循环体中 continue 之后的代码就会少执行一次）。</p>\n</li>\n<li><p>  <code>break</code> 关键字用于立即跳出整个循环（循环结束）。</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//continue关键字 退出本次循环（当前次循环），继续执行剩余次数循环</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i == <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">continue</span>;<span class=\"comment\">//只要遇见continue就退出本次循环，直接跳到i++</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;我正在吃第&#x27;</span> + i + <span class=\"string\">&#x27;个包子&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例：求1-100之间，除了能被7整除之外的整数和\"><a href=\"#案例：求1-100之间，除了能被7整除之外的整数和\" class=\"headerlink\" title=\"案例：求1-100之间，除了能被7整除之外的整数和\"></a>案例：求1-100之间，除了能被7整除之外的整数和</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i % <span class=\"number\">7</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sum += i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//break退出整个循环</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i == <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;<span class=\"comment\">//退出整个循环</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;我正在吃第&#x27;</span> + i + <span class=\"string\">&#x27;个包子&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"代码规范\"><a href=\"#代码规范\" class=\"headerlink\" title=\"代码规范\"></a><strong>代码规范</strong></h1><ol>\n<li>标识符命名规范</li>\n</ol>\n<ul>\n<li>变量、函数的命名必须要有意义</li>\n<li>变量的名称一般用名词</li>\n<li>函数的名称一般用动词</li>\n</ul>\n<ol start=\"2\">\n<li><p>操作符规范</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 操作符的左右两侧各保留一个空格</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (i == <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>; <span class=\"comment\">// 直接退出整个 for 循环，跳到整个for循环下面的语句</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;我正在吃第&#x27;</span> + i + <span class=\"string\">&#x27;个包子呢&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>单行注释规范</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (i == <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>; <span class=\"comment\">// 单行注释前面注意有个空格</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;我正在吃第&#x27;</span> + i + <span class=\"string\">&#x27;个包子呢&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>其他规范</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//关键词 操作符空格</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i&lt;=<span class=\"number\">10</span>; i++) &#123;&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<h1 id=\"流程控制\"><a href=\"#流程控制\" class=\"headerlink\" title=\"流程控制\"></a><strong>流程控制</strong></h1><p>在一个程序执行的过程中，各条代码的执行顺序对程序的结果是有直接影响的。很多时候我们要通过控制代码的执行顺序来实现我们要完成的功能。流程控制主要有三种结构，分别是<strong>顺序结构</strong>、<strong>分支结构</strong>和<strong>循环结构</strong>，代表三种代码执行的顺序。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202205311435023.png\"></p>\n<h1 id=\"分支结构\"><a href=\"#分支结构\" class=\"headerlink\" title=\"分支结构\"></a><strong>分支结构</strong></h1><p>js语言提供了两种分支结构语句</p>\n<ul>\n<li>if语句</li>\n<li>switch语句</li>\n</ul>\n<h2 id=\"「if-语句」\"><a href=\"#「if-语句」\" class=\"headerlink\" title=\"「if 语句」\"></a><strong>「if 语句」</strong></h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//条件成立执行代码，否则什么也不做</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(条件表达式)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//条件成立执行代码语句</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>语句可以理解为一个行为，循环语句和分支语句就是典型的语句。一个程序由多个语句组成，一般情况下，会被分割成一个一个的语句。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//执行思路，如果if里面的条件表达式结果为真，true，则执行大括号里面的执行语句</span></span><br><span class=\"line\"><span class=\"comment\">//如果if条件表达式结果为假，则不执行大括号里的语句，执行if语句后面的代码</span></span><br><span class=\"line\"><span class=\"comment\">//演示</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"number\">3</span>&gt;<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">&#x27;前端路漫漫&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「if-else语句（双分支语句）」\"><a href=\"#「if-else语句（双分支语句）」\" class=\"headerlink\" title=\"「if else语句（双分支语句）」\"></a><strong>「if else语句（双分支语句）」</strong></h2><p>语法结构</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//条件成立，执行if里代码，否则执行else里代码</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(条件表达式)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//if条件成立时执行的代码</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//else执行的代码</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//if里面的语句1和else里面的语句2，最终只能有一个语句被执行 2选1</span></span><br><span class=\"line\"><span class=\"comment\">//else后面直接跟大括号</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例：进入网吧\"><a href=\"#案例：进入网吧\" class=\"headerlink\" title=\"案例：进入网吧\"></a>案例：进入网吧</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//弹出prompt警示框，用户输入年龄，存入变量age</span></span><br><span class=\"line\"><span class=\"comment\">//使用if语句判断年龄，如年龄大于等于18，执行括号里内容</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> age = prompt(<span class=\"string\">&#x27;请输入您的年龄&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span>(age &gt;= <span class=\"number\">18</span>)&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">&#x27;我想带你去网吧&#x27;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">&#x27;滚&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例：判断闰年\"><a href=\"#案例：判断闰年\" class=\"headerlink\" title=\"案例：判断闰年\"></a>案例：判断闰年</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//算法：能被四整除且不能被100整除的为闰年 或着 能被400整除的是闰年</span></span><br><span class=\"line\"><span class=\"comment\">//弹出prompt输入框，输入年份存入白能量</span></span><br><span class=\"line\"><span class=\"comment\">//使用if语句判断</span></span><br><span class=\"line\"><span class=\"comment\">//注意&amp;&amp; 还有|| ，同时注意判断整除的方法是取余为0</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> year = prompt(<span class=\"string\">&#x27;请输入年份&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(year % <span class=\"number\">4</span> == <span class=\"number\">0</span> &amp;&amp; year % <span class=\"number\">100</span> != <span class=\"number\">0</span> || year % <span class=\"number\">400</span> == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">&#x27;您输入的年份是闰年&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">&#x27;您输入的年份是平年&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「if-else-if-语句（多分支语句）」\"><a href=\"#「if-else-if-语句（多分支语句）」\" class=\"headerlink\" title=\"「if else if 语句（多分支语句）」\"></a><strong>「if else if 语句（多分支语句）」</strong></h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1.多分支语句，就是利用多个条件来选择不同的语句执行，得到不同的结果，多选一的过程</span></span><br><span class=\"line\"><span class=\"comment\">//2.if else if语句是多分支语句</span></span><br><span class=\"line\"><span class=\"comment\">//3.语法规范</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(条件表达式<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//语句1;</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(条件表达式<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//语句2;</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(条件表达式<span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//语句3;</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//最后的语句;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//4.执行思路</span></span><br><span class=\"line\"><span class=\"comment\">/*\t如果条件表达式1满足就执行语句1，执行完毕后，退出整个if分支语句</span></span><br><span class=\"line\"><span class=\"comment\">\t如果条件表达式1不满足，则判断条件表达式2，满足的话执行语句2，以此类推</span></span><br><span class=\"line\"><span class=\"comment\">\t如果上面条件都不满足，则执行else里的语句</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"comment\">//5.注意点</span></span><br><span class=\"line\"><span class=\"comment\">/* 多分支语句是多选一，最后只能有一个语句被执行</span></span><br><span class=\"line\"><span class=\"comment\">\telse if 理论上可以是任意多个</span></span><br><span class=\"line\"><span class=\"comment\">\t</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例：判断成绩\"><a href=\"#案例：判断成绩\" class=\"headerlink\" title=\"案例：判断成绩\"></a>案例：判断成绩</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//(伪代码) 按从大到小的顺序</span></span><br><span class=\"line\"><span class=\"comment\">//弹出prompt输入框，让用户输入分数保存在变量中</span></span><br><span class=\"line\"><span class=\"comment\">//使用if else if多分支判断</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> score = prompt(<span class=\"string\">&#x27;请输入成绩&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(score &gt;= <span class=\"number\">90</span>)&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">&#x27;A&#x27;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(score &gt;= <span class=\"number\">80</span>)&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">&#x27;B&#x27;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(score &gt;= <span class=\"number\">70</span>)&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">&#x27;C&#x27;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(score &gt;= <span class=\"number\">60</span>)&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">&#x27;D&#x27;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">&#x27;E&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「三元表达式」\"><a href=\"#「三元表达式」\" class=\"headerlink\" title=\"「三元表达式」\"></a><strong>「三元表达式」</strong></h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1.有三个运算符组成的式子我们成为三元表达式</span></span><br><span class=\"line\"><span class=\"comment\">//2.++num  3+5  ? :</span></span><br><span class=\"line\"><span class=\"comment\">//3.语法结构</span></span><br><span class=\"line\">条件表达式?表达式<span class=\"number\">1</span>:表达式<span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"comment\">//4.执行思路</span></span><br><span class=\"line\"><span class=\"comment\">//如果条件表达式结果为真，则返回表达式1的值，如果条件表达式结果为假，则返回表达式2的值</span></span><br><span class=\"line\"><span class=\"comment\">//5.代码体验</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = num &gt; <span class=\"number\">5</span> ? <span class=\"string\">&#x27;是的&#x27;</span> : <span class=\"string\">&#x27;不是的&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例：数字补0\"><a href=\"#案例：数字补0\" class=\"headerlink\" title=\"案例：数字补0\"></a>案例：数字补0</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//用户输入0-59之间的一个数字</span></span><br><span class=\"line\"><span class=\"comment\">//如果数字小于10，则在这个数字面前补0，（加0拼接），否则不做操作</span></span><br><span class=\"line\"><span class=\"comment\">//用一个变量接收这个返回值，输出</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> time = prompt(<span class=\"string\">&#x27;请输入一个数字&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = time &lt; <span class=\"number\">10</span> ? <span class=\"string\">&#x27;0&#x27;</span> + time : time;<span class=\"comment\">//把返回值赋值给第一个变量</span></span><br><span class=\"line\">alert(result);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「switch分支」\"><a href=\"#「switch分支」\" class=\"headerlink\" title=\"「switch分支」\"></a><strong>「switch分支」</strong></h2><p>switch语句也是多分支语句，它用于基于不同的条件来执行不同的代码，当要针对变量设置一系列的特定值的选项时，就可以使用switch</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1.switch也是多分支，可以实现多线一</span></span><br><span class=\"line\"><span class=\"comment\">//2.语法结构  switch 转换，开关  case 小例子或选项的意思</span></span><br><span class=\"line\"><span class=\"keyword\">switch</span>(表达式)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> value1:</span><br><span class=\"line\">        执行语句<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> value2:</span><br><span class=\"line\">        执行语句<span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"attr\">default</span>:</span><br><span class=\"line\">    \t执行最后的语句;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//3.执行思路，利用表达式的值和case后面的选项值相匹配，如果匹配上，就执行该case里面的语句，如果都没有匹配上，则执行default里面的语句</span></span><br><span class=\"line\"><span class=\"comment\">//4.代码验证</span></span><br><span class=\"line\"><span class=\"keyword\">switch</span>(<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;这是1&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;这是2&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;这是3&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;无匹配结果&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"switch注意事项\"><a href=\"#switch注意事项\" class=\"headerlink\" title=\"switch注意事项\"></a>switch注意事项</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">switch</span>(num)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;无匹配&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//1.开发里面，表达式经常写成变量</span></span><br><span class=\"line\"><span class=\"comment\">//2.num和case里值相匹配的时候要求全等，必须数值和数据类型一致才可以 num === 1</span></span><br><span class=\"line\"><span class=\"comment\">//3.break 如果当前case没有break，则不会退出switch，而是继续执行下一个case</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例：查询水果案例\"><a href=\"#案例：查询水果案例\" class=\"headerlink\" title=\"案例：查询水果案例\"></a>案例：查询水果案例</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//弹出prompt输入框，输入水果名称存入变量</span></span><br><span class=\"line\"><span class=\"comment\">//将这个变量作为switch括号内的表达式</span></span><br><span class=\"line\"><span class=\"comment\">//case后面的值写几个不同水果的名称，注意一定要加引号，因为必须时全等匹配</span></span><br><span class=\"line\"><span class=\"comment\">//弹出不同价格即可，注意每个case后面的break语句</span></span><br><span class=\"line\"><span class=\"comment\">//将default设置成无此水果</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> frult = prompt(<span class=\"string\">&#x27;请输入查询的水果&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">switch</span>(frult)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;苹果&#x27;</span>:</span><br><span class=\"line\">        alert(<span class=\"string\">&#x27;苹果的价格是3.5&#x27;</span>)；</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;榴莲&#x27;</span>:</span><br><span class=\"line\">        alert(<span class=\"string\">&#x27;榴莲的价格是35&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        alert(<span class=\"string\">&#x27;无此水果&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"switch和if-else-if的区别\"><a href=\"#switch和if-else-if的区别\" class=\"headerlink\" title=\"switch和if..else..if的区别\"></a>switch和if..else..if的区别</h3><ol>\n<li><p>一般情况下，可以互相替换</p>\n</li>\n<li><p>switch…case通常处理case比较确定的值的情况，而if…else…if更加灵活常用于范围判断</p>\n</li>\n<li><p>switch语句进行条件判断后直接执行条件语句，效率更高，而if else if有多少条件就要判断多少次</p>\n</li>\n<li><p>当分支较少时，if…else执行效率比switch高</p>\n</li>\n<li><p>当分支较多时，switch语句执行效率比较高，且结构清晰</p>\n</li>\n</ol>\n<h1 id=\"循环结构\"><a href=\"#循环结构\" class=\"headerlink\" title=\"循环结构\"></a><strong>循环结构</strong></h1><p>js中主要由三种类型的循环语句</p>\n<ul>\n<li>for循环</li>\n<li>while循环</li>\n<li>do..while循环</li>\n</ul>\n<h2 id=\"「for循环」\"><a href=\"#「for循环」\" class=\"headerlink\" title=\"「for循环」\"></a><strong>「for循环」</strong></h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1.for循环重复执行某些代码，通常跟计数有关</span></span><br><span class=\"line\"><span class=\"comment\">//2.for循环语法结构</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(初始化变量;条件表达式;操作表达式)&#123;</span><br><span class=\"line\">    循环体;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//3.初始化变量 就是用var声明的一个普通变量，通常用作计数器使用</span></span><br><span class=\"line\"><span class=\"comment\">//4.条件表达式 就是用来决定每一次循环是否继续执行 ，就是终止的条件</span></span><br><span class=\"line\"><span class=\"comment\">//5.操作表达式 是每次循环最后执行的代码 经常用于我们计数器变量的更新（递增或者递减）</span></span><br><span class=\"line\"><span class=\"comment\">//6.代码体验</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">100</span>; i++)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;你好吗&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>for循环执行过程</p>\n<ol>\n<li>初始化变量，初始化操作在整个 for 循环只会执行一次。</li>\n<li>执行条件表达式，如果为true，则执行循环体语句，否则退出循环，循环结束。</li>\n<li>执行操作表达式,此时第一轮结束。</li>\n<li>第二轮开始，直接去执行条件表达式（不再初始化变量），如果为 true ，则去执行循环体语句，否则退出循环。</li>\n<li>继续执行操作表达式，第二轮结束。……</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//for循环执行相同代码</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">10</span>; i++)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;我错了&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//让用户控制输出次数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> num = prompt(<span class=\"string\">&#x27;输入循环次数&#x27;</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">var</span>(<span class=\"params\"><span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= num; i++</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;我错了&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//for循环可以重复执行不同的代码 因为我们有计数器变量i的存在 i每次循环值都会变化</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">100</span>; i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;这个人今年1岁了，他出生了&#x27;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(i == <span class=\"number\">100</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;这个人今年100岁了，他死了&#x27;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;这个人今年&#x27;</span> + i + <span class=\"string\">&#x27;岁了&#x27;</span>);<span class=\"comment\">//字符串与数字拼接</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例：for循环求1-100累加和案例\"><a href=\"#案例：for循环求1-100累加和案例\" class=\"headerlink\" title=\"案例：for循环求1-100累加和案例\"></a>案例：for循环求1-100累加和案例</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 需要循环100次，我们需要一个计数器i</span></span><br><span class=\"line\"><span class=\"comment\">//需要一个储存结果的变量sum，初始值为0</span></span><br><span class=\"line\"><span class=\"comment\">//核心算法：1+2+3+4+...，sum = sum + i</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">    sum = sum + i;</span><br><span class=\"line\">    <span class=\"comment\">//sum += i;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例：for循环求1-100平均值\"><a href=\"#案例：for循环求1-100平均值\" class=\"headerlink\" title=\"案例：for循环求1-100平均值\"></a>案例：for循环求1-100平均值</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> average = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">    sum += i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">average = sum / <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(average);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例：求1-100所有奇数和偶数的和\"><a href=\"#案例：求1-100所有奇数和偶数的和\" class=\"headerlink\" title=\"案例：求1-100所有奇数和偶数的和\"></a>案例：求1-100所有奇数和偶数的和</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> even = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> odd = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i % <span class=\"number\">2</span> = <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        even += i;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        odd += i;</span><br><span class=\"line\">    &#125;     </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;1-100之间所有的偶数的和是&#x27;</span> + even);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;1-100之间所有的奇数的和是&#x27;</span> + odd);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例：求1-100所有能被3整除的数字的和\"><a href=\"#案例：求1-100所有能被3整除的数字的和\" class=\"headerlink\" title=\"案例：求1-100所有能被3整除的数字的和\"></a>案例：求1-100所有能被3整除的数字的和</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i % <span class=\"number\">3</span> = <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        result += i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;1-100之前能够被3整除的数字的和是&#x27;</span> + result);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例：求学生成绩案例\"><a href=\"#案例：求学生成绩案例\" class=\"headerlink\" title=\"案例：求学生成绩案例\"></a>案例：求学生成绩案例</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//弹出输入框输入总的班级人数（num)</span></span><br><span class=\"line\"><span class=\"comment\">//依次输入学生成绩（保存起来 score），此时用到for循环</span></span><br><span class=\"line\"><span class=\"comment\">//for循环，弹出的次数跟输入的班级总人数有关系，条件表达式 i &lt;= num</span></span><br><span class=\"line\"><span class=\"comment\">//进行业务处理：计算成绩，先求总成绩（sum），之后求平均成绩（average）</span></span><br><span class=\"line\"><span class=\"comment\">//弹出结果</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> num = prompt(<span class=\"string\">&#x27;请输入班级总人数：&#x27;</span>); <span class=\"comment\">// num 班级总人数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>; <span class=\"comment\">// 求和的变量sum</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> average = <span class=\"number\">0</span>; <span class=\"comment\">// 平均值的变量average</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= num; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> score = prompt(<span class=\"string\">&#x27;请输入第&#x27;</span> + i + <span class=\"string\">&#x27;个学生成绩&#x27;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 因为从prompt取过来的数都是字符串型的，需要转换成数字型</span></span><br><span class=\"line\">    sum = sum + <span class=\"built_in\">parseFloat</span>(score);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">average = sum / num;</span><br><span class=\"line\">alert(<span class=\"string\">&#x27;班级总成绩是&#x27;</span> + sum);</span><br><span class=\"line\">alert(<span class=\"string\">&#x27;班级平均分是&#x27;</span> + average);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例：一行打印5个星星\"><a href=\"#案例：一行打印5个星星\" class=\"headerlink\" title=\"案例：一行打印5个星星\"></a>案例：一行打印5个星星</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//一行打印5个星星(不能全部显示)</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;#&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//如果一行全部展示出星星，采用拼接字符串型</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">    str = str + <span class=\"string\">&#x27;#&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str);</span><br><span class=\"line\"><span class=\"comment\">//自定义输出个数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> num = prompt(<span class=\"string\">&#x27;请输入星星的个数&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= num; i++)&#123;</span><br><span class=\"line\">    str = str + <span class=\"string\">&#x27;#&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「双重for循环」\"><a href=\"#「双重for循环」\" class=\"headerlink\" title=\"「双重for循环」\"></a><strong>「双重for循环」</strong></h2><p>循环嵌套是指在一个循环语句中再定义一个循环语句的语法结构，例如在for循环语句中，可以再嵌套一个for 循环，这样的 for 循环语句我们称之为双重for循环。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1.双重for循环语法结构</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (外层初始化变量; 外层条件表达式; 外层操作表达式) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (里层初始化变量; 里层条件表达式; 里层操作表达式)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//执行语句</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//2.我们可以把里面的循环看作是外层循环的语句</span></span><br><span class=\"line\"><span class=\"comment\">//3.外层循环循环一次，里面的循环执行全部</span></span><br><span class=\"line\"><span class=\"comment\">//4.代码验证</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;这是外层循环第&#x27;</span> + i + <span class=\"string\">&#x27;次&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">1</span>; j &lt;= <span class=\"number\">3</span>; j++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;这是内层循环第&#x27;</span> + j + <span class=\"string\">&#x27;次&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例：打印5行5列星星\"><a href=\"#案例：打印5行5列星星\" class=\"headerlink\" title=\"案例：打印5行5列星星\"></a>案例：打印5行5列星星</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//内层循环负责一行打印5个星星</span></span><br><span class=\"line\"><span class=\"comment\">//外层循环负责打印5行</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">5</span>; i++) &#123; <span class=\"comment\">//外层负责打印5行</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( <span class=\"keyword\">var</span> j = <span class=\"number\">1</span>; j &lt;= <span class=\"number\">5</span>; j++)&#123; <span class=\"comment\">// 内层负责一行打印5个星星</span></span><br><span class=\"line\">        str = str + <span class=\"string\">&#x27;#&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//一行打完5个星星需要另起一行，加 \\n</span></span><br><span class=\"line\">    str = str + <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例：打印n行n列星星\"><a href=\"#案例：打印n行n列星星\" class=\"headerlink\" title=\"案例：打印n行n列星星\"></a>案例：打印n行n列星星</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//打印n行n列</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> rows = prompt(<span class=\"string\">&#x27;请您输入行数&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> cols = prompt(<span class=\"string\">&#x27;请您输入列数&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= rows; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">1</span>; j &lt;= cols; j++) &#123;</span><br><span class=\"line\">        str = str + <span class=\"string\">&#x27;#&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    str += <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例：打印倒三角\"><a href=\"#案例：打印倒三角\" class=\"headerlink\" title=\"案例：打印倒三角\"></a>案例：打印倒三角</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//打印倒三角</span></span><br><span class=\"line\"><span class=\"comment\">//核心算法：j = i; j &lt;= 10; j++</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">10</span>; i++) &#123; <span class=\"comment\">//外层控制行数</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = i; j &lt;= <span class=\"number\">10</span>; j++) &#123; <span class=\"comment\">//内层循环打印个数不一样 j = i</span></span><br><span class=\"line\">        str = str + <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    str += <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例：打印九九乘法表\"><a href=\"#案例：打印九九乘法表\" class=\"headerlink\" title=\"案例：打印九九乘法表\"></a>案例：打印九九乘法表</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//九九乘法表</span></span><br><span class=\"line\"><span class=\"comment\">//一共有9行，但每行个数不一样，因此用到双重for循环</span></span><br><span class=\"line\"><span class=\"comment\">//外层for循环控制行数i，循环9次，可以打印9行</span></span><br><span class=\"line\"><span class=\"comment\">//内层for循环控制每行公式 j</span></span><br><span class=\"line\"><span class=\"comment\">//核心算法：每一行公式的个数正好和行数一样， j &lt;= i</span></span><br><span class=\"line\"><span class=\"comment\">//每行打印完毕都需要重新换行</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">9</span>; i++) &#123; <span class=\"comment\">//外层控制行数</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">1</span>; j &lt;= i; j++) &#123; <span class=\"comment\">//内层控制每一行个数 j &lt;= i</span></span><br><span class=\"line\">        <span class=\"comment\">//1 × 2 = 2</span></span><br><span class=\"line\">        <span class=\"comment\">//str = str + &#x27;#&#x27;</span></span><br><span class=\"line\">        str += j + <span class=\"string\">&#x27;×&#x27;</span> + i + <span class=\"string\">&#x27;=&#x27;</span> + i * j + <span class=\"string\">&#x27;\\t&#x27;</span>; <span class=\"comment\">//字符串拼接</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    str += <span class=\"string\">&#x27;\\t&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"「while循环」\"><a href=\"#「while循环」\" class=\"headerlink\" title=\"「while循环」\"></a><strong>「while循环」</strong></h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1.while循环语法结构  （while 当...时候）</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> (条件表达式) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//循环体</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//2.执行思路，当条件表达式结果为true时，则执行循环体，否则退出循环</span></span><br><span class=\"line\"><span class=\"comment\">//3.代码验证</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (num &lt;= <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;循环&#x27;</span>);</span><br><span class=\"line\">    num++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//4.里面需要添加计数器，初始化变量</span></span><br><span class=\"line\"><span class=\"comment\">//5.里面也需要操作表达式，完成计数器的更新，防止死循环</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例：打印人的一生\"><a href=\"#案例：打印人的一生\" class=\"headerlink\" title=\"案例：打印人的一生\"></a>案例：打印人的一生</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (i &lt;= <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;这个人今年&#x27;</span> + i + <span class=\"string\">&#x27;岁了&#x27;</span>);</span><br><span class=\"line\">    i++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例：计算1-100整数的和\"><a href=\"#案例：计算1-100整数的和\" class=\"headerlink\" title=\"案例：计算1-100整数的和\"></a>案例：计算1-100整数的和</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> j = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (j &lt;= <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">    sum += j;</span><br><span class=\"line\">    j++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> message = prompt(<span class=\"string\">&#x27;你爱我吗&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">while</span> (message !== <span class=\"string\">&#x27;我爱你&#x27;</span>) &#123;</span><br><span class=\"line\">    message = prompt(<span class=\"string\">&#x27;你爱我吗&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">alert(<span class=\"string\">&#x27;我也爱你&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「do-while循环」\"><a href=\"#「do-while循环」\" class=\"headerlink\" title=\"「do while循环」\"></a><strong>「do while循环」</strong></h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1.do while语法结构</span></span><br><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//循环体</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">while</span> (条件表达式)</span><br><span class=\"line\"><span class=\"comment\">//2.执行思路，跟while不同的地方在于，do while先执行一次循环体，然后在判断条件，如果条件结果为真则继续执行循环体，否则退出循环</span></span><br><span class=\"line\"><span class=\"comment\">//3.代码验证</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;你好吗&#x27;</span>);</span><br><span class=\"line\">    i++;</span><br><span class=\"line\">&#125; <span class=\"keyword\">while</span> (i &lt;= <span class=\"number\">100</span>);</span><br><span class=\"line\"><span class=\"comment\">//4.do while循环体至少执行一次</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例：打印人的一生-1\"><a href=\"#案例：打印人的一生-1\" class=\"headerlink\" title=\"案例：打印人的一生\"></a>案例：打印人的一生</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;这个人今年&#x27;</span> + i + <span class=\"string\">&#x27;岁了&#x27;</span>);</span><br><span class=\"line\">    i++;</span><br><span class=\"line\">&#125; <span class=\"keyword\">while</span> (i &lt;= <span class=\"number\">100</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例：计算1-100所有整数的和\"><a href=\"#案例：计算1-100所有整数的和\" class=\"headerlink\" title=\"案例：计算1-100所有整数的和\"></a>案例：计算1-100所有整数的和</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> j = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    sum += j;</span><br><span class=\"line\">    j++;</span><br><span class=\"line\">&#125; <span class=\"keyword\">while</span>(j &lt;= <span class=\"number\">100</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「continue、break」\"><a href=\"#「continue、break」\" class=\"headerlink\" title=\"「continue、break」\"></a><strong>「continue、break」</strong></h2><ol>\n<li><p>  <code>continue</code> 关键字用于立即跳出本次循环，继续下一次循环（本次循环体中 continue 之后的代码就会少执行一次）。</p>\n</li>\n<li><p>  <code>break</code> 关键字用于立即跳出整个循环（循环结束）。</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//continue关键字 退出本次循环（当前次循环），继续执行剩余次数循环</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i == <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">continue</span>;<span class=\"comment\">//只要遇见continue就退出本次循环，直接跳到i++</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;我正在吃第&#x27;</span> + i + <span class=\"string\">&#x27;个包子&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例：求1-100之间，除了能被7整除之外的整数和\"><a href=\"#案例：求1-100之间，除了能被7整除之外的整数和\" class=\"headerlink\" title=\"案例：求1-100之间，除了能被7整除之外的整数和\"></a>案例：求1-100之间，除了能被7整除之外的整数和</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i % <span class=\"number\">7</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sum += i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//break退出整个循环</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i == <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;<span class=\"comment\">//退出整个循环</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;我正在吃第&#x27;</span> + i + <span class=\"string\">&#x27;个包子&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"代码规范\"><a href=\"#代码规范\" class=\"headerlink\" title=\"代码规范\"></a><strong>代码规范</strong></h1><ol>\n<li>标识符命名规范</li>\n</ol>\n<ul>\n<li>变量、函数的命名必须要有意义</li>\n<li>变量的名称一般用名词</li>\n<li>函数的名称一般用动词</li>\n</ul>\n<ol start=\"2\">\n<li><p>操作符规范</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 操作符的左右两侧各保留一个空格</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (i == <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>; <span class=\"comment\">// 直接退出整个 for 循环，跳到整个for循环下面的语句</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;我正在吃第&#x27;</span> + i + <span class=\"string\">&#x27;个包子呢&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>单行注释规范</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (i == <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>; <span class=\"comment\">// 单行注释前面注意有个空格</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;我正在吃第&#x27;</span> + i + <span class=\"string\">&#x27;个包子呢&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>其他规范</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//关键词 操作符空格</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i&lt;=<span class=\"number\">10</span>; i++) &#123;&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"JavaScript对象","date":"2022-06-11T16:00:00.000Z","updated":"2022-06-11T16:00:00.000Z","keywords":null,"description":null,"top_img":"./img/bg21.jpg","cover":"./img/bg13.jpg","_content":"# 对象的概念\n\n## **「对象」**\n\n在JavaScript中，对象是一组无序的相关属性和方法的集合，所有的事物都是对象，例如字符串、数值、数组、函数等。\n\n对象是由属性和方法组成的\n\n1. 属性：事物的特征，在对象中用属性来表示（常用名词）\n2. 方法：事物的行为，在对象中常用方法来表示（常用动词）\n\n## **「为什么需要对象」**\n\n- 保存一个值时，可以使用变量，保存多个值（一组值）时，可以使用数组，如果保存一个的完整信息呢？\n- 为了更好地存储一组数据，对象应用而生；对象中为每项数据设置了属性名称，可以访问数据更语义化，数据结构清晰，表意明显，方便开发者使用。\n\n```js\n  var obj = {\n    \"name\":\"fan\",\n    \"sex\":\"male\",\n    \"age\":18,\n    \"height\":155\n  }\n```\n\n# 创建对象的三种方式\n\n- 利用字面量创建对象\n- 利用 new object 创建对象\n- 利用构造函数创建对象\n\n## **「1. 利用字面量创建对象」**\n\n使用对象字面量创建对象：\n\n- 就是花括号 { } 里面包含了表达这个具体事物（对象）的属性和方法\n\n- { } 里面采取键值对的形式表示\n\n  -`键`：相当于属性名\n  -`值`：相当于属性值，可以是任意类型的值（数字类型、字符串类型、布尔类型，函数类型等）\n\n```js\n// star 就是创建的对象\n  var star = {\n    name : 'pink',\n    age : 18,\n    sex : '男',\n    sayHi : function() {\n      alert('大家好啊');\n    }\n  };\n// 方法冒号后面跟的是一个匿名函数\n```\n\n### 对象的的两个概念\n\n1. 对象的属性：对象中`存储具体数据`的“键值对”中的‘键’称为对象的属性，即对象中存储具体数据的项。\n2. 对象的方法：对象中`存储函数`的“键值对”中的“键”称为对象的方法，即对象中存储函数的项。（这里方法是名词）\n\n### 对象的使用\n\n- 访问对象的属性（两种方式）：\n\n1. 对象里面的属性调用：`对象.属性名`；\n2. 对象里面属性的另一种调用方式：`对象['属性名']`,注意方括号里面的属性必须加上引号。\n\n- 调用对象的方法:   `对象.方法名();`\n\n```js\n// 调用属性\nconsole.log(star.name)     // 调用名字属性\nconsole.log(star['name'])  // 调用名字属性\n  \n// 调用方法\nstar.sayHi(); // 调用对象方法\n```\n\n### 变量、属性、函数、方法总结\n\n`①变量`：单独声明赋值，单独存在\n`②属性`:  对象里面的变量称为属性，不需要声明，用来描述该对象的特征。\n`③方法`：方法是对象的一部分，函数不是对象的一部分，函数是单独封装操作的容器。对象里面的函数称为方法，方法不需要声明，使用\" 对象.方法名() \"的方式就可以调用，方法用来描述该对象的行为和功能。\n`④函数`:  单独存在的，通过\" 函数名() \"的方式就可以调用。\n\n## **「2. 利用new Object创建对象」**\n\n- 创建空对象\n\n```js\n  // 通过内置构造函数Object创建对象，此时andy变量已经保存了创建出来的空对象\n  var andy = new Object();  \n```\n\n- 给空对象添加属性和方法\n\n```js\n  // 通过对象操作属性和方法的方式，来为对象增加属性和方法\n  // (1)我们利用等号 = 赋值的方法，添加对象的属性和方法\n  // (2)每个属性和方法之间用分号结束\n  andy.name = 'pink';\n  andy.age = 18; // andy.age = 19修改对象属性\n  andy.sex = '男'; // andy.phoneNum = 110 添加属性\n  andy.sayHi = function() {\n    alert('大家好');\n  }\n  obj.sayHi();// 调用对象的方法 \n  //第二种写法 obj['sayHi']();\n  \n  // Object()第一个字母大写；\n  //new Object() 需要new关键字，使用的格式:对象.属性 = 值\n```\n\n### 案例：工厂函数创建对象 这个把创建好的对象返回给函数调用处\n\n```js\n  // 工厂函数创建对象 这个把创建好的对象返回给函数调用处\n  function createPerson(name, age, job) {\n      //new Object创建对象\n    var person = new Object();\n    person.name = name;\n    person.age = age;\n    person.job = job;\n    person.sayHi = function(){\n      console.log('Hello,everyBody');\n    }\n     //此函数返回的是一个对象\n    return person;\n    }\n  var p1 = createPerson('张三', 22, 'actor');\n```\n\n\n\n## **「3. 利用构造函数创建对象」**\n\n`构造函数`是一种特殊的函数，主要用来初始化对象，即为对象成员变量赋初始值,它总与new运算符一起使用，我们可以把对象中一些公共的属性和方法抽出来，然后封装到这个函数里面。\n\n```js\n// 利用构造函数创建对象\n// 构造函数的语法格式\nfunction 构造函数名() {\n    this.属性 = 值;\n    this.属性 = 值;\n    this.方法 = function() {\n        \n    }\n}\nnew 构造函数名();\n```\n\n```js\n// 构造函数的封装格式\nfunction 构造函数名(形参1，形参2，形参3...) {\n    this.属性名1 = 参数1;\n    this.属性名2 = 参数2;\n    this.属性名3 = 参数3;\n    this.方法名 = 函数体;\n}  \n// 构造函数的调用格式\nvar obj = new 构造函数名(实参1，实参2，实参3); // 以上代码中，obj即接收到构造函数创建出来的对象。\n注意事项：\n    1.构造函数约定首字母大写\n    2.函数内的属性和方法前面需要添加this，表示当前对象的属性和方法\n    3.构造函数中不需要retrun返回结果\n    4.但我们创建对象的时候，必须用new 来调用构造函数\n    \n    1.其他：构造函数如Stars(),抽取了对象的公共部分，封装到了函数里面，它\n     泛指某一大类(class)\n    2.创建对象，如new Stars();特指某一个，利用new关键字创建对象的过程\n     我们也称为对象实例化\n   \n```\n\n```js\n// 我们需要创建四大天王的对象 相同的属性：名字，年龄，性别，相同的方法：唱歌\nfunction Star(uname, age, sex) {\n    this.name = uname;\n    this.age = age;\n    this.sex = sex;\n    this.sing = function(sang) {\n        console.log(sang);\n    }\n}\nvar ldh = new Star('刘德华', 18, '男'); // 调用函数返回的是一个对象\nconsole.log(typeof ldh);\nconsole.log(ldh.name);\nconsole.log(ldh['sex']);\nldh.sang('冰雨');\nvar zcy = new Star('张学友', 19, '男');\nconsole.log(zxy.name);\nconsole.log(zxy.age);\nzxy.sing('春兰')；\n```\n\n### 构造函数和对象\n\n- 构造函数：如Stars()，抽象了对象的公共部分，封装到了一个函数里面，它泛指某一大类(class)\n- 创建对象：如new Stars() ，特指某一个，通过new关键字创建对象的过程我们也称为对象实例化\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206111550328.jpg)\n\n\n\n### **new关键字的作用(面试题)**\n\n1. 在构造函数代码开始执行之前，创建一个空对象；\n2. 修改this的指向，把this指向创建出来的空对象；\n3. 执行构造函数内的代码，给这个新对象添加属性和方法\n4. 在函数完成之后，返回这个创建出来的新对象(所以构造函数里面不需要return)\n\n\n\n# 遍历对象\n\n```js\n// for...in 语句用于对数组或者对象的属性进行循环操作。\n// 其语法如下：\n  for (变量 in 对象名字) {\n      // 在此执行代码\n  }\n//语法中的变量是自定义的，它需要符合命名规范，通常我们会将这个变量写为 k 或者 key。\n  \n  for (var k in obj) {\n    console.log(k);      // 这里的 k 是属性名\n    console.log(obj[k]); // 这里的 obj[k] 是属性值\n}\n```\n","source":"_posts/前端/Javascript对象.md","raw":"---\ntitle: JavaScript对象\ndate: 2022-06-12\nupdated: 2022-06-12\ntags:\n  - 小白的前端之路\n  - JavaScript基础\ncategories: 前端开发\nkeywords: \ndescription: \ntop_img: ./img/bg21.jpg\ncover: ./img/bg13.jpg\n\n---\n# 对象的概念\n\n## **「对象」**\n\n在JavaScript中，对象是一组无序的相关属性和方法的集合，所有的事物都是对象，例如字符串、数值、数组、函数等。\n\n对象是由属性和方法组成的\n\n1. 属性：事物的特征，在对象中用属性来表示（常用名词）\n2. 方法：事物的行为，在对象中常用方法来表示（常用动词）\n\n## **「为什么需要对象」**\n\n- 保存一个值时，可以使用变量，保存多个值（一组值）时，可以使用数组，如果保存一个的完整信息呢？\n- 为了更好地存储一组数据，对象应用而生；对象中为每项数据设置了属性名称，可以访问数据更语义化，数据结构清晰，表意明显，方便开发者使用。\n\n```js\n  var obj = {\n    \"name\":\"fan\",\n    \"sex\":\"male\",\n    \"age\":18,\n    \"height\":155\n  }\n```\n\n# 创建对象的三种方式\n\n- 利用字面量创建对象\n- 利用 new object 创建对象\n- 利用构造函数创建对象\n\n## **「1. 利用字面量创建对象」**\n\n使用对象字面量创建对象：\n\n- 就是花括号 { } 里面包含了表达这个具体事物（对象）的属性和方法\n\n- { } 里面采取键值对的形式表示\n\n  -`键`：相当于属性名\n  -`值`：相当于属性值，可以是任意类型的值（数字类型、字符串类型、布尔类型，函数类型等）\n\n```js\n// star 就是创建的对象\n  var star = {\n    name : 'pink',\n    age : 18,\n    sex : '男',\n    sayHi : function() {\n      alert('大家好啊');\n    }\n  };\n// 方法冒号后面跟的是一个匿名函数\n```\n\n### 对象的的两个概念\n\n1. 对象的属性：对象中`存储具体数据`的“键值对”中的‘键’称为对象的属性，即对象中存储具体数据的项。\n2. 对象的方法：对象中`存储函数`的“键值对”中的“键”称为对象的方法，即对象中存储函数的项。（这里方法是名词）\n\n### 对象的使用\n\n- 访问对象的属性（两种方式）：\n\n1. 对象里面的属性调用：`对象.属性名`；\n2. 对象里面属性的另一种调用方式：`对象['属性名']`,注意方括号里面的属性必须加上引号。\n\n- 调用对象的方法:   `对象.方法名();`\n\n```js\n// 调用属性\nconsole.log(star.name)     // 调用名字属性\nconsole.log(star['name'])  // 调用名字属性\n  \n// 调用方法\nstar.sayHi(); // 调用对象方法\n```\n\n### 变量、属性、函数、方法总结\n\n`①变量`：单独声明赋值，单独存在\n`②属性`:  对象里面的变量称为属性，不需要声明，用来描述该对象的特征。\n`③方法`：方法是对象的一部分，函数不是对象的一部分，函数是单独封装操作的容器。对象里面的函数称为方法，方法不需要声明，使用\" 对象.方法名() \"的方式就可以调用，方法用来描述该对象的行为和功能。\n`④函数`:  单独存在的，通过\" 函数名() \"的方式就可以调用。\n\n## **「2. 利用new Object创建对象」**\n\n- 创建空对象\n\n```js\n  // 通过内置构造函数Object创建对象，此时andy变量已经保存了创建出来的空对象\n  var andy = new Object();  \n```\n\n- 给空对象添加属性和方法\n\n```js\n  // 通过对象操作属性和方法的方式，来为对象增加属性和方法\n  // (1)我们利用等号 = 赋值的方法，添加对象的属性和方法\n  // (2)每个属性和方法之间用分号结束\n  andy.name = 'pink';\n  andy.age = 18; // andy.age = 19修改对象属性\n  andy.sex = '男'; // andy.phoneNum = 110 添加属性\n  andy.sayHi = function() {\n    alert('大家好');\n  }\n  obj.sayHi();// 调用对象的方法 \n  //第二种写法 obj['sayHi']();\n  \n  // Object()第一个字母大写；\n  //new Object() 需要new关键字，使用的格式:对象.属性 = 值\n```\n\n### 案例：工厂函数创建对象 这个把创建好的对象返回给函数调用处\n\n```js\n  // 工厂函数创建对象 这个把创建好的对象返回给函数调用处\n  function createPerson(name, age, job) {\n      //new Object创建对象\n    var person = new Object();\n    person.name = name;\n    person.age = age;\n    person.job = job;\n    person.sayHi = function(){\n      console.log('Hello,everyBody');\n    }\n     //此函数返回的是一个对象\n    return person;\n    }\n  var p1 = createPerson('张三', 22, 'actor');\n```\n\n\n\n## **「3. 利用构造函数创建对象」**\n\n`构造函数`是一种特殊的函数，主要用来初始化对象，即为对象成员变量赋初始值,它总与new运算符一起使用，我们可以把对象中一些公共的属性和方法抽出来，然后封装到这个函数里面。\n\n```js\n// 利用构造函数创建对象\n// 构造函数的语法格式\nfunction 构造函数名() {\n    this.属性 = 值;\n    this.属性 = 值;\n    this.方法 = function() {\n        \n    }\n}\nnew 构造函数名();\n```\n\n```js\n// 构造函数的封装格式\nfunction 构造函数名(形参1，形参2，形参3...) {\n    this.属性名1 = 参数1;\n    this.属性名2 = 参数2;\n    this.属性名3 = 参数3;\n    this.方法名 = 函数体;\n}  \n// 构造函数的调用格式\nvar obj = new 构造函数名(实参1，实参2，实参3); // 以上代码中，obj即接收到构造函数创建出来的对象。\n注意事项：\n    1.构造函数约定首字母大写\n    2.函数内的属性和方法前面需要添加this，表示当前对象的属性和方法\n    3.构造函数中不需要retrun返回结果\n    4.但我们创建对象的时候，必须用new 来调用构造函数\n    \n    1.其他：构造函数如Stars(),抽取了对象的公共部分，封装到了函数里面，它\n     泛指某一大类(class)\n    2.创建对象，如new Stars();特指某一个，利用new关键字创建对象的过程\n     我们也称为对象实例化\n   \n```\n\n```js\n// 我们需要创建四大天王的对象 相同的属性：名字，年龄，性别，相同的方法：唱歌\nfunction Star(uname, age, sex) {\n    this.name = uname;\n    this.age = age;\n    this.sex = sex;\n    this.sing = function(sang) {\n        console.log(sang);\n    }\n}\nvar ldh = new Star('刘德华', 18, '男'); // 调用函数返回的是一个对象\nconsole.log(typeof ldh);\nconsole.log(ldh.name);\nconsole.log(ldh['sex']);\nldh.sang('冰雨');\nvar zcy = new Star('张学友', 19, '男');\nconsole.log(zxy.name);\nconsole.log(zxy.age);\nzxy.sing('春兰')；\n```\n\n### 构造函数和对象\n\n- 构造函数：如Stars()，抽象了对象的公共部分，封装到了一个函数里面，它泛指某一大类(class)\n- 创建对象：如new Stars() ，特指某一个，通过new关键字创建对象的过程我们也称为对象实例化\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206111550328.jpg)\n\n\n\n### **new关键字的作用(面试题)**\n\n1. 在构造函数代码开始执行之前，创建一个空对象；\n2. 修改this的指向，把this指向创建出来的空对象；\n3. 执行构造函数内的代码，给这个新对象添加属性和方法\n4. 在函数完成之后，返回这个创建出来的新对象(所以构造函数里面不需要return)\n\n\n\n# 遍历对象\n\n```js\n// for...in 语句用于对数组或者对象的属性进行循环操作。\n// 其语法如下：\n  for (变量 in 对象名字) {\n      // 在此执行代码\n  }\n//语法中的变量是自定义的，它需要符合命名规范，通常我们会将这个变量写为 k 或者 key。\n  \n  for (var k in obj) {\n    console.log(k);      // 这里的 k 是属性名\n    console.log(obj[k]); // 这里的 obj[k] 是属性值\n}\n```\n","slug":"前端/Javascript对象","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cl5db79ka001kywtu53e00gof","content":"<h1 id=\"对象的概念\"><a href=\"#对象的概念\" class=\"headerlink\" title=\"对象的概念\"></a>对象的概念</h1><h2 id=\"「对象」\"><a href=\"#「对象」\" class=\"headerlink\" title=\"「对象」\"></a><strong>「对象」</strong></h2><p>在JavaScript中，对象是一组无序的相关属性和方法的集合，所有的事物都是对象，例如字符串、数值、数组、函数等。</p>\n<p>对象是由属性和方法组成的</p>\n<ol>\n<li>属性：事物的特征，在对象中用属性来表示（常用名词）</li>\n<li>方法：事物的行为，在对象中常用方法来表示（常用动词）</li>\n</ol>\n<h2 id=\"「为什么需要对象」\"><a href=\"#「为什么需要对象」\" class=\"headerlink\" title=\"「为什么需要对象」\"></a><strong>「为什么需要对象」</strong></h2><ul>\n<li>保存一个值时，可以使用变量，保存多个值（一组值）时，可以使用数组，如果保存一个的完整信息呢？</li>\n<li>为了更好地存储一组数据，对象应用而生；对象中为每项数据设置了属性名称，可以访问数据更语义化，数据结构清晰，表意明显，方便开发者使用。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;name&quot;</span>:<span class=\"string\">&quot;fan&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;sex&quot;</span>:<span class=\"string\">&quot;male&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;age&quot;</span>:<span class=\"number\">18</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;height&quot;</span>:<span class=\"number\">155</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"创建对象的三种方式\"><a href=\"#创建对象的三种方式\" class=\"headerlink\" title=\"创建对象的三种方式\"></a>创建对象的三种方式</h1><ul>\n<li>利用字面量创建对象</li>\n<li>利用 new object 创建对象</li>\n<li>利用构造函数创建对象</li>\n</ul>\n<h2 id=\"「1-利用字面量创建对象」\"><a href=\"#「1-利用字面量创建对象」\" class=\"headerlink\" title=\"「1. 利用字面量创建对象」\"></a><strong>「1. 利用字面量创建对象」</strong></h2><p>使用对象字面量创建对象：</p>\n<ul>\n<li><p>就是花括号 { } 里面包含了表达这个具体事物（对象）的属性和方法</p>\n</li>\n<li><p>{ } 里面采取键值对的形式表示</p>\n<p>-<code>键</code>：相当于属性名<br>-<code>值</code>：相当于属性值，可以是任意类型的值（数字类型、字符串类型、布尔类型，函数类型等）</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// star 就是创建的对象</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> star = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span> : <span class=\"string\">&#x27;pink&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span> : <span class=\"number\">18</span>,</span><br><span class=\"line\">    <span class=\"attr\">sex</span> : <span class=\"string\">&#x27;男&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">sayHi</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      alert(<span class=\"string\">&#x27;大家好啊&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"><span class=\"comment\">// 方法冒号后面跟的是一个匿名函数</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"对象的的两个概念\"><a href=\"#对象的的两个概念\" class=\"headerlink\" title=\"对象的的两个概念\"></a>对象的的两个概念</h3><ol>\n<li>对象的属性：对象中<code>存储具体数据</code>的“键值对”中的‘键’称为对象的属性，即对象中存储具体数据的项。</li>\n<li>对象的方法：对象中<code>存储函数</code>的“键值对”中的“键”称为对象的方法，即对象中存储函数的项。（这里方法是名词）</li>\n</ol>\n<h3 id=\"对象的使用\"><a href=\"#对象的使用\" class=\"headerlink\" title=\"对象的使用\"></a>对象的使用</h3><ul>\n<li>访问对象的属性（两种方式）：</li>\n</ul>\n<ol>\n<li>对象里面的属性调用：<code>对象.属性名</code>；</li>\n<li>对象里面属性的另一种调用方式：<code>对象[&#39;属性名&#39;]</code>,注意方括号里面的属性必须加上引号。</li>\n</ol>\n<ul>\n<li>调用对象的方法:   <code>对象.方法名();</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 调用属性</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(star.name)     <span class=\"comment\">// 调用名字属性</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(star[<span class=\"string\">&#x27;name&#x27;</span>])  <span class=\"comment\">// 调用名字属性</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">// 调用方法</span></span><br><span class=\"line\">star.sayHi(); <span class=\"comment\">// 调用对象方法</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"变量、属性、函数、方法总结\"><a href=\"#变量、属性、函数、方法总结\" class=\"headerlink\" title=\"变量、属性、函数、方法总结\"></a>变量、属性、函数、方法总结</h3><p><code>①变量</code>：单独声明赋值，单独存在<br><code>②属性</code>:  对象里面的变量称为属性，不需要声明，用来描述该对象的特征。<br><code>③方法</code>：方法是对象的一部分，函数不是对象的一部分，函数是单独封装操作的容器。对象里面的函数称为方法，方法不需要声明，使用” 对象.方法名() “的方式就可以调用，方法用来描述该对象的行为和功能。<br><code>④函数</code>:  单独存在的，通过” 函数名() “的方式就可以调用。</p>\n<h2 id=\"「2-利用new-Object创建对象」\"><a href=\"#「2-利用new-Object创建对象」\" class=\"headerlink\" title=\"「2. 利用new Object创建对象」\"></a><strong>「2. 利用new Object创建对象」</strong></h2><ul>\n<li>创建空对象</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通过内置构造函数Object创建对象，此时andy变量已经保存了创建出来的空对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> andy = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();  </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>给空对象添加属性和方法</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通过对象操作属性和方法的方式，来为对象增加属性和方法</span></span><br><span class=\"line\"><span class=\"comment\">// (1)我们利用等号 = 赋值的方法，添加对象的属性和方法</span></span><br><span class=\"line\"><span class=\"comment\">// (2)每个属性和方法之间用分号结束</span></span><br><span class=\"line\">andy.name = <span class=\"string\">&#x27;pink&#x27;</span>;</span><br><span class=\"line\">andy.age = <span class=\"number\">18</span>; <span class=\"comment\">// andy.age = 19修改对象属性</span></span><br><span class=\"line\">andy.sex = <span class=\"string\">&#x27;男&#x27;</span>; <span class=\"comment\">// andy.phoneNum = 110 添加属性</span></span><br><span class=\"line\">andy.sayHi = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"string\">&#x27;大家好&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.sayHi();<span class=\"comment\">// 调用对象的方法 </span></span><br><span class=\"line\"><span class=\"comment\">//第二种写法 obj[&#x27;sayHi&#x27;]();</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Object()第一个字母大写；</span></span><br><span class=\"line\"><span class=\"comment\">//new Object() 需要new关键字，使用的格式:对象.属性 = 值</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例：工厂函数创建对象-这个把创建好的对象返回给函数调用处\"><a href=\"#案例：工厂函数创建对象-这个把创建好的对象返回给函数调用处\" class=\"headerlink\" title=\"案例：工厂函数创建对象 这个把创建好的对象返回给函数调用处\"></a>案例：工厂函数创建对象 这个把创建好的对象返回给函数调用处</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 工厂函数创建对象 这个把创建好的对象返回给函数调用处</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createPerson</span>(<span class=\"params\">name, age, job</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//new Object创建对象</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">  person.name = name;</span><br><span class=\"line\">  person.age = age;</span><br><span class=\"line\">  person.job = job;</span><br><span class=\"line\">  person.sayHi = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Hello,everyBody&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">   <span class=\"comment\">//此函数返回的是一个对象</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> person;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> p1 = createPerson(<span class=\"string\">&#x27;张三&#x27;</span>, <span class=\"number\">22</span>, <span class=\"string\">&#x27;actor&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"「3-利用构造函数创建对象」\"><a href=\"#「3-利用构造函数创建对象」\" class=\"headerlink\" title=\"「3. 利用构造函数创建对象」\"></a><strong>「3. 利用构造函数创建对象」</strong></h2><p><code>构造函数</code>是一种特殊的函数，主要用来初始化对象，即为对象成员变量赋初始值,它总与new运算符一起使用，我们可以把对象中一些公共的属性和方法抽出来，然后封装到这个函数里面。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 利用构造函数创建对象</span></span><br><span class=\"line\"><span class=\"comment\">// 构造函数的语法格式</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> 构造函数名(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.属性 = 值;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.属性 = 值;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.方法 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">new</span> 构造函数名();</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 构造函数的封装格式</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> 构造函数名(<span class=\"params\">形参<span class=\"number\">1</span>，形参<span class=\"number\">2</span>，形参<span class=\"number\">3.</span>..</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.属性名<span class=\"number\">1</span> = 参数<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.属性名<span class=\"number\">2</span> = 参数<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.属性名<span class=\"number\">3</span> = 参数<span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.方法名 = 函数体;</span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"comment\">// 构造函数的调用格式</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> 构造函数名(实参<span class=\"number\">1</span>，实参<span class=\"number\">2</span>，实参<span class=\"number\">3</span>); <span class=\"comment\">// 以上代码中，obj即接收到构造函数创建出来的对象。</span></span><br><span class=\"line\">注意事项：</span><br><span class=\"line\">    <span class=\"number\">1.</span>构造函数约定首字母大写</span><br><span class=\"line\">    <span class=\"number\">2.</span>函数内的属性和方法前面需要添加<span class=\"built_in\">this</span>，表示当前对象的属性和方法</span><br><span class=\"line\">    <span class=\"number\">3.</span>构造函数中不需要retrun返回结果</span><br><span class=\"line\">    <span class=\"number\">4.</span>但我们创建对象的时候，必须用<span class=\"keyword\">new</span> 来调用构造函数</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"number\">1.</span>其他：构造函数如Stars(),抽取了对象的公共部分，封装到了函数里面，它</span><br><span class=\"line\">     泛指某一大类(<span class=\"class\"><span class=\"keyword\">class</span>)</span></span><br><span class=\"line\"><span class=\"class\">    2.创建对象，如<span class=\"title\">new</span> <span class=\"title\">Stars</span>()</span>;特指某一个，利用<span class=\"keyword\">new</span>关键字创建对象的过程</span><br><span class=\"line\">     我们也称为对象实例化</span><br><span class=\"line\">   </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 我们需要创建四大天王的对象 相同的属性：名字，年龄，性别，相同的方法：唱歌</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Star</span>(<span class=\"params\">uname, age, sex</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = uname;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.sex = sex;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.sing = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">sang</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(sang);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> ldh = <span class=\"keyword\">new</span> Star(<span class=\"string\">&#x27;刘德华&#x27;</span>, <span class=\"number\">18</span>, <span class=\"string\">&#x27;男&#x27;</span>); <span class=\"comment\">// 调用函数返回的是一个对象</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> ldh);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ldh.name);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ldh[<span class=\"string\">&#x27;sex&#x27;</span>]);</span><br><span class=\"line\">ldh.sang(<span class=\"string\">&#x27;冰雨&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> zcy = <span class=\"keyword\">new</span> Star(<span class=\"string\">&#x27;张学友&#x27;</span>, <span class=\"number\">19</span>, <span class=\"string\">&#x27;男&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(zxy.name);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(zxy.age);</span><br><span class=\"line\">zxy.sing(<span class=\"string\">&#x27;春兰&#x27;</span>)；</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"构造函数和对象\"><a href=\"#构造函数和对象\" class=\"headerlink\" title=\"构造函数和对象\"></a>构造函数和对象</h3><ul>\n<li>构造函数：如Stars()，抽象了对象的公共部分，封装到了一个函数里面，它泛指某一大类(class)</li>\n<li>创建对象：如new Stars() ，特指某一个，通过new关键字创建对象的过程我们也称为对象实例化</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206111550328.jpg\"></p>\n<h3 id=\"new关键字的作用-面试题\"><a href=\"#new关键字的作用-面试题\" class=\"headerlink\" title=\"new关键字的作用(面试题)\"></a><strong>new关键字的作用(面试题)</strong></h3><ol>\n<li>在构造函数代码开始执行之前，创建一个空对象；</li>\n<li>修改this的指向，把this指向创建出来的空对象；</li>\n<li>执行构造函数内的代码，给这个新对象添加属性和方法</li>\n<li>在函数完成之后，返回这个创建出来的新对象(所以构造函数里面不需要return)</li>\n</ol>\n<h1 id=\"遍历对象\"><a href=\"#遍历对象\" class=\"headerlink\" title=\"遍历对象\"></a>遍历对象</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// for...in 语句用于对数组或者对象的属性进行循环操作。</span></span><br><span class=\"line\"><span class=\"comment\">// 其语法如下：</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (变量 <span class=\"keyword\">in</span> 对象名字) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 在此执行代码</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"comment\">//语法中的变量是自定义的，它需要符合命名规范，通常我们会将这个变量写为 k 或者 key。</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(k);      <span class=\"comment\">// 这里的 k 是属性名</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(obj[k]); <span class=\"comment\">// 这里的 obj[k] 是属性值</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<h1 id=\"对象的概念\"><a href=\"#对象的概念\" class=\"headerlink\" title=\"对象的概念\"></a>对象的概念</h1><h2 id=\"「对象」\"><a href=\"#「对象」\" class=\"headerlink\" title=\"「对象」\"></a><strong>「对象」</strong></h2><p>在JavaScript中，对象是一组无序的相关属性和方法的集合，所有的事物都是对象，例如字符串、数值、数组、函数等。</p>\n<p>对象是由属性和方法组成的</p>\n<ol>\n<li>属性：事物的特征，在对象中用属性来表示（常用名词）</li>\n<li>方法：事物的行为，在对象中常用方法来表示（常用动词）</li>\n</ol>\n<h2 id=\"「为什么需要对象」\"><a href=\"#「为什么需要对象」\" class=\"headerlink\" title=\"「为什么需要对象」\"></a><strong>「为什么需要对象」</strong></h2><ul>\n<li>保存一个值时，可以使用变量，保存多个值（一组值）时，可以使用数组，如果保存一个的完整信息呢？</li>\n<li>为了更好地存储一组数据，对象应用而生；对象中为每项数据设置了属性名称，可以访问数据更语义化，数据结构清晰，表意明显，方便开发者使用。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;name&quot;</span>:<span class=\"string\">&quot;fan&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;sex&quot;</span>:<span class=\"string\">&quot;male&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;age&quot;</span>:<span class=\"number\">18</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;height&quot;</span>:<span class=\"number\">155</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"创建对象的三种方式\"><a href=\"#创建对象的三种方式\" class=\"headerlink\" title=\"创建对象的三种方式\"></a>创建对象的三种方式</h1><ul>\n<li>利用字面量创建对象</li>\n<li>利用 new object 创建对象</li>\n<li>利用构造函数创建对象</li>\n</ul>\n<h2 id=\"「1-利用字面量创建对象」\"><a href=\"#「1-利用字面量创建对象」\" class=\"headerlink\" title=\"「1. 利用字面量创建对象」\"></a><strong>「1. 利用字面量创建对象」</strong></h2><p>使用对象字面量创建对象：</p>\n<ul>\n<li><p>就是花括号 { } 里面包含了表达这个具体事物（对象）的属性和方法</p>\n</li>\n<li><p>{ } 里面采取键值对的形式表示</p>\n<p>-<code>键</code>：相当于属性名<br>-<code>值</code>：相当于属性值，可以是任意类型的值（数字类型、字符串类型、布尔类型，函数类型等）</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// star 就是创建的对象</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> star = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span> : <span class=\"string\">&#x27;pink&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span> : <span class=\"number\">18</span>,</span><br><span class=\"line\">    <span class=\"attr\">sex</span> : <span class=\"string\">&#x27;男&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">sayHi</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      alert(<span class=\"string\">&#x27;大家好啊&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"><span class=\"comment\">// 方法冒号后面跟的是一个匿名函数</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"对象的的两个概念\"><a href=\"#对象的的两个概念\" class=\"headerlink\" title=\"对象的的两个概念\"></a>对象的的两个概念</h3><ol>\n<li>对象的属性：对象中<code>存储具体数据</code>的“键值对”中的‘键’称为对象的属性，即对象中存储具体数据的项。</li>\n<li>对象的方法：对象中<code>存储函数</code>的“键值对”中的“键”称为对象的方法，即对象中存储函数的项。（这里方法是名词）</li>\n</ol>\n<h3 id=\"对象的使用\"><a href=\"#对象的使用\" class=\"headerlink\" title=\"对象的使用\"></a>对象的使用</h3><ul>\n<li>访问对象的属性（两种方式）：</li>\n</ul>\n<ol>\n<li>对象里面的属性调用：<code>对象.属性名</code>；</li>\n<li>对象里面属性的另一种调用方式：<code>对象[&#39;属性名&#39;]</code>,注意方括号里面的属性必须加上引号。</li>\n</ol>\n<ul>\n<li>调用对象的方法:   <code>对象.方法名();</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 调用属性</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(star.name)     <span class=\"comment\">// 调用名字属性</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(star[<span class=\"string\">&#x27;name&#x27;</span>])  <span class=\"comment\">// 调用名字属性</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">// 调用方法</span></span><br><span class=\"line\">star.sayHi(); <span class=\"comment\">// 调用对象方法</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"变量、属性、函数、方法总结\"><a href=\"#变量、属性、函数、方法总结\" class=\"headerlink\" title=\"变量、属性、函数、方法总结\"></a>变量、属性、函数、方法总结</h3><p><code>①变量</code>：单独声明赋值，单独存在<br><code>②属性</code>:  对象里面的变量称为属性，不需要声明，用来描述该对象的特征。<br><code>③方法</code>：方法是对象的一部分，函数不是对象的一部分，函数是单独封装操作的容器。对象里面的函数称为方法，方法不需要声明，使用” 对象.方法名() “的方式就可以调用，方法用来描述该对象的行为和功能。<br><code>④函数</code>:  单独存在的，通过” 函数名() “的方式就可以调用。</p>\n<h2 id=\"「2-利用new-Object创建对象」\"><a href=\"#「2-利用new-Object创建对象」\" class=\"headerlink\" title=\"「2. 利用new Object创建对象」\"></a><strong>「2. 利用new Object创建对象」</strong></h2><ul>\n<li>创建空对象</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通过内置构造函数Object创建对象，此时andy变量已经保存了创建出来的空对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> andy = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();  </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>给空对象添加属性和方法</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通过对象操作属性和方法的方式，来为对象增加属性和方法</span></span><br><span class=\"line\"><span class=\"comment\">// (1)我们利用等号 = 赋值的方法，添加对象的属性和方法</span></span><br><span class=\"line\"><span class=\"comment\">// (2)每个属性和方法之间用分号结束</span></span><br><span class=\"line\">andy.name = <span class=\"string\">&#x27;pink&#x27;</span>;</span><br><span class=\"line\">andy.age = <span class=\"number\">18</span>; <span class=\"comment\">// andy.age = 19修改对象属性</span></span><br><span class=\"line\">andy.sex = <span class=\"string\">&#x27;男&#x27;</span>; <span class=\"comment\">// andy.phoneNum = 110 添加属性</span></span><br><span class=\"line\">andy.sayHi = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"string\">&#x27;大家好&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.sayHi();<span class=\"comment\">// 调用对象的方法 </span></span><br><span class=\"line\"><span class=\"comment\">//第二种写法 obj[&#x27;sayHi&#x27;]();</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Object()第一个字母大写；</span></span><br><span class=\"line\"><span class=\"comment\">//new Object() 需要new关键字，使用的格式:对象.属性 = 值</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例：工厂函数创建对象-这个把创建好的对象返回给函数调用处\"><a href=\"#案例：工厂函数创建对象-这个把创建好的对象返回给函数调用处\" class=\"headerlink\" title=\"案例：工厂函数创建对象 这个把创建好的对象返回给函数调用处\"></a>案例：工厂函数创建对象 这个把创建好的对象返回给函数调用处</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 工厂函数创建对象 这个把创建好的对象返回给函数调用处</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createPerson</span>(<span class=\"params\">name, age, job</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//new Object创建对象</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">  person.name = name;</span><br><span class=\"line\">  person.age = age;</span><br><span class=\"line\">  person.job = job;</span><br><span class=\"line\">  person.sayHi = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Hello,everyBody&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">   <span class=\"comment\">//此函数返回的是一个对象</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> person;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> p1 = createPerson(<span class=\"string\">&#x27;张三&#x27;</span>, <span class=\"number\">22</span>, <span class=\"string\">&#x27;actor&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"「3-利用构造函数创建对象」\"><a href=\"#「3-利用构造函数创建对象」\" class=\"headerlink\" title=\"「3. 利用构造函数创建对象」\"></a><strong>「3. 利用构造函数创建对象」</strong></h2><p><code>构造函数</code>是一种特殊的函数，主要用来初始化对象，即为对象成员变量赋初始值,它总与new运算符一起使用，我们可以把对象中一些公共的属性和方法抽出来，然后封装到这个函数里面。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 利用构造函数创建对象</span></span><br><span class=\"line\"><span class=\"comment\">// 构造函数的语法格式</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> 构造函数名(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.属性 = 值;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.属性 = 值;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.方法 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">new</span> 构造函数名();</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 构造函数的封装格式</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> 构造函数名(<span class=\"params\">形参<span class=\"number\">1</span>，形参<span class=\"number\">2</span>，形参<span class=\"number\">3.</span>..</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.属性名<span class=\"number\">1</span> = 参数<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.属性名<span class=\"number\">2</span> = 参数<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.属性名<span class=\"number\">3</span> = 参数<span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.方法名 = 函数体;</span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"comment\">// 构造函数的调用格式</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> 构造函数名(实参<span class=\"number\">1</span>，实参<span class=\"number\">2</span>，实参<span class=\"number\">3</span>); <span class=\"comment\">// 以上代码中，obj即接收到构造函数创建出来的对象。</span></span><br><span class=\"line\">注意事项：</span><br><span class=\"line\">    <span class=\"number\">1.</span>构造函数约定首字母大写</span><br><span class=\"line\">    <span class=\"number\">2.</span>函数内的属性和方法前面需要添加<span class=\"built_in\">this</span>，表示当前对象的属性和方法</span><br><span class=\"line\">    <span class=\"number\">3.</span>构造函数中不需要retrun返回结果</span><br><span class=\"line\">    <span class=\"number\">4.</span>但我们创建对象的时候，必须用<span class=\"keyword\">new</span> 来调用构造函数</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"number\">1.</span>其他：构造函数如Stars(),抽取了对象的公共部分，封装到了函数里面，它</span><br><span class=\"line\">     泛指某一大类(<span class=\"class\"><span class=\"keyword\">class</span>)</span></span><br><span class=\"line\"><span class=\"class\">    2.创建对象，如<span class=\"title\">new</span> <span class=\"title\">Stars</span>()</span>;特指某一个，利用<span class=\"keyword\">new</span>关键字创建对象的过程</span><br><span class=\"line\">     我们也称为对象实例化</span><br><span class=\"line\">   </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 我们需要创建四大天王的对象 相同的属性：名字，年龄，性别，相同的方法：唱歌</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Star</span>(<span class=\"params\">uname, age, sex</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = uname;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.sex = sex;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.sing = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">sang</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(sang);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> ldh = <span class=\"keyword\">new</span> Star(<span class=\"string\">&#x27;刘德华&#x27;</span>, <span class=\"number\">18</span>, <span class=\"string\">&#x27;男&#x27;</span>); <span class=\"comment\">// 调用函数返回的是一个对象</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> ldh);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ldh.name);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ldh[<span class=\"string\">&#x27;sex&#x27;</span>]);</span><br><span class=\"line\">ldh.sang(<span class=\"string\">&#x27;冰雨&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> zcy = <span class=\"keyword\">new</span> Star(<span class=\"string\">&#x27;张学友&#x27;</span>, <span class=\"number\">19</span>, <span class=\"string\">&#x27;男&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(zxy.name);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(zxy.age);</span><br><span class=\"line\">zxy.sing(<span class=\"string\">&#x27;春兰&#x27;</span>)；</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"构造函数和对象\"><a href=\"#构造函数和对象\" class=\"headerlink\" title=\"构造函数和对象\"></a>构造函数和对象</h3><ul>\n<li>构造函数：如Stars()，抽象了对象的公共部分，封装到了一个函数里面，它泛指某一大类(class)</li>\n<li>创建对象：如new Stars() ，特指某一个，通过new关键字创建对象的过程我们也称为对象实例化</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206111550328.jpg\"></p>\n<h3 id=\"new关键字的作用-面试题\"><a href=\"#new关键字的作用-面试题\" class=\"headerlink\" title=\"new关键字的作用(面试题)\"></a><strong>new关键字的作用(面试题)</strong></h3><ol>\n<li>在构造函数代码开始执行之前，创建一个空对象；</li>\n<li>修改this的指向，把this指向创建出来的空对象；</li>\n<li>执行构造函数内的代码，给这个新对象添加属性和方法</li>\n<li>在函数完成之后，返回这个创建出来的新对象(所以构造函数里面不需要return)</li>\n</ol>\n<h1 id=\"遍历对象\"><a href=\"#遍历对象\" class=\"headerlink\" title=\"遍历对象\"></a>遍历对象</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// for...in 语句用于对数组或者对象的属性进行循环操作。</span></span><br><span class=\"line\"><span class=\"comment\">// 其语法如下：</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (变量 <span class=\"keyword\">in</span> 对象名字) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 在此执行代码</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"comment\">//语法中的变量是自定义的，它需要符合命名规范，通常我们会将这个变量写为 k 或者 key。</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(k);      <span class=\"comment\">// 这里的 k 是属性名</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(obj[k]); <span class=\"comment\">// 这里的 obj[k] 是属性值</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"简单数据类型和复杂数据类型","date":"2022-06-12T16:00:00.000Z","updated":"2022-06-13T16:00:00.000Z","keywords":null,"description":null,"top_img":"./img/bg20.jpg","cover":"./img/bg2.jpg","_content":"# 简单数据类型和复杂数据类型\n\n**「简单类型（基本数据类型、值类型）」**：在存储时变量中存储的是值本身，包括string ，number，boolean，undefined，null\n\n**「复杂数据类型（引用类型）」**：在存储时变量中存储的仅仅是地址（引用），通过 new 关键字创建的对象（系统对象、自定义对象），如 Object、Array、Date等；\n\n## **「堆栈」**\n\n**堆栈空间分配区别：**\n\n- 1、栈（操作系统）：由操作系统自动分配释放存放函数的参数值、局部变量的值等。其操作方式类似于数据结构中的栈；简单数据类型存放到栈里面\n\n- 2、堆（操作系统）：存储复杂类型(对象)，一般由程序员分配释放，若程序员不释放，由垃圾回收机制回收。\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206122149383.png)\n\n\n\n**简单数据类型的存储方式**\n\n- 值类型变量的数据直接存放在变量（栈空间）中\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206122150177.png)\n\n**复杂数据类型的存储方式**\n\n- 引用类型变量（栈空间）里存放的是地址，真正的对象实例存放在堆空间中\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206122150572.png)\n\n\n\n## **「简单类型传参」**\n\n  函数的形参也可以看做是一个变量，当我们把一个值类型变量作为参数传给函数的形参时，其实是把变量在栈空间里的值复制了一份给形参，那么在方法内部对形参做任何修改，都不会影响到的外部变量。\n\n\n\n```js\n  function fn(a) {\n      a++;\n      console.log(a); \n  }\n  var x = 10;\n  fn(x);\n  console.log(x)；\n  // 11\n  // 10\n```\n\n## **「复杂数据类型传参」**\n\n  函数的形参也可以看做是一个变量，当我们把引用类型变量传给形参时，其实是把变量在栈空间里保存的堆地址复制给了形参，形参和实参其实保存的是同一个堆地址，所以操作的是同一个对象。\n\n```js\n  function Person(name) {\n      this.name = name;\n  }\n  function f1(x) { // x = p\n      console.log(x.name); // 2. 这个输出什么 ?    \n      x.name = \"张学友\";\n      console.log(x.name); // 3. 这个输出什么 ?    \n  }\n  var p = new Person(\"刘德华\");\n  console.log(p.name);    // 1. 这个输出什么 ?   \n  f1(p);\n  console.log(p.name);    // 4. 这个输出什么 ?  \n//刘德华\n//刘德华\n//张学友\n//张学友\n```\n\n","source":"_posts/前端/简单数据类型.md","raw":"---\ntitle: 简单数据类型和复杂数据类型\ndate: 2022-06-13\nupdated: 2022-06-14\ntags:\n  - 小白的前端之路\n  - JavaScript基础\ncategories: 前端开发\nkeywords: \ndescription: \ntop_img: ./img/bg20.jpg\ncover: ./img/bg2.jpg\n\n---\n# 简单数据类型和复杂数据类型\n\n**「简单类型（基本数据类型、值类型）」**：在存储时变量中存储的是值本身，包括string ，number，boolean，undefined，null\n\n**「复杂数据类型（引用类型）」**：在存储时变量中存储的仅仅是地址（引用），通过 new 关键字创建的对象（系统对象、自定义对象），如 Object、Array、Date等；\n\n## **「堆栈」**\n\n**堆栈空间分配区别：**\n\n- 1、栈（操作系统）：由操作系统自动分配释放存放函数的参数值、局部变量的值等。其操作方式类似于数据结构中的栈；简单数据类型存放到栈里面\n\n- 2、堆（操作系统）：存储复杂类型(对象)，一般由程序员分配释放，若程序员不释放，由垃圾回收机制回收。\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206122149383.png)\n\n\n\n**简单数据类型的存储方式**\n\n- 值类型变量的数据直接存放在变量（栈空间）中\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206122150177.png)\n\n**复杂数据类型的存储方式**\n\n- 引用类型变量（栈空间）里存放的是地址，真正的对象实例存放在堆空间中\n\n![](https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206122150572.png)\n\n\n\n## **「简单类型传参」**\n\n  函数的形参也可以看做是一个变量，当我们把一个值类型变量作为参数传给函数的形参时，其实是把变量在栈空间里的值复制了一份给形参，那么在方法内部对形参做任何修改，都不会影响到的外部变量。\n\n\n\n```js\n  function fn(a) {\n      a++;\n      console.log(a); \n  }\n  var x = 10;\n  fn(x);\n  console.log(x)；\n  // 11\n  // 10\n```\n\n## **「复杂数据类型传参」**\n\n  函数的形参也可以看做是一个变量，当我们把引用类型变量传给形参时，其实是把变量在栈空间里保存的堆地址复制给了形参，形参和实参其实保存的是同一个堆地址，所以操作的是同一个对象。\n\n```js\n  function Person(name) {\n      this.name = name;\n  }\n  function f1(x) { // x = p\n      console.log(x.name); // 2. 这个输出什么 ?    \n      x.name = \"张学友\";\n      console.log(x.name); // 3. 这个输出什么 ?    \n  }\n  var p = new Person(\"刘德华\");\n  console.log(p.name);    // 1. 这个输出什么 ?   \n  f1(p);\n  console.log(p.name);    // 4. 这个输出什么 ?  \n//刘德华\n//刘德华\n//张学友\n//张学友\n```\n\n","slug":"前端/简单数据类型","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cl5db79kb001nywtuhwm34ckk","content":"<h1 id=\"简单数据类型和复杂数据类型\"><a href=\"#简单数据类型和复杂数据类型\" class=\"headerlink\" title=\"简单数据类型和复杂数据类型\"></a>简单数据类型和复杂数据类型</h1><p><strong>「简单类型（基本数据类型、值类型）」</strong>：在存储时变量中存储的是值本身，包括string ，number，boolean，undefined，null</p>\n<p><strong>「复杂数据类型（引用类型）」</strong>：在存储时变量中存储的仅仅是地址（引用），通过 new 关键字创建的对象（系统对象、自定义对象），如 Object、Array、Date等；</p>\n<h2 id=\"「堆栈」\"><a href=\"#「堆栈」\" class=\"headerlink\" title=\"「堆栈」\"></a><strong>「堆栈」</strong></h2><p><strong>堆栈空间分配区别：</strong></p>\n<ul>\n<li><p>1、栈（操作系统）：由操作系统自动分配释放存放函数的参数值、局部变量的值等。其操作方式类似于数据结构中的栈；简单数据类型存放到栈里面</p>\n</li>\n<li><p>2、堆（操作系统）：存储复杂类型(对象)，一般由程序员分配释放，若程序员不释放，由垃圾回收机制回收。</p>\n</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206122149383.png\"></p>\n<p><strong>简单数据类型的存储方式</strong></p>\n<ul>\n<li>值类型变量的数据直接存放在变量（栈空间）中</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206122150177.png\"></p>\n<p><strong>复杂数据类型的存储方式</strong></p>\n<ul>\n<li>引用类型变量（栈空间）里存放的是地址，真正的对象实例存放在堆空间中</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206122150572.png\"></p>\n<h2 id=\"「简单类型传参」\"><a href=\"#「简单类型传参」\" class=\"headerlink\" title=\"「简单类型传参」\"></a><strong>「简单类型传参」</strong></h2><p>  函数的形参也可以看做是一个变量，当我们把一个值类型变量作为参数传给函数的形参时，其实是把变量在栈空间里的值复制了一份给形参，那么在方法内部对形参做任何修改，都不会影响到的外部变量。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">a</span>) </span>&#123;</span><br><span class=\"line\">    a++;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">10</span>;</span><br><span class=\"line\">fn(x);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x)；</span><br><span class=\"line\"><span class=\"comment\">// 11</span></span><br><span class=\"line\"><span class=\"comment\">// 10</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「复杂数据类型传参」\"><a href=\"#「复杂数据类型传参」\" class=\"headerlink\" title=\"「复杂数据类型传参」\"></a><strong>「复杂数据类型传参」</strong></h2><p>  函数的形参也可以看做是一个变量，当我们把引用类型变量传给形参时，其实是把变量在栈空间里保存的堆地址复制给了形参，形参和实参其实保存的是同一个堆地址，所以操作的是同一个对象。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\">x</span>) </span>&#123; <span class=\"comment\">// x = p</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(x.name); <span class=\"comment\">// 2. 这个输出什么 ?    </span></span><br><span class=\"line\">      x.name = <span class=\"string\">&quot;张学友&quot;</span>;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(x.name); <span class=\"comment\">// 3. 这个输出什么 ?    </span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;刘德华&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(p.name);    <span class=\"comment\">// 1. 这个输出什么 ?   </span></span><br><span class=\"line\">  f1(p);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(p.name);    <span class=\"comment\">// 4. 这个输出什么 ?  </span></span><br><span class=\"line\"><span class=\"comment\">//刘德华</span></span><br><span class=\"line\"><span class=\"comment\">//刘德华</span></span><br><span class=\"line\"><span class=\"comment\">//张学友</span></span><br><span class=\"line\"><span class=\"comment\">//张学友</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<h1 id=\"简单数据类型和复杂数据类型\"><a href=\"#简单数据类型和复杂数据类型\" class=\"headerlink\" title=\"简单数据类型和复杂数据类型\"></a>简单数据类型和复杂数据类型</h1><p><strong>「简单类型（基本数据类型、值类型）」</strong>：在存储时变量中存储的是值本身，包括string ，number，boolean，undefined，null</p>\n<p><strong>「复杂数据类型（引用类型）」</strong>：在存储时变量中存储的仅仅是地址（引用），通过 new 关键字创建的对象（系统对象、自定义对象），如 Object、Array、Date等；</p>\n<h2 id=\"「堆栈」\"><a href=\"#「堆栈」\" class=\"headerlink\" title=\"「堆栈」\"></a><strong>「堆栈」</strong></h2><p><strong>堆栈空间分配区别：</strong></p>\n<ul>\n<li><p>1、栈（操作系统）：由操作系统自动分配释放存放函数的参数值、局部变量的值等。其操作方式类似于数据结构中的栈；简单数据类型存放到栈里面</p>\n</li>\n<li><p>2、堆（操作系统）：存储复杂类型(对象)，一般由程序员分配释放，若程序员不释放，由垃圾回收机制回收。</p>\n</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206122149383.png\"></p>\n<p><strong>简单数据类型的存储方式</strong></p>\n<ul>\n<li>值类型变量的数据直接存放在变量（栈空间）中</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206122150177.png\"></p>\n<p><strong>复杂数据类型的存储方式</strong></p>\n<ul>\n<li>引用类型变量（栈空间）里存放的是地址，真正的对象实例存放在堆空间中</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206122150572.png\"></p>\n<h2 id=\"「简单类型传参」\"><a href=\"#「简单类型传参」\" class=\"headerlink\" title=\"「简单类型传参」\"></a><strong>「简单类型传参」</strong></h2><p>  函数的形参也可以看做是一个变量，当我们把一个值类型变量作为参数传给函数的形参时，其实是把变量在栈空间里的值复制了一份给形参，那么在方法内部对形参做任何修改，都不会影响到的外部变量。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">a</span>) </span>&#123;</span><br><span class=\"line\">    a++;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">10</span>;</span><br><span class=\"line\">fn(x);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x)；</span><br><span class=\"line\"><span class=\"comment\">// 11</span></span><br><span class=\"line\"><span class=\"comment\">// 10</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"「复杂数据类型传参」\"><a href=\"#「复杂数据类型传参」\" class=\"headerlink\" title=\"「复杂数据类型传参」\"></a><strong>「复杂数据类型传参」</strong></h2><p>  函数的形参也可以看做是一个变量，当我们把引用类型变量传给形参时，其实是把变量在栈空间里保存的堆地址复制给了形参，形参和实参其实保存的是同一个堆地址，所以操作的是同一个对象。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\">x</span>) </span>&#123; <span class=\"comment\">// x = p</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(x.name); <span class=\"comment\">// 2. 这个输出什么 ?    </span></span><br><span class=\"line\">      x.name = <span class=\"string\">&quot;张学友&quot;</span>;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(x.name); <span class=\"comment\">// 3. 这个输出什么 ?    </span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;刘德华&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(p.name);    <span class=\"comment\">// 1. 这个输出什么 ?   </span></span><br><span class=\"line\">  f1(p);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(p.name);    <span class=\"comment\">// 4. 这个输出什么 ?  </span></span><br><span class=\"line\"><span class=\"comment\">//刘德华</span></span><br><span class=\"line\"><span class=\"comment\">//刘德华</span></span><br><span class=\"line\"><span class=\"comment\">//张学友</span></span><br><span class=\"line\"><span class=\"comment\">//张学友</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"括号法解读英语句子","date":"2022-05-14T16:00:00.000Z","updated":"2022-05-14T16:00:00.000Z","keywords":null,"description":null,"top_img":"./img/bg5.jpg","cover":"./img/bg4.jpg","_content":"# 括号法解读英语句子\n\n## **目标：**\n\n1. 理解能力：读懂句子\n2. 表达能力：写出句子\n\n## **基本知识:**\n\n- 主语：句子描述的对象\n\n- 谓语：用来描述主语\n\n- 谓语动词：谓语部分中的核心的动词；**一个单句有且只有一个谓语动词！**\n\neg:\n\n李辉教英语\n\n李辉帅。LiHui is handsome.\n\n句子=主干结构+修饰结构\n\n**主干结构**：\n\n- 主谓\tI come.\n\n- 主谓宾\tI love you.\n\n- 主谓宾宾\tI give you my heart.\n\n- 主谓宾补\tYou make me happy.\n\n- 主系表\tYou are my everything.\n\n\n**修饰结构：**\n\n**短：**\t\t\t\t\t\t\t\n\n- 形容词\tThis is a big box.\tLet me tell you something interesting.（不定代词）\n\n- 副词\tI really love you.\n\n\n**长：**“四朵金花”导致英语语序和中文并不一样！\n\n- 介词短语\tI love you (in my heart).\t（介词….名词）\n\n- 从句\tLiHui is a teacher (who teaches English).\t（引导词+陈述语序）\n\n- 非谓语动词\tLihui is a teacher (teaching English).\t(to do)/(doing)/(done)\n\n- 时间状语\t(Last week),I went (to the park).\t表时间，无介词。\n\n\neg：\n\nLihui is a teacher (teaching English) (in Beijing) (which is the capital) (of China).\n\n(After chatting) (with LiHui) (on this matter) (in this room) (for a long time) (from 2:00) (to 4:00) (in the afternoon), I returned (to my office).\n\n## 断句！\n\n1. 主干部分直接翻\n\n2. 遇到金花画括号\n\n3. 提着问题往下顺（每个括号里第一个单词，都叫挂钩单词，可以利用挂钩自问自答，将句子“顺下来”）\n\n4. 调字调序写中文（如果需要做翻译题，则需要调整语序；如果想学听说读写，则不必调整语序——要训练自己习惯英语思维顺序）\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/英语/括号法解读英语句子.md","raw":"---\ntitle: 括号法解读英语句子\ndate: 2022-05-15\nupdated: 2022-05-15\ntags: 英语\ncategories: 英语\nkeywords: \ndescription: \ntop_img: ./img/bg5.jpg\ncover: ./img/bg4.jpg\n\n---\n# 括号法解读英语句子\n\n## **目标：**\n\n1. 理解能力：读懂句子\n2. 表达能力：写出句子\n\n## **基本知识:**\n\n- 主语：句子描述的对象\n\n- 谓语：用来描述主语\n\n- 谓语动词：谓语部分中的核心的动词；**一个单句有且只有一个谓语动词！**\n\neg:\n\n李辉教英语\n\n李辉帅。LiHui is handsome.\n\n句子=主干结构+修饰结构\n\n**主干结构**：\n\n- 主谓\tI come.\n\n- 主谓宾\tI love you.\n\n- 主谓宾宾\tI give you my heart.\n\n- 主谓宾补\tYou make me happy.\n\n- 主系表\tYou are my everything.\n\n\n**修饰结构：**\n\n**短：**\t\t\t\t\t\t\t\n\n- 形容词\tThis is a big box.\tLet me tell you something interesting.（不定代词）\n\n- 副词\tI really love you.\n\n\n**长：**“四朵金花”导致英语语序和中文并不一样！\n\n- 介词短语\tI love you (in my heart).\t（介词….名词）\n\n- 从句\tLiHui is a teacher (who teaches English).\t（引导词+陈述语序）\n\n- 非谓语动词\tLihui is a teacher (teaching English).\t(to do)/(doing)/(done)\n\n- 时间状语\t(Last week),I went (to the park).\t表时间，无介词。\n\n\neg：\n\nLihui is a teacher (teaching English) (in Beijing) (which is the capital) (of China).\n\n(After chatting) (with LiHui) (on this matter) (in this room) (for a long time) (from 2:00) (to 4:00) (in the afternoon), I returned (to my office).\n\n## 断句！\n\n1. 主干部分直接翻\n\n2. 遇到金花画括号\n\n3. 提着问题往下顺（每个括号里第一个单词，都叫挂钩单词，可以利用挂钩自问自答，将句子“顺下来”）\n\n4. 调字调序写中文（如果需要做翻译题，则需要调整语序；如果想学听说读写，则不必调整语序——要训练自己习惯英语思维顺序）\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"英语/括号法解读英语句子","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cl5db79ki003eywtu2fng6ifx","content":"<h1 id=\"括号法解读英语句子\"><a href=\"#括号法解读英语句子\" class=\"headerlink\" title=\"括号法解读英语句子\"></a>括号法解读英语句子</h1><h2 id=\"目标：\"><a href=\"#目标：\" class=\"headerlink\" title=\"目标：\"></a><strong>目标：</strong></h2><ol>\n<li>理解能力：读懂句子</li>\n<li>表达能力：写出句子</li>\n</ol>\n<h2 id=\"基本知识\"><a href=\"#基本知识\" class=\"headerlink\" title=\"基本知识:\"></a><strong>基本知识:</strong></h2><ul>\n<li><p>主语：句子描述的对象</p>\n</li>\n<li><p>谓语：用来描述主语</p>\n</li>\n<li><p>谓语动词：谓语部分中的核心的动词；<strong>一个单句有且只有一个谓语动词！</strong></p>\n</li>\n</ul>\n<p>eg:</p>\n<p>李辉教英语</p>\n<p>李辉帅。LiHui is handsome.</p>\n<p>句子=主干结构+修饰结构</p>\n<p><strong>主干结构</strong>：</p>\n<ul>\n<li><p>主谓    I come.</p>\n</li>\n<li><p>主谓宾    I love you.</p>\n</li>\n<li><p>主谓宾宾    I give you my heart.</p>\n</li>\n<li><p>主谓宾补    You make me happy.</p>\n</li>\n<li><p>主系表    You are my everything.</p>\n</li>\n</ul>\n<p><strong>修饰结构：</strong></p>\n<p><strong>短：</strong>                            </p>\n<ul>\n<li><p>形容词    This is a big box.    Let me tell you something interesting.（不定代词）</p>\n</li>\n<li><p>副词    I really love you.</p>\n</li>\n</ul>\n<p><strong>长：</strong>“四朵金花”导致英语语序和中文并不一样！</p>\n<ul>\n<li><p>介词短语    I love you (in my heart).    （介词….名词）</p>\n</li>\n<li><p>从句    LiHui is a teacher (who teaches English).    （引导词+陈述语序）</p>\n</li>\n<li><p>非谓语动词    Lihui is a teacher (teaching English).    (to do)/(doing)/(done)</p>\n</li>\n<li><p>时间状语    (Last week),I went (to the park).    表时间，无介词。</p>\n</li>\n</ul>\n<p>eg：</p>\n<p>Lihui is a teacher (teaching English) (in Beijing) (which is the capital) (of China).</p>\n<p>(After chatting) (with LiHui) (on this matter) (in this room) (for a long time) (from 2:00) (to 4:00) (in the afternoon), I returned (to my office).</p>\n<h2 id=\"断句！\"><a href=\"#断句！\" class=\"headerlink\" title=\"断句！\"></a>断句！</h2><ol>\n<li><p>主干部分直接翻</p>\n</li>\n<li><p>遇到金花画括号</p>\n</li>\n<li><p>提着问题往下顺（每个括号里第一个单词，都叫挂钩单词，可以利用挂钩自问自答，将句子“顺下来”）</p>\n</li>\n<li><p>调字调序写中文（如果需要做翻译题，则需要调整语序；如果想学听说读写，则不必调整语序——要训练自己习惯英语思维顺序）</p>\n</li>\n</ol>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<h1 id=\"括号法解读英语句子\"><a href=\"#括号法解读英语句子\" class=\"headerlink\" title=\"括号法解读英语句子\"></a>括号法解读英语句子</h1><h2 id=\"目标：\"><a href=\"#目标：\" class=\"headerlink\" title=\"目标：\"></a><strong>目标：</strong></h2><ol>\n<li>理解能力：读懂句子</li>\n<li>表达能力：写出句子</li>\n</ol>\n<h2 id=\"基本知识\"><a href=\"#基本知识\" class=\"headerlink\" title=\"基本知识:\"></a><strong>基本知识:</strong></h2><ul>\n<li><p>主语：句子描述的对象</p>\n</li>\n<li><p>谓语：用来描述主语</p>\n</li>\n<li><p>谓语动词：谓语部分中的核心的动词；<strong>一个单句有且只有一个谓语动词！</strong></p>\n</li>\n</ul>\n<p>eg:</p>\n<p>李辉教英语</p>\n<p>李辉帅。LiHui is handsome.</p>\n<p>句子=主干结构+修饰结构</p>\n<p><strong>主干结构</strong>：</p>\n<ul>\n<li><p>主谓    I come.</p>\n</li>\n<li><p>主谓宾    I love you.</p>\n</li>\n<li><p>主谓宾宾    I give you my heart.</p>\n</li>\n<li><p>主谓宾补    You make me happy.</p>\n</li>\n<li><p>主系表    You are my everything.</p>\n</li>\n</ul>\n<p><strong>修饰结构：</strong></p>\n<p><strong>短：</strong>                            </p>\n<ul>\n<li><p>形容词    This is a big box.    Let me tell you something interesting.（不定代词）</p>\n</li>\n<li><p>副词    I really love you.</p>\n</li>\n</ul>\n<p><strong>长：</strong>“四朵金花”导致英语语序和中文并不一样！</p>\n<ul>\n<li><p>介词短语    I love you (in my heart).    （介词….名词）</p>\n</li>\n<li><p>从句    LiHui is a teacher (who teaches English).    （引导词+陈述语序）</p>\n</li>\n<li><p>非谓语动词    Lihui is a teacher (teaching English).    (to do)/(doing)/(done)</p>\n</li>\n<li><p>时间状语    (Last week),I went (to the park).    表时间，无介词。</p>\n</li>\n</ul>\n<p>eg：</p>\n<p>Lihui is a teacher (teaching English) (in Beijing) (which is the capital) (of China).</p>\n<p>(After chatting) (with LiHui) (on this matter) (in this room) (for a long time) (from 2:00) (to 4:00) (in the afternoon), I returned (to my office).</p>\n<h2 id=\"断句！\"><a href=\"#断句！\" class=\"headerlink\" title=\"断句！\"></a>断句！</h2><ol>\n<li><p>主干部分直接翻</p>\n</li>\n<li><p>遇到金花画括号</p>\n</li>\n<li><p>提着问题往下顺（每个括号里第一个单词，都叫挂钩单词，可以利用挂钩自问自答，将句子“顺下来”）</p>\n</li>\n<li><p>调字调序写中文（如果需要做翻译题，则需要调整语序；如果想学听说读写，则不必调整语序——要训练自己习惯英语思维顺序）</p>\n</li>\n</ol>\n"},{"title":"英语语法概念系统","date":"2022-04-20T14:49:30.000Z","updated":"2022-05-10T16:00:00.000Z","keywords":null,"description":"本文简要介绍了英语的全部语法体系","top_img":"./img/bg22.jpg","cover":"./img/bg14.jpg","_content":"# 英语语法概念系统\n\n## 语法报菜名\n\n​      英语语法研究**词法**和**句法**。其中词法研究单词的词义和词性。词性分为**实词**和虚词，实词包括名形动副数，虚词包括冠代介感连。其中，实词中最难的是**动词**。动词研究**谓语动词**（心脏）和**非谓语动词**（脉搏）。谓语动词研究**时态**，**语态**，**语气**和**主谓一致**。而非谓语动词研究三种形式——分别是**动词不定式**to do，**动名词**doing和**分词**，其中分词包括**现在分词**doing（主动）和**过去分词**done（被动）。\n\n​      以词构句，就形成语法。其中最简单的句子叫**简单句**（一句一主谓），简单句有五种基本结构：主谓，主谓宾，主谓宾宾，主谓宾补，主系表。把简单句变得更加简单，就是省略主语和谓语的一些成分，构成**省略句**。把简单句主语和谓语适当颠倒一下，就构成**倒装句**，倒装句分为完全倒装和不完全倒装句。\n\n​      简单句还能变得更复杂，一种是并列连词and，or，but，so构成**并列句**；一种是加上从属连词构成**主从复合句**。主从复合句包含三种情况，分别是**名词性从句**，**定语从句**和**状语从句**。其中名词性从句包括**主语**从句，**宾语**从句，**表语**从句，**同位语**从句。定语从句包括**限制性**定语从句和**非限制性**定语从句，也能分成**关系代词**和**关系副词**引导的定语从句。状语从句一般有九种，分别是**时间**，**地点**，**原因**，**结果**，**方式**，**目的**，**条件**，**让步**，**比较**，再加上独立主格结构和强调句型就是全部英语语法。\n\n​      一个单句有且只有一个谓语动词，当需要使用第二个动词时要么用非谓语动词，要么用从句。\n\n## 简要解释\n\n### 实词虚词\n\n**实词：大喊一声，你就懂了**（有实际意义）\n\n- 名词：李辉！\n\n- 动词：跑！\n\n- 形容词：帅！\n\n- 副词：快点！\n\n- 数词：100！\n\n\n**虚词：大喊一声，你就懵了**（无实际意义）\n\n- 冠词：a! an! the!\n- 代词：I! You!\n- 感叹词：Ah! Oh!\n- 连词：If! becouse!\n\n### 句子结构\n\n**句子=主语部分+谓语部分**\n\n- 主语：句子的主角/被描述的对象（名词）\n\n- 谓语：用来说主语（动词）\n\n\n**eg:**\n\nLiHui teaches English.\n\nChina is an open country.\n\n(You) Come here.\n\n李辉帅。\tLiHui is handsome.\n\n一个句子中用到多个动词时，保留一个作**谓语**，其他统统写成**非谓语动词(主动doing/被动done/要做to do)**\n\neg: \n\n走在回家的路上，我看到一个老头骑着自行车看报纸计划去买菜被车撞了坐在地上哭\n\nWorking home,I saw an old man ,riding a bike, reading \n\n### **省略句**\n\n1. 因为习惯而省略\n2. 因为重复而省略\n3. 状语从句中的省略\n\n因为习惯而省略\n\n​\t\t(It is a) Good morning.\n\n​\t\t(You are) Welcome.\n\n​\t\t(I )Thank you.\n\n因为重复而省略\n\n​\t\tand 后，如果跟前面相同，可省略：\n\n​\t\tI go to school and I work hard.\n\n​\t\t情态动词或to 后面，如果跟前面相同，可省略：\n\n​\t\t-Why don’t you help him? He is your friend.\n\n​\t\t-Well,I know I should, but I don’t want to.\n\n状语从句中的省略\n\n- 陈述语序：主语在前+谓语在后\n\n- 完全倒装语序：谓语在前+主语在后\n\n- 不完全倒装：助/系/情+主语+谓语剩余部分\n\neg:\n\nHere comes the bus.\n\nNever should you talk with your father like that.\n\n### 并列和主从\n\n- 并列复合句：双胞胎（兄弟俩关系时好时坏，但不存在谁属于谁的关系）\n- 主从复合句：老大+小弟（小弟属于老大，小弟是老大的一部分，小弟是老大的左膀右臂）\n\neg:\n\nI love you and you love me.\n\nI love you but you don’t love me.\n\nI know (that you love me) .（宾语从句）\n\nI fell in love with you.\n\nI fell in love with you( when you said you love )\n\nI fell in love with you( where you saved my life )\n\nI fell in love with you( because you are handsome. )\n\n### 独立主格\n\n普通句子=名词+谓语动词\n\n独立主格=名词+非谓语动词/形容词/副词/介词\n\neg:\n\nThe blue sky waiting for the smoky rain, I am waitng for you.\n\n天青色等雨，而我在等你。\n\n### 强调句型\n\nIt is/was + 被强调部分+that/who+句子剩余部分\n\n正是…….（稍微停顿一下）…..\n\nLiHui teaches English.\n\nIt is Lihui that Teaches English.\n\nIt is English that LiHui teaches.\n\nLiHui does teaches English.\n\n\n\n\n\n\n\n​\t\t\n\n\n","source":"_posts/英语/英语语法概念系统.md","raw":"---\ntitle: 英语语法概念系统\ndate: 2022-04-20 22:49:30\nupdated: 2022-05-11\ntags: 英语\ncategories: 英语\nkeywords: \ndescription: 本文简要介绍了英语的全部语法体系\ntop_img: ./img/bg22.jpg\ncover: ./img/bg14.jpg\n\n---\n# 英语语法概念系统\n\n## 语法报菜名\n\n​      英语语法研究**词法**和**句法**。其中词法研究单词的词义和词性。词性分为**实词**和虚词，实词包括名形动副数，虚词包括冠代介感连。其中，实词中最难的是**动词**。动词研究**谓语动词**（心脏）和**非谓语动词**（脉搏）。谓语动词研究**时态**，**语态**，**语气**和**主谓一致**。而非谓语动词研究三种形式——分别是**动词不定式**to do，**动名词**doing和**分词**，其中分词包括**现在分词**doing（主动）和**过去分词**done（被动）。\n\n​      以词构句，就形成语法。其中最简单的句子叫**简单句**（一句一主谓），简单句有五种基本结构：主谓，主谓宾，主谓宾宾，主谓宾补，主系表。把简单句变得更加简单，就是省略主语和谓语的一些成分，构成**省略句**。把简单句主语和谓语适当颠倒一下，就构成**倒装句**，倒装句分为完全倒装和不完全倒装句。\n\n​      简单句还能变得更复杂，一种是并列连词and，or，but，so构成**并列句**；一种是加上从属连词构成**主从复合句**。主从复合句包含三种情况，分别是**名词性从句**，**定语从句**和**状语从句**。其中名词性从句包括**主语**从句，**宾语**从句，**表语**从句，**同位语**从句。定语从句包括**限制性**定语从句和**非限制性**定语从句，也能分成**关系代词**和**关系副词**引导的定语从句。状语从句一般有九种，分别是**时间**，**地点**，**原因**，**结果**，**方式**，**目的**，**条件**，**让步**，**比较**，再加上独立主格结构和强调句型就是全部英语语法。\n\n​      一个单句有且只有一个谓语动词，当需要使用第二个动词时要么用非谓语动词，要么用从句。\n\n## 简要解释\n\n### 实词虚词\n\n**实词：大喊一声，你就懂了**（有实际意义）\n\n- 名词：李辉！\n\n- 动词：跑！\n\n- 形容词：帅！\n\n- 副词：快点！\n\n- 数词：100！\n\n\n**虚词：大喊一声，你就懵了**（无实际意义）\n\n- 冠词：a! an! the!\n- 代词：I! You!\n- 感叹词：Ah! Oh!\n- 连词：If! becouse!\n\n### 句子结构\n\n**句子=主语部分+谓语部分**\n\n- 主语：句子的主角/被描述的对象（名词）\n\n- 谓语：用来说主语（动词）\n\n\n**eg:**\n\nLiHui teaches English.\n\nChina is an open country.\n\n(You) Come here.\n\n李辉帅。\tLiHui is handsome.\n\n一个句子中用到多个动词时，保留一个作**谓语**，其他统统写成**非谓语动词(主动doing/被动done/要做to do)**\n\neg: \n\n走在回家的路上，我看到一个老头骑着自行车看报纸计划去买菜被车撞了坐在地上哭\n\nWorking home,I saw an old man ,riding a bike, reading \n\n### **省略句**\n\n1. 因为习惯而省略\n2. 因为重复而省略\n3. 状语从句中的省略\n\n因为习惯而省略\n\n​\t\t(It is a) Good morning.\n\n​\t\t(You are) Welcome.\n\n​\t\t(I )Thank you.\n\n因为重复而省略\n\n​\t\tand 后，如果跟前面相同，可省略：\n\n​\t\tI go to school and I work hard.\n\n​\t\t情态动词或to 后面，如果跟前面相同，可省略：\n\n​\t\t-Why don’t you help him? He is your friend.\n\n​\t\t-Well,I know I should, but I don’t want to.\n\n状语从句中的省略\n\n- 陈述语序：主语在前+谓语在后\n\n- 完全倒装语序：谓语在前+主语在后\n\n- 不完全倒装：助/系/情+主语+谓语剩余部分\n\neg:\n\nHere comes the bus.\n\nNever should you talk with your father like that.\n\n### 并列和主从\n\n- 并列复合句：双胞胎（兄弟俩关系时好时坏，但不存在谁属于谁的关系）\n- 主从复合句：老大+小弟（小弟属于老大，小弟是老大的一部分，小弟是老大的左膀右臂）\n\neg:\n\nI love you and you love me.\n\nI love you but you don’t love me.\n\nI know (that you love me) .（宾语从句）\n\nI fell in love with you.\n\nI fell in love with you( when you said you love )\n\nI fell in love with you( where you saved my life )\n\nI fell in love with you( because you are handsome. )\n\n### 独立主格\n\n普通句子=名词+谓语动词\n\n独立主格=名词+非谓语动词/形容词/副词/介词\n\neg:\n\nThe blue sky waiting for the smoky rain, I am waitng for you.\n\n天青色等雨，而我在等你。\n\n### 强调句型\n\nIt is/was + 被强调部分+that/who+句子剩余部分\n\n正是…….（稍微停顿一下）…..\n\nLiHui teaches English.\n\nIt is Lihui that Teaches English.\n\nIt is English that LiHui teaches.\n\nLiHui does teaches English.\n\n\n\n\n\n\n\n​\t\t\n\n\n","slug":"英语/英语语法概念系统","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cl5db79ki003fywtu765fhe78","content":"<h1 id=\"英语语法概念系统\"><a href=\"#英语语法概念系统\" class=\"headerlink\" title=\"英语语法概念系统\"></a>英语语法概念系统</h1><h2 id=\"语法报菜名\"><a href=\"#语法报菜名\" class=\"headerlink\" title=\"语法报菜名\"></a>语法报菜名</h2><p>​      英语语法研究<strong>词法</strong>和<strong>句法</strong>。其中词法研究单词的词义和词性。词性分为<strong>实词</strong>和虚词，实词包括名形动副数，虚词包括冠代介感连。其中，实词中最难的是<strong>动词</strong>。动词研究<strong>谓语动词</strong>（心脏）和<strong>非谓语动词</strong>（脉搏）。谓语动词研究<strong>时态</strong>，<strong>语态</strong>，<strong>语气</strong>和<strong>主谓一致</strong>。而非谓语动词研究三种形式——分别是<strong>动词不定式</strong>to do，<strong>动名词</strong>doing和<strong>分词</strong>，其中分词包括<strong>现在分词</strong>doing（主动）和<strong>过去分词</strong>done（被动）。</p>\n<p>​      以词构句，就形成语法。其中最简单的句子叫<strong>简单句</strong>（一句一主谓），简单句有五种基本结构：主谓，主谓宾，主谓宾宾，主谓宾补，主系表。把简单句变得更加简单，就是省略主语和谓语的一些成分，构成<strong>省略句</strong>。把简单句主语和谓语适当颠倒一下，就构成<strong>倒装句</strong>，倒装句分为完全倒装和不完全倒装句。</p>\n<p>​      简单句还能变得更复杂，一种是并列连词and，or，but，so构成<strong>并列句</strong>；一种是加上从属连词构成<strong>主从复合句</strong>。主从复合句包含三种情况，分别是<strong>名词性从句</strong>，<strong>定语从句</strong>和<strong>状语从句</strong>。其中名词性从句包括<strong>主语</strong>从句，<strong>宾语</strong>从句，<strong>表语</strong>从句，<strong>同位语</strong>从句。定语从句包括<strong>限制性</strong>定语从句和<strong>非限制性</strong>定语从句，也能分成<strong>关系代词</strong>和<strong>关系副词</strong>引导的定语从句。状语从句一般有九种，分别是<strong>时间</strong>，<strong>地点</strong>，<strong>原因</strong>，<strong>结果</strong>，<strong>方式</strong>，<strong>目的</strong>，<strong>条件</strong>，<strong>让步</strong>，<strong>比较</strong>，再加上独立主格结构和强调句型就是全部英语语法。</p>\n<p>​      一个单句有且只有一个谓语动词，当需要使用第二个动词时要么用非谓语动词，要么用从句。</p>\n<h2 id=\"简要解释\"><a href=\"#简要解释\" class=\"headerlink\" title=\"简要解释\"></a>简要解释</h2><h3 id=\"实词虚词\"><a href=\"#实词虚词\" class=\"headerlink\" title=\"实词虚词\"></a>实词虚词</h3><p><strong>实词：大喊一声，你就懂了</strong>（有实际意义）</p>\n<ul>\n<li><p>名词：李辉！</p>\n</li>\n<li><p>动词：跑！</p>\n</li>\n<li><p>形容词：帅！</p>\n</li>\n<li><p>副词：快点！</p>\n</li>\n<li><p>数词：100！</p>\n</li>\n</ul>\n<p><strong>虚词：大喊一声，你就懵了</strong>（无实际意义）</p>\n<ul>\n<li>冠词：a! an! the!</li>\n<li>代词：I! You!</li>\n<li>感叹词：Ah! Oh!</li>\n<li>连词：If! becouse!</li>\n</ul>\n<h3 id=\"句子结构\"><a href=\"#句子结构\" class=\"headerlink\" title=\"句子结构\"></a>句子结构</h3><p><strong>句子=主语部分+谓语部分</strong></p>\n<ul>\n<li><p>主语：句子的主角/被描述的对象（名词）</p>\n</li>\n<li><p>谓语：用来说主语（动词）</p>\n</li>\n</ul>\n<p><strong>eg:</strong></p>\n<p>LiHui teaches English.</p>\n<p>China is an open country.</p>\n<p>(You) Come here.</p>\n<p>李辉帅。    LiHui is handsome.</p>\n<p>一个句子中用到多个动词时，保留一个作<strong>谓语</strong>，其他统统写成<strong>非谓语动词(主动doing/被动done/要做to do)</strong></p>\n<p>eg: </p>\n<p>走在回家的路上，我看到一个老头骑着自行车看报纸计划去买菜被车撞了坐在地上哭</p>\n<p>Working home,I saw an old man ,riding a bike, reading </p>\n<h3 id=\"省略句\"><a href=\"#省略句\" class=\"headerlink\" title=\"省略句\"></a><strong>省略句</strong></h3><ol>\n<li>因为习惯而省略</li>\n<li>因为重复而省略</li>\n<li>状语从句中的省略</li>\n</ol>\n<p>因为习惯而省略</p>\n<p>​        (It is a) Good morning.</p>\n<p>​        (You are) Welcome.</p>\n<p>​        (I )Thank you.</p>\n<p>因为重复而省略</p>\n<p>​        and 后，如果跟前面相同，可省略：</p>\n<p>​        I go to school and I work hard.</p>\n<p>​        情态动词或to 后面，如果跟前面相同，可省略：</p>\n<p>​        -Why don’t you help him? He is your friend.</p>\n<p>​        -Well,I know I should, but I don’t want to.</p>\n<p>状语从句中的省略</p>\n<ul>\n<li><p>陈述语序：主语在前+谓语在后</p>\n</li>\n<li><p>完全倒装语序：谓语在前+主语在后</p>\n</li>\n<li><p>不完全倒装：助/系/情+主语+谓语剩余部分</p>\n</li>\n</ul>\n<p>eg:</p>\n<p>Here comes the bus.</p>\n<p>Never should you talk with your father like that.</p>\n<h3 id=\"并列和主从\"><a href=\"#并列和主从\" class=\"headerlink\" title=\"并列和主从\"></a>并列和主从</h3><ul>\n<li>并列复合句：双胞胎（兄弟俩关系时好时坏，但不存在谁属于谁的关系）</li>\n<li>主从复合句：老大+小弟（小弟属于老大，小弟是老大的一部分，小弟是老大的左膀右臂）</li>\n</ul>\n<p>eg:</p>\n<p>I love you and you love me.</p>\n<p>I love you but you don’t love me.</p>\n<p>I know (that you love me) .（宾语从句）</p>\n<p>I fell in love with you.</p>\n<p>I fell in love with you( when you said you love )</p>\n<p>I fell in love with you( where you saved my life )</p>\n<p>I fell in love with you( because you are handsome. )</p>\n<h3 id=\"独立主格\"><a href=\"#独立主格\" class=\"headerlink\" title=\"独立主格\"></a>独立主格</h3><p>普通句子=名词+谓语动词</p>\n<p>独立主格=名词+非谓语动词/形容词/副词/介词</p>\n<p>eg:</p>\n<p>The blue sky waiting for the smoky rain, I am waitng for you.</p>\n<p>天青色等雨，而我在等你。</p>\n<h3 id=\"强调句型\"><a href=\"#强调句型\" class=\"headerlink\" title=\"强调句型\"></a>强调句型</h3><p>It is/was + 被强调部分+that/who+句子剩余部分</p>\n<p>正是…….（稍微停顿一下）…..</p>\n<p>LiHui teaches English.</p>\n<p>It is Lihui that Teaches English.</p>\n<p>It is English that LiHui teaches.</p>\n<p>LiHui does teaches English.</p>\n<p>​        </p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<h1 id=\"英语语法概念系统\"><a href=\"#英语语法概念系统\" class=\"headerlink\" title=\"英语语法概念系统\"></a>英语语法概念系统</h1><h2 id=\"语法报菜名\"><a href=\"#语法报菜名\" class=\"headerlink\" title=\"语法报菜名\"></a>语法报菜名</h2><p>​      英语语法研究<strong>词法</strong>和<strong>句法</strong>。其中词法研究单词的词义和词性。词性分为<strong>实词</strong>和虚词，实词包括名形动副数，虚词包括冠代介感连。其中，实词中最难的是<strong>动词</strong>。动词研究<strong>谓语动词</strong>（心脏）和<strong>非谓语动词</strong>（脉搏）。谓语动词研究<strong>时态</strong>，<strong>语态</strong>，<strong>语气</strong>和<strong>主谓一致</strong>。而非谓语动词研究三种形式——分别是<strong>动词不定式</strong>to do，<strong>动名词</strong>doing和<strong>分词</strong>，其中分词包括<strong>现在分词</strong>doing（主动）和<strong>过去分词</strong>done（被动）。</p>\n<p>​      以词构句，就形成语法。其中最简单的句子叫<strong>简单句</strong>（一句一主谓），简单句有五种基本结构：主谓，主谓宾，主谓宾宾，主谓宾补，主系表。把简单句变得更加简单，就是省略主语和谓语的一些成分，构成<strong>省略句</strong>。把简单句主语和谓语适当颠倒一下，就构成<strong>倒装句</strong>，倒装句分为完全倒装和不完全倒装句。</p>\n<p>​      简单句还能变得更复杂，一种是并列连词and，or，but，so构成<strong>并列句</strong>；一种是加上从属连词构成<strong>主从复合句</strong>。主从复合句包含三种情况，分别是<strong>名词性从句</strong>，<strong>定语从句</strong>和<strong>状语从句</strong>。其中名词性从句包括<strong>主语</strong>从句，<strong>宾语</strong>从句，<strong>表语</strong>从句，<strong>同位语</strong>从句。定语从句包括<strong>限制性</strong>定语从句和<strong>非限制性</strong>定语从句，也能分成<strong>关系代词</strong>和<strong>关系副词</strong>引导的定语从句。状语从句一般有九种，分别是<strong>时间</strong>，<strong>地点</strong>，<strong>原因</strong>，<strong>结果</strong>，<strong>方式</strong>，<strong>目的</strong>，<strong>条件</strong>，<strong>让步</strong>，<strong>比较</strong>，再加上独立主格结构和强调句型就是全部英语语法。</p>\n<p>​      一个单句有且只有一个谓语动词，当需要使用第二个动词时要么用非谓语动词，要么用从句。</p>\n<h2 id=\"简要解释\"><a href=\"#简要解释\" class=\"headerlink\" title=\"简要解释\"></a>简要解释</h2><h3 id=\"实词虚词\"><a href=\"#实词虚词\" class=\"headerlink\" title=\"实词虚词\"></a>实词虚词</h3><p><strong>实词：大喊一声，你就懂了</strong>（有实际意义）</p>\n<ul>\n<li><p>名词：李辉！</p>\n</li>\n<li><p>动词：跑！</p>\n</li>\n<li><p>形容词：帅！</p>\n</li>\n<li><p>副词：快点！</p>\n</li>\n<li><p>数词：100！</p>\n</li>\n</ul>\n<p><strong>虚词：大喊一声，你就懵了</strong>（无实际意义）</p>\n<ul>\n<li>冠词：a! an! the!</li>\n<li>代词：I! You!</li>\n<li>感叹词：Ah! Oh!</li>\n<li>连词：If! becouse!</li>\n</ul>\n<h3 id=\"句子结构\"><a href=\"#句子结构\" class=\"headerlink\" title=\"句子结构\"></a>句子结构</h3><p><strong>句子=主语部分+谓语部分</strong></p>\n<ul>\n<li><p>主语：句子的主角/被描述的对象（名词）</p>\n</li>\n<li><p>谓语：用来说主语（动词）</p>\n</li>\n</ul>\n<p><strong>eg:</strong></p>\n<p>LiHui teaches English.</p>\n<p>China is an open country.</p>\n<p>(You) Come here.</p>\n<p>李辉帅。    LiHui is handsome.</p>\n<p>一个句子中用到多个动词时，保留一个作<strong>谓语</strong>，其他统统写成<strong>非谓语动词(主动doing/被动done/要做to do)</strong></p>\n<p>eg: </p>\n<p>走在回家的路上，我看到一个老头骑着自行车看报纸计划去买菜被车撞了坐在地上哭</p>\n<p>Working home,I saw an old man ,riding a bike, reading </p>\n<h3 id=\"省略句\"><a href=\"#省略句\" class=\"headerlink\" title=\"省略句\"></a><strong>省略句</strong></h3><ol>\n<li>因为习惯而省略</li>\n<li>因为重复而省略</li>\n<li>状语从句中的省略</li>\n</ol>\n<p>因为习惯而省略</p>\n<p>​        (It is a) Good morning.</p>\n<p>​        (You are) Welcome.</p>\n<p>​        (I )Thank you.</p>\n<p>因为重复而省略</p>\n<p>​        and 后，如果跟前面相同，可省略：</p>\n<p>​        I go to school and I work hard.</p>\n<p>​        情态动词或to 后面，如果跟前面相同，可省略：</p>\n<p>​        -Why don’t you help him? He is your friend.</p>\n<p>​        -Well,I know I should, but I don’t want to.</p>\n<p>状语从句中的省略</p>\n<ul>\n<li><p>陈述语序：主语在前+谓语在后</p>\n</li>\n<li><p>完全倒装语序：谓语在前+主语在后</p>\n</li>\n<li><p>不完全倒装：助/系/情+主语+谓语剩余部分</p>\n</li>\n</ul>\n<p>eg:</p>\n<p>Here comes the bus.</p>\n<p>Never should you talk with your father like that.</p>\n<h3 id=\"并列和主从\"><a href=\"#并列和主从\" class=\"headerlink\" title=\"并列和主从\"></a>并列和主从</h3><ul>\n<li>并列复合句：双胞胎（兄弟俩关系时好时坏，但不存在谁属于谁的关系）</li>\n<li>主从复合句：老大+小弟（小弟属于老大，小弟是老大的一部分，小弟是老大的左膀右臂）</li>\n</ul>\n<p>eg:</p>\n<p>I love you and you love me.</p>\n<p>I love you but you don’t love me.</p>\n<p>I know (that you love me) .（宾语从句）</p>\n<p>I fell in love with you.</p>\n<p>I fell in love with you( when you said you love )</p>\n<p>I fell in love with you( where you saved my life )</p>\n<p>I fell in love with you( because you are handsome. )</p>\n<h3 id=\"独立主格\"><a href=\"#独立主格\" class=\"headerlink\" title=\"独立主格\"></a>独立主格</h3><p>普通句子=名词+谓语动词</p>\n<p>独立主格=名词+非谓语动词/形容词/副词/介词</p>\n<p>eg:</p>\n<p>The blue sky waiting for the smoky rain, I am waitng for you.</p>\n<p>天青色等雨，而我在等你。</p>\n<h3 id=\"强调句型\"><a href=\"#强调句型\" class=\"headerlink\" title=\"强调句型\"></a>强调句型</h3><p>It is/was + 被强调部分+that/who+句子剩余部分</p>\n<p>正是…….（稍微停顿一下）…..</p>\n<p>LiHui teaches English.</p>\n<p>It is Lihui that Teaches English.</p>\n<p>It is English that LiHui teaches.</p>\n<p>LiHui does teaches English.</p>\n<p>​        </p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cl5db79ju0005ywtu30l49swh","category_id":"cl5db79jw0008ywtu0tcrd9yl","_id":"cl5db79k1000jywtuh5gq87ij"},{"post_id":"cl5db79k0000hywtuaqmm8ycf","category_id":"cl5db79jz000eywtubk9q157q","_id":"cl5db79k4000oywtu23u01rxo"},{"post_id":"cl5db79jv0007ywtu8rhggqvv","category_id":"cl5db79jz000eywtubk9q157q","_id":"cl5db79k5000tywtu3e1tc65g"},{"post_id":"cl5db79k0000iywtu14rihdlv","category_id":"cl5db79jz000eywtubk9q157q","_id":"cl5db79k6000wywtu5nl9hbth"},{"post_id":"cl5db79k3000mywtu9b0wbm0t","category_id":"cl5db79jz000eywtubk9q157q","_id":"cl5db79k70011ywtu71c800bg"},{"post_id":"cl5db79jy000bywtubtogefsv","category_id":"cl5db79jz000eywtubk9q157q","_id":"cl5db79k70014ywtu4l117i60"},{"post_id":"cl5db79k4000nywtu3j67dtpq","category_id":"cl5db79jz000eywtubk9q157q","_id":"cl5db79k80018ywtu8fz28p2d"},{"post_id":"cl5db79k5000sywtu8ta25pac","category_id":"cl5db79jz000eywtubk9q157q","_id":"cl5db79k8001bywtu9pwwganl"},{"post_id":"cl5db79jy000cywtug3u614gk","category_id":"cl5db79jz000eywtubk9q157q","_id":"cl5db79k9001eywtu1jushd63"},{"post_id":"cl5db79k5000vywtucqsv90sy","category_id":"cl5db79jz000eywtubk9q157q","_id":"cl5db79ka001hywtu5d2k2y5x"},{"post_id":"cl5db79k60010ywtuaoa78oes","category_id":"cl5db79jz000eywtubk9q157q","_id":"cl5db79ka001lywtudcndbluk"},{"post_id":"cl5db79jz000dywtu5rvv25pr","category_id":"cl5db79jz000eywtubk9q157q","_id":"cl5db79kb001oywtu76pph16y"},{"post_id":"cl5db79k70013ywtucd2r3uop","category_id":"cl5db79jz000eywtubk9q157q","_id":"cl5db79kb001qywtua94a75dc"},{"post_id":"cl5db79k80017ywtuftbwe4is","category_id":"cl5db79jz000eywtubk9q157q","_id":"cl5db79kb001sywtudwakdzl7"},{"post_id":"cl5db79k8001aywtu3kdpeqao","category_id":"cl5db79jz000eywtubk9q157q","_id":"cl5db79kc001vywtu4btv83cu"},{"post_id":"cl5db79k9001dywtu5ae838ve","category_id":"cl5db79jz000eywtubk9q157q","_id":"cl5db79kc001wywtu8ftz8lvo"},{"post_id":"cl5db79k9001gywtucow371ef","category_id":"cl5db79jz000eywtubk9q157q","_id":"cl5db79kc001yywtuab1o3ab1"},{"post_id":"cl5db79ka001kywtu53e00gof","category_id":"cl5db79jz000eywtubk9q157q","_id":"cl5db79kc001zywtubl3j6szp"},{"post_id":"cl5db79kb001nywtuhwm34ckk","category_id":"cl5db79jz000eywtubk9q157q","_id":"cl5db79kc0021ywtu9n7x6lex"},{"post_id":"cl5db79ki003eywtu2fng6ifx","category_id":"cl5db79kj003gywtuh3oy7ych","_id":"cl5db79kj003lywtu80sw1sfv"},{"post_id":"cl5db79ki003fywtu765fhe78","category_id":"cl5db79kj003gywtuh3oy7ych","_id":"cl5db79kj003nywtu5wsbcqj8"}],"PostTag":[{"post_id":"cl5db79ju0005ywtu30l49swh","tag_id":"cl5db79jx0009ywtu4r7409m1","_id":"cl5db79k0000gywtu5vocaccw"},{"post_id":"cl5db79k3000mywtu9b0wbm0t","tag_id":"cl5db79jz000fywtu5u639tef","_id":"cl5db79k4000rywtu9shohfnb"},{"post_id":"cl5db79k3000mywtu9b0wbm0t","tag_id":"cl5db79k2000lywtud3jfdjxo","_id":"cl5db79k5000uywtufgqzasyg"},{"post_id":"cl5db79jv0007ywtu8rhggqvv","tag_id":"cl5db79jz000fywtu5u639tef","_id":"cl5db79k6000zywtu7gkggvhx"},{"post_id":"cl5db79jv0007ywtu8rhggqvv","tag_id":"cl5db79k2000lywtud3jfdjxo","_id":"cl5db79k70012ywtucozqc12r"},{"post_id":"cl5db79k4000nywtu3j67dtpq","tag_id":"cl5db79jz000fywtu5u639tef","_id":"cl5db79k80016ywtu7xw9g5he"},{"post_id":"cl5db79k4000nywtu3j67dtpq","tag_id":"cl5db79k2000lywtud3jfdjxo","_id":"cl5db79k80019ywtu4u35achk"},{"post_id":"cl5db79jy000bywtubtogefsv","tag_id":"cl5db79jz000fywtu5u639tef","_id":"cl5db79k9001fywtu2e2danrd"},{"post_id":"cl5db79jy000bywtubtogefsv","tag_id":"cl5db79k2000lywtud3jfdjxo","_id":"cl5db79ka001iywtugivj9xxz"},{"post_id":"cl5db79jy000bywtubtogefsv","tag_id":"cl5db79k70015ywtu6omx34mf","_id":"cl5db79ka001mywtu7e0h5cdl"},{"post_id":"cl5db79jy000cywtug3u614gk","tag_id":"cl5db79jz000fywtu5u639tef","_id":"cl5db79kb001rywtuaxkh0o2k"},{"post_id":"cl5db79jy000cywtug3u614gk","tag_id":"cl5db79k2000lywtud3jfdjxo","_id":"cl5db79kb001tywtu002wawfl"},{"post_id":"cl5db79jz000dywtu5rvv25pr","tag_id":"cl5db79jz000fywtu5u639tef","_id":"cl5db79kd0022ywtua50557m7"},{"post_id":"cl5db79jz000dywtu5rvv25pr","tag_id":"cl5db79k2000lywtud3jfdjxo","_id":"cl5db79kd0023ywtuc47q3z8k"},{"post_id":"cl5db79jz000dywtu5rvv25pr","tag_id":"cl5db79k70015ywtu6omx34mf","_id":"cl5db79kd0025ywtuhcbc2ytz"},{"post_id":"cl5db79k0000hywtuaqmm8ycf","tag_id":"cl5db79jz000fywtu5u639tef","_id":"cl5db79kd0027ywtufzljhp7w"},{"post_id":"cl5db79k0000hywtuaqmm8ycf","tag_id":"cl5db79k2000lywtud3jfdjxo","_id":"cl5db79kd0028ywtuddgigyvy"},{"post_id":"cl5db79k0000hywtuaqmm8ycf","tag_id":"cl5db79k70015ywtu6omx34mf","_id":"cl5db79kd002aywtu4gm1al51"},{"post_id":"cl5db79k0000iywtu14rihdlv","tag_id":"cl5db79jz000fywtu5u639tef","_id":"cl5db79ke002bywtu99puafr5"},{"post_id":"cl5db79k0000iywtu14rihdlv","tag_id":"cl5db79k2000lywtud3jfdjxo","_id":"cl5db79ke002dywtu34un56ao"},{"post_id":"cl5db79k5000sywtu8ta25pac","tag_id":"cl5db79jz000fywtu5u639tef","_id":"cl5db79ke002gywtu502cejaw"},{"post_id":"cl5db79k5000sywtu8ta25pac","tag_id":"cl5db79kd0029ywtubxlt45wb","_id":"cl5db79ke002hywtu0bwb5kge"},{"post_id":"cl5db79k5000sywtu8ta25pac","tag_id":"cl5db79ke002cywtu1u980smo","_id":"cl5db79ke002jywtu0hy3gh34"},{"post_id":"cl5db79k5000sywtu8ta25pac","tag_id":"cl5db79ke002eywtu0ncch0r8","_id":"cl5db79ke002kywtu0wmv1v6o"},{"post_id":"cl5db79k5000vywtucqsv90sy","tag_id":"cl5db79jz000fywtu5u639tef","_id":"cl5db79kf002nywtu18lg8ax7"},{"post_id":"cl5db79k5000vywtucqsv90sy","tag_id":"cl5db79kd0029ywtubxlt45wb","_id":"cl5db79kf002oywtuapca0bzg"},{"post_id":"cl5db79k5000vywtucqsv90sy","tag_id":"cl5db79ke002cywtu1u980smo","_id":"cl5db79kf002qywtuf9r59ir8"},{"post_id":"cl5db79k5000vywtucqsv90sy","tag_id":"cl5db79ke002eywtu0ncch0r8","_id":"cl5db79kf002rywtudecl7bun"},{"post_id":"cl5db79k60010ywtuaoa78oes","tag_id":"cl5db79jz000fywtu5u639tef","_id":"cl5db79kf002tywtu8neh8peg"},{"post_id":"cl5db79k60010ywtuaoa78oes","tag_id":"cl5db79kd0029ywtubxlt45wb","_id":"cl5db79kf002uywtu40xw5o8s"},{"post_id":"cl5db79k70013ywtucd2r3uop","tag_id":"cl5db79jz000fywtu5u639tef","_id":"cl5db79kg002wywtu8bwg7kwm"},{"post_id":"cl5db79k70013ywtucd2r3uop","tag_id":"cl5db79kd0029ywtubxlt45wb","_id":"cl5db79kg002xywtubi091xus"},{"post_id":"cl5db79k80017ywtuftbwe4is","tag_id":"cl5db79jz000fywtu5u639tef","_id":"cl5db79kg002zywtu12oshdoo"},{"post_id":"cl5db79k80017ywtuftbwe4is","tag_id":"cl5db79kf002sywtu3q2z1wuf","_id":"cl5db79kg0030ywtuf4yaheei"},{"post_id":"cl5db79k8001aywtu3kdpeqao","tag_id":"cl5db79jz000fywtu5u639tef","_id":"cl5db79kg0032ywtu984362kn"},{"post_id":"cl5db79k8001aywtu3kdpeqao","tag_id":"cl5db79kd0029ywtubxlt45wb","_id":"cl5db79kg0033ywtucy2nb7zl"},{"post_id":"cl5db79k9001dywtu5ae838ve","tag_id":"cl5db79jz000fywtu5u639tef","_id":"cl5db79kg0035ywtu71uqgzed"},{"post_id":"cl5db79k9001dywtu5ae838ve","tag_id":"cl5db79kd0029ywtubxlt45wb","_id":"cl5db79kg0036ywtud06ign29"},{"post_id":"cl5db79k9001gywtucow371ef","tag_id":"cl5db79jz000fywtu5u639tef","_id":"cl5db79kh0038ywtud92ldlyp"},{"post_id":"cl5db79k9001gywtucow371ef","tag_id":"cl5db79kd0029ywtubxlt45wb","_id":"cl5db79kh0039ywtu7op103vh"},{"post_id":"cl5db79ka001kywtu53e00gof","tag_id":"cl5db79jz000fywtu5u639tef","_id":"cl5db79kh003aywtudnwlfyth"},{"post_id":"cl5db79ka001kywtu53e00gof","tag_id":"cl5db79kd0029ywtubxlt45wb","_id":"cl5db79kh003bywtu4vdq7oi3"},{"post_id":"cl5db79kb001nywtuhwm34ckk","tag_id":"cl5db79jz000fywtu5u639tef","_id":"cl5db79kh003cywtu36xyhzhh"},{"post_id":"cl5db79kb001nywtuhwm34ckk","tag_id":"cl5db79kd0029ywtubxlt45wb","_id":"cl5db79kh003dywtu87kj6a6l"},{"post_id":"cl5db79ki003eywtu2fng6ifx","tag_id":"cl5db79kj003hywtu7ahg9byv","_id":"cl5db79kj003kywtu7d4h0u6m"},{"post_id":"cl5db79ki003fywtu765fhe78","tag_id":"cl5db79kj003hywtu7ahg9byv","_id":"cl5db79kj003mywtu4rg3f5fb"}],"Tag":[{"name":"感想","_id":"cl5db79jx0009ywtu4r7409m1"},{"name":"小白的前端之路","_id":"cl5db79jz000fywtu5u639tef"},{"name":"CSS基础","_id":"cl5db79k2000lywtud3jfdjxo"},{"name":"CSS三大重点","_id":"cl5db79k70015ywtu6omx34mf"},{"name":"JavaScript基础","_id":"cl5db79kd0029ywtubxlt45wb"},{"name":"JavaScript API","_id":"cl5db79ke002cywtu1u980smo"},{"name":"DOM","_id":"cl5db79ke002eywtu0ncch0r8"},{"name":"HTML基础","_id":"cl5db79kf002sywtu3q2z1wuf"},{"name":"英语","_id":"cl5db79kj003hywtu7ahg9byv"}]}}